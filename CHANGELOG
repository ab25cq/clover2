
version 4.8.3

    各種基礎クラスにadd,next,prevメソッドを追加。ISortableインターフェスにaddメソッドを追加。IIteratorableインターフェースを追加。RangeクラスのGenerics引数インターフェースはIIteratorableになりました。RangeクラスはIIteratorableインターフェースを満たさないといけません。ソースの変更が必要となります。その代わり"A".."D"などが動きます。SortableListクラスにsumメソッドを追加。RangeクラスにtoList(),toEqualableList(),toSortableList()メソッドを追加。String.clclの主要なメソッドの戻り値や引数がEqualableListからSortableListに変更されています。Stringを使ったコードで引数の戻り値の型をEqualableList<String>に指定していた場合ソースの変更が必要となります。すみません。

version 4.8.3

    Added add, next, prev methods to various basic classes. Added add method to ISortable interface. Added IIteratorable interface. The Generics argument interface of the Range class is now IIteratorable. The Range class must satisfy the IIterato rable interface. Source change is required. Instead, "A" .. "D" etc works. Added sum method to SortableList class. Added toList (), toEqualableList (), toSortableList () method to Range class. The return value and argument of the main method of String.clcl has changed from EqualableList to SortableList. If you used String to specify the argument return type as EqualableList <String> in the code, you will need to change the source. Excuse me.

version 4.8.2

    __BEGIN___, ___END___で囲ったソースがクラスのコンパイル時、コンパイル前に実行されるようになりました。

version 4.8.2

    ___ BEGIN___, ___END___ enclosed sources are now executed before compiling, when compiling classes.

version 4.8.2

version 4.8.1

    リフレクションによるcloneメソッドの作成にバグがありJITでテストが動かないバグを修正。

version 4.8.1

    Fixed a bug that caused a bug in the creation of clone method by reflection and the test did not work with JIT.

version 4.8.0

    List.multiplyWithSelf(n:Int):SELF<T>;を加えました。
    List.selectWithSelf(block_:lambda(T):bool):SELF<T>;を加えました。
    List.subListWithSelf(start:int, end:int):SELF<T>;を加えました。
    List.fillWithSelf(start:int, end:int, item:T):SELF<T>;を加えました。
    List.fillWithSelf(item:T):SELF<T>;を加えました。
    List.reverseWithSelf():SELF<T>;を加えました。
    List.shuffleWithSelf():SELF<T>;を加えました。

version 4.8.0

    Added List.multiplyWithSelf(n:Int):SELF<T>;
    Added List.selectWithSelf(block_:lambda(T):bool):SELF<T>;
    Added List.subListWithSelf(start:int, end:int):SELF<T>;
    Added List.fillWithSelf(start:int, end:int, item:T):SELF<T>;
    Added List.fillWithSelf(item:T):SELF<T>;
    Added List.reverseWithSelf():SELF<T>;
    Added List.shuffleWithSelf():SELF<T>;

version 4.7.9

    List.deleteWithRange, EqualableList.deleteWithRange, SortableList.deleteWithRangeが対象となるオブジェクト自身の状態を変えるようになりました

version 4.7.9

    List.deleteWithRange, EqualableList.deleteWithRange, SortableList.deleteWithRange have changed inner stat.

version 4.7.8

    REPLのバグを修正。

version 4.7.8

    Fixed bug of REPL.

version 4.7.7

    モジュールのSELFとGenericsの関係のバグを修正。

version 4.7.7

    Fixed a bug in relation between module SELF and Generics.

version 4.7.6

    Added System.mvprintw(y:int, x:int, str:String);
    Added map method to Numeric classes

version 4.7.6

    Added System.mvprintw(y:int, x:int, str:String);
    Added map method to Numeric classes

version 4.7.5
    
    Class.getMethods(); を加えました。
    String.rindexOf();を加えました。
    Clover.primitiveClassToBoxingClass(name:String);を加えました。
    Clover.boxingClassToPrimitiveClass(name:String);を加えました。
    Bool.if(lambda):Anoymous?を加えました。
    Bool.ifWithException(lambda):Anoymous?を加えました。
    ? post operator. --> str:String? = null; str?.match(/./). はNull Pointer Exceptionにはなりません。 str := "ABC"; str?.match(/./). これは動きます。
    ==と!= 演算子をユーザーオブジェクトに入れました。str:String? = null; assert(str == null). これは動きます。

version 4.7.5
    
    Added Class.getMethods();
    Added String.rindexOf();
    Added Clover.primitiveClassToBoxingClass(name:String);
    Added Clover.boxingClassToPrimitiveClass(name:String);
    Added Bool.if(lambda):Anoymous?
    Added Bool.ifWithException(lambda):Anoymous?
    Added ? post operator. --> str:String? = null; str?.match(/./). It doesn't throw Exception. str := "ABC"; str?.match(/./). It's works.
    Added == and != operator for User Object. str:String? = null; assert(str == null). It works.

version 4.7.4

    List.delete(int,int)を削除。

version 4.7.4

    Removed List.delete(int,int).

version 4.7.3

    Added List.detete(int,int).

version 4.7.2

    テストがおちていました。修正。 

version 4.7.2

    Fixed make test bug

version 4.7.1

    Fixed a bug that could not define a field with generic class nested within class.

version 4.7.1

    クラスの中で入れ子になるジェネリクスのクラスを持つフィールドを定義できないバグを修正。

version 4.7.1

    Fixed a bug that could not define a field with generic class nested within class.

version 4.7.0

    メモリーセーフなポインタを入れました。詳しくはマニュアルを見てください。

version 4.7.0

    Append memory safe pointer(Buffer class) to Clover2. See manual

version 4.6.9

    THraedのバグを修正しました。

version 4.6.9

    Fixed bug of thread

version 4.6.8

    amd64では--with-jitと--with-threadが安定しました。

verson 4.6.8

    --with-jit and --with-thread is stable on amd64


version 4.6.7

    Now Clvoer2 can have runned on sparc64, maybe other Bigendian Platform.

version 4.6.6

    メモリのバグを修正。i686で動作確認。ppc64はまだです。

version 4.6.6

    Fixed memory bug. Test on i686. I have not testted on ppc64 yet.

version 4.6.5

    --with-threadオプションをconfigurenに追加。--with-optimizeとは同時は付けられません。もし、--with-threadを付ける場合は--with-jitも付けることをお勧めします。

    JITでのThraedにバグがありました。修正。

version 4.6.5

    Added --with-thread option to configuren. --with-optimize can not be attached at the same time. If you add -with-thread we recommend --with-jit as well.

    Fixed bug of jit with thread

version 4.6.4

    --with-threadオプションをconfigurenに追加。もし--with-threadをつけないと最適化が有効になります。threadは使えませんが、、、。

version 4.6.4

    Added --with-tread option to configure. If compile without --with-thread, optimizatioin is enabled.

version 4.6.3

    構造体の初期化の問題を修正。

version 4.6.3

    Fix bug of structure variable initialization.

version 4.6.2

    メソッドの引数に関するバグがあったため修正。

version 4.6.2

    Fixed bug of method arguments.

version 4.6.1

    each内でbreakするとバグがあったため、修正。

version 4.6.1
    
    Fixed a bug in break at method block.

version 4.6.0

    JITでblock中に例外が起こった場合、catch出来ないバグを修正。List.eachなどでbreakできるようになりました。

version 4.6.0
    
    Fixed a bug that can not be caught when an exception occurs in block in JIT. You can now break with List.each and so on.

version 4.5.9

    String.deleteの仕様が変わっています。

version 4.5.9

    Chaged String.delete definition.

version 4.5.8

    lsやmakeなどがClover.controllingTerminalProgramsから外されました。lsを端末制御したい場合はシェルモードでlsと書き、端末制御したく無い場合はls()と書いてください。

version 4.5.8

    ls, make etc. have been removed from Clover.controllingTerminalPrograms. If you want to control ls, write ls in shell mode and ls () if you do not want terminal control.

version 4.5.7

    メモリのバグがありました。修正。重要なバグでした。

version 4.5.7

    Fix important memory bugs.

version 4.5.6

    String.deleteメソッドを追加しました。

    Rangeのバグを修正しました。

    シェルモードのバグを修正しました。

version 4.5.6

    append String.delete method to Clover2 Library.

    Fixed Range class bug.

    Fixed shell mode bug.

version 4.5.5

    バグフィックス。

version 4.5.5
    
    Fixed Bug

version 4.5.4

    変数宣言にvar, valを入れました。raedonlyの変数はvalにて宣言できます。

version 4.5.4
    
    Added "var", "val" keyword for local variable assignment. You can declare readonly varialbe with "val" keyword.

version 4.5.3

    バグフィックス。安定したと思います。

version 4.5.3

    Fixed bug.Maybe stable version.

version 4.5.2

    バグフィックス。

version 4.5.2

    Fixed bug.

version 4.5.1

    C-FFIはオプショナルになりました。使う場合はconfigureに--with-c-ffiを付けてください。

version 4.5.1

    I make c-ffi optional. If you want to use it, please add --with-c-ffi to configure option.

version 4.5.0

    Cに対するブリッジを入れました。関数と定数が取り込めます。

    Bufferクラスはpointerクラスにunboxingされます。

version 4.5.0

    I put a bridge for C. Functions and constants can be imported.

    Buffer class is unboxing to pointer class

version 4.2.7

    String.inesrtのバグを修正しました。

version 4.2.7

    Fixed bug of String.insert.

version 4.2.6

    Hashクラスの値の簡易表記が変わりました。a:Hash<String, Integer> = ["AAA"=>2, "BBB"=>3].

    コンパイラの使用メモリを減らしました。(1Gは必要だと思います)

    ppc64, i386でコンパイル、テストしました。

version 4.2.6

    The simplified representation of the value of the Hash class has changed. a:Hash<String, Integer> = ["AAA"=>2, "BBB"=>3].

    Reduce the memory clover2 compiler used

    test in the ppc64, i386

version 4.2.5

    Commandクラスのバグを修正。

    JITのバグを修正。

    シェルモードのバグを修正。

version 4.2.5
    
    Fixed bug of Command Class.

    Fixed bug of JIT

    Fixed bug of Shell mode.

    Hashクラスの値の簡易表記が変わりました。a:Hash<String, Integer> = ["AAA"=>2, "BBB"=>3].

version 4.2.4

    whenの仕様が変わってます

version 4.2.4

    changed when expression

version 4.2.3

    いくつかのバグを直しました。

version 4.2.3

    Fixed some bugs

version 4.2.2

    JITのランタイムをライブラリに追加しました。(libclover2.so)

    Compile 時のリフレクションでJITを有効にしました。

version 4.2.2

    Added JIT runtime to dynamic library (libclover2.so)

    Turn on running JIT method on Compile Time Scripting.

version 4.2.1

    JITで||と&&にバグが有ったため修正

    JITでb:=123; -b == 0が真になるバグを修正。OP_REVERSEのバグを修正。

version 4.2.1

    Fixed JIT bugs.

version 4.2.0

    GCのアルゴリズムの修正。GC中のファイナライザで更にメモリが必要になったらセグメンテーション違反していましたが、修正。

    LLVMがちゃんと対応できてませんでしたが、修正。LLVM3.8とLLVM4.0 laterに対応。

version 4.2.0

    Modification of GC algorithm. Segmentation violated when finalizers in GC needed more memory, but it was fixed. LLVM was not able to respond properly, but it was fixed. Corresponds to LLVM 3.8 and LLVM 4.0 later.

version 4.1.8
    
    クラスのソースファイルのincludeファイルの検索パスのルーチンを作りました。カレントディレクトリだけでなく$PREFIX/share/clover2や~/.clover2にあるファイルも検索されます。cclover2 -core a.clclなどでinclude "MyOwnLibrary.clcl"などすれば基礎ライブラリの改造が出来ます。

    クラスファイルとモジュールとインクルードファイルのファイルの検索ルーチンのバグを修正しました。カレントディレクトリのクラスファイルが優先されます。またスクリプトファイルがある位置のディレクトリも検索ルーチンに加わっています。

    例外の仕様を変えました。メソッド呼び出し時のみだけでなく、スクリプト最上位で例外が起こってもcatchできます。
    例外のメッセージの出力をClover.onExceptionで行うようにしました。CGIや端末制御しているときは出力先を変えてください。Clover.onException(String,bool):staticをオーバーライドすればそう出来ます。

    -xなどのパースが通らないバグを修正

    /を含む文字列が演算子だと思われずにコマンドだと思われるバグを修正

    クラスの自動コンパイルを廃止しています。

version 4.1.8

    I created a search path routine for include files of class source files. Files in $ PREFIX / share / clover 2 and ~ /. Clover 2 are searched in addition to the current directory. If you include "MyOwnLibrary.clcl" etc in cclover2 - core a.clcl etc, you can modify the basic library. Fixed a bug in file search routines for class files, modules, and include files. The class file of the current directory takes precedence. Also, the directory where the script file is located is also added to the search routine. I changed the specification of the exception. You can catch not only when calling a method but also when an exception occurs at the top of the script. We have made Clover.onException output the exception message. Please change the output destination when CGI or terminal control. You can do so by overriding Clover.onException (String, bool): static. Fixed a bug that parsing does not pass like -x Fixed a bug that seems to be a command without a character string including a fix thought to be an operator.The class compilation is abolished.

version 4.1.7
    
    Clover.onExceptionフックを作りました。例外が起こったときに実行されます。

version 4.1.7

    I made a Clover.onException hook. It is executed when an exception occurs.

version 4.1.6
    
    ラムダの配列でラムダのオブジェクトがマークされない問題を修正。

version 4.1.6
    
    Fixed lambda array object bug.

version 4.1.5
    
    ラムダの配列に対するラムダの実行ができなったので、できるようにしました。

    cloneメソッドのバグを修正。

version 4.1.5

    I have made it possible to execute lambda on lambda's array, so I can do it. Fixed a bug in the clone method.

version 4.1.4

    PathクラスはStringクラスにメソッドを委譲するようになりました。

    Added curses library

version 4.1.4

    Now Path class delegates String class

    Added curses library

version 4.1.3

    Cloneメソッドのバグを修正。

version 4.1.3

    Fiexed clone method bugs.

version 4.1.2

    Cloneメソッドのバグを修正。

    クラスフィールドやフィールドの++, --などが動いていなかったため修正。

version 4.1.2

    Fixed clone method bugs

    Fixed because class fields and field ++, - and so did not move.

version 4.1.1

    Cloneメソッドのバグを修正。

    string expressionに、その箇所のあとのスペースが削除されるバグを修正しました。

    free_objectにバグが有ったため修正。

version 4.1.1

    Fixed clone method bugs

    Fixed a bug in string expression that removes spaces after that place.

    Fixed because there was a bug in free_object.

version 4.1.0

    IEqualableとISortableとIHashKeyにcloneメソッドが追加されました。cloneはコンパイル時のリフレクションで自動的に実装されるようになりました。詳しくはReflection.clclを見てください。

version 4.1.0

    The clone method has been added to IEqualable, ISortable and IHashKey. clone is now automatically implemented by reflection at compile time. See Reflection.clcl for details.

version 4.0.9

    I changed the memory management format of the extension library object.

version 4.0.9

    拡張ライブラリのオブジェクトのメモリの管理形式を変えました。

version 4.0.9

    I changed the memory management format of the extension library object.

version 4.0.8

    Systemにいくつかのメソッドを追加。

    libbsd-devもしくはlibbsd-develのライブラリが必要になりました。(オプション。あるとSystem.getbsizeが有効になる)

    REPLの補完でSystemクラスのクラスフィールドの補完も有効になりました。

    Socketのライブラリをつくりました。詳しくはSocket.clclを見てください。

    signalシステムコールの移植。

    ioctlシステムコールの移植。

    selectシステムコールの移植。

    mutex のバグを直した。

version 4.0.8

    Added several methods to System.

    A library of libbsd-dev or libbsd-devel is required. (Optional, if System.getbsize is enabled)

    With completion of REPL, completion of class field of System class is also effective.

    I made a library of Socket. See Socket.clcl for details.

    port of the system call.

    Porting the ioctl system call.

    Porting of select system call

    Mutex bug may be fixed.

version 4.0.7

    String.removeTagでセキュリティホールが見つかりました。修正。

version 4.0.7

    I found Security holl of String.removeTag. Fix.

version 4.0.6

    正規表現で/を使う文字を使っていると正規表現の終端だと処理してしまうバグが有りました。\/で回避できるようにしました。
    
    String.removeTag()の追加

version 4.0.6

    There was a bug that will handle if it is the end of a regular expression if you use a character that uses / in regular expressions. I tried to avoid it with \/.
 
    Addition of String.removeTag ()

version 4.0.5

    SystemクラスのクラスフィールドはSystem.という表記を省略できるようになりました。つまりaccess(fname, R_OK) == 0などはコンパイルが通ります。

    String.decodeFromForm()をいれました。CGIで便利です

    識別子の処理をリファクタリング。バグがあったと思います。修正。

    同じクラスのクラスメソッドとクラスフィールドの呼び出し時にクラス名を省略できるようになりました。

version 4.0.5

    The class field of the System class can now omit the notation System. In other words, access(fname, R_OK) == 0 etc is compiled.

    I put String.decodeFromForm (). It is useful in CGI

    Refactoring processing of identifiers. I think there was a bug. Fix.

    Class names can now be omitted when calling class methods and class fields of the same class.

version 4.0.4

    Multi line stringのインデントのバグを修正。

version 4.0.4

    Multi line string bug was fiexed.

version 4.0.3

    Regexのバグを修正。

    String Expression(\{})の中は式じゃなくてブロックになりました。

version 4.0.3

    Fixed regex bug.

    Inside String Expression (\{}) it became a block instead of an expression

version 4.0.2

    CSVファイルの入出力をサポート。ファイルのロック用のメソッドの用意。

    コンパイラーにバグがありました。修正。

    JITのバグを修正

version 4.0.2

    CSV File was supported. flock was supported.

    Fixed compiler bug.

    Fixed JIT bug.

version 4.0.1

    CGIのためのライブラリを作り始めています。System.setlocaleの追加。System.setenvの第３引数を省略できるようにしました。

    コンパイラーにバグがありました。修正。

version 4.0.1

    Started to make CGI library. System.setlocale was appended.

    Fixed compiler bug.

version 4.0.0

    スレッドを追加しました。詳しくはThreadクラスの解説を読んでください。

    def allocSize(): int でヒープから取得するメモリのサイズを指定できるようになりました。主に拡張ライブラリで使います。

    allocatedSize()スペシャルメソッドを追加しました。オブジェクトのヒープから取得したメモリのサイズを返します。主に拡張ライブラリ使うもので特にユーザーは使うことがないでしょう。

    headOfmemory()スペシャルメソッドを追加しました。オブジェクトのヒープから取得したメモリの先頭サイズを返します。主に拡張ライブラリで使うもので特にユーザーは使うことがないでしょう。

    クラスファイルの仕様が変更されてます。コンパイルされたクラスファイルは再度コンパイルが必要になってます。再コンパイルをお願いします。

    UShortのboxingのbugをfix

version 4.0.0

    Threads were added. For details, please read the explanation of Thread class.

    def allocSize (): int allows you to specify the size of the memory to get from the heap. We mainly use it in extension library.

    The allocatedSize () special method was added. Returns the size of the memory retrieved from the heap of the object.
        It mainly uses extended libraries, so users will not use them in particular.

    The headOfmemory () special method was added. Returns the starting size of the memory obtained from the heap of the object. It is mainly used for extended libraries, so users will not use them in particular.

    The specification of the class file has been changed. Compiled class files need to be recompiled again. Please recompile.

    Fixed boxing bug of UShort

version 3.7.6

    Multi line stringを入れました。

    CloverクラスにgetMethod(name:String), getClassField(name:String), getField(name:String)を入れました。またClassクラスにnumFields, numMethods, numClassFieldsをフィールドを追加。

    CloverクラスにisLoaded(name:String), isDefined(name:String)クラスを追加。

    CloverクラスにappendClassを入れました。

    オブジェクトの作成時newを省略できるようになりました。

version 3.7.6

    Added Multi line stirng.

    I added getMethod (name: String), getClassField (name: String), getField (name: String) to lover class. Also add numFields, numMethods, numClassFields fields to the Class class

    I added Clover.isLoaded(name:String), Clover.isDefined(name:String).

    I added Clover.appendClass(code:String).

    new can now be omitted when creating objects.

version 3.7.5
    
    Added Compile time scripting and Reflection.

version 3.7.4

    getppid, setsid, getsid, setpgrp, setpigdをSystemクラスに追加しました。

    REPLで配列に対するメソッドコールの補完にバグが有りました。修正。

version 3.7.4

    Added getppid, setsid, getsid, setpgrp, setpigd to System Class
    
    There was a bug in completing method calls for arrays in REPL. Fix.

version 3.7.3

    hashの値の表現に簡易表現を追加しました。a:Hash<String,Integer> = [ "AAA":2, "BBB":3 ]はコンパイルが通ります。

version 3.7.3

    simplified expression was added to the expression of the value of hash. a: Hash <String, Integer> = ["AAA": 2, "BBB": 3] is compiled

version 3.7.2

    変数への数値の代入時にint --> floatなどdoubleやfloatの場合は自動変換しなくなりました。
    (int --> long)などは暗黙のキャストが行われます

version 3.7.2

    When assigning a numeric value to a variable, it does not automatically convert to double or float such as int -> float. (int -> long) etc. are implicitly cast

version 3.7.1

    ローカル変数の多重代入を入れました。

    > (a, b) := (1,2)
    > (a, b) = (b, a)

    タプルの表記で簡単なものを追加しました。

    (1,"AAA", 1.1)  # == Tuple<Integer, String, Double>

version 3.7.1

    Added Multiple Assignements for local variables

    > (a, b) := (1,2)
    > (a, b) = (b, a)

    An easy thing was added by the notation of a tuple

    > (1,"AAA", 1.1)  # == Tuple<Integer, String, Double>

version 3.7.0

    コマンドライン引数のバグを修正。

    System.getopt, System.getopt_long, System.getopt_long_onlyを追加。

    -clean, --version, -versionオプションの廃止（-> 同名のコマンドライン引数が取れなくなるため)

version 3.7.0

    Fixed command line argument bug.

    System.getopt, System.getopt_long, System.getopt_long_only added.

    -clean, --version, -version option is deprecated (-> command line argument of the same name can not be taken)

version 3.6.9
    
    whenにパターンマッチングが入りました。以下のように使います。

    e := new Array<String>();

    f := when(e.className()) {
        match /.+<String>/: {
            123;
        }
        else {
            456;
        }
    }

    Clover.test("when test5", f == 123);

version 3.6.9

    Pattern matching has been entered into when. I use it as follows.

    e := new Array<String>();

    f := when(e.className()) {
        match /.+<String>/: {
            123;
        }
        else {
            456;
        }
    }

    Clover.test("when test5", f == 123);

version 3.6.8

    メモリリークといくつかのバグを修正しました。

version 3.6.8

    Fixed some bugs and memory leak.

version 3.6.7

    コマンドのサスペンドがversion 3.6.3でバグになっていました。修正。

version 3.6.7

    The command suspend was a bug in version 3.6.3. Fix.

version 3.6.6

    cd コマンドを実行した時に環境変数PWDを設定するようになりました。

    System.setenvの戻り値をBufferからStringに変更しました

version 3.6.6

    The environment variable PWD is now set when the cd command is executed.

    System.setenv's return value changed from Buffer to String

version 3.6.5

    REPLの補完のバグを修正。

version 3.6.5

    Fixed REPL complementary bug.

version 3.6.4

    プリミティブ型じゃない配列に対するメソッドコールのバグを修正。

    REPLの補完のバグを修正。

    Clover.ARGV, ARGC, VERSIONを追加。

version 3.6.4

    Fixed a bug in method calls for arrays that are not primitive types.

    Fixed REPL complementary bug.

    Added Clover.ARGV and ARGC, VERSION.

version 3.6.3

    System.mbstowcs, System.wcstombsのAPIの変更。詳しくはString.clclを見てください。

    System.tcgetatter, System.cfmakerawのAPIの変更。詳しくはCommand.clclを見てください。

    REPLの補完のバグを修正。

version 3.6.3

    System.mbstowcs, System.wcstombs API changes. See String.clcl for details.
    System.tcgetatter, System.cfmakeraw API change. See Command.clcl for details.

    Fixed REPL complementary bug.

version 3.6.2

    Systemクラスのクラス名を省略できるようになりました。

    各種システムコールの追加

version 3.6.2

    The class name of System class can be omitted.

    Addition of various system calls

version 3.6.1
    
    ポインタの演算子の右辺値はulongじゃなくても大丈夫になりました。a := 1; b := &a; b += 4は動きます。

version 3.6.1

    The right side value of the operator of the pointer is okay if it is not ulong. a: = 1; b: = & a; b + = 4 works.

version 3.6.0

    ファイルクラスにnew File("fname.txt", "w");などを入れました。内部的にはfopenやfwrite, freadされてバッファリングされます。

version 3.6.0

    I put new File ("fname.txt", "w"); etc in the file class. Internally it is fopen, fwrite, fread and buffered.

version 3.5.9

    メソッドの引数で数値型の変換は暗黙で行われるようになりました。int --> ulongなど。

version 3.5.9

    Numeric type conversion is now implicit in method arguments. int -> ulong and so on.

version 3.5.8

    configureの他のCPUへの対応やディレクトリ内のファイルの整理をしました。

versioin 3.5.8

    I configured configure and handle other CPUs and organize files in the directory.

version 3.5.7

    unset 変数名という命令を加えました。変数の宣言を取り消します。

    PowerPCに対応しました。

version 3.5.7

    We added an instruction called unset variable name. Cancel the variable declaration.

    It corresponds to PowerPC.

