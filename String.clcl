include "Container.clcl"

class PcreOVec
{
    start:int[];
    end:int[];

    def initialize(max:int) {
        self.start = new int[max]();
        self.end = new int[max]();
    }
}

class System
{
    def sprintf(format:String, prams:Array<Object>): native static String throws Exception;
    def pcre_exec(regex:regex, str:Buffer, offset:int, ovec_max:int, ovec:PcreOVec): native static int;
    def atoi(str:String):native static int;
    def atof(str:String):native static float;
    def strtod(str:String): native static double;
    def strcmp(str1:String, str2:String): native static int;
    def strcasecmp(str1:String, str2:String): native static int;
    def strtol(str:String, base:int): native static long;
    def strtoul(str:String, base:int): native static ulong;
    def mbstowcs(dest:pointer@wchar[], src:pointer@utf8-string-memory, size:size_t): static native int throws Exception;
    def wcstombs(dest:pointer@byte[], src:char[]): static native int throws Exception;

    MB_LEN_MAX:static int;

    def initialize_string_system(): static native;

    def initialize(): static {
        System.initialize_string_system();
    }
}

class Clover
{
    def test(msg: String, expression:bool):static {
        System.printToError(msg.append("..."));
        System.assert(expression);
        System.printlnToError("OK");
    }
}

class Global
{
    def print(str:String):static {
        System.print(str);
    }
    def printToError(str:String):static {
        System.printToError(str);
    }
    def println(str:String):static {
        System.println(str);
    }
    def printlnToError(str:String):static {
        System.printlnToError(str);
    }
    def printf(str:String, params:Array<Object>): static {
        str2: String = System.sprintf(str, params);
        System.print(str2);
    }
    def printf(str:String): static {
        System.print(str);
    }
    def printfToError(str:String, params:Array<Object>): static {
        str2: String = System.sprintf(str, params);
        System.printToError(str2);
    }
    def sprintf(str:String, params:Array<Object>): static String {
        return System.sprintf(str, params);
    }
}

class String
{
    def printf(format:String): {
        printf(format, array { self });
    }

    def insert(index:int, str:String):  String {
        if(index < 0) {
            index += self.len + 1;
        }
        if(index < 0) {
            index = 0;
        }
        if(index > self.len) {
            index = self.len;
        }

        len:int = str.length();

        if(self.len+len + 1 < self.size) {
            for(i:int = index; i<self.len; i++) {
                self.buffer[i+len] = self.buffer[i];
            }
            self.buffer[i] = '\0';
            for(i = 0; i<len; i++) {
                self.buffer[index+i] = str.buffer[i];
            }

            self.len += len;
        }
        else {
            new_size:int = (self.len + len + 1) * 2 + 1;
            new_buffer:char[] = new char[new_size];

            for(i:int = 0; i<index; i++) {
                new_buffer[i] = self.buffer[i];
            }
            for(i=0; i<len; i++) {
                new_buffer[i+index] = str.buffer[i];
            }
            for(i=index; i<self.len; i++) {
                new_buffer[i+len] = self.buffer[i];
            }
            new_buffer[i+len] = '\0';

            self.buffer = new_buffer;
            self.size = new_size;

            self.len += len;
        }

        return self;
    }

    def subString(start:int, end:int):  String {
        if(start < 0) {
            start += self.len;
        }
        if(end < 0) {
            end += self.len + 1;
        }

        if(start < 0) {
            start = 0;
        }
        if(end > self.len) {
            end = self.len;
        }

        if(start >= end || start >= self.len || end < 0) {
            return "";
        }

        result: String = new String(end-start+1);

        for(i:int = 0; i<end-start; i++) {
            result.buffer[i] = self.chars(i+start);
        }
        result.buffer[i] = '\0';

        result.len = end-start;
        result.size = end-start+1;

        return result;
    }

    def equals(str: String):  bool {
        if(self.len == str.length()) {
            for(i:int = 0; i<self.len; i++) {
                if(self.buffer[i] != str.buffer[i]) {
                    return false;
                }
            }

            return true;
        }
        else {
            return false;
        }
    }

    def getHashKey():  uint {
        key:uint = 0;
        for(i:int =1; i<self.len; i++) {
            key += self.buffer[i].to_uint;
        }

        return key;
    }

    def toString():  String {
        return self;
    }

    def to_regex(): regex {
        return /\{self}/;
    }

    def printf(format:String): {
        printf(format, array { self });
    }

    def print(): {
        print(self);
    }

    def println(): {
        println(self);
    }
    def printlnWithoutNullString() {
        if(self.len != 0) {
            println(self);
        }
    }

    def match(regex_:regex): bool {
        ovec_max:int = 16;
        ovec:PcreOVec = new PcreOVec(ovec_max);

        buffer:Buffer = self.toBuffer();

        offset:int = 0;
        regex_result:int = System.pcre_exec(regex_, buffer, offset, ovec_max, ovec);

        return regex_result > 0;
    }

    def match(regex_:regex, group_strings:EqualableList<String>?):  bool {
        ovec_max:int = 16;
        ovec:PcreOVec = new PcreOVec(ovec_max);

        buffer:Buffer = self.toBuffer();

        offset:int = 0;
        regex_result:int = System.pcre_exec(regex_, buffer, offset, ovec_max, ovec);

        ### match and no group strings ###
        if(regex_result == 1 || group_strings.identifyWith(null) && regex_result > 0) {
            return true;
        }
        ### group strings ###
        elif(regex_result > 1) {
            for(i:int = 1; i<regex_result; i++) {
                match_string:String = buffer.subBuffer(ovec.start[i], ovec.end[i]).toString();
                group_strings.add(match_string);
            }

            return true;
        }
        ### no match ###
        else {
            return false;
        }
    }

    def sub(regex_:regex, replace:String, group_strings:EqualableList<String>?):  String {
        result: String = new String();
        offset:int = 0;

        buffer:Buffer = self.toBuffer();
        ovec_max:int = 16;
        ovec:PcreOVec = new PcreOVec(ovec_max);

        while(true) {
            regex_result:int = System.pcre_exec(regex_, buffer, offset, ovec_max, ovec);

            ### match and no group strings ###
            if(regex_result == 1 || group_strings.identifyWith(null) && regex_result > 0) {
                str:String = buffer.subBuffer(offset, ovec.start[0]).toString();
                result.append(str);
                result.append(replace);

                if(offset == ovec.end[0]) {
                    offset++;
                }
                else {
                    offset = ovec.end[0];
                }

                if(!regex_.global) {
                    str:String = buffer.subBuffer(offset, -1).toString();
                    result.append(str);
                    break;
                }
            }
            ### group strings ###
            elif(regex_result > 1) {
                str:String = buffer.subBuffer(offset, ovec.start[0]).toString();
                result.append(str);
                result.append(replace);

                if(offset == ovec.end[0]) {
                    offset++;
                }
                else {
                    offset = ovec.end[0];
                }

                if(!regex_.global) {
                    group_strings.clear();
                }

                for(i:int = 1; i<regex_result; i++) {
                    match_string:String = buffer.subBuffer(ovec.start[i], ovec.end[i]).toString();
                    group_strings.add(match_string);
                }

                if(!regex_.global) {
                    str:String = buffer.subBuffer(offset, -1).toString();
                    result.append(str);
                    break;
                }
            }
            ### no match ###
            else {
                str:String = buffer.subBuffer(offset, -1).toString();
                result.append(str);
                break;
            }
        }

        return result;
    }

    def sub(regex_:regex, replace:String):  String {
        return self.sub(regex_, replace, new EqualableList<String>());
    }

    def sub(regex_:regex, group_strings:EqualableList<String>?, replace:lambda(String,EqualableList<String>):String):  String 
    {
        result: String = new String();
        offset:int = 0;

        buffer:Buffer = self.toBuffer();
        ovec_max:int = 16;
        ovec:PcreOVec = new PcreOVec(ovec_max);

        while(true) {
            regex_result:int = System.pcre_exec(regex_, buffer, offset, ovec_max, ovec);

            ### match and no group strings ###
            if(regex_result == 1 || group_strings.identifyWith(null) && regex_result > 0) {
                str:String = buffer.subBuffer(offset, ovec.start[0]).toString();
                result.append(str);

                match_string:String = buffer.subBuffer(ovec.start[0], ovec.end[0]).toString();

                replace_string:String = replace(match_string, new EqualableList<String>());
                result.append(replace_string);

                if(offset == ovec.end[0]) {
                    offset++;
                }
                else {
                    offset = ovec.end[0];
                }

                if(!regex_.global) {
                    str:String = buffer.subBuffer(offset, -1).toString();
                    result.append(str);
                    break;
                }
            }
            ### group strings ###
            elif(regex_result > 1) {
                str:String = buffer.subBuffer(offset, ovec.start[0]).toString();
                result.append(str);

                match_string:String = buffer.subBuffer(ovec.start[0], ovec.end[0]).toString();

                if(!regex_.global) {
                    group_strings.clear();
                }

                for(i:int = 1; i<regex_result; i++) {
                    match_string:String = buffer.subBuffer(ovec.start[i], ovec.end[i]).toString();
                    group_strings.add(match_string);
                }

                replace_string:String = replace(match_string, group_strings);
                result.append(replace_string);

                if(offset == ovec.end[0]) {
                    offset++;
                }
                else {
                    offset = ovec.end[0];
                }

                if(!regex_.global) {
                    str:String = buffer.subBuffer(offset, -1).toString();
                    result.append(str);
                    break;
                }
            }
            ### no match ###
            else {
                str:String = buffer.subBuffer(offset, -1).toString();
                result.append(str);
                break;
            }
        }

        return result;
    }

    def sub(regex_:regex, group_strings:EqualableList<String>?, replace:lambda(String):String):  String 
    {
        result: String = new String();
        offset:int = 0;

        buffer:Buffer = self.toBuffer();
        ovec_max:int = 16;
        ovec:PcreOVec = new PcreOVec(ovec_max);

        while(true) {
            regex_result:int = System.pcre_exec(regex_, buffer, offset, ovec_max, ovec);

            ### match and no group strings ###
            if(regex_result == 1 || group_strings.identifyWith(null) && regex_result > 0) {
                str:String = buffer.subBuffer(offset, ovec.start[0]).toString();
                result.append(str);

                match_string:String = buffer.subBuffer(ovec.start[0], ovec.end[0]).toString();

                replace_string:String = replace(match_string);
                result.append(replace_string);

                if(offset == ovec.end[0]) {
                    offset++;
                }
                else {
                    offset = ovec.end[0];
                }

                if(!regex_.global) {
                    str:String = buffer.subBuffer(offset, -1).toString();
                    result.append(str);
                    break;
                }
            }
            ### group strings ###
            elif(regex_result > 1) {
                str:String = buffer.subBuffer(offset, ovec.start[0]).toString();
                result.append(str);

                match_string:String = buffer.subBuffer(ovec.start[0], ovec.end[0]).toString();

                if(!regex_.global) {
                    group_strings.clear();
                }

                for(i:int = 1; i<regex_result; i++) {
                    match_string:String = buffer.subBuffer(ovec.start[i], ovec.end[i]).toString();
                    group_strings.add(match_string);
                }

                replace_string:String = replace(match_string);
                result.append(replace_string);

                if(offset == ovec.end[0]) {
                    offset++;
                }
                else {
                    offset = ovec.end[0];
                }

                if(!regex_.global) {
                    str:String = buffer.subBuffer(offset, -1).toString();
                    result.append(str);
                    break;
                }
            }
            ### no match ###
            else {
                str:String = buffer.subBuffer(offset, -1).toString();
                result.append(str);
                break;
            }
        }

        return result;
    }
    
    def sub(regex_:regex, replace:lambda(String,EqualableList<String>):String):  String {
        return self.sub(regex_, new EqualableList<String>()@group_strings, replace);
    }

    def sub(regex_:regex, replace:lambda(String):String): String
    {
        return self.sub(regex_, new EqualableList<String>()@group_strings, replace);
    }

    def scan(regex_:regex):  EqualableList<String> {
        result: EqualableList<String> = new EqualableList<String>();
        offset:int = 0;

        buffer:Buffer = self.toBuffer();
        ovec_max:int = 16;
        ovec:PcreOVec = new PcreOVec(ovec_max);

        while(true) {
            regex_result:int = System.pcre_exec(regex_, buffer, offset, ovec_max, ovec);

            ### match and no group strings ###
            if(regex_result == 1) {
                match_string:String = buffer.subBuffer(ovec.start[0], ovec.end[0]).toString();
                result.add(match_string);

                if(offset == ovec.end[0]) {
                    offset++;
                }
                else {
                    offset = ovec.end[0];
                }
            }
            ### group strings ###
            elif(regex_result > 1) {
                match_string:String = buffer.subBuffer(ovec.start[0], ovec.end[0]).toString();
                result.add(match_string);

                if(offset == ovec.end[0]) {
                    offset++;
                }
                else {
                    offset = ovec.end[0];
                }

                for(i:int = 1; i<regex_result; i++) {
                    match_string:String = buffer.subBuffer(ovec.start[i], ovec.end[i]).toString();
                    result.add(match_string);
                }
            }
            ### no match ###
            else {
                break;
            }
        }

        return result;
    }

    def scan(regex_:regex, block_:lambda(String,EqualableList<String>):String):  EqualableList<String> {
        result: EqualableList<String> = new EqualableList<String>();
        offset:int = 0;

        buffer:Buffer = self.toBuffer();
        ovec_max:int = 16;
        ovec:PcreOVec = new PcreOVec(ovec_max);

        while(true) {
            regex_result:int = System.pcre_exec(regex_, buffer, offset, ovec_max, ovec);

            ### match and no group strings ###
            if(regex_result == 1) {
                match_string:String = buffer.subBuffer(ovec.start[0], ovec.end[0]).toString();

                group_strings: EqualableList<String> = new EqualableList<String>();
                result.add(block_(match_string, group_strings));

                if(offset == ovec.end[0]) {
                    offset++;
                }
                else {
                    offset = ovec.end[0];
                }
            }
            ### group strings ###
            elif(regex_result > 1) {
                match_string:String = buffer.subBuffer(ovec.start[0], ovec.end[0]).toString();

                group_strings: EqualableList<String> = new EqualableList<String>();
                for(i:int = 1; i<regex_result; i++) {
                    match_string:String = buffer.subBuffer(ovec.start[i], ovec.end[i]).toString();
                    group_strings.add(match_string);
                }

                if(offset == ovec.end[0]) {
                    offset++;
                }
                else {
                    offset = ovec.end[0];
                }

                result.add(block_(match_string, group_strings));
            }
            ### no match ###
            else {
                break;
            }
        }

        return result;
    }
    def scan(regex_:regex, block_:lambda(String):String):  EqualableList<String> {
        result: EqualableList<String> = new EqualableList<String>();
        offset:int = 0;

        buffer:Buffer = self.toBuffer();
        ovec_max:int = 16;
        ovec:PcreOVec = new PcreOVec(ovec_max);

        while(true) {
            regex_result:int = System.pcre_exec(regex_, buffer, offset, ovec_max, ovec);

            ### match and no group strings ###
            if(regex_result == 1) {
                match_string:String = buffer.subBuffer(ovec.start[0], ovec.end[0]).toString();

                result.add(block_(match_string));

                if(offset == ovec.end[0]) {
                    offset++;
                }
                else {
                    offset = ovec.end[0];
                }
            }
            ### group strings ###
            elif(regex_result > 1) {
                match_string:String = buffer.subBuffer(ovec.start[0], ovec.end[0]).toString();

                group_strings: EqualableList<String> = new EqualableList<String>();
                for(i:int = 1; i<regex_result; i++) {
                    match_string:String = buffer.subBuffer(ovec.start[i], ovec.end[i]).toString();
                    group_strings.add(match_string);
                }

                if(offset == ovec.end[0]) {
                    offset++;
                }
                else {
                    offset = ovec.end[0];
                }

                result.add(block_(match_string));
            }
            ### no match ###
            else {
                break;
            }
        }

        return result;
    }

    def each(block_:lambda(char)): String {
        for(i:int = 0; i<self.len; i++) {
            block_(self.buffer[i]);
        }

        return self;
    }

    def split(c:char):  EqualableList<String> {
        result:EqualableList<String> = new EqualableList<String>();
        offset:int = 0;
        str:String = "";

        for(i:=0; i<self.len; i++) {
            if(self.buffer[i] == c) {
                result.add(str);
                str = "";
            }
            else {
                str.append(self.buffer[i]);
            }
        }
        if(str.length() != 0) {
            result.add(str);
        }

        return result;
    }

    def split(separator:regex): EqualableList<String> {
        result:EqualableList<String> = new EqualableList<String>();
        offset:int = 0;

        buffer:Buffer = self.toBuffer();
        ovec_max:int = 16;
        ovec:PcreOVec = new PcreOVec(ovec_max);

        while(true) {
            regex_result:int = System.pcre_exec(separator, buffer, offset, ovec_max, ovec);

            ### match and no group strings ###
            if(regex_result == 1) {
                str:String = buffer.subBuffer(offset, ovec.start[0]).toString();
                result.add(str);

                if(offset == ovec.end[0]) {
                    offset++;
                }
                else {
                    offset = ovec.end[0];
                }
            }
            ### group strings ###
            elif(regex_result > 1) {
                str:String = buffer.subBuffer(offset, ovec.start[0]).toString();
                result.add(str);

                if(offset == ovec.end[0]) {
                    offset++;
                }
                else {
                    offset = ovec.end[0];
                }

                for(i:int = 1; i<regex_result; i++) {
                    str:String = buffer.subBuffer(ovec.start[i], ovec.end[i]).toString();
                    result.add(str);
                }
            }
            ### no match ###
            else {
                break;
            }
        }

        if(offset < buffer.length()) {
            str:String = buffer.subBuffer(offset, -1).toString();
            result.add(str);
        }

        return result;
    }

    def split(separator:regex, block_:lambda(String):String):  EqualableList<String> {
        result:EqualableList<String> = new EqualableList<String>();
        offset:int = 0;

        buffer:Buffer = self.toBuffer();
        ovec_max:int = 16;
        ovec:PcreOVec = new PcreOVec(ovec_max);

        while(true) {
            regex_result:int = System.pcre_exec(separator, buffer, offset, ovec_max, ovec);

            ### match and no group strings ###
            if(regex_result == 1) {
                str:String = buffer.subBuffer(offset, ovec.start[0]).toString();
                result.add(block_(str));

                if(offset == ovec.end[0]) {
                    offset++;
                }
                else {
                    offset = ovec.end[0];
                }
            }
            ### group strings ###
            elif(regex_result > 1) {
                str:String = buffer.subBuffer(offset, ovec.start[0]).toString();

                result.add(block_(str));

                if(offset == ovec.end[0]) {
                    offset++;
                }
                else {
                    offset = ovec.end[0];
                }
            }
            ### no match ###
            else {
                str:String = buffer.subBuffer(offset, -1).toString();
                result.add(block_(str));
                break;
            }
        }

        return result;
    }

    def indexOf(str:String, count:int): int throws Exception {
        result:int = -1;
        count2:int = 0;
        len:int = str.length();

        for(i:=0; i<self.len; i++) {
            if(self.subString(i, i+len).equals(str)) {
                count2++;
                if(count2 == count) {
                    result = i;
                    break;
                }
            }
        }

        return result;
    }

    def indexOf(str:String):  int {
        return self.indexOf(str, 1);
    }

    def indexOf(regex_:regex, count:int): int throws Exception {
        result:int = -1;
        offset:int = 0;
        count2:int = 0;

        buffer:Buffer = self.toBuffer();
        ovec_max:int = 16;
        ovec:PcreOVec = new PcreOVec(ovec_max);

        while(true) {
            regex_result:int = System.pcre_exec(regex_, buffer, offset, ovec_max, ovec);

            ### match ###
            if(regex_result > 0) {
                count2++;
                if(count2 == count) {
                    ovec_result:int = ovec.start[0];

                    if(ovec_result == 0) {
                        result = 0;
                    }
                    else {
                        utf32_offset:int = 0;

                        p:pointer = buffer.buffer;
                        while(p < p + buffer.len) {
                            c:ubyte = p->ubyte;

                            # utf8 character
                            if(c > 127uy) {
                                size:int = ((c & 0x80) >> 7) + ((c & 0x40) >> 6) + ((c & 0x20) >> 5) + ((c & 0x10) >> 4);
                                if(size > System.MB_LEN_MAX) {
                                    throw new Exception("unexpected error at String.indexOf");
                                }
                                else {
                                    p += size.to_ulong;
                                }

                                utf32_offset++;
                            }
                            # ascii
                            else {
                                p++;
                                utf32_offset++;
                            }

                            if(p - buffer.buffer == ovec_result) {
                                break;
                            }
                        }

                        result = utf32_offset;
                    }
                    break;
                }

                if(offset == ovec.end[0]) {
                    offset++;
                }
                else {
                    offset = ovec.end[0];
                }
            }
            ### no match ###
            else {
                break;
            }
        }

        return result;
    }

    def indexOf(regex_:regex): int {
        return self.indexOf(regex_, 1);
    }

    def reverse(): String {
        result:String = new String(self.size);

        for(i:int = 0; i<self.len; i++) {
            result.buffer[i] = self.buffer[self.len-i-1];
        }
        result.buffer[i] = '\0';

        result.len = self.len;

        return result;
    }

    def upperCase(): String {
        for(i:int = 0; i<self.len; i++) {
            self.buffer[i] = self.buffer[i].to_upper;
        }

        return self;
    }

    def lowerCase(): String {
        for(i:int = 0; i<self.len; i++) {
            self.buffer[i] = self.buffer[i].to_lower;
        }

        return self;
    }

    def to_int():  int {
        return System.atoi(self);
    }

    def to_float():  float {
        return System.atof(self);
    }

    def to_double():  double {
        return System.strtod(self);
    }

    def multiply(value:int):  String {
        result:String = new String();

        for(i:int = 0; i<value; i++) {
            result.append(self);
        }

        return result;
    }

    # same: 0, self > str: > 0, self < str: < 0
    def compare(str:String):  int {
        return System.strcmp(self, str);
    }

    # same: 0, self > str: > 0, self < str: < 0
    def compareWithIgnoreCase(str:String):  int {
        return System.strcasecmp(self, str);
    }

    def hex():  int {
        return System.strtol(self, 0).to_int;
    }

    def oct():  int {
        return System.strtol(self, 0).to_int;
    }

    def chomp():  String {
        result:String = "";

        if(self.length() >= 2) {
            if(self.chars(-2) == '\r' && self.chars(-1) == '\n') {
                result = self.subString(0,-3);
            }
            elif(self.chars(-1) == '\r' || self.chars(-1) == '\n') {
                result = self.subString(0,-2);
            }
            else {
                result = self;
            }
        }
        elif(self.length() >= 1) {
            if(self.chars(-1) == '\r' || self.chars(-1) == '\n') {
                result = self.subString(0,-2);
            }
            else {
                result = self;
            }
        }

        return result;
    }

    def toBuffer():  Buffer throws Exception {
        array_:byte[]? = null;
        System.wcstombs(&array_, self.buffer);

        result:Buffer = new Buffer(array_.length.to_ulong);
        for(i:int = 0; i<array_.length-1; i++) {
            result.append(array_[i]);
        }

        # no null-terminated Buffer will be returened

        return result;
    }
}

class Buffer
{
    buffer:pointer;
    len:size_t;
    size:size_t;

    def initialize() {
        self.size = 64;
        self.buffer = System.malloc(self.size);
        self.len = 0;
    }
    def initialize(buf:pointer, size:size_t) {
        self.size = size;
        self.buffer = System.malloc(self.size);
        System.memcpy(self.buffer, buf, size);
        self.len = self.size;
    }
    def initialize(size:size_t) {
        self.size = size;
        self.buffer = System.malloc(self.size);
        self.len = 0;
    }
    def finalize() {
        System.free(self.buffer);
    }
    def append(buf:Buffer) {
        len: size_t = buf.len;

        if(self.len + len >= self.size) {
            new_size:size_t = (self.len+len+1) * 2;
            self.buffer = System.realloc(self.buffer, new_size);
            self.size = new_size;
        }

        System.memcpy(self.buffer + self.len, buf.buffer, len);
        self.len += len;
    }

    def append(data:byte) {
        len: size_t = 1.to_ulong;

        if(self.len + len >= self.size) {
            new_size:size_t = (self.len+len+1) * 2;
            self.buffer = System.realloc(self.buffer, new_size);
            self.size = new_size;
        }

        (self.buffer + self.len)->byte = data;
        self.len += len;
    }

    def chars(index:int):byte throws Exception {
        if(index < 0) {
            index += self.len;
        }

        if(index >= 0 && index < self.len) {
            return((self.buffer + index.to_ulong)->byte);
        }
        else {
            throw new Exception("Invalid range on Buffer.char");
        }
    }

    def chars(index:ulong):byte throws Exception {
        if(index >= 0 && index < self.len) {
            return((self.buffer + index)->byte);
        }
        else {
            throw new Exception("Invalid range on Buffer.char");
        }
    }

    def equals(buf:Buffer):bool {
        if(self.len != buf.len) {
            return false;
        }

        for(i:size_t = 0; i<self.len; i++) {
            if(self.chars(i) != buf.chars(i)) {
                return false;
            }
        }

        return true;
    }

    def clone():Buffer {
        result:Buffer = new Buffer(self.size);

        System.memcpy(result.buffer, self.buffer, self.size);
        result.len = self.len;

        return result;
    }

    def toString():String throws Exception {
        wcs:char[]? = null;
        System.mbstowcs(&wcs, self.buffer, self.len);
        result:String = new String(wcs);
        return result;
    }

    def subBuffer(start:int, end:int): Buffer {
        if(start < 0) {
            start += self.len;
        }
        if(end < 0) {
            end += self.len + 1;
        }

        if(start < 0) {
            start = 0;
        }
        if(end > self.len) {
            end = self.len;
        }

        if(start >= end || start >= self.len || end < 0) {
            return B"";
        }

        result: Buffer = new Buffer(end.to_ulong-start.to_ulong);

        System.memcpy(result.buffer, self.buffer + start.to_ulong, (end-start).to_ulong);

        result.len = end-start;
        result.size = end-start;

        # no null-terminated buffer will be returned

        return result;
    }

    def length(): size_t {
        return self.len;
    }
}

module MPrintOutObject
{
    def printf(format:String) {
        printf(format, array { self });
    }
    def print() {
        print(self.toString());
    }
    def println() {
        println(self.toString());
    }
}

class Byte 
{
    include MPrintOutObject;
}

class UByte 
{
    include MPrintOutObject;
}

class Short 
{
    include MPrintOutObject;
}

class UShort 
{
    include MPrintOutObject;
}

class Integer 
{
    include MPrintOutObject;
}

class UInteger 
{
    include MPrintOutObject;
}

class Long 
{
    include MPrintOutObject;
}

class ULong 
{
    include MPrintOutObject;
}

class Float 
{
    include MPrintOutObject;
}

class Double
{
    include MPrintOutObject;
}

class Pointer
{
    include MPrintOutObject;
}

class Char
{
    include MPrintOutObject;
}

class Bool
{
    include MPrintOutObject;
}
