!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALLOC	src/macros.h	17;"	d
ARRAY_SIZE	src/debug.c	107;"	d	file:
ARRAY_VALUE_ELEMENT_MAX	src/common.h	53;"	d
BOOL	src/macros.h	5;"	d
BREAK_NUM_MAX	src/common.h	45;"	d
BUFFER_H	src/buffer.h	2;"	d
BYTE_CODE_INIT_SIZE	src/code.c	3;"	d	file:
CC	Makefile	/^CC=clang$/;"	m
CFLAGS	Makefile	/^CFLAGS=-Isrc\/ -I. -L . -I\/home\/ab25cq\/include -L\/home\/ab25cq\/lib -fPIC -DSYSCONFDIR="\\"${sysconfdir}\/\\"" -DDOCDIR="\\"${docdir}\/\\"" -DDATAROOTDIR="\\"${datarootdir}\/\\"" -I\/usr\/local\/include -L \/usr\/local\/lib -g -DMDEBUG -Werror -Qunused-arguments$/;"	m
CHECKML_BEGIN	src/debug.h	11;"	d
CHECKML_BEGIN	src/debug.h	38;"	d
CHECKML_END	src/debug.h	12;"	d
CHECKML_END	src/debug.h	39;"	d
CLASS_FLAGS_ALLOCATED	src/common.h	129;"	d
CLASS_FLAGS_DYNAMIC_CLASS	src/common.h	130;"	d
CLASS_FLAGS_INTERFACE	src/common.h	127;"	d
CLASS_FLAGS_MODIFIED	src/common.h	128;"	d
CLASS_FLAGS_PRIMITIVE	src/common.h	126;"	d
CLASS_NAME	src/common.h	258;"	d
CLASS_NAME_MAX	src/common.h	41;"	d
CLASS_NUM_MAX	src/klass.c	9;"	d	file:
CLASS_VERSION_MAX	src/common.h	48;"	d
CLBLOCK	src/common.h	1700;"	d
CLHEAPMEM	src/common.h	1621;"	d
CLOBJECT	src/common.h	1668;"	d
CLObject	src/common.h	/^typedef unsigned int CLObject;$/;"	t
CLREGEX	src/common.h	1723;"	d
CLVALUE	src/common.h	/^typedef union CLVALUEUnion CLVALUE;$/;"	t	typeref:union:CLVALUEUnion
CLVALUEUnion	src/common.h	/^union CLVALUEUnion {$/;"	u
CL_MODULE_HASH_SIZE	src/common.h	51;"	d
CL_MODULE_NAME_MAX	src/common.h	52;"	d
COMMON_H	src/common.h	2;"	d
COMPILER_OBJS	Makefile	/^COMPILER_OBJS=src\/compiler.o src\/parser.o src\/node_type.o src\/node.o src\/cast.o src\/vtable.o src\/script.o src\/node_block.o src\/node_block_type.o src\/class_compiler.o src\/klass_compile_time.o src\/method_compiler.o src\/module.o$/;"	m
CONS_str	src/common.h	110;"	d
CreateProcess	ltmain.sh	/^   CreateProcess().  We must quote the arguments since Win32 CreateProcess()$/;"	f
DEBUG_H	src/debug.h	2;"	d
DESTDIR	Makefile	/^DESTDIR=$/;"	m
DUMMY_ARRAY_SIZE	src/common.h	1654;"	d
ELIF_NUM_MAX	src/common.h	44;"	d
EXCEPTION_MESSAGE_MAX	src/common.h	166;"	d
FALSE	src/macros.h	13;"	d
FIELD_FLAGS_PRIVATE	src/common.h	199;"	d
FIELD_FLAGS_PROTECTED	src/common.h	200;"	d
FIRST_OBJ	src/heap.c	3;"	d	file:
GENERICS_TYPES_MAX	src/common.h	47;"	d
HASH_VALUE_ELEMENT_MAX	src/common.h	56;"	d
HAVE_ICONV_H	config.h	3;"	d
HAVE_ICONV_H	config.h	5;"	d
HAVE_MATH_H	config.h	2;"	d
HAVE_PCRE_H	config.h	6;"	d
INSTALL	Makefile	/^INSTALL=\/usr\/bin\/install -c$/;"	m
LD_LIBRARY_PATH	Makefile	/^	export LD_LIBRARY_PATH=.$(LD_LIBRARY_PATH); .\/cclover2 -class code\/array4.clc code\/array4.cl && .\/clover2 code\/array4.clo$/;"	m
LD_LIBRARY_PATH	Makefile	/^	export LD_LIBRARY_PATH=.$(LD_LIBRARY_PATH); .\/cclover2 -class code\/block2.clc code\/block2.cl && .\/clover2 code\/block2.clo$/;"	m
LD_LIBRARY_PATH	Makefile	/^	export LD_LIBRARY_PATH=.$(LD_LIBRARY_PATH); .\/cclover2 -class code\/block3.clc code\/block3.cl && .\/clover2 code\/block3.clo$/;"	m
LD_LIBRARY_PATH	Makefile	/^	export LD_LIBRARY_PATH=.$(LD_LIBRARY_PATH); .\/cclover2 -class code\/equalable_array.clc code\/equalable_array.cl && .\/clover2 code\/equalable_array.clo$/;"	m
LD_LIBRARY_PATH	Makefile	/^	export LD_LIBRARY_PATH=.$(LD_LIBRARY_PATH); .\/cclover2 -class code\/generics.clc code\/generics.cl && .\/clover2 code\/generics.clo$/;"	m
LD_LIBRARY_PATH	Makefile	/^	export LD_LIBRARY_PATH=.$(LD_LIBRARY_PATH); .\/cclover2 -class code\/generics2.clc code\/generics2.cl && .\/clover2 code\/generics2.clo$/;"	m
LD_LIBRARY_PATH	Makefile	/^	export LD_LIBRARY_PATH=.$(LD_LIBRARY_PATH); .\/cclover2 -class code\/generics3.clc code\/generics3.cl && .\/clover2 code\/generics3.clo$/;"	m
LD_LIBRARY_PATH	Makefile	/^	export LD_LIBRARY_PATH=.$(LD_LIBRARY_PATH); .\/cclover2 -class code\/increment.clc && .\/cclover2 code\/increment.cl && .\/clover2 code\/increment.clo$/;"	m
LD_LIBRARY_PATH	Makefile	/^	export LD_LIBRARY_PATH=.$(LD_LIBRARY_PATH); .\/cclover2 -class code\/inherit.clc -class code\/inherit2.clc code\/inherit.cl && .\/clover2 code\/inherit.clo$/;"	m
LD_LIBRARY_PATH	Makefile	/^	export LD_LIBRARY_PATH=.$(LD_LIBRARY_PATH); .\/cclover2 -class code\/initialize_test.clc && .\/cclover2 code\/initialize_test.cl && .\/clover2 code\/initialize_test.clo$/;"	m
LD_LIBRARY_PATH	Makefile	/^	export LD_LIBRARY_PATH=.$(LD_LIBRARY_PATH); .\/cclover2 -class code\/interface.clc code\/interface.cl && .\/clover2 code\/interface.clo$/;"	m
LD_LIBRARY_PATH	Makefile	/^	export LD_LIBRARY_PATH=.$(LD_LIBRARY_PATH); .\/cclover2 -class code\/module.clc code\/module.cl && .\/clover2 code\/module.clo$/;"	m
LD_LIBRARY_PATH	Makefile	/^	export LD_LIBRARY_PATH=.$(LD_LIBRARY_PATH); .\/cclover2 -class code\/operator.clc code\/operator.cl && .\/clover2 code\/operator.clo$/;"	m
LD_LIBRARY_PATH	Makefile	/^	export LD_LIBRARY_PATH=.$(LD_LIBRARY_PATH); .\/cclover2 -class code\/pointer2.clc code\/pointer2.cl && .\/clover2 code\/pointer2.clo$/;"	m
LD_LIBRARY_PATH	Makefile	/^	export LD_LIBRARY_PATH=.$(LD_LIBRARY_PATH); .\/cclover2 -class code\/self_class.clc code\/self_class.cl && .\/clover2 code\/self_class.clo$/;"	m
LD_LIBRARY_PATH	Makefile	/^	export LD_LIBRARY_PATH=.$(LD_LIBRARY_PATH); .\/cclover2 -class code\/stack.clc && .\/cclover2 code\/stack.cl && .\/clover2 code\/stack.clo$/;"	m
LD_LIBRARY_PATH	Makefile	/^	export LD_LIBRARY_PATH=.$(LD_LIBRARY_PATH); .\/cclover2 -class code\/try.clc code\/try.cl && .\/clover2 code\/try.clo$/;"	m
LD_LIBRARY_PATH	Makefile	/^	export LD_LIBRARY_PATH=.$(LD_LIBRARY_PATH); .\/cclover2 -class code\/user_object.clc code\/user_object.cl && .\/clover2 code\/user_object.clo$/;"	m
LD_LIBRARY_PATH	Makefile	/^	export LD_LIBRARY_PATH=.$(LD_LIBRARY_PATH); .\/cclover2 -class code\/void_result.clc code\/void_result.cl && .\/clover2 code\/void_result.clo$/;"	m
LD_LIBRARY_PATH	Makefile	/^	export LD_LIBRARY_PATH=.$(LD_LIBRARY_PATH); .\/cclover2 -no-load-fundamental-classes -class Command.clc$/;"	m
LD_LIBRARY_PATH	Makefile	/^	export LD_LIBRARY_PATH=.$(LD_LIBRARY_PATH); .\/cclover2 -no-load-fundamental-classes -class Container.clc$/;"	m
LD_LIBRARY_PATH	Makefile	/^	export LD_LIBRARY_PATH=.$(LD_LIBRARY_PATH); .\/cclover2 -no-load-fundamental-classes -class File.clc$/;"	m
LD_LIBRARY_PATH	Makefile	/^	export LD_LIBRARY_PATH=.$(LD_LIBRARY_PATH); .\/cclover2 -no-load-fundamental-classes -class Fundamental.clc$/;"	m
LD_LIBRARY_PATH	Makefile	/^	export LD_LIBRARY_PATH=.$(LD_LIBRARY_PATH); .\/cclover2 -no-load-fundamental-classes -class String.clc$/;"	m
LD_LIBRARY_PATH	Makefile	/^	export LD_LIBRARY_PATH=.$(LD_LIBRARY_PATH); .\/cclover2 code\/array.cl && .\/clover2 code\/array.clo$/;"	m
LD_LIBRARY_PATH	Makefile	/^	export LD_LIBRARY_PATH=.$(LD_LIBRARY_PATH); .\/cclover2 code\/array2.cl && .\/clover2 code\/array2.clo$/;"	m
LD_LIBRARY_PATH	Makefile	/^	export LD_LIBRARY_PATH=.$(LD_LIBRARY_PATH); .\/cclover2 code\/array5.cl && .\/clover2 code\/array5.clo$/;"	m
LD_LIBRARY_PATH	Makefile	/^	export LD_LIBRARY_PATH=.$(LD_LIBRARY_PATH); .\/cclover2 code\/block.cl && .\/clover2 code\/block.clo$/;"	m
LD_LIBRARY_PATH	Makefile	/^	export LD_LIBRARY_PATH=.$(LD_LIBRARY_PATH); .\/cclover2 code\/block_var_test.cl && .\/clover2 code\/block_var_test.clo$/;"	m
LD_LIBRARY_PATH	Makefile	/^	export LD_LIBRARY_PATH=.$(LD_LIBRARY_PATH); .\/cclover2 code\/buffer.cl && .\/clover2 code\/buffer.clo$/;"	m
LD_LIBRARY_PATH	Makefile	/^	export LD_LIBRARY_PATH=.$(LD_LIBRARY_PATH); .\/cclover2 code\/carray.cl && .\/clover2 code\/carray.clo$/;"	m
LD_LIBRARY_PATH	Makefile	/^	export LD_LIBRARY_PATH=.$(LD_LIBRARY_PATH); .\/cclover2 code\/cast.cl && .\/clover2 code\/cast.clo$/;"	m
LD_LIBRARY_PATH	Makefile	/^	export LD_LIBRARY_PATH=.$(LD_LIBRARY_PATH); .\/cclover2 code\/command.cl && .\/clover2 code\/command.clo$/;"	m
LD_LIBRARY_PATH	Makefile	/^	export LD_LIBRARY_PATH=.$(LD_LIBRARY_PATH); .\/cclover2 code\/dir.cl && .\/clover2 code\/dir.clo$/;"	m
LD_LIBRARY_PATH	Makefile	/^	export LD_LIBRARY_PATH=.$(LD_LIBRARY_PATH); .\/cclover2 code\/file.cl && .\/clover2 code\/file.clo$/;"	m
LD_LIBRARY_PATH	Makefile	/^	export LD_LIBRARY_PATH=.$(LD_LIBRARY_PATH); .\/cclover2 code\/float.cl && .\/clover2 code\/float.clo$/;"	m
LD_LIBRARY_PATH	Makefile	/^	export LD_LIBRARY_PATH=.$(LD_LIBRARY_PATH); .\/cclover2 code\/hash.cl && .\/clover2 code\/hash.clo$/;"	m
LD_LIBRARY_PATH	Makefile	/^	export LD_LIBRARY_PATH=.$(LD_LIBRARY_PATH); .\/cclover2 code\/hello_world.cl && .\/clover2 code\/hello_world.clo$/;"	m
LD_LIBRARY_PATH	Makefile	/^	export LD_LIBRARY_PATH=.$(LD_LIBRARY_PATH); .\/cclover2 code\/integer.cl && .\/clover2 code\/integer.clo$/;"	m
LD_LIBRARY_PATH	Makefile	/^	export LD_LIBRARY_PATH=.$(LD_LIBRARY_PATH); .\/cclover2 code\/list.cl && .\/clover2 code\/list.clo$/;"	m
LD_LIBRARY_PATH	Makefile	/^	export LD_LIBRARY_PATH=.$(LD_LIBRARY_PATH); .\/cclover2 code\/list2.cl && .\/clover2 code\/list2.clo$/;"	m
LD_LIBRARY_PATH	Makefile	/^	export LD_LIBRARY_PATH=.$(LD_LIBRARY_PATH); .\/cclover2 code\/normal_block.cl && .\/clover2 code\/normal_block.clo$/;"	m
LD_LIBRARY_PATH	Makefile	/^	export LD_LIBRARY_PATH=.$(LD_LIBRARY_PATH); .\/cclover2 code\/null.cl && .\/clover2 code\/null.clo$/;"	m
LD_LIBRARY_PATH	Makefile	/^	export LD_LIBRARY_PATH=.$(LD_LIBRARY_PATH); .\/cclover2 code\/number.cl && .\/clover2 code\/number.clo$/;"	m
LD_LIBRARY_PATH	Makefile	/^	export LD_LIBRARY_PATH=.$(LD_LIBRARY_PATH); .\/cclover2 code\/pointer.cl && .\/clover2 code\/pointer.clo$/;"	m
LD_LIBRARY_PATH	Makefile	/^	export LD_LIBRARY_PATH=.$(LD_LIBRARY_PATH); .\/cclover2 code\/printf.cl && .\/clover2 code\/printf.clo$/;"	m
LD_LIBRARY_PATH	Makefile	/^	export LD_LIBRARY_PATH=.$(LD_LIBRARY_PATH); .\/cclover2 code\/regex.cl && .\/clover2 code\/regex.clo$/;"	m
LD_LIBRARY_PATH	Makefile	/^	export LD_LIBRARY_PATH=.$(LD_LIBRARY_PATH); .\/cclover2 code\/special_field.cl && .\/clover2 code\/special_field.clo$/;"	m
LD_LIBRARY_PATH	Makefile	/^	export LD_LIBRARY_PATH=.$(LD_LIBRARY_PATH); .\/cclover2 code\/string.cl && .\/clover2 code\/string.clo$/;"	m
LD_LIBRARY_PATH	Makefile	/^	export LD_LIBRARY_PATH=.$(LD_LIBRARY_PATH); .\/cclover2 code\/string2.cl && .\/clover2 code\/string2.clo$/;"	m
LD_LIBRARY_PATH	Makefile	/^	export LD_LIBRARY_PATH=.$(LD_LIBRARY_PATH); .\/cclover2 code\/system_test.cl && .\/clover2 code\/system_test.clo$/;"	m
LD_LIBRARY_PATH	Makefile	/^	export LD_LIBRARY_PATH=.$(LD_LIBRARY_PATH); .\/cclover2 code\/time.cl && .\/clover2 code\/time.clo$/;"	m
LD_LIBRARY_PATH	Makefile	/^	export LD_LIBRARY_PATH=.$(LD_LIBRARY_PATH); .\/cclover2 code\/tuple.cl && .\/clover2 code\/tuple.clo$/;"	m
LD_LIBRARY_PATH	Makefile	/^	export LD_LIBRARY_PATH=.$(LD_LIBRARY_PATH); .\/cclover2 code\/variables.cl && .\/clover2 code\/variables.clo$/;"	m
LD_LIBRARY_PATH	Makefile	/^	export LD_LIBRARY_PATH=.$(LD_LIBRARY_PATH); export LANG="ja_JP.utf8"; export LC_ALL="ja_JP.utf8"; .\/cclover2 code\/char.cl && .\/clover2 code\/char.clo$/;"	m
LIBS	Makefile	/^LIBS= -lutil -ldl -lm -lpcre$/;"	m
LIBSO2NAME	Makefile	/^LIBSO2NAME=libclover2.so.1.0.0$/;"	m
LIBSONAME	Makefile	/^LIBSONAME=libclover2.so$/;"	m
LIB_OBJS	Makefile	/^LIB_OBJS=src\/buffer.o src\/debug.o src\/xfunc.o src\/klass.o src\/constant.o src\/code.o src\/alignment.o src\/utf.o$/;"	m
LIST_VALUE_ELEMENT_MAX	src/common.h	54;"	d
LOCAL_VARIABLE_MAX	src/common.h	365;"	d
MACROS_H	src/macros.h	2;"	d
MANAGED	src/macros.h	21;"	d
MASSERT	src/debug.h	25;"	d
MASSERT	src/debug.h	47;"	d
MCALLOC	src/debug.h	22;"	d
MCALLOC	src/debug.h	42;"	d
METHOD_FLAGS_CLASS_METHOD	src/common.h	165;"	d
METHOD_FLAGS_NATIVE	src/common.h	164;"	d
METHOD_NAME2	src/common.h	259;"	d
METHOD_NAME_AND_PARAMS	src/common.h	260;"	d
METHOD_NAME_MAX	src/common.h	43;"	d
METHOD_NUM_MAX	src/common.h	50;"	d
METHOD_PATH_MAX	src/common.h	49;"	d
MFREE	src/debug.h	23;"	d
MFREE	src/debug.h	45;"	d
MMALLOC	src/debug.h	19;"	d
MMALLOC	src/debug.h	41;"	d
MREALLOC	src/debug.h	21;"	d
MREALLOC	src/debug.h	44;"	d
MSTRDUP	src/debug.h	20;"	d
MSTRDUP	src/debug.h	43;"	d
NAME_SIZE	src/debug.c	92;"	d	file:
NATIVE_METHOD_HASH_SIZE	src/native_method.c	3;"	d	file:
NODE_TYPE_PAGE_SIZE	src/node_type.c	8;"	d	file:
NULLABLE	src/macros.h	25;"	d
OBJS	Makefile	/^OBJS=src\/main.o src\/vm.o src\/object.o src\/array.o src\/string.o src\/block.o src\/regex.o src\/integer.o src\/byte.o src\/short.o src\/long.o src\/float.o src\/pointer.o src\/char.o src\/bool.o src\/hash.o src\/list.o src\/tuple.o src\/carray.o src\/type.o src\/stack.o src\/heap.o src\/exception.o src\/native_method.o src\/class_system.o src\/class_clover.o src\/clover_to_clang.o$/;"	m
OP_ANDAND	src/common.h	964;"	d
OP_ARRAY_TO_CARRAY_CAST	src/common.h	1497;"	d
OP_BADD	src/common.h	763;"	d
OP_BAND	src/common.h	770;"	d
OP_BCOMPLEMENT	src/common.h	851;"	d
OP_BDIV	src/common.h	766;"	d
OP_BEQ	src/common.h	876;"	d
OP_BGT	src/common.h	878;"	d
OP_BGTEQ	src/common.h	880;"	d
OP_BLE	src/common.h	879;"	d
OP_BLEEQ	src/common.h	881;"	d
OP_BLSHIFT	src/common.h	768;"	d
OP_BMOD	src/common.h	767;"	d
OP_BMULT	src/common.h	765;"	d
OP_BNOTEQ	src/common.h	877;"	d
OP_BOOL_TO_CBOOL_CAST	src/common.h	1495;"	d
OP_BOOL_TO_CBYTE_CAST	src/common.h	1359;"	d
OP_BOOL_TO_CCHAR_CAST	src/common.h	1481;"	d
OP_BOOL_TO_CDOUBLE_CAST	src/common.h	1455;"	d
OP_BOOL_TO_CFLOAT_CAST	src/common.h	1442;"	d
OP_BOOL_TO_CLONG_CAST	src/common.h	1415;"	d
OP_BOOL_TO_CPOINTER_CAST	src/common.h	1467;"	d
OP_BOOL_TO_CSHORT_CAST	src/common.h	1387;"	d
OP_BOOL_TO_CUBYTE_CAST	src/common.h	1373;"	d
OP_BOOL_TO_CULONG_CAST	src/common.h	1429;"	d
OP_BOOL_TO_CUSHORT_CAST	src/common.h	1401;"	d
OP_BOOL_TO_INTEGER_CAST	src/common.h	1331;"	d
OP_BOOL_TO_STRING_CAST	src/common.h	1315;"	d
OP_BOOL_TO_UINTEGER_CAST	src/common.h	1345;"	d
OP_BOR	src/common.h	772;"	d
OP_BRSHIFT	src/common.h	769;"	d
OP_BSUB	src/common.h	764;"	d
OP_BXOR	src/common.h	771;"	d
OP_BYTE_TO_CBOOL_CAST	src/common.h	1483;"	d
OP_BYTE_TO_CBYTE_CAST	src/common.h	1347;"	d
OP_BYTE_TO_CCHAR_CAST	src/common.h	1469;"	d
OP_BYTE_TO_CDOUBLE_CAST	src/common.h	1444;"	d
OP_BYTE_TO_CFLOAT_CAST	src/common.h	1431;"	d
OP_BYTE_TO_CHAR_CAST	src/common.h	1279;"	d
OP_BYTE_TO_CLONG_CAST	src/common.h	1403;"	d
OP_BYTE_TO_CPOINTER_CAST	src/common.h	1457;"	d
OP_BYTE_TO_CSHORT_CAST	src/common.h	1375;"	d
OP_BYTE_TO_CUBYTE_CAST	src/common.h	1361;"	d
OP_BYTE_TO_CULONG_CAST	src/common.h	1417;"	d
OP_BYTE_TO_CUSHORT_CAST	src/common.h	1389;"	d
OP_BYTE_TO_DOUBLE_CAST	src/common.h	1245;"	d
OP_BYTE_TO_FLOAT_CAST	src/common.h	1221;"	d
OP_BYTE_TO_INTEGER_CAST	src/common.h	1319;"	d
OP_BYTE_TO_INT_CAST	src/common.h	1065;"	d
OP_BYTE_TO_LONG_CAST	src/common.h	1091;"	d
OP_BYTE_TO_POINTER_CAST	src/common.h	1269;"	d
OP_BYTE_TO_SHORT_CAST	src/common.h	1039;"	d
OP_BYTE_TO_STRING_CAST	src/common.h	1305;"	d
OP_BYTE_TO_UBYTE_CAST	src/common.h	1117;"	d
OP_BYTE_TO_UINTEGER_CAST	src/common.h	1333;"	d
OP_BYTE_TO_UINT_CAST	src/common.h	1169;"	d
OP_BYTE_TO_ULONG_CAST	src/common.h	1195;"	d
OP_BYTE_TO_USHORT_CAST	src/common.h	1143;"	d
OP_CADD	src/common.h	873;"	d
OP_CBOOL_TO_BYTE_CAST	src/common.h	1037;"	d
OP_CBOOL_TO_CHAR_CAST	src/common.h	1303;"	d
OP_CBOOL_TO_DOUBLE_CAST	src/common.h	1267;"	d
OP_CBOOL_TO_FLOAT_CAST	src/common.h	1243;"	d
OP_CBOOL_TO_INT_CAST	src/common.h	1089;"	d
OP_CBOOL_TO_LONG_CAST	src/common.h	1115;"	d
OP_CBOOL_TO_SHORT_CAST	src/common.h	1063;"	d
OP_CBOOL_TO_UBYTE_CAST	src/common.h	1141;"	d
OP_CBOOL_TO_UINT_CAST	src/common.h	1193;"	d
OP_CBOOL_TO_ULONG_CAST	src/common.h	1219;"	d
OP_CBOOL_TO_USHORT_CAST	src/common.h	1167;"	d
OP_CBYTE_TO_BYTE_CAST	src/common.h	1025;"	d
OP_CBYTE_TO_CHAR_CAST	src/common.h	1291;"	d
OP_CBYTE_TO_DOUBLE_CAST	src/common.h	1256;"	d
OP_CBYTE_TO_FLOAT_CAST	src/common.h	1232;"	d
OP_CBYTE_TO_INT_CAST	src/common.h	1077;"	d
OP_CBYTE_TO_LONG_CAST	src/common.h	1103;"	d
OP_CBYTE_TO_SHORT_CAST	src/common.h	1051;"	d
OP_CBYTE_TO_UBYTE_CAST	src/common.h	1129;"	d
OP_CBYTE_TO_UINT_CAST	src/common.h	1181;"	d
OP_CBYTE_TO_ULONG_CAST	src/common.h	1207;"	d
OP_CBYTE_TO_USHORT_CAST	src/common.h	1155;"	d
OP_CCHAR_TO_BYTE_CAST	src/common.h	1036;"	d
OP_CCHAR_TO_CHAR_CAST	src/common.h	1302;"	d
OP_CCHAR_TO_DOUBLE_CAST	src/common.h	1266;"	d
OP_CCHAR_TO_FLOAT_CAST	src/common.h	1242;"	d
OP_CCHAR_TO_INT_CAST	src/common.h	1088;"	d
OP_CCHAR_TO_LONG_CAST	src/common.h	1114;"	d
OP_CCHAR_TO_SHORT_CAST	src/common.h	1062;"	d
OP_CCHAR_TO_UBYTE_CAST	src/common.h	1140;"	d
OP_CCHAR_TO_UINT_CAST	src/common.h	1192;"	d
OP_CCHAR_TO_ULONG_CAST	src/common.h	1218;"	d
OP_CCHAR_TO_USHORT_CAST	src/common.h	1166;"	d
OP_CDOUBLE_TO_BYTE_CAST	src/common.h	1034;"	d
OP_CDOUBLE_TO_CHAR_CAST	src/common.h	1300;"	d
OP_CDOUBLE_TO_DOUBLE_CAST	src/common.h	1265;"	d
OP_CDOUBLE_TO_FLOAT_CAST	src/common.h	1241;"	d
OP_CDOUBLE_TO_INT_CAST	src/common.h	1086;"	d
OP_CDOUBLE_TO_LONG_CAST	src/common.h	1112;"	d
OP_CDOUBLE_TO_SHORT_CAST	src/common.h	1060;"	d
OP_CDOUBLE_TO_UBYTE_CAST	src/common.h	1138;"	d
OP_CDOUBLE_TO_UINT_CAST	src/common.h	1190;"	d
OP_CDOUBLE_TO_ULONG_CAST	src/common.h	1216;"	d
OP_CDOUBLE_TO_USHORT_CAST	src/common.h	1164;"	d
OP_CEQ	src/common.h	953;"	d
OP_CFLOAT_TO_BYTE_CAST	src/common.h	1033;"	d
OP_CFLOAT_TO_CHAR_CAST	src/common.h	1299;"	d
OP_CFLOAT_TO_DOUBLE_CAST	src/common.h	1264;"	d
OP_CFLOAT_TO_FLOAT_CAST	src/common.h	1240;"	d
OP_CFLOAT_TO_INT_CAST	src/common.h	1085;"	d
OP_CFLOAT_TO_LONG_CAST	src/common.h	1111;"	d
OP_CFLOAT_TO_SHORT_CAST	src/common.h	1059;"	d
OP_CFLOAT_TO_UBYTE_CAST	src/common.h	1137;"	d
OP_CFLOAT_TO_UINT_CAST	src/common.h	1189;"	d
OP_CFLOAT_TO_ULONG_CAST	src/common.h	1215;"	d
OP_CFLOAT_TO_USHORT_CAST	src/common.h	1163;"	d
OP_CGT	src/common.h	955;"	d
OP_CGTEQ	src/common.h	957;"	d
OP_CHAR_LOWERCASE	src/common.h	1511;"	d
OP_CHAR_TO_BYTE_CAST	src/common.h	1023;"	d
OP_CHAR_TO_CBOOL_CAST	src/common.h	1493;"	d
OP_CHAR_TO_CBYTE_CAST	src/common.h	1357;"	d
OP_CHAR_TO_CCHAR_CAST	src/common.h	1479;"	d
OP_CHAR_TO_CDOUBLE_CAST	src/common.h	1454;"	d
OP_CHAR_TO_CFLOAT_CAST	src/common.h	1441;"	d
OP_CHAR_TO_CLONG_CAST	src/common.h	1413;"	d
OP_CHAR_TO_CPOINTER_CAST	src/common.h	1465;"	d
OP_CHAR_TO_CSHORT_CAST	src/common.h	1385;"	d
OP_CHAR_TO_CUBYTE_CAST	src/common.h	1371;"	d
OP_CHAR_TO_CULONG_CAST	src/common.h	1427;"	d
OP_CHAR_TO_CUSHORT_CAST	src/common.h	1399;"	d
OP_CHAR_TO_DOUBLE_CAST	src/common.h	1254;"	d
OP_CHAR_TO_FLOAT_CAST	src/common.h	1230;"	d
OP_CHAR_TO_INTEGER_CAST	src/common.h	1329;"	d
OP_CHAR_TO_INT_CAST	src/common.h	1075;"	d
OP_CHAR_TO_LONG_CAST	src/common.h	1101;"	d
OP_CHAR_TO_POINTER_CAST	src/common.h	1277;"	d
OP_CHAR_TO_SHORT_CAST	src/common.h	1049;"	d
OP_CHAR_TO_STRING_CAST	src/common.h	1317;"	d
OP_CHAR_TO_UBYTE_CAST	src/common.h	1127;"	d
OP_CHAR_TO_UINTEGER_CAST	src/common.h	1343;"	d
OP_CHAR_TO_UINT_CAST	src/common.h	1179;"	d
OP_CHAR_TO_ULONG_CAST	src/common.h	1205;"	d
OP_CHAR_TO_USHORT_CAST	src/common.h	1153;"	d
OP_CHAR_UPPERCASE	src/common.h	1510;"	d
OP_CLASSNAME	src/common.h	961;"	d
OP_CLE	src/common.h	956;"	d
OP_CLEEQ	src/common.h	958;"	d
OP_CLONG_TO_BYTE_CAST	src/common.h	1031;"	d
OP_CLONG_TO_CHAR_CAST	src/common.h	1297;"	d
OP_CLONG_TO_DOUBLE_CAST	src/common.h	1262;"	d
OP_CLONG_TO_FLOAT_CAST	src/common.h	1238;"	d
OP_CLONG_TO_INT_CAST	src/common.h	1083;"	d
OP_CLONG_TO_LONG_CAST	src/common.h	1109;"	d
OP_CLONG_TO_SHORT_CAST	src/common.h	1057;"	d
OP_CLONG_TO_UBYTE_CAST	src/common.h	1135;"	d
OP_CLONG_TO_UINT_CAST	src/common.h	1187;"	d
OP_CLONG_TO_ULONG_CAST	src/common.h	1213;"	d
OP_CLONG_TO_USHORT_CAST	src/common.h	1161;"	d
OP_CNOTEQ	src/common.h	954;"	d
OP_COND_JUMP	src/common.h	738;"	d
OP_COND_NOT_JUMP	src/common.h	739;"	d
OP_CPOINTER_TO_BYTE_CAST	src/common.h	1035;"	d
OP_CPOINTER_TO_CHAR_CAST	src/common.h	1301;"	d
OP_CPOINTER_TO_INT_CAST	src/common.h	1087;"	d
OP_CPOINTER_TO_LONG_CAST	src/common.h	1113;"	d
OP_CPOINTER_TO_SHORT_CAST	src/common.h	1061;"	d
OP_CPOINTER_TO_UBYTE_CAST	src/common.h	1139;"	d
OP_CPOINTER_TO_UINT_CAST	src/common.h	1191;"	d
OP_CPOINTER_TO_ULONG_CAST	src/common.h	1217;"	d
OP_CPOINTER_TO_USHORT_CAST	src/common.h	1165;"	d
OP_CREATE_ARRAY	src/common.h	1516;"	d
OP_CREATE_BLOCK_OBJECT	src/common.h	1525;"	d
OP_CREATE_BUFFER	src/common.h	1514;"	d
OP_CREATE_CARRAY	src/common.h	1517;"	d
OP_CREATE_EQUALABLE_CARRAY	src/common.h	1519;"	d
OP_CREATE_EQUALABLE_LIST	src/common.h	1522;"	d
OP_CREATE_HASH	src/common.h	1524;"	d
OP_CREATE_LIST	src/common.h	1520;"	d
OP_CREATE_PATH	src/common.h	1515;"	d
OP_CREATE_REGEX	src/common.h	1526;"	d
OP_CREATE_SORTABLE_CARRAY	src/common.h	1518;"	d
OP_CREATE_SORTALBE_LIST	src/common.h	1521;"	d
OP_CREATE_STRING	src/common.h	1513;"	d
OP_CREATE_TUPLE	src/common.h	1523;"	d
OP_CSHORT_TO_BYTE_CAST	src/common.h	1027;"	d
OP_CSHORT_TO_CHAR_CAST	src/common.h	1293;"	d
OP_CSHORT_TO_DOUBLE_CAST	src/common.h	1258;"	d
OP_CSHORT_TO_FLOAT_CAST	src/common.h	1234;"	d
OP_CSHORT_TO_INT_CAST	src/common.h	1079;"	d
OP_CSHORT_TO_LONG_CAST	src/common.h	1105;"	d
OP_CSHORT_TO_SHORT_CAST	src/common.h	1053;"	d
OP_CSHORT_TO_UBYTE_CAST	src/common.h	1131;"	d
OP_CSHORT_TO_UINT_CAST	src/common.h	1183;"	d
OP_CSHORT_TO_ULONG_CAST	src/common.h	1209;"	d
OP_CSHORT_TO_USHORT_CAST	src/common.h	1157;"	d
OP_CSUB	src/common.h	874;"	d
OP_CUBYTE_TO_BYTE_CAST	src/common.h	1026;"	d
OP_CUBYTE_TO_CHAR_CAST	src/common.h	1292;"	d
OP_CUBYTE_TO_DOUBLE_CAST	src/common.h	1257;"	d
OP_CUBYTE_TO_FLOAT_CAST	src/common.h	1233;"	d
OP_CUBYTE_TO_INT_CAST	src/common.h	1078;"	d
OP_CUBYTE_TO_LONG_CAST	src/common.h	1104;"	d
OP_CUBYTE_TO_SHORT_CAST	src/common.h	1052;"	d
OP_CUBYTE_TO_UBYTE_CAST	src/common.h	1130;"	d
OP_CUBYTE_TO_UINT_CAST	src/common.h	1182;"	d
OP_CUBYTE_TO_ULONG_CAST	src/common.h	1208;"	d
OP_CUBYTE_TO_USHORT_CAST	src/common.h	1156;"	d
OP_CULONG_TO_BYTE_CAST	src/common.h	1032;"	d
OP_CULONG_TO_CHAR_CAST	src/common.h	1298;"	d
OP_CULONG_TO_DOUBLE_CAST	src/common.h	1263;"	d
OP_CULONG_TO_FLOAT_CAST	src/common.h	1239;"	d
OP_CULONG_TO_INT_CAST	src/common.h	1084;"	d
OP_CULONG_TO_LONG_CAST	src/common.h	1110;"	d
OP_CULONG_TO_SHORT_CAST	src/common.h	1058;"	d
OP_CULONG_TO_UBYTE_CAST	src/common.h	1136;"	d
OP_CULONG_TO_UINT_CAST	src/common.h	1188;"	d
OP_CULONG_TO_ULONG_CAST	src/common.h	1214;"	d
OP_CULONG_TO_USHORT_CAST	src/common.h	1162;"	d
OP_CUSHORT_TO_BYTE_CAST	src/common.h	1028;"	d
OP_CUSHORT_TO_CHAR_CAST	src/common.h	1294;"	d
OP_CUSHORT_TO_DOUBLE_CAST	src/common.h	1259;"	d
OP_CUSHORT_TO_FLOAT_CAST	src/common.h	1235;"	d
OP_CUSHORT_TO_INT_CAST	src/common.h	1080;"	d
OP_CUSHORT_TO_LONG_CAST	src/common.h	1106;"	d
OP_CUSHORT_TO_SHORT_CAST	src/common.h	1054;"	d
OP_CUSHORT_TO_UBYTE_CAST	src/common.h	1132;"	d
OP_CUSHORT_TO_UINT_CAST	src/common.h	1184;"	d
OP_CUSHORT_TO_ULONG_CAST	src/common.h	1210;"	d
OP_CUSHORT_TO_USHORT_CAST	src/common.h	1158;"	d
OP_DADD	src/common.h	865;"	d
OP_DDIV	src/common.h	868;"	d
OP_DEQ	src/common.h	939;"	d
OP_DGT	src/common.h	941;"	d
OP_DGTEQ	src/common.h	943;"	d
OP_DLE	src/common.h	942;"	d
OP_DLEEQ	src/common.h	944;"	d
OP_DMULT	src/common.h	867;"	d
OP_DNOTEQ	src/common.h	940;"	d
OP_DOUBLE_TO_BYTE_CAST	src/common.h	1021;"	d
OP_DOUBLE_TO_CBOOL_CAST	src/common.h	1492;"	d
OP_DOUBLE_TO_CBYTE_CAST	src/common.h	1356;"	d
OP_DOUBLE_TO_CCHAR_CAST	src/common.h	1478;"	d
OP_DOUBLE_TO_CDOUBLE_CAST	src/common.h	1453;"	d
OP_DOUBLE_TO_CFLOAT_CAST	src/common.h	1440;"	d
OP_DOUBLE_TO_CHAR_CAST	src/common.h	1288;"	d
OP_DOUBLE_TO_CLONG_CAST	src/common.h	1412;"	d
OP_DOUBLE_TO_CSHORT_CAST	src/common.h	1384;"	d
OP_DOUBLE_TO_CUBYTE_CAST	src/common.h	1370;"	d
OP_DOUBLE_TO_CULONG_CAST	src/common.h	1426;"	d
OP_DOUBLE_TO_CUSHORT_CAST	src/common.h	1398;"	d
OP_DOUBLE_TO_FLOAT_CAST	src/common.h	1229;"	d
OP_DOUBLE_TO_INTEGER_CAST	src/common.h	1328;"	d
OP_DOUBLE_TO_INT_CAST	src/common.h	1073;"	d
OP_DOUBLE_TO_LONG_CAST	src/common.h	1099;"	d
OP_DOUBLE_TO_SHORT_CAST	src/common.h	1047;"	d
OP_DOUBLE_TO_STRING_CAST	src/common.h	1314;"	d
OP_DOUBLE_TO_UBYTE_CAST	src/common.h	1125;"	d
OP_DOUBLE_TO_UINTEGER_CAST	src/common.h	1342;"	d
OP_DOUBLE_TO_UINT_CAST	src/common.h	1177;"	d
OP_DOUBLE_TO_ULONG_CAST	src/common.h	1203;"	d
OP_DOUBLE_TO_USHORT_CAST	src/common.h	1151;"	d
OP_DSUB	src/common.h	866;"	d
OP_DUPE	src/common.h	737;"	d
OP_FADD	src/common.h	860;"	d
OP_FDIV	src/common.h	863;"	d
OP_FEQ	src/common.h	932;"	d
OP_FGT	src/common.h	934;"	d
OP_FGTEQ	src/common.h	936;"	d
OP_FLE	src/common.h	935;"	d
OP_FLEEQ	src/common.h	937;"	d
OP_FLOAT_TO_BYTE_CAST	src/common.h	1020;"	d
OP_FLOAT_TO_CBOOL_CAST	src/common.h	1491;"	d
OP_FLOAT_TO_CBYTE_CAST	src/common.h	1355;"	d
OP_FLOAT_TO_CCHAR_CAST	src/common.h	1477;"	d
OP_FLOAT_TO_CDOUBLE_CAST	src/common.h	1452;"	d
OP_FLOAT_TO_CFLOAT_CAST	src/common.h	1439;"	d
OP_FLOAT_TO_CHAR_CAST	src/common.h	1287;"	d
OP_FLOAT_TO_CLONG_CAST	src/common.h	1411;"	d
OP_FLOAT_TO_CSHORT_CAST	src/common.h	1383;"	d
OP_FLOAT_TO_CUBYTE_CAST	src/common.h	1369;"	d
OP_FLOAT_TO_CULONG_CAST	src/common.h	1425;"	d
OP_FLOAT_TO_CUSHORT_CAST	src/common.h	1397;"	d
OP_FLOAT_TO_DOUBLE_CAST	src/common.h	1253;"	d
OP_FLOAT_TO_INTEGER_CAST	src/common.h	1327;"	d
OP_FLOAT_TO_INT_CAST	src/common.h	1072;"	d
OP_FLOAT_TO_LONG_CAST	src/common.h	1098;"	d
OP_FLOAT_TO_SHORT_CAST	src/common.h	1046;"	d
OP_FLOAT_TO_STRING_CAST	src/common.h	1313;"	d
OP_FLOAT_TO_UBYTE_CAST	src/common.h	1124;"	d
OP_FLOAT_TO_UINTEGER_CAST	src/common.h	1341;"	d
OP_FLOAT_TO_UINT_CAST	src/common.h	1176;"	d
OP_FLOAT_TO_ULONG_CAST	src/common.h	1202;"	d
OP_FLOAT_TO_USHORT_CAST	src/common.h	1150;"	d
OP_FMULT	src/common.h	862;"	d
OP_FNOTEQ	src/common.h	933;"	d
OP_FSUB	src/common.h	861;"	d
OP_GET_ARRAY_LENGTH	src/common.h	1499;"	d
OP_GET_REGEX_ANCHORED	src/common.h	1506;"	d
OP_GET_REGEX_DOLLAR_ENDONLY	src/common.h	1507;"	d
OP_GET_REGEX_DOTALL	src/common.h	1505;"	d
OP_GET_REGEX_EXTENDED	src/common.h	1504;"	d
OP_GET_REGEX_GLOBAL	src/common.h	1501;"	d
OP_GET_REGEX_IGNORE_CASE	src/common.h	1502;"	d
OP_GET_REGEX_MULTILINE	src/common.h	1503;"	d
OP_GET_REGEX_UNGREEDY	src/common.h	1508;"	d
OP_GOTO	src/common.h	740;"	d
OP_IADD	src/common.h	807;"	d
OP_IAND	src/common.h	814;"	d
OP_ICOMPLEMENT	src/common.h	855;"	d
OP_IDIV	src/common.h	810;"	d
OP_IEQ	src/common.h	904;"	d
OP_IGT	src/common.h	906;"	d
OP_IGTEQ	src/common.h	908;"	d
OP_ILE	src/common.h	907;"	d
OP_ILEEQ	src/common.h	909;"	d
OP_ILSHIFT	src/common.h	812;"	d
OP_IMOD	src/common.h	811;"	d
OP_IMPLMENTS	src/common.h	962;"	d
OP_IMULT	src/common.h	809;"	d
OP_INOTEQ	src/common.h	905;"	d
OP_INTEGER_TO_BYTE_CAST	src/common.h	1029;"	d
OP_INTEGER_TO_CHAR_CAST	src/common.h	1295;"	d
OP_INTEGER_TO_DOUBLE_CAST	src/common.h	1260;"	d
OP_INTEGER_TO_FLOAT_CAST	src/common.h	1236;"	d
OP_INTEGER_TO_INT_CAST	src/common.h	1081;"	d
OP_INTEGER_TO_LONG_CAST	src/common.h	1107;"	d
OP_INTEGER_TO_SHORT_CAST	src/common.h	1055;"	d
OP_INTEGER_TO_UBYTE_CAST	src/common.h	1133;"	d
OP_INTEGER_TO_UINT_CAST	src/common.h	1185;"	d
OP_INTEGER_TO_ULONG_CAST	src/common.h	1211;"	d
OP_INTEGER_TO_USHORT_CAST	src/common.h	1159;"	d
OP_INT_TO_BYTE_CAST	src/common.h	1016;"	d
OP_INT_TO_CBOOL_CAST	src/common.h	1487;"	d
OP_INT_TO_CBYTE_CAST	src/common.h	1351;"	d
OP_INT_TO_CCHAR_CAST	src/common.h	1473;"	d
OP_INT_TO_CDOUBLE_CAST	src/common.h	1448;"	d
OP_INT_TO_CFLOAT_CAST	src/common.h	1435;"	d
OP_INT_TO_CHAR_CAST	src/common.h	1283;"	d
OP_INT_TO_CLONG_CAST	src/common.h	1407;"	d
OP_INT_TO_CPOINTER_CAST	src/common.h	1461;"	d
OP_INT_TO_CSHORT_CAST	src/common.h	1379;"	d
OP_INT_TO_CUBYTE_CAST	src/common.h	1365;"	d
OP_INT_TO_CULONG_CAST	src/common.h	1421;"	d
OP_INT_TO_CUSHORT_CAST	src/common.h	1393;"	d
OP_INT_TO_DOUBLE_CAST	src/common.h	1249;"	d
OP_INT_TO_FLOAT_CAST	src/common.h	1225;"	d
OP_INT_TO_INTEGER_CAST	src/common.h	1323;"	d
OP_INT_TO_LONG_CAST	src/common.h	1095;"	d
OP_INT_TO_POINTER_CAST	src/common.h	1273;"	d
OP_INT_TO_SHORT_CAST	src/common.h	1042;"	d
OP_INT_TO_STRING_CAST	src/common.h	1307;"	d
OP_INT_TO_UBYTE_CAST	src/common.h	1120;"	d
OP_INT_TO_UINTEGER_CAST	src/common.h	1337;"	d
OP_INT_TO_UINT_CAST	src/common.h	1173;"	d
OP_INT_TO_ULONG_CAST	src/common.h	1199;"	d
OP_INT_TO_USHORT_CAST	src/common.h	1146;"	d
OP_INVOKE_BLOCK	src/common.h	971;"	d
OP_INVOKE_DYNAMIC_METHOD	src/common.h	970;"	d
OP_INVOKE_METHOD	src/common.h	968;"	d
OP_INVOKE_VIRTUAL_METHOD	src/common.h	969;"	d
OP_IOR	src/common.h	816;"	d
OP_IRSHIFT	src/common.h	813;"	d
OP_ISUB	src/common.h	808;"	d
OP_IXOR	src/common.h	815;"	d
OP_LADD	src/common.h	829;"	d
OP_LAND	src/common.h	836;"	d
OP_LCOMPLEMENT	src/common.h	857;"	d
OP_LDCBYTE	src/common.h	750;"	d
OP_LDCDOUBLE	src/common.h	761;"	d
OP_LDCFLOAT	src/common.h	760;"	d
OP_LDCINT	src/common.h	754;"	d
OP_LDCLONG	src/common.h	756;"	d
OP_LDCNULL	src/common.h	758;"	d
OP_LDCPOINTER	src/common.h	759;"	d
OP_LDCSHORT	src/common.h	752;"	d
OP_LDCUBYTE	src/common.h	751;"	d
OP_LDCUINT	src/common.h	755;"	d
OP_LDCULONG	src/common.h	757;"	d
OP_LDCUSHORT	src/common.h	753;"	d
OP_LDIV	src/common.h	832;"	d
OP_LEQ	src/common.h	918;"	d
OP_LGT	src/common.h	920;"	d
OP_LGTEQ	src/common.h	922;"	d
OP_LLE	src/common.h	921;"	d
OP_LLEEQ	src/common.h	923;"	d
OP_LLSHIFT	src/common.h	834;"	d
OP_LMOD	src/common.h	833;"	d
OP_LMULT	src/common.h	831;"	d
OP_LNOTEQ	src/common.h	919;"	d
OP_LOAD	src/common.h	746;"	d
OP_LOAD_ADDRESS	src/common.h	748;"	d
OP_LOAD_CLASS_FIELD	src/common.h	977;"	d
OP_LOAD_CLASS_FIELD_ADDRESS	src/common.h	978;"	d
OP_LOAD_ELEMENT	src/common.h	980;"	d
OP_LOAD_FIELD	src/common.h	974;"	d
OP_LOAD_FIELD_ADDRESS	src/common.h	975;"	d
OP_LOAD_VALUE_FROM_BOOL_ADDRESS	src/common.h	1010;"	d
OP_LOAD_VALUE_FROM_BYTE_ADDRESS	src/common.h	1000;"	d
OP_LOAD_VALUE_FROM_CHAR_ADDRESS	src/common.h	1009;"	d
OP_LOAD_VALUE_FROM_DOUBLE_ADDRESS	src/common.h	1007;"	d
OP_LOAD_VALUE_FROM_FLOAT_ADDRESS	src/common.h	1006;"	d
OP_LOAD_VALUE_FROM_INT_ADDRESS	src/common.h	998;"	d
OP_LOAD_VALUE_FROM_LONG_ADDRESS	src/common.h	1004;"	d
OP_LOAD_VALUE_FROM_OBJECT_ADDRESS	src/common.h	1011;"	d
OP_LOAD_VALUE_FROM_POINTER_ADDRESS	src/common.h	1008;"	d
OP_LOAD_VALUE_FROM_SHORT_ADDRESS	src/common.h	1002;"	d
OP_LOAD_VALUE_FROM_UBYTE_ADDRESS	src/common.h	1001;"	d
OP_LOAD_VALUE_FROM_UINT_ADDRESS	src/common.h	999;"	d
OP_LOAD_VALUE_FROM_ULONG_ADDRESS	src/common.h	1005;"	d
OP_LOAD_VALUE_FROM_USHORT_ADDRESS	src/common.h	1003;"	d
OP_LOGICAL_DENIAL	src/common.h	966;"	d
OP_LONG_TO_BYTE_CAST	src/common.h	1018;"	d
OP_LONG_TO_CBOOL_CAST	src/common.h	1489;"	d
OP_LONG_TO_CBYTE_CAST	src/common.h	1353;"	d
OP_LONG_TO_CCHAR_CAST	src/common.h	1475;"	d
OP_LONG_TO_CDOUBLE_CAST	src/common.h	1450;"	d
OP_LONG_TO_CFLOAT_CAST	src/common.h	1437;"	d
OP_LONG_TO_CHAR_CAST	src/common.h	1285;"	d
OP_LONG_TO_CLONG_CAST	src/common.h	1409;"	d
OP_LONG_TO_CPOINTER_CAST	src/common.h	1463;"	d
OP_LONG_TO_CSHORT_CAST	src/common.h	1381;"	d
OP_LONG_TO_CUBYTE_CAST	src/common.h	1367;"	d
OP_LONG_TO_CULONG_CAST	src/common.h	1423;"	d
OP_LONG_TO_CUSHORT_CAST	src/common.h	1395;"	d
OP_LONG_TO_DOUBLE_CAST	src/common.h	1251;"	d
OP_LONG_TO_FLOAT_CAST	src/common.h	1227;"	d
OP_LONG_TO_INTEGER_CAST	src/common.h	1325;"	d
OP_LONG_TO_INT_CAST	src/common.h	1070;"	d
OP_LONG_TO_POINTER_CAST	src/common.h	1275;"	d
OP_LONG_TO_SHORT_CAST	src/common.h	1044;"	d
OP_LONG_TO_STRING_CAST	src/common.h	1308;"	d
OP_LONG_TO_UBYTE_CAST	src/common.h	1122;"	d
OP_LONG_TO_UINTEGER_CAST	src/common.h	1339;"	d
OP_LONG_TO_UINT_CAST	src/common.h	1174;"	d
OP_LONG_TO_ULONG_CAST	src/common.h	1201;"	d
OP_LONG_TO_USHORT_CAST	src/common.h	1148;"	d
OP_LOR	src/common.h	838;"	d
OP_LRSHIFT	src/common.h	835;"	d
OP_LSUB	src/common.h	830;"	d
OP_LXOR	src/common.h	837;"	d
OP_NEW	src/common.h	973;"	d
OP_OBJ_IDENTIFY	src/common.h	960;"	d
OP_OROR	src/common.h	965;"	d
OP_PADD	src/common.h	870;"	d
OP_PEQ	src/common.h	946;"	d
OP_PGT	src/common.h	948;"	d
OP_PGTEQ	src/common.h	950;"	d
OP_PLE	src/common.h	949;"	d
OP_PLEEQ	src/common.h	951;"	d
OP_PNOTEQ	src/common.h	947;"	d
OP_POINTER_TO_BYTE_CAST	src/common.h	1022;"	d
OP_POINTER_TO_CBOOL_CAST	src/common.h	1494;"	d
OP_POINTER_TO_CBYTE_CAST	src/common.h	1358;"	d
OP_POINTER_TO_CCHAR_CAST	src/common.h	1480;"	d
OP_POINTER_TO_CHAR_CAST	src/common.h	1289;"	d
OP_POINTER_TO_CLONG_CAST	src/common.h	1414;"	d
OP_POINTER_TO_CPOINTER_CAST	src/common.h	1466;"	d
OP_POINTER_TO_CSHORT_CAST	src/common.h	1386;"	d
OP_POINTER_TO_CUBYTE_CAST	src/common.h	1372;"	d
OP_POINTER_TO_CULONG_CAST	src/common.h	1428;"	d
OP_POINTER_TO_CUSHORT_CAST	src/common.h	1400;"	d
OP_POINTER_TO_INTEGER_CAST	src/common.h	1330;"	d
OP_POINTER_TO_INT_CAST	src/common.h	1074;"	d
OP_POINTER_TO_LONG_CAST	src/common.h	1100;"	d
OP_POINTER_TO_SHORT_CAST	src/common.h	1048;"	d
OP_POINTER_TO_STRING_CAST	src/common.h	1316;"	d
OP_POINTER_TO_UBYTE_CAST	src/common.h	1126;"	d
OP_POINTER_TO_UINTEGER_CAST	src/common.h	1344;"	d
OP_POINTER_TO_UINT_CAST	src/common.h	1178;"	d
OP_POINTER_TO_ULONG_CAST	src/common.h	1204;"	d
OP_POINTER_TO_USHORT_CAST	src/common.h	1152;"	d
OP_POP	src/common.h	734;"	d
OP_POP_N	src/common.h	735;"	d
OP_PSUB	src/common.h	871;"	d
OP_RETURN	src/common.h	741;"	d
OP_REVERSE	src/common.h	736;"	d
OP_SADD	src/common.h	785;"	d
OP_SAND	src/common.h	792;"	d
OP_SCOMPLEMENT	src/common.h	853;"	d
OP_SDIV	src/common.h	788;"	d
OP_SEQ	src/common.h	890;"	d
OP_SGT	src/common.h	892;"	d
OP_SGTEQ	src/common.h	894;"	d
OP_SHORT_TO_BYTE_CAST	src/common.h	1014;"	d
OP_SHORT_TO_CBOOL_CAST	src/common.h	1485;"	d
OP_SHORT_TO_CBYTE_CAST	src/common.h	1349;"	d
OP_SHORT_TO_CCHAR_CAST	src/common.h	1471;"	d
OP_SHORT_TO_CDOUBLE_CAST	src/common.h	1446;"	d
OP_SHORT_TO_CFLOAT_CAST	src/common.h	1433;"	d
OP_SHORT_TO_CHAR_CAST	src/common.h	1281;"	d
OP_SHORT_TO_CLONG_CAST	src/common.h	1405;"	d
OP_SHORT_TO_CPOINTER_CAST	src/common.h	1459;"	d
OP_SHORT_TO_CSHORT_CAST	src/common.h	1377;"	d
OP_SHORT_TO_CUBYTE_CAST	src/common.h	1363;"	d
OP_SHORT_TO_CULONG_CAST	src/common.h	1419;"	d
OP_SHORT_TO_CUSHORT_CAST	src/common.h	1391;"	d
OP_SHORT_TO_DOUBLE_CAST	src/common.h	1247;"	d
OP_SHORT_TO_FLOAT_CAST	src/common.h	1223;"	d
OP_SHORT_TO_INTEGER_CAST	src/common.h	1321;"	d
OP_SHORT_TO_INT_CAST	src/common.h	1067;"	d
OP_SHORT_TO_LONG_CAST	src/common.h	1093;"	d
OP_SHORT_TO_POINTER_CAST	src/common.h	1271;"	d
OP_SHORT_TO_STRING_CAST	src/common.h	1306;"	d
OP_SHORT_TO_UBYTE_CAST	src/common.h	1118;"	d
OP_SHORT_TO_UINTEGER_CAST	src/common.h	1335;"	d
OP_SHORT_TO_UINT_CAST	src/common.h	1171;"	d
OP_SHORT_TO_ULONG_CAST	src/common.h	1197;"	d
OP_SHORT_TO_USHORT_CAST	src/common.h	1145;"	d
OP_SLE	src/common.h	893;"	d
OP_SLEEQ	src/common.h	895;"	d
OP_SLSHIFT	src/common.h	790;"	d
OP_SMOD	src/common.h	789;"	d
OP_SMULT	src/common.h	787;"	d
OP_SNOTEQ	src/common.h	891;"	d
OP_SOR	src/common.h	794;"	d
OP_SRSHIFT	src/common.h	791;"	d
OP_SSUB	src/common.h	786;"	d
OP_STORE	src/common.h	745;"	d
OP_STORE_CLASS_FIELD	src/common.h	979;"	d
OP_STORE_ELEMENT	src/common.h	981;"	d
OP_STORE_FIELD	src/common.h	976;"	d
OP_STORE_VALUE_TO_BOOL_ADDRESS	src/common.h	995;"	d
OP_STORE_VALUE_TO_BYTE_ADDRESS	src/common.h	985;"	d
OP_STORE_VALUE_TO_CHAR_ADDRESS	src/common.h	994;"	d
OP_STORE_VALUE_TO_DOUBLE_ADDRESS	src/common.h	992;"	d
OP_STORE_VALUE_TO_FLOAT_ADDRESS	src/common.h	991;"	d
OP_STORE_VALUE_TO_INT_ADDRESS	src/common.h	983;"	d
OP_STORE_VALUE_TO_LONG_ADDRESS	src/common.h	989;"	d
OP_STORE_VALUE_TO_OBJECT_ADDRESS	src/common.h	996;"	d
OP_STORE_VALUE_TO_POINTER_ADDRESS	src/common.h	993;"	d
OP_STORE_VALUE_TO_SHORT_ADDRESS	src/common.h	987;"	d
OP_STORE_VALUE_TO_UBYTE_ADDRESS	src/common.h	986;"	d
OP_STORE_VALUE_TO_UINT_ADDRESS	src/common.h	984;"	d
OP_STORE_VALUE_TO_ULONG_ADDRESS	src/common.h	990;"	d
OP_STORE_VALUE_TO_USHORT_ADDRESS	src/common.h	988;"	d
OP_SXOR	src/common.h	793;"	d
OP_THROW	src/common.h	742;"	d
OP_TRY	src/common.h	743;"	d
OP_UBADD	src/common.h	774;"	d
OP_UBAND	src/common.h	781;"	d
OP_UBCOMPLEMENT	src/common.h	852;"	d
OP_UBDIV	src/common.h	777;"	d
OP_UBEQ	src/common.h	883;"	d
OP_UBGT	src/common.h	885;"	d
OP_UBGTEQ	src/common.h	887;"	d
OP_UBLE	src/common.h	886;"	d
OP_UBLEEQ	src/common.h	888;"	d
OP_UBLSHIFT	src/common.h	779;"	d
OP_UBMOD	src/common.h	778;"	d
OP_UBMULT	src/common.h	776;"	d
OP_UBNOTEQ	src/common.h	884;"	d
OP_UBOR	src/common.h	783;"	d
OP_UBRSHIFT	src/common.h	780;"	d
OP_UBSUB	src/common.h	775;"	d
OP_UBXOR	src/common.h	782;"	d
OP_UBYTE_TO_BYTE_CAST	src/common.h	1013;"	d
OP_UBYTE_TO_CBOOL_CAST	src/common.h	1484;"	d
OP_UBYTE_TO_CBYTE_CAST	src/common.h	1348;"	d
OP_UBYTE_TO_CCHAR_CAST	src/common.h	1470;"	d
OP_UBYTE_TO_CDOUBLE_CAST	src/common.h	1445;"	d
OP_UBYTE_TO_CFLOAT_CAST	src/common.h	1432;"	d
OP_UBYTE_TO_CHAR_CAST	src/common.h	1280;"	d
OP_UBYTE_TO_CLONG_CAST	src/common.h	1404;"	d
OP_UBYTE_TO_CPOINTER_CAST	src/common.h	1458;"	d
OP_UBYTE_TO_CSHORT_CAST	src/common.h	1376;"	d
OP_UBYTE_TO_CUBYTE_CAST	src/common.h	1362;"	d
OP_UBYTE_TO_CULONG_CAST	src/common.h	1418;"	d
OP_UBYTE_TO_CUSHORT_CAST	src/common.h	1390;"	d
OP_UBYTE_TO_DOUBLE_CAST	src/common.h	1246;"	d
OP_UBYTE_TO_FLOAT_CAST	src/common.h	1222;"	d
OP_UBYTE_TO_INTEGER_CAST	src/common.h	1320;"	d
OP_UBYTE_TO_INT_CAST	src/common.h	1066;"	d
OP_UBYTE_TO_LONG_CAST	src/common.h	1092;"	d
OP_UBYTE_TO_POINTER_CAST	src/common.h	1270;"	d
OP_UBYTE_TO_SHORT_CAST	src/common.h	1040;"	d
OP_UBYTE_TO_STRING_CAST	src/common.h	1309;"	d
OP_UBYTE_TO_UINTEGER_CAST	src/common.h	1334;"	d
OP_UBYTE_TO_UINT_CAST	src/common.h	1170;"	d
OP_UBYTE_TO_ULONG_CAST	src/common.h	1196;"	d
OP_UBYTE_TO_USHORT_CAST	src/common.h	1144;"	d
OP_UIADD	src/common.h	819;"	d
OP_UIAND	src/common.h	825;"	d
OP_UICOMPLEMENT	src/common.h	856;"	d
OP_UIDIV	src/common.h	821;"	d
OP_UIEQ	src/common.h	911;"	d
OP_UIGT	src/common.h	913;"	d
OP_UIGTEQ	src/common.h	915;"	d
OP_UILE	src/common.h	914;"	d
OP_UILEEQ	src/common.h	916;"	d
OP_UILSHIFT	src/common.h	823;"	d
OP_UIMOD	src/common.h	822;"	d
OP_UIMULT	src/common.h	820;"	d
OP_UINOTEQ	src/common.h	912;"	d
OP_UINTEGER_TO_BYTE_CAST	src/common.h	1030;"	d
OP_UINTEGER_TO_CHAR_CAST	src/common.h	1296;"	d
OP_UINTEGER_TO_DOUBLE_CAST	src/common.h	1261;"	d
OP_UINTEGER_TO_FLOAT_CAST	src/common.h	1237;"	d
OP_UINTEGER_TO_INT_CAST	src/common.h	1082;"	d
OP_UINTEGER_TO_LONG_CAST	src/common.h	1108;"	d
OP_UINTEGER_TO_SHORT_CAST	src/common.h	1056;"	d
OP_UINTEGER_TO_UBYTE_CAST	src/common.h	1134;"	d
OP_UINTEGER_TO_UINT_CAST	src/common.h	1186;"	d
OP_UINTEGER_TO_ULONG_CAST	src/common.h	1212;"	d
OP_UINTEGER_TO_USHORT_CAST	src/common.h	1160;"	d
OP_UINT_TO_BYTE_CAST	src/common.h	1017;"	d
OP_UINT_TO_CBOOL_CAST	src/common.h	1488;"	d
OP_UINT_TO_CBYTE_CAST	src/common.h	1352;"	d
OP_UINT_TO_CCHAR_CAST	src/common.h	1474;"	d
OP_UINT_TO_CDOUBLE_CAST	src/common.h	1449;"	d
OP_UINT_TO_CFLOAT_CAST	src/common.h	1436;"	d
OP_UINT_TO_CHAR_CAST	src/common.h	1284;"	d
OP_UINT_TO_CLONG_CAST	src/common.h	1408;"	d
OP_UINT_TO_CPOINTER_CAST	src/common.h	1462;"	d
OP_UINT_TO_CSHORT_CAST	src/common.h	1380;"	d
OP_UINT_TO_CUBYTE_CAST	src/common.h	1366;"	d
OP_UINT_TO_CULONG_CAST	src/common.h	1422;"	d
OP_UINT_TO_CUSHORT_CAST	src/common.h	1394;"	d
OP_UINT_TO_DOUBLE_CAST	src/common.h	1250;"	d
OP_UINT_TO_FLOAT_CAST	src/common.h	1226;"	d
OP_UINT_TO_INTEGER_CAST	src/common.h	1324;"	d
OP_UINT_TO_INT_CAST	src/common.h	1069;"	d
OP_UINT_TO_LONG_CAST	src/common.h	1096;"	d
OP_UINT_TO_POINTER_CAST	src/common.h	1274;"	d
OP_UINT_TO_SHORT_CAST	src/common.h	1043;"	d
OP_UINT_TO_STRING_CAST	src/common.h	1311;"	d
OP_UINT_TO_UBYTE_CAST	src/common.h	1121;"	d
OP_UINT_TO_UINTEGER_CAST	src/common.h	1338;"	d
OP_UINT_TO_ULONG_CAST	src/common.h	1200;"	d
OP_UINT_TO_USHORT_CAST	src/common.h	1147;"	d
OP_UIOR	src/common.h	827;"	d
OP_UIRSHIFT	src/common.h	824;"	d
OP_UISUB	src/common.h	818;"	d
OP_UIXOR	src/common.h	826;"	d
OP_ULADD	src/common.h	840;"	d
OP_ULAND	src/common.h	847;"	d
OP_ULCOMPLEMENT	src/common.h	858;"	d
OP_ULDIV	src/common.h	843;"	d
OP_ULEQ	src/common.h	925;"	d
OP_ULGT	src/common.h	927;"	d
OP_ULGTEQ	src/common.h	929;"	d
OP_ULLE	src/common.h	928;"	d
OP_ULLEEQ	src/common.h	930;"	d
OP_ULLSHIFT	src/common.h	845;"	d
OP_ULMOD	src/common.h	844;"	d
OP_ULMULT	src/common.h	842;"	d
OP_ULNOTEQ	src/common.h	926;"	d
OP_ULONG_TO_BYTE_CAST	src/common.h	1019;"	d
OP_ULONG_TO_CBOOL_CAST	src/common.h	1490;"	d
OP_ULONG_TO_CBYTE_CAST	src/common.h	1354;"	d
OP_ULONG_TO_CCHAR_CAST	src/common.h	1476;"	d
OP_ULONG_TO_CDOUBLE_CAST	src/common.h	1451;"	d
OP_ULONG_TO_CFLOAT_CAST	src/common.h	1438;"	d
OP_ULONG_TO_CHAR_CAST	src/common.h	1286;"	d
OP_ULONG_TO_CLONG_CAST	src/common.h	1410;"	d
OP_ULONG_TO_CPOINTER_CAST	src/common.h	1464;"	d
OP_ULONG_TO_CSHORT_CAST	src/common.h	1382;"	d
OP_ULONG_TO_CUBYTE_CAST	src/common.h	1368;"	d
OP_ULONG_TO_CULONG_CAST	src/common.h	1424;"	d
OP_ULONG_TO_CUSHORT_CAST	src/common.h	1396;"	d
OP_ULONG_TO_DOUBLE_CAST	src/common.h	1252;"	d
OP_ULONG_TO_FLOAT_CAST	src/common.h	1228;"	d
OP_ULONG_TO_INTEGER_CAST	src/common.h	1326;"	d
OP_ULONG_TO_INT_CAST	src/common.h	1071;"	d
OP_ULONG_TO_LONG_CAST	src/common.h	1097;"	d
OP_ULONG_TO_POINTER_CAST	src/common.h	1276;"	d
OP_ULONG_TO_SHORT_CAST	src/common.h	1045;"	d
OP_ULONG_TO_STRING_CAST	src/common.h	1312;"	d
OP_ULONG_TO_UBYTE_CAST	src/common.h	1123;"	d
OP_ULONG_TO_UINTEGER_CAST	src/common.h	1340;"	d
OP_ULONG_TO_UINT_CAST	src/common.h	1175;"	d
OP_ULONG_TO_USHORT_CAST	src/common.h	1149;"	d
OP_ULOR	src/common.h	849;"	d
OP_ULRSHIFT	src/common.h	846;"	d
OP_ULSUB	src/common.h	841;"	d
OP_ULXOR	src/common.h	848;"	d
OP_USADD	src/common.h	796;"	d
OP_USAND	src/common.h	803;"	d
OP_USCOMPLEMENT	src/common.h	854;"	d
OP_USDIV	src/common.h	799;"	d
OP_USEQ	src/common.h	897;"	d
OP_USGT	src/common.h	899;"	d
OP_USGTEQ	src/common.h	901;"	d
OP_USHORT_TO_BYTE_CAST	src/common.h	1015;"	d
OP_USHORT_TO_CBOOL_CAST	src/common.h	1486;"	d
OP_USHORT_TO_CBYTE_CAST	src/common.h	1350;"	d
OP_USHORT_TO_CCHAR_CAST	src/common.h	1472;"	d
OP_USHORT_TO_CDOUBLE_CAST	src/common.h	1447;"	d
OP_USHORT_TO_CFLOAT_CAST	src/common.h	1434;"	d
OP_USHORT_TO_CHAR_CAST	src/common.h	1282;"	d
OP_USHORT_TO_CLONG_CAST	src/common.h	1406;"	d
OP_USHORT_TO_CPOINTER_CAST	src/common.h	1460;"	d
OP_USHORT_TO_CSHORT_CAST	src/common.h	1378;"	d
OP_USHORT_TO_CUBYTE_CAST	src/common.h	1364;"	d
OP_USHORT_TO_CULONG_CAST	src/common.h	1420;"	d
OP_USHORT_TO_CUSHORT_CAST	src/common.h	1392;"	d
OP_USHORT_TO_DOUBLE_CAST	src/common.h	1248;"	d
OP_USHORT_TO_FLOAT_CAST	src/common.h	1224;"	d
OP_USHORT_TO_INTEGER_CAST	src/common.h	1322;"	d
OP_USHORT_TO_INT_CAST	src/common.h	1068;"	d
OP_USHORT_TO_LONG_CAST	src/common.h	1094;"	d
OP_USHORT_TO_POINTER_CAST	src/common.h	1272;"	d
OP_USHORT_TO_SHORT_CAST	src/common.h	1041;"	d
OP_USHORT_TO_STRING_CAST	src/common.h	1310;"	d
OP_USHORT_TO_UBYTE_CAST	src/common.h	1119;"	d
OP_USHORT_TO_UINTEGER_CAST	src/common.h	1336;"	d
OP_USHORT_TO_UINT_CAST	src/common.h	1172;"	d
OP_USHORT_TO_ULONG_CAST	src/common.h	1198;"	d
OP_USLE	src/common.h	900;"	d
OP_USLEEQ	src/common.h	902;"	d
OP_USLSHIFT	src/common.h	801;"	d
OP_USMOD	src/common.h	800;"	d
OP_USMULT	src/common.h	798;"	d
OP_USNOTEQ	src/common.h	898;"	d
OP_USOR	src/common.h	805;"	d
OP_USRSHIFT	src/common.h	802;"	d
OP_USSUB	src/common.h	797;"	d
OP_USXOR	src/common.h	804;"	d
OS	Makefile	/^OS=LINUX$/;"	m
PARAMS_MAX	src/common.h	46;"	d
PARSE_PHASE_ADD_GENERICS_TYPES	src/common.h	1543;"	d
PARSE_PHASE_ADD_METHODS_AND_FIELDS	src/common.h	1544;"	d
PARSE_PHASE_ADD_SUPER_CLASSES	src/common.h	1541;"	d
PARSE_PHASE_ALLOC_CLASSES	src/common.h	1540;"	d
PARSE_PHASE_CALCULATE_SUPER_CLASSES	src/common.h	1542;"	d
PARSE_PHASE_COMPILE_PARAM_INITIALIZER	src/common.h	1545;"	d
PARSE_PHASE_DO_COMPILE_CODE	src/common.h	1546;"	d
PARSE_PHASE_MAX	src/common.h	1547;"	d
SO_VERSION	Makefile	/^SO_VERSION=1.0.0$/;"	m
System_WCOREDUMP	src/class_system.c	/^BOOL System_WCOREDUMP(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_WEXITSTATUS	src/class_system.c	/^BOOL System_WEXITSTATUS(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_WIFCONTINUED	src/class_system.c	/^BOOL System_WIFCONTINUED(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_WIFEXITED	src/class_system.c	/^BOOL System_WIFEXITED(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_WIFSIGNALED	src/class_system.c	/^BOOL System_WIFSIGNALED(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_WIFSTOPPED	src/class_system.c	/^BOOL System_WIFSTOPPED(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_WSTOPSIG	src/class_system.c	/^BOOL System_WSTOPSIG(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_WTERMSIG	src/class_system.c	/^BOOL System_WTERMSIG(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_access	src/class_system.c	/^BOOL System_access(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_assert	src/class_system.c	/^BOOL System_assert(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_atof	src/class_system.c	/^BOOL System_atof(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_atoi	src/class_system.c	/^BOOL System_atoi(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_basename	src/class_system.c	/^BOOL System_basename(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_calloc	src/class_system.c	/^BOOL System_calloc(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_cfgetispeed	src/class_system.c	/^BOOL System_cfgetispeed(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_cfgetospeed	src/class_system.c	/^BOOL System_cfgetospeed(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_cfmakeraw	src/class_system.c	/^BOOL System_cfmakeraw(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_cfsetispeed	src/class_system.c	/^BOOL System_cfsetispeed(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_cfsetospeed	src/class_system.c	/^BOOL System_cfsetospeed(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_cfsetspeed	src/class_system.c	/^BOOL System_cfsetspeed(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_chdir	src/class_system.c	/^BOOL System_chdir(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_chmod	src/class_system.c	/^BOOL System_chmod(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_chown	src/class_system.c	/^BOOL System_chown(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_close	src/class_system.c	/^BOOL System_close(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_closedir	src/class_system.c	/^BOOL System_closedir(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_dirname	src/class_system.c	/^BOOL System_dirname(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_dup2	src/class_system.c	/^BOOL System_dup2(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_execvp	src/class_system.c	/^BOOL System_execvp(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_exit	src/class_system.c	/^BOOL System_exit(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_fchdir	src/class_system.c	/^BOOL System_fchdir(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_fchmod	src/class_system.c	/^BOOL System_fchmod(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_fchown	src/class_system.c	/^BOOL System_fchown(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_fnmatch	src/class_system.c	/^BOOL System_fnmatch(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_fork	src/class_system.c	/^BOOL System_fork(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_free	src/class_system.c	/^BOOL System_free(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_ftruncate	src/class_system.c	/^BOOL System_ftruncate(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_getpid	src/class_system.c	/^BOOL System_getpid(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_initialize	src/class_system.c	/^BOOL System_initialize(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_initialize_command_system	src/class_system.c	/^BOOL System_initialize_command_system(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_kill	src/class_system.c	/^BOOL System_kill(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_lchmod	src/class_system.c	/^BOOL System_lchmod(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_lchown	src/class_system.c	/^BOOL System_lchown(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_link	src/class_system.c	/^BOOL System_link(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_localtime	src/class_system.c	/^BOOL System_localtime(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_lstat	src/class_system.c	/^BOOL System_lstat(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_malloc	src/class_system.c	/^BOOL System_malloc(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_mbstowcs	src/class_system.c	/^BOOL System_mbstowcs(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_memcmp	src/class_system.c	/^BOOL System_memcmp(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_memcpy	src/class_system.c	/^BOOL System_memcpy(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_mkdir	src/class_system.c	/^BOOL System_mkdir(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_mktime	src/class_system.c	/^BOOL System_mktime(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_open	src/class_system.c	/^BOOL System_open(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_opendir	src/class_system.c	/^BOOL System_opendir(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_pcre_exec	src/class_system.c	/^BOOL System_pcre_exec(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_pipe	src/class_system.c	/^BOOL System_pipe(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_print	src/class_system.c	/^BOOL System_print(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_printToError	src/class_system.c	/^BOOL System_printToError(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_println	src/class_system.c	/^BOOL System_println(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_printlnToError	src/class_system.c	/^BOOL System_printlnToError(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_rand	src/class_system.c	/^BOOL System_rand(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_read	src/class_system.c	/^BOOL System_read(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_readdir	src/class_system.c	/^BOOL System_readdir(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_readlink	src/class_system.c	/^BOOL System_readlink(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_realloc	src/class_system.c	/^BOOL System_realloc(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_realpath	src/class_system.c	/^BOOL System_realpath(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_rename	src/class_system.c	/^BOOL System_rename(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_rmdir	src/class_system.c	/^BOOL System_rmdir(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_setpgid	src/class_system.c	/^BOOL System_setpgid(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_sleep	src/class_system.c	/^BOOL System_sleep(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_sprintf	src/class_system.c	/^BOOL System_sprintf(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_srand	src/class_system.c	/^BOOL System_srand(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_stat	src/class_system.c	/^BOOL System_stat(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_strcasecmp	src/class_system.c	/^BOOL System_strcasecmp(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_strcmp	src/class_system.c	/^BOOL System_strcmp(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_strcpy	src/class_system.c	/^BOOL System_strcpy(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_strdup	src/class_system.c	/^BOOL System_strdup(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_strlen	src/class_system.c	/^BOOL System_strlen(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_strlen2	src/class_system.c	/^BOOL System_strlen2(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_strncpy	src/class_system.c	/^BOOL System_strncpy(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_strtod	src/class_system.c	/^BOOL System_strtod(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_strtol	src/class_system.c	/^BOOL System_strtol(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_strtoul	src/class_system.c	/^BOOL System_strtoul(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_symlink	src/class_system.c	/^BOOL System_symlink(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_tcdrain	src/class_system.c	/^BOOL System_tcdrain(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_tcflow	src/class_system.c	/^BOOL System_tcflow(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_tcflush	src/class_system.c	/^BOOL System_tcflush(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_tcgetattr	src/class_system.c	/^BOOL System_tcgetattr(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_tcsendbreak	src/class_system.c	/^BOOL System_tcsendbreak(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_tcsetattr	src/class_system.c	/^BOOL System_tcsetattr(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_tcsetpgrp	src/class_system.c	/^BOOL System_tcsetpgrp(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_time	src/class_system.c	/^BOOL System_time(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_truncate	src/class_system.c	/^BOOL System_truncate(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_unlink	src/class_system.c	/^BOOL System_unlink(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_utime	src/class_system.c	/^BOOL System_utime(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_waitpid	src/class_system.c	/^BOOL System_waitpid(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_wcstombs	src/class_system.c	/^BOOL System_wcstombs(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
System_write	src/class_system.c	/^BOOL System_write(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info)$/;"	f
TRUE	src/macros.h	9;"	d
TUPLE_VALUE_ELEMENT_MAX	src/common.h	55;"	d
TYPEDEF_MAX	src/common.h	57;"	d
VAR_NAME_MAX	src/common.h	42;"	d
XFUNC_H	src/xfunc.h	2;"	d
_GNU_SOURCE	src/common.h	4;"	d
_USE_MISC	src/common.h	22;"	d
__64BIT_CPU__	config.h	12;"	d
__LINUX__	config.h	10;"	d
__USE_BSD	src/common.h	25;"	d
__USE_XOPEN	src/common.h	19;"	d
_t_malloc_entry	src/debug.c	/^struct _t_malloc_entry$/;"	s	file:
ac_fn_c_check_header_compile	configure	/^ac_fn_c_check_header_compile ()$/;"	f
ac_fn_c_check_header_mongrel	configure	/^ac_fn_c_check_header_mongrel ()$/;"	f
ac_fn_c_try_compile	configure	/^ac_fn_c_try_compile ()$/;"	f
ac_fn_c_try_cpp	configure	/^ac_fn_c_try_cpp ()$/;"	f
ac_fn_c_try_link	configure	/^ac_fn_c_try_link ()$/;"	f
ac_fn_c_try_run	configure	/^ac_fn_c_try_run ()$/;"	f
add_class_field_to_class	src/klass_compile_time.c	/^BOOL add_class_field_to_class(sCLClass* klass, char* name, BOOL private_, BOOL protected_, sNodeType* result_type)$/;"	f
add_code_to_method	src/klass_compile_time.c	/^void add_code_to_method(sCLMethod* method, sByteCode* code, int var_num)$/;"	f
add_field_to_class	src/klass_compile_time.c	/^BOOL add_field_to_class(sCLClass* klass, char* name, BOOL private_, BOOL protected_, sNodeType* result_type)$/;"	f
add_method_to_class	src/klass_compile_time.c	/^BOOL add_method_to_class(sCLClass* klass, char* method_name, sParserParam* params, int num_params, sNodeType* result_type, BOOL native_, BOOL static_)$/;"	f
add_typedef_to_class	src/klass_compile_time.c	/^BOOL add_typedef_to_class(sCLClass* klass, char* class_name1, char* class_name2)$/;"	f
add_variable_to_table	src/vtable.c	/^BOOL add_variable_to_table(sVarTable* table, char* name, sNodeType* type_)$/;"	f
alignment	src/alignment.c	/^void alignment(unsigned int* size)$/;"	f
alloc_class	src/klass.c	/^sCLClass* alloc_class(char* class_name, BOOL primitive_, int generics_param_class_num, int generics_number, sCLClass** type_of_generics_params, BOOL interface, BOOL dynamic_class)$/;"	f
alloc_heap_mem	src/heap.c	/^CLObject alloc_heap_mem(int size, sCLClass* klass, int array_num)$/;"	f
alloc_node	src/node.c	/^static unsigned int alloc_node()$/;"	f	file:
alloc_node_block_type	src/node_block_type.c	/^sNodeBlockType* alloc_node_block_type()$/;"	f
alloc_node_type	src/node_type.c	/^sNodeType* alloc_node_type()$/;"	f
append_buffer_to_constant_pool_and_code	src/constant.c	/^void append_buffer_to_constant_pool_and_code(sConst* constant, sByteCode* code, char* buf, int size, BOOL no_output)$/;"	f
append_byte_codes_to_buffer	src/klass_compile_time.c	/^static void append_byte_codes_to_buffer(sBuf* buf, sByteCode* code)$/;"	f	file:
append_character_to_module	src/module.c	/^void append_character_to_module(sCLModule* self, char c)$/;"	f
append_cl_block_type	src/klass_compile_time.c	/^static void append_cl_block_type(sBuf* buf, sCLBlockType* cl_block_type)$/;"	f	file:
append_cl_type_to_buffer	src/klass_compile_time.c	/^static void append_cl_type_to_buffer(sBuf* buf, sCLType* cl_type)$/;"	f	file:
append_const_to_buffer	src/klass_compile_time.c	/^static void append_const_to_buffer(sBuf* buf, sConst* constant, sCLClass* klass)$/;"	f	file:
append_double_value_to_code	src/code.c	/^void append_double_value_to_code(sByteCode* code, double value, BOOL no_output)$/;"	f
append_double_value_to_constant_pool	src/constant.c	/^int append_double_value_to_constant_pool(sConst* constant, double n, BOOL no_output)$/;"	f
append_fields_to_buffer	src/klass_compile_time.c	/^static void append_fields_to_buffer(sBuf* buf, sCLField* fields, int num_fields)$/;"	f	file:
append_float_value_to_code	src/code.c	/^void append_float_value_to_code(sByteCode* code, float value, BOOL no_output)$/;"	f
append_float_value_to_constant_pool	src/constant.c	/^int append_float_value_to_constant_pool(sConst* constant, float n, BOOL no_output)$/;"	f
append_int_value_to_code	src/code.c	/^void append_int_value_to_code(sByteCode* code, int value, BOOL no_output)$/;"	f
append_int_value_to_constant_pool	src/constant.c	/^int append_int_value_to_constant_pool(sConst* constant, int n, BOOL no_output)$/;"	f
append_long_value_to_code	src/code.c	/^void append_long_value_to_code(sByteCode* code, long value, BOOL no_output)$/;"	f
append_methods_to_buffer	src/klass_compile_time.c	/^static void append_methods_to_buffer(sBuf* buf, sCLMethod* methods, sCLClass* klass, int num_methods)$/;"	f	file:
append_module_to_table	src/module.c	/^static BOOL append_module_to_table(char* name, sCLModule* module)$/;"	f	file:
append_node_to_node_block	src/node_block.c	/^static void append_node_to_node_block(sNodeBlock* node_block, unsigned int node)$/;"	f	file:
append_opecode_to_code	src/code.c	/^void append_opecode_to_code(sByteCode* code, unsigned int op, BOOL no_output)$/;"	f
append_stack_to_stack_list	src/stack.c	/^long append_stack_to_stack_list(CLVALUE* stack_mem, CLVALUE** stack_ptr)$/;"	f
append_str_to_constant_pool	src/constant.c	/^int append_str_to_constant_pool(sConst* constant, char* str, BOOL no_output)$/;"	f
append_str_to_constant_pool_and_code	src/constant.c	/^void append_str_to_constant_pool_and_code(sConst* constant, sByteCode* code, char* str, BOOL no_output)$/;"	f
append_str_to_module	src/module.c	/^void append_str_to_module(sCLModule* self, char* str)$/;"	f
append_value_to_code	src/code.c	/^void append_value_to_code(sByteCode* code, void* data, size_t size, BOOL no_output)$/;"	f
append_wstr_to_constant_pool	src/constant.c	/^int append_wstr_to_constant_pool(sConst* constant, char* str, BOOL no_output)$/;"	f
arrange_alignment	src/code.c	/^static void arrange_alignment(sByteCode* code)$/;"	f	file:
arrange_alignment	src/constant.c	/^static void arrange_alignment(sConst* self)$/;"	f	file:
arrange_stack	src/node.c	/^void arrange_stack(sCompileInfo* cinfo)$/;"	f
array_mark_fun	src/array.c	/^void array_mark_fun(CLObject self, unsigned char* mark_flg)$/;"	f
as_fn_append	config.status	/^  as_fn_append ()$/;"	f
as_fn_append	configure	/^  as_fn_append ()$/;"	f
as_fn_arith	config.status	/^  as_fn_arith ()$/;"	f
as_fn_arith	configure	/^  as_fn_arith ()$/;"	f
as_fn_error	config.status	/^as_fn_error ()$/;"	f
as_fn_error	configure	/^as_fn_error ()$/;"	f
as_fn_executable_p	config.status	/^as_fn_executable_p ()$/;"	f
as_fn_executable_p	configure	/^as_fn_executable_p ()$/;"	f
as_fn_exit	config.status	/^as_fn_exit ()$/;"	f
as_fn_exit	configure	/^as_fn_exit ()$/;"	f
as_fn_failure	configure	/^as_fn_failure () { as_fn_return 1; }$/;"	f
as_fn_mkdir_p	config.status	/^as_fn_mkdir_p ()$/;"	f
as_fn_mkdir_p	configure	/^as_fn_mkdir_p ()$/;"	f
as_fn_ret_failure	configure	/^as_fn_ret_failure () { return 1; }$/;"	f
as_fn_ret_success	configure	/^as_fn_ret_success () { return 0; }$/;"	f
as_fn_set_status	config.status	/^as_fn_set_status ()$/;"	f
as_fn_set_status	configure	/^as_fn_set_status ()$/;"	f
as_fn_success	configure	/^as_fn_success () { as_fn_return 0; }$/;"	f
as_fn_unset	config.status	/^as_fn_unset ()$/;"	f
as_fn_unset	configure	/^as_fn_unset ()$/;"	f
assign_operator	src/parser.c	/^static BOOL assign_operator(unsigned int* node, sParserInfo* info)$/;"	f	file:
binary_operator	src/node.c	/^static BOOL binary_operator(sNodeType* left_type, sNodeType* right_type, int byte_operand, int ubyte_operand, int short_operand, int ushort_operand, int int_operand, int uint_operand, int long_operand, int ulong_operand, int float_operand, int double_operand, int pointer_operand, int null_operand, int char_operand, int bool_operand, char* op_string, sCompileInfo* info)$/;"	f	file:
binary_operator_for_bool	src/node.c	/^static BOOL binary_operator_for_bool(sNodeType* type, int bool_operand, sCompileInfo* info)$/;"	f	file:
bindir	Makefile	/^bindir=${exec_prefix}\/bin$/;"	m
block_result_type	src/common.h	/^    sNodeType* block_result_type;$/;"	m	struct:sCompileInfoStruct
boxing_posibility	src/node_type.c	/^BOOL boxing_posibility(sNodeType* left_type, sNodeType* right_type)$/;"	f
boxing_primitive_value_to_object	src/vm.c	/^void boxing_primitive_value_to_object(CLVALUE object, CLVALUE* result, sCLClass* klass)$/;"	f
boxing_to_lapper_class	src/node_type.c	/^void boxing_to_lapper_class(sNodeType** type_, struct sCompileInfoStruct* info)$/;"	f
break_points	src/common.h	/^    int* break_points;$/;"	m	struct:sCompileInfoStruct
c_termios_to_clover_termios	src/clover_to_clang.c	/^void c_termios_to_clover_termios(struct termios* terminfo_value, CLObject terminfo_object)$/;"	f
call_finalize_method_on_free_object	src/vm.c	/^BOOL call_finalize_method_on_free_object(sCLClass* klass, CLObject self)$/;"	f
call_normal_method	src/node.c	/^static BOOL call_normal_method(unsigned int node, sCompileInfo* info, sNodeType* object_type, sNodeType* generics_types, sCLClass* klass, sNodeType* param_types[PARAMS_MAX], int num_params, char* method_name, unsigned int params[PARAMS_MAX])$/;"	f	file:
cast_right_type_to_Array	src/cast.c	/^void cast_right_type_to_Array(sNodeType** right_type, sCompileInfo* info)$/;"	f
cast_right_type_to_Bool	src/cast.c	/^void cast_right_type_to_Bool(sNodeType** right_type, sCompileInfo* info)$/;"	f
cast_right_type_to_Byte	src/cast.c	/^void cast_right_type_to_Byte(sNodeType** right_type, sCompileInfo* info)$/;"	f
cast_right_type_to_Char	src/cast.c	/^void cast_right_type_to_Char(sNodeType** right_type, sCompileInfo* info)$/;"	f
cast_right_type_to_Double	src/cast.c	/^void cast_right_type_to_Double(sNodeType** right_type, sCompileInfo* info)$/;"	f
cast_right_type_to_Float	src/cast.c	/^void cast_right_type_to_Float(sNodeType** right_type, sCompileInfo* info)$/;"	f
cast_right_type_to_Integer	src/cast.c	/^void cast_right_type_to_Integer(sNodeType** right_type, sCompileInfo* info)$/;"	f
cast_right_type_to_Long	src/cast.c	/^void cast_right_type_to_Long(sNodeType** right_type, sCompileInfo* info)$/;"	f
cast_right_type_to_Pointer	src/cast.c	/^void cast_right_type_to_Pointer(sNodeType** right_type, sCompileInfo* info)$/;"	f
cast_right_type_to_Short	src/cast.c	/^void cast_right_type_to_Short(sNodeType** right_type, sCompileInfo* info)$/;"	f
cast_right_type_to_String	src/cast.c	/^void cast_right_type_to_String(sNodeType** right_type, sCompileInfo* info)$/;"	f
cast_right_type_to_UByte	src/cast.c	/^void cast_right_type_to_UByte(sNodeType** right_type, sCompileInfo* info)$/;"	f
cast_right_type_to_UInteger	src/cast.c	/^void cast_right_type_to_UInteger(sNodeType** right_type, sCompileInfo* info)$/;"	f
cast_right_type_to_ULong	src/cast.c	/^void cast_right_type_to_ULong(sNodeType** right_type, sCompileInfo* info)$/;"	f
cast_right_type_to_UShort	src/cast.c	/^void cast_right_type_to_UShort(sNodeType** right_type, sCompileInfo* info)$/;"	f
cast_right_type_to_bool	src/cast.c	/^void cast_right_type_to_bool(sNodeType** right_type, sCompileInfo* info)$/;"	f
cast_right_type_to_byte	src/cast.c	/^void cast_right_type_to_byte(sNodeType** right_type, sCompileInfo* info)$/;"	f
cast_right_type_to_char	src/cast.c	/^void cast_right_type_to_char(sNodeType** right_type, sCompileInfo* info)$/;"	f
cast_right_type_to_double	src/cast.c	/^void cast_right_type_to_double(sNodeType** right_type, sCompileInfo* info)$/;"	f
cast_right_type_to_float	src/cast.c	/^void cast_right_type_to_float(sNodeType** right_type, sCompileInfo* info)$/;"	f
cast_right_type_to_int	src/cast.c	/^void cast_right_type_to_int(sNodeType** right_type, sCompileInfo* info)$/;"	f
cast_right_type_to_left_type	src/cast.c	/^void cast_right_type_to_left_type(sNodeType* left_type, sNodeType** right_type, sCompileInfo* info)$/;"	f
cast_right_type_to_long	src/cast.c	/^void cast_right_type_to_long(sNodeType** right_type, sCompileInfo* info)$/;"	f
cast_right_type_to_pointer	src/cast.c	/^void cast_right_type_to_pointer(sNodeType** right_type, sCompileInfo* info)$/;"	f
cast_right_type_to_short	src/cast.c	/^void cast_right_type_to_short(sNodeType** right_type, sCompileInfo* info)$/;"	f
cast_right_type_to_ubyte	src/cast.c	/^void cast_right_type_to_ubyte(sNodeType** right_type, sCompileInfo* info)$/;"	f
cast_right_type_to_uint	src/cast.c	/^void cast_right_type_to_uint(sNodeType** right_type, sCompileInfo* info)$/;"	f
cast_right_type_to_ulong	src/cast.c	/^void cast_right_type_to_ulong(sNodeType** right_type, sCompileInfo* info)$/;"	f
cast_right_type_to_ushort	src/cast.c	/^void cast_right_type_to_ushort(sNodeType** right_type, sCompileInfo* info)$/;"	f
check_already_added_variable	src/vtable.c	/^void check_already_added_variable(sVarTable* table, char* name, struct sParserInfoStruct* info)$/;"	f
check_implemented_methods_for_interface	src/klass_compile_time.c	/^BOOL check_implemented_methods_for_interface(sCLClass* left_class, sCLClass* right_class)$/;"	f
check_implemented_methods_for_interface_on_runtime	src/object.c	/^static BOOL check_implemented_methods_for_interface_on_runtime(sCLClass* left_class, sCLClass* right_class)$/;"	f	file:
check_method_params	src/klass_compile_time.c	/^static BOOL check_method_params(sCLMethod* method, sCLClass* klass, char* method_name, sNodeType** param_types, int num_params, BOOL search_for_class_method, sNodeType* left_generics_type, sNodeType* right_generics_type)$/;"	f	file:
check_node_is_variable	src/node.c	/^BOOL check_node_is_variable(unsigned int node)$/;"	f
check_same_interface_of_two_methods	src/klass_compile_time.c	/^static BOOL check_same_interface_of_two_methods(sCLMethod* method1, sCLClass* klass1, sCLMethod* method2, sCLClass* klass2)$/;"	f	file:
check_same_interface_of_two_methods	src/object.c	/^static BOOL check_same_interface_of_two_methods(sCLMethod* method1, sCLClass* klass1, sCLMethod* method2, sCLClass* klass2)$/;"	f	file:
check_variables_existance_on_stack	src/stack.c	/^BOOL check_variables_existance_on_stack(long stack_id)$/;"	f
cinfo	src/common.h	/^    struct sCompileInfoStruct* cinfo;$/;"	m	struct:sParserInfoStruct	typeref:struct:sParserInfoStruct::sCompileInfoStruct
class_compiler	src/compiler.c	/^static BOOL class_compiler(char* fname)$/;"	f	file:
class_final	src/klass.c	/^void class_final()$/;"	f
class_final_on_runtime	src/vm.c	/^void class_final_on_runtime()$/;"	f
class_identify_with_class_name	src/node_type.c	/^BOOL class_identify_with_class_name(sCLClass* klass, char* class_name)$/;"	f
class_init	src/klass.c	/^void class_init()$/;"	f
class_init_on_compile_time	src/klass.c	/^void class_init_on_compile_time()$/;"	f
class_init_on_runtime	src/vm.c	/^BOOL class_init_on_runtime()$/;"	f
clone_node	src/node.c	/^unsigned int clone_node(unsigned int node)$/;"	f
clone_node_block_type	src/node_block_type.c	/^sNodeBlockType* clone_node_block_type(sNodeBlockType* block)$/;"	f
clone_node_type	src/node_type.c	/^sNodeType* clone_node_type(sNodeType* node_type)$/;"	f
clover2_final	src/main.c	/^static void clover2_final()$/;"	f	file:
clover2_init	src/main.c	/^static void clover2_init()$/;"	f	file:
clover_termios_to_c_termios	src/clover_to_clang.c	/^void clover_termios_to_c_termios(CLObject terminfo_object, struct termios* terminfo_value)$/;"	f
code	src/common.h	/^    sByteCode* code;$/;"	m	struct:sCompileInfoStruct
compaction	src/heap.c	/^static void compaction(unsigned char* mark_flg)$/;"	f	file:
compile	src/node.c	/^BOOL compile(unsigned int node, sCompileInfo* info)$/;"	f
compile_and_and	src/node.c	/^static BOOL compile_and_and(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_array_value	src/node.c	/^BOOL compile_array_value(unsigned int node, sCompileInfo* info)$/;"	f
compile_block	src/node_block.c	/^BOOL compile_block(sNodeBlock* block, sCompileInfo* info)$/;"	f
compile_block_call	src/node.c	/^BOOL compile_block_call(unsigned int node, sCompileInfo* info)$/;"	f
compile_block_object	src/node.c	/^BOOL compile_block_object(unsigned int node, sCompileInfo* info)$/;"	f
compile_break_expression	src/node.c	/^static BOOL compile_break_expression(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_buffer_value	src/node.c	/^BOOL compile_buffer_value(unsigned int node, sCompileInfo* info)$/;"	f
compile_byte_value	src/node.c	/^static BOOL compile_byte_value(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_carray_value	src/node.c	/^static BOOL compile_carray_value(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_char_value	src/node.c	/^BOOL compile_char_value(unsigned int node, sCompileInfo* info)$/;"	f
compile_class_method_call	src/node.c	/^static BOOL compile_class_method_call(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_class_source	src/class_compiler.c	/^BOOL compile_class_source(char* fname, char* source)$/;"	f
compile_conditional_operator	src/node.c	/^static BOOL compile_conditional_operator(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_decrement_operand	src/node.c	/^BOOL compile_decrement_operand(unsigned int node, sCompileInfo* info)$/;"	f
compile_decrement_operand_with_value	src/node.c	/^BOOL compile_decrement_operand_with_value(unsigned int node, sCompileInfo* info)$/;"	f
compile_double_value	src/node.c	/^static BOOL compile_double_value(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_equalable_carray_value	src/node.c	/^static BOOL compile_equalable_carray_value(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_equalable_list_value	src/node.c	/^BOOL compile_equalable_list_value(unsigned int node, sCompileInfo* info)$/;"	f
compile_false_expression	src/node.c	/^static BOOL compile_false_expression(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_float_value	src/node.c	/^static BOOL compile_float_value(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_for_expression	src/node.c	/^static BOOL compile_for_expression(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_get_address	src/node.c	/^BOOL compile_get_address(unsigned int node, sCompileInfo* info)$/;"	f
compile_hash_value	src/node.c	/^BOOL compile_hash_value(unsigned int node, sCompileInfo* info)$/;"	f
compile_if_expression	src/node.c	/^static BOOL compile_if_expression(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_implements	src/node.c	/^static BOOL compile_implements(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_increment_operand	src/node.c	/^BOOL compile_increment_operand(unsigned int node, sCompileInfo* info) $/;"	f
compile_increment_operand_with_value	src/node.c	/^BOOL compile_increment_operand_with_value(unsigned int node, sCompileInfo* info) $/;"	f
compile_inherit_call	src/node.c	/^static BOOL compile_inherit_call(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_int_value	src/node.c	/^static BOOL compile_int_value(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_list_value	src/node.c	/^BOOL compile_list_value(unsigned int node, sCompileInfo* info)$/;"	f
compile_load_array_element	src/node.c	/^BOOL compile_load_array_element(unsigned int node, sCompileInfo* info)$/;"	f
compile_load_class_field	src/node.c	/^static BOOL compile_load_class_field(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_load_field	src/node.c	/^static BOOL compile_load_field(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_load_value_from_pointer	src/node.c	/^BOOL compile_load_value_from_pointer(unsigned int node, sCompileInfo* info)$/;"	f
compile_load_variable	src/node.c	/^static BOOL compile_load_variable(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_long_value	src/node.c	/^static BOOL compile_long_value(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_method	src/method_compiler.c	/^BOOL compile_method(sCLMethod* method, sParserParam* params, int num_params, sParserInfo* info, sCompileInfo* cinfo)$/;"	f
compile_method_call	src/node.c	/^static BOOL compile_method_call(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_monadic_decrement_operand	src/node.c	/^static BOOL compile_monadic_decrement_operand(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_monadic_increment_operand	src/node.c	/^static BOOL compile_monadic_increment_operand(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_new_operator	src/node.c	/^static BOOL compile_new_operator(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_normal_block	src/node.c	/^static BOOL compile_normal_block(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_null_expression	src/node.c	/^static BOOL compile_null_expression(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_operand	src/node.c	/^static BOOL compile_operand(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_or_or	src/node.c	/^static BOOL compile_or_or(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_params	src/node.c	/^static BOOL compile_params(sCLClass* klass, char* method_name, int num_params, unsigned int params[PARAMS_MAX], sNodeType* param_types[PARAMS_MAX], sNodeType* generics_types, sCompileInfo* info)$/;"	f	file:
compile_path_value	src/node.c	/^BOOL compile_path_value(unsigned int node, sCompileInfo* info)$/;"	f
compile_regex	src/node.c	/^static BOOL compile_regex(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_return_expression	src/node.c	/^static BOOL compile_return_expression(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_script	src/script.c	/^BOOL compile_script(char* fname, char* source)$/;"	f
compile_short_value	src/node.c	/^static BOOL compile_short_value(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_sortable_carray_value	src/node.c	/^static BOOL compile_sortable_carray_value(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_sortable_list_value	src/node.c	/^BOOL compile_sortable_list_value(unsigned int node, sCompileInfo* info)$/;"	f
compile_store_array_element	src/node.c	/^BOOL compile_store_array_element(unsigned int node, sCompileInfo* info)$/;"	f
compile_store_class_field	src/node.c	/^static BOOL compile_store_class_field(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_store_field	src/node.c	/^static BOOL compile_store_field(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_store_value_to_pointer	src/node.c	/^BOOL compile_store_value_to_pointer(unsigned int node, sCompileInfo* info)$/;"	f
compile_store_variable	src/node.c	/^static BOOL compile_store_variable(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_string_value	src/node.c	/^BOOL compile_string_value(unsigned int node, sCompileInfo* info)$/;"	f
compile_throw_expression	src/node.c	/^static BOOL compile_throw_expression(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_true_expression	src/node.c	/^static BOOL compile_true_expression(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_try_expression	src/node.c	/^static BOOL compile_try_expression(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_tuple_value	src/node.c	/^static BOOL compile_tuple_value(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_ubyte_value	src/node.c	/^static BOOL compile_ubyte_value(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_uint_value	src/node.c	/^static BOOL compile_uint_value(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_ulong_value	src/node.c	/^static BOOL compile_ulong_value(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_ushort_value	src/node.c	/^static BOOL compile_ushort_value(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_while_expression	src/node.c	/^static BOOL compile_while_expression(unsigned int node, sCompileInfo* info)$/;"	f	file:
compiler	src/compiler.c	/^static BOOL compiler(char* fname)$/;"	f	file:
compiler_final	src/compiler.c	/^static void compiler_final()$/;"	f	file:
compiler_init	src/compiler.c	/^static void compiler_init(BOOL no_load_fudamental_classes)$/;"	f	file:
constant	src/common.h	/^    sConst* constant;$/;"	m	struct:sCompileInfoStruct
create_array_object	src/array.c	/^CLObject create_array_object(sCLClass* klass, int array_num)$/;"	f
create_block_object	src/block.c	/^CLObject create_block_object(sByteCode* codes, sConst* constant, CLVALUE* parent_stack, int parent_var_num, int block_var_num, long stack_id, BOOL lambda)$/;"	f
create_bool	src/bool.c	/^CLObject create_bool(BOOL value)$/;"	f
create_buffer_object	src/string.c	/^CLObject create_buffer_object(char* buffer, size_t size)$/;"	f
create_byte	src/byte.c	/^CLObject create_byte(char value)$/;"	f
create_carray_object	src/carray.c	/^CLObject create_carray_object()$/;"	f
create_carray_object_with_elements	src/carray.c	/^CLObject create_carray_object_with_elements(int num_elements, CLObject* elements)$/;"	f
create_char	src/char.c	/^CLObject create_char(wchar_t value)$/;"	f
create_cl_type	src/klass.c	/^ALLOC sCLType* create_cl_type(sCLClass* klass, sCLClass* klass2)$/;"	f
create_double	src/float.c	/^CLObject create_double(double value)$/;"	f
create_equalable_carray_object	src/carray.c	/^CLObject create_equalable_carray_object()$/;"	f
create_equalable_carray_object_with_elements	src/carray.c	/^CLObject create_equalable_carray_object_with_elements(int num_elements, CLObject* elements)$/;"	f
create_equalable_list_object	src/list.c	/^CLObject create_equalable_list_object()$/;"	f
create_float	src/float.c	/^CLObject create_float(float value)$/;"	f
create_generics_types_from_generics_params	src/node_type.c	/^sNodeType* create_generics_types_from_generics_params(sCLClass* klass)$/;"	f
create_global_stack_and_append_it_to_stack_list	src/stack.c	/^static void create_global_stack_and_append_it_to_stack_list()$/;"	f	file:
create_hash_object	src/hash.c	/^CLObject create_hash_object()$/;"	f
create_integer	src/integer.c	/^CLObject create_integer(int value)$/;"	f
create_list_object	src/list.c	/^CLObject create_list_object()$/;"	f
create_long	src/long.c	/^CLObject create_long(long value)$/;"	f
create_method_name_and_params	src/klass_compile_time.c	/^void create_method_name_and_params(char* result, int size_result, sCLClass* klass, char* method_name, sNodeType* param_types[PARAMS_MAX], int num_params)$/;"	f
create_method_path	src/klass_compile_time.c	/^static void create_method_path(char* result, int result_size, sCLMethod* method, sCLClass* klass)$/;"	f	file:
create_module	src/module.c	/^sCLModule* create_module(char* module_name)$/;"	f
create_node_type_from_cl_type	src/node_type.c	/^sNodeType* create_node_type_from_cl_type(sCLType* cl_type, sCLClass* klass)$/;"	f
create_node_type_with_class_name	src/node_type.c	/^sNodeType* create_node_type_with_class_name(char* class_name)$/;"	f
create_node_type_with_class_pointer	src/node_type.c	/^sNodeType* create_node_type_with_class_pointer(sCLClass* klass)$/;"	f
create_node_type_with_generics_number	src/node_type.c	/^sNodeType* create_node_type_with_generics_number(int generics_num)$/;"	f
create_object	src/object.c	/^CLObject create_object(sCLClass* klass)$/;"	f
create_path_object	src/string.c	/^CLObject create_path_object(char* path)$/;"	f
create_pointer	src/pointer.c	/^CLObject create_pointer(char* value)$/;"	f
create_regex_object	src/regex.c	/^CLObject create_regex_object(char* regex, BOOL global, BOOL ignore_case, BOOL multiline, BOOL extended, BOOL dotall, BOOL anchored, BOOL dollar_endonly, BOOL ungreedy)$/;"	f
create_short	src/short.c	/^CLObject create_short(short value)$/;"	f
create_sortable_carray_object	src/carray.c	/^CLObject create_sortable_carray_object()$/;"	f
create_sortable_carray_object_with_elements	src/carray.c	/^CLObject create_sortable_carray_object_with_elements(int num_elements, CLObject* elements)$/;"	f
create_sortable_list_object	src/list.c	/^CLObject create_sortable_list_object()$/;"	f
create_string_object	src/string.c	/^CLObject create_string_object(char* str)$/;"	f
create_tuple_object	src/tuple.c	/^CLObject create_tuple_object(int num_elements)$/;"	f
create_ubyte	src/byte.c	/^CLObject create_ubyte(unsigned char value)$/;"	f
create_uinteger	src/integer.c	/^CLObject create_uinteger(unsigned int value)$/;"	f
create_ulong	src/long.c	/^CLObject create_ulong(unsigned long value)$/;"	f
create_ushort	src/short.c	/^CLObject create_ushort(unsigned short value)$/;"	f
create_virtual_method_table	src/klass.c	/^static BOOL create_virtual_method_table(sCLClass* klass)$/;"	f	file:
current_stack	src/common.h	/^    CLVALUE* current_stack;$/;"	m	struct:sVMInfoStruct
current_var_num	src/common.h	/^    int current_var_num;$/;"	m	struct:sVMInfoStruct
datadir	Makefile	/^datadir=${datarootdir}$/;"	m
datarootdir	Makefile	/^datarootdir=${prefix}\/share\/clover2$/;"	m
debug_calloc	src/debug.c	/^ALLOC void* debug_calloc(size_t count, size_t size, const char* file_name, int line, const char* func_name)$/;"	f
debug_final	src/debug.c	/^void debug_final()$/;"	f
debug_free	src/debug.c	/^void debug_free(void* memory, const char* file_name, int line, const char* func_name)$/;"	f
debug_init	src/debug.c	/^void debug_init()$/;"	f
debug_malloc	src/debug.c	/^ALLOC void* debug_malloc(size_t size, const char* file_name, int line, const char* func_name)$/;"	f
debug_realloc	src/debug.c	/^ALLOC void* debug_realloc(void* memory, size_t size, const char* file_name, int line, const char* func_name)$/;"	f
debug_strdup	src/debug.c	/^ALLOC char* debug_strdup(char* str, const char* file_name, int line, const char* func_name)$/;"	f
decrement_operand_core	src/node.c	/^static void decrement_operand_core(unsigned int node, sCompileInfo* info, unsigned int lnode, int add_operand, int sub_operand, int ldc_operand, BOOL monadic, BOOL with_value)$/;"	f	file:
decrement_operand_core_for_field	src/node.c	/^static BOOL decrement_operand_core_for_field(unsigned int node, sCompileInfo* info, unsigned int lnode, int add_operand, int sub_operand, int ldc_operand, BOOL monadic, BOOL with_value)$/;"	f	file:
delete_all_object	src/heap.c	/^static void delete_all_object()$/;"	f	file:
delete_comment	src/compiler.c	/^BOOL delete_comment(sBuf* source, sBuf* source2)$/;"	f
docdir	Makefile	/^docdir=${datarootdir}\/doc$/;"	m
eNodeType	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	g
eOperand	src/common.h	/^enum eOperand { kOpAdd, kOpSub , kOpComplement, kOpLogicalDenial, kOpMult, kOpDiv, kOpMod, kOpLeftShift, kOpRightShift, kOpComparisonEqual, kOpComparisonNotEqual,kOpComparisonGreaterEqual, kOpComparisonLesserEqual, kOpComparisonGreater, kOpComparisonLesser, kOpAnd, kOpXor, kOpOr };$/;"	g
entry_exception_object	src/exception.c	/^void entry_exception_object(CLObject exception, sVMInfo* info)$/;"	f
entry_exception_object_with_class_name	src/exception.c	/^void entry_exception_object_with_class_name(CLVALUE* stack, sVMInfo* info, char* class_name, char* msg, ...)$/;"	f
err_msg_for_method_not_found	src/node.c	/^static void err_msg_for_method_not_found(sCLClass* klass, char* method_name, sNodeType** param_types, int num_params, BOOL class_method, sCompileInfo* info)$/;"	f	file:
err_num	src/common.h	/^    int err_num;$/;"	m	struct:sCompileInfoStruct
err_num	src/common.h	/^    int err_num;$/;"	m	struct:sParserInfoStruct
eval_file	src/main.c	/^static BOOL eval_file(char* fname, int stack_size)$/;"	f	file:
exception_message	src/common.h	/^    char exception_message[EXCEPTION_MESSAGE_MAX];$/;"	m	struct:sVMInfoStruct
exec_prefix	Makefile	/^exec_prefix=${prefix}$/;"	m
expect_next_character	src/parser.c	/^BOOL expect_next_character(char* characters, sParserInfo* info)$/;"	f
expect_next_character_with_one_forward	src/parser.c	/^void expect_next_character_with_one_forward(char* characters, sParserInfo* info)$/;"	f
expect_next_word	src/parser.c	/^static BOOL expect_next_word(char* word, sParserInfo* info)$/;"	f	file:
expression	src/parser.c	/^BOOL expression(unsigned int* node, sParserInfo* info) $/;"	f
expression_add_sub	src/parser.c	/^static BOOL expression_add_sub(unsigned int* node, sParserInfo* info)$/;"	f	file:
expression_and	src/parser.c	/^static BOOL expression_and(unsigned int* node, sParserInfo* info)$/;"	f	file:
expression_and_and	src/parser.c	/^static BOOL expression_and_and(unsigned int* node, sParserInfo* info)$/;"	f	file:
expression_comparison_equal_operator	src/parser.c	/^static BOOL expression_comparison_equal_operator(unsigned int* node, sParserInfo* info)$/;"	f	file:
expression_comparison_operator	src/parser.c	/^static BOOL expression_comparison_operator(unsigned int* node, sParserInfo* info)$/;"	f	file:
expression_conditional_operator	src/parser.c	/^static BOOL expression_conditional_operator(unsigned int* node, sParserInfo* info)$/;"	f	file:
expression_implements	src/parser.c	/^static BOOL expression_implements(unsigned int* node, sParserInfo* info)$/;"	f	file:
expression_monadic_operator	src/parser.c	/^static BOOL expression_monadic_operator(unsigned int* node, sParserInfo* info)$/;"	f	file:
expression_mult_div	src/parser.c	/^static BOOL expression_mult_div(unsigned int* node, sParserInfo* info)$/;"	f	file:
expression_node	src/parser.c	/^static BOOL expression_node(unsigned int* node, sParserInfo* info)$/;"	f	file:
expression_or	src/parser.c	/^static BOOL expression_or(unsigned int* node, sParserInfo* info)$/;"	f	file:
expression_or_or	src/parser.c	/^static BOOL expression_or_or(unsigned int* node, sParserInfo* info)$/;"	f	file:
expression_shift	src/parser.c	/^static BOOL expression_shift(unsigned int* node, sParserInfo* info)$/;"	f	file:
expression_xor	src/parser.c	/^static BOOL expression_xor(unsigned int* node, sParserInfo* info)$/;"	f	file:
fFreeFun	src/common.h	/^typedef void (*fFreeFun)(CLObject self);$/;"	t
fGetNativeMethod	src/common.h	/^typedef fNativeMethod (*fGetNativeMethod)(char* path);$/;"	t
fNativeMethod	src/common.h	/^typedef BOOL (*fNativeMethod)(CLVALUE** stack_ptr, CLVALUE* lvar, sVMInfo* info);$/;"	t
final_vtable	src/vtable.c	/^void final_vtable()$/;"	f
finalize_class	src/vm.c	/^static BOOL finalize_class(sCLClass* klass)$/;"	f	file:
for_expression	src/parser.c	/^static BOOL for_expression(unsigned int* node, sParserInfo* info)$/;"	f	file:
free_cl_block_type	src/klass.c	/^static void free_cl_block_type(sCLBlockType* block_type)$/;"	f	file:
free_cl_type	src/klass.c	/^void free_cl_type(sCLType* cl_type)$/;"	f
free_class	src/klass.c	/^static void free_class(sCLClass* klass)$/;"	f	file:
free_module	src/module.c	/^static void free_module(sCLModule* self)$/;"	f	file:
free_node_block_type	src/node_block_type.c	/^void free_node_block_type(sNodeBlockType* block)$/;"	f
free_node_types	src/node_type.c	/^void free_node_types()$/;"	f
free_nodes	src/node.c	/^void free_nodes()$/;"	f
free_object	src/object.c	/^BOOL free_object(CLObject self)$/;"	f
func_append	ltmain.sh	/^func_append ()$/;"	f
func_append_quoted	ltmain.sh	/^func_append_quoted ()$/;"	f
func_arith	ltmain.sh	/^func_arith ()$/;"	f
func_basename	ltmain.sh	/^func_basename ()$/;"	f
func_check_version_match	ltmain.sh	/^func_check_version_match ()$/;"	f
func_config	ltmain.sh	/^func_config ()$/;"	f
func_convert_core_file_wine_to_w32	ltmain.sh	/^func_convert_core_file_wine_to_w32 ()$/;"	f
func_convert_core_msys_to_w32	ltmain.sh	/^func_convert_core_msys_to_w32 ()$/;"	f
func_convert_core_path_wine_to_w32	ltmain.sh	/^func_convert_core_path_wine_to_w32 ()$/;"	f
func_convert_file_check	ltmain.sh	/^func_convert_file_check ()$/;"	f
func_convert_file_cygwin_to_w32	ltmain.sh	/^func_convert_file_cygwin_to_w32 ()$/;"	f
func_convert_file_msys_to_cygwin	ltmain.sh	/^func_convert_file_msys_to_cygwin ()$/;"	f
func_convert_file_msys_to_w32	ltmain.sh	/^func_convert_file_msys_to_w32 ()$/;"	f
func_convert_file_nix_to_cygwin	ltmain.sh	/^func_convert_file_nix_to_cygwin ()$/;"	f
func_convert_file_nix_to_w32	ltmain.sh	/^func_convert_file_nix_to_w32 ()$/;"	f
func_convert_file_noop	ltmain.sh	/^func_convert_file_noop ()$/;"	f
func_convert_path_check	ltmain.sh	/^func_convert_path_check ()$/;"	f
func_convert_path_cygwin_to_w32	ltmain.sh	/^func_convert_path_cygwin_to_w32 ()$/;"	f
func_convert_path_front_back_pathsep	ltmain.sh	/^func_convert_path_front_back_pathsep ()$/;"	f
func_convert_path_msys_to_cygwin	ltmain.sh	/^func_convert_path_msys_to_cygwin ()$/;"	f
func_convert_path_msys_to_w32	ltmain.sh	/^func_convert_path_msys_to_w32 ()$/;"	f
func_convert_path_nix_to_cygwin	ltmain.sh	/^func_convert_path_nix_to_cygwin ()$/;"	f
func_convert_path_nix_to_w32	ltmain.sh	/^func_convert_path_nix_to_w32 ()$/;"	f
func_convert_path_noop	ltmain.sh	/^func_convert_path_noop ()$/;"	f
func_cygming_dll_for_implib	ltmain.sh	/^func_cygming_dll_for_implib ()$/;"	f
func_cygming_dll_for_implib_fallback	ltmain.sh	/^func_cygming_dll_for_implib_fallback ()$/;"	f
func_cygming_dll_for_implib_fallback_core	ltmain.sh	/^func_cygming_dll_for_implib_fallback_core ()$/;"	f
func_cygming_gnu_implib_p	ltmain.sh	/^func_cygming_gnu_implib_p ()$/;"	f
func_cygming_ms_implib_p	ltmain.sh	/^func_cygming_ms_implib_p ()$/;"	f
func_cygpath	ltmain.sh	/^func_cygpath ()$/;"	f
func_dirname	ltmain.sh	/^func_dirname ()$/;"	f
func_dirname_and_basename	ltmain.sh	/^func_dirname_and_basename ()$/;"	f
func_echo	ltmain.sh	/^func_echo ()$/;"	f
func_echo_all	ltmain.sh	/^func_echo_all ()$/;"	f
func_emit_cwrapperexe_src	ltmain.sh	/^func_emit_cwrapperexe_src ()$/;"	f
func_emit_wrapper	ltmain.sh	/^func_emit_wrapper ()$/;"	f
func_enable_tag	ltmain.sh	/^func_enable_tag ()$/;"	f
func_error	ltmain.sh	/^func_error ()$/;"	f
func_exec_program	ltmain.sh	/^func_exec_program ()$/;"	f
func_exec_program_core	ltmain.sh	/^func_exec_program_core ()$/;"	f
func_execute_cmds	ltmain.sh	/^func_execute_cmds ()$/;"	f
func_extract_an_archive	ltmain.sh	/^func_extract_an_archive ()$/;"	f
func_extract_archives	ltmain.sh	/^func_extract_archives ()$/;"	f
func_fallback_echo	ltmain.sh	/^func_fallback_echo ()$/;"	f
func_fatal_configuration	ltmain.sh	/^func_fatal_configuration ()$/;"	f
func_fatal_error	ltmain.sh	/^func_fatal_error ()$/;"	f
func_fatal_help	ltmain.sh	/^func_fatal_help ()$/;"	f
func_features	ltmain.sh	/^func_features ()$/;"	f
func_generate_dlsyms	ltmain.sh	/^func_generate_dlsyms ()$/;"	f
func_grep	ltmain.sh	/^func_grep ()$/;"	f
func_help	ltmain.sh	/^func_help ()$/;"	f
func_infer_tag	ltmain.sh	/^func_infer_tag ()$/;"	f
func_init_to_host_path_cmd	ltmain.sh	/^func_init_to_host_path_cmd ()$/;"	f
func_lalib_p	ltmain.sh	/^func_lalib_p ()$/;"	f
func_lalib_unsafe_p	ltmain.sh	/^func_lalib_unsafe_p ()$/;"	f
func_len	ltmain.sh	/^func_len ()$/;"	f
func_lo2o	ltmain.sh	/^func_lo2o ()$/;"	f
func_lt_dump_args	ltmain.sh	/^func_lt_dump_args ()$/;"	f
func_ltwrapper_executable_p	ltmain.sh	/^func_ltwrapper_executable_p ()$/;"	f
func_ltwrapper_p	ltmain.sh	/^func_ltwrapper_p ()$/;"	f
func_ltwrapper_script_p	ltmain.sh	/^func_ltwrapper_script_p ()$/;"	f
func_ltwrapper_scriptname	ltmain.sh	/^func_ltwrapper_scriptname ()$/;"	f
func_missing_arg	ltmain.sh	/^func_missing_arg ()$/;"	f
func_mkdir_p	ltmain.sh	/^func_mkdir_p ()$/;"	f
func_mktempdir	ltmain.sh	/^func_mktempdir ()$/;"	f
func_mode_compile	ltmain.sh	/^func_mode_compile ()$/;"	f
func_mode_execute	ltmain.sh	/^func_mode_execute ()$/;"	f
func_mode_finish	ltmain.sh	/^func_mode_finish ()$/;"	f
func_mode_help	ltmain.sh	/^func_mode_help ()$/;"	f
func_mode_install	ltmain.sh	/^func_mode_install ()$/;"	f
func_mode_link	ltmain.sh	/^func_mode_link ()$/;"	f
func_mode_uninstall	ltmain.sh	/^func_mode_uninstall ()$/;"	f
func_normal_abspath	ltmain.sh	/^func_normal_abspath ()$/;"	f
func_parse_lt_options	ltmain.sh	/^func_parse_lt_options ()$/;"	f
func_quote_for_eval	ltmain.sh	/^func_quote_for_eval ()$/;"	f
func_quote_for_expand	ltmain.sh	/^func_quote_for_expand ()$/;"	f
func_relative_path	ltmain.sh	/^func_relative_path ()$/;"	f
func_replace_sysroot	ltmain.sh	/^func_replace_sysroot ()$/;"	f
func_resolve_sysroot	ltmain.sh	/^func_resolve_sysroot ()$/;"	f
func_show_eval	ltmain.sh	/^func_show_eval ()$/;"	f
func_show_eval_locale	ltmain.sh	/^func_show_eval_locale ()$/;"	f
func_source	ltmain.sh	/^func_source ()$/;"	f
func_split_long_opt	ltmain.sh	/^func_split_long_opt ()$/;"	f
func_split_short_opt	ltmain.sh	/^func_split_short_opt ()$/;"	f
func_stripname	ltmain.sh	/^func_stripname ()$/;"	f
func_to_host_file	ltmain.sh	/^func_to_host_file ()$/;"	f
func_to_host_path	ltmain.sh	/^func_to_host_path ()$/;"	f
func_to_tool_file	ltmain.sh	/^func_to_tool_file ()$/;"	f
func_tr_sh	ltmain.sh	/^func_tr_sh ()$/;"	f
func_usage	ltmain.sh	/^func_usage ()$/;"	f
func_verbose	ltmain.sh	/^func_verbose ()$/;"	f
func_version	ltmain.sh	/^func_version ()$/;"	f
func_warning	ltmain.sh	/^func_warning ()$/;"	f
func_win32_import_lib_p	ltmain.sh	/^func_win32_import_lib_p ()$/;"	f
func_win32_libid	ltmain.sh	/^func_win32_libid ()$/;"	f
func_write_libtool_object	ltmain.sh	/^func_write_libtool_object ()$/;"	f
func_xform	ltmain.sh	/^func_xform ()$/;"	f
gCLHeap	src/heap.c	/^static sCLHeapManager gCLHeap;$/;"	v	file:
gCastMethods	src/node.c	/^struct sCastMethods gCastMethods[] = {$/;"	v	typeref:struct:sCastMethods
gClassTable	src/klass.c	/^static sClassTable gClassTable[CLASS_NUM_MAX];$/;"	v	file:
gGetNativeMethod	src/klass.c	/^fGetNativeMethod gGetNativeMethod = NULL;$/;"	v
gGlobalStack	src/common.h	/^CLVALUE* gGlobalStack;$/;"	v
gGlobalStack	src/stack.c	/^CLVALUE* gGlobalStack;$/;"	v
gGlobalStackPtr	src/common.h	/^CLVALUE* gGlobalStackPtr;$/;"	v
gGlobalStackPtr	src/stack.c	/^CLVALUE* gGlobalStackPtr;$/;"	v
gHeadClassTable	src/common.h	/^sClassTable* gHeadClassTable;$/;"	v
gHeadClassTable	src/klass.c	/^sClassTable* gHeadClassTable = NULL;$/;"	v
gHeadStack	src/common.h	/^sCLStack* gHeadStack;$/;"	v
gHeadStack	src/stack.c	/^sCLStack* gHeadStack;$/;"	v
gHeadVTable	src/vtable.c	/^sVarTable* gHeadVTable;$/;"	v
gMallocEntries	src/debug.c	/^static t_malloc_entry* gMallocEntries[ARRAY_SIZE];$/;"	v	file:
gModules	src/module.c	/^sCLModule* gModules[CL_MODULE_HASH_SIZE];$/;"	v
gNativeMethodHash	src/native_method.c	/^static struct sNativeMethodHashItem gNativeMethodHash[NATIVE_METHOD_HASH_SIZE];$/;"	v	typeref:struct:sNativeMethodHashItem	file:
gNativeMethods	src/native_method.c	/^static sNativeMethod gNativeMethods[] = {$/;"	v	file:
gNodeTypes	src/node_type.c	/^static sNodeType** gNodeTypes = NULL;$/;"	v	file:
gNodes	src/node.c	/^sNodeTree* gNodes;$/;"	v
gNumStackID	src/stack.c	/^int gNumStackID;$/;"	v
gSizeNodes	src/node.c	/^static unsigned int gSizeNodes = 0;$/;"	v	file:
gSizePageNodeTypes	src/node_type.c	/^static int gSizePageNodeTypes = 0;$/;"	v	file:
gUsedNodeTypes	src/node_type.c	/^static int gUsedNodeTypes = 0;$/;"	v	file:
gUsedNodes	src/node.c	/^static unsigned int gUsedNodes = 0;$/;"	v	file:
gUsedPageNodeTypes	src/node_type.c	/^static int gUsedPageNodeTypes = 0;$/;"	v	file:
gc	src/heap.c	/^static void gc()$/;"	f	file:
generics_info	src/common.h	/^    sGenericsParamInfo generics_info;$/;"	m	struct:sParserInfoStruct
get_class	src/klass.c	/^sCLClass* get_class(char* class_name)$/;"	f
get_class_from_cl_type	src/type.c	/^sCLClass* get_class_from_cl_type(sCLType* cl_type, sCLClass* klass)$/;"	f
get_class_from_object	src/clover_to_clang.c	/^sCLClass* get_class_from_object(CLObject object)$/;"	f
get_class_name_from_cl_type	src/object.c	/^char* get_class_name_from_cl_type(sCLType* cl_type, sCLClass* klass)$/;"	f
get_class_with_load	src/klass.c	/^sCLClass* get_class_with_load(char* class_name)$/;"	f
get_class_with_load_and_initialize	src/vm.c	/^sCLClass* get_class_with_load_and_initialize(char* class_name)$/;"	f
get_element_from_Array	src/clover_to_clang.c	/^NULLABLE CLVALUE* get_element_from_Array(CLObject array, int index)$/;"	f
get_element_from_array	src/clover_to_clang.c	/^NULLABLE CLVALUE* get_element_from_array(CLObject array, int index)$/;"	f
get_element_number_from_Array	src/clover_to_clang.c	/^int get_element_number_from_Array(CLObject array)$/;"	f
get_generics_type_of_inner_class	src/node.c	/^static sNodeType* get_generics_type_of_inner_class(sParserInfo* pinfo)$/;"	f	file:
get_hash_key	src/klass.c	/^unsigned int get_hash_key(char* name, unsigned int max)$/;"	f
get_hash_key_for_native_method	src/native_method.c	/^static unsigned int get_hash_key_for_native_method(char* path)$/;"	f	file:
get_hex_number	src/parser.c	/^static BOOL get_hex_number(unsigned int* node, sParserInfo* info)$/;"	f	file:
get_module	src/module.c	/^sCLModule* get_module(char* module_name)$/;"	f
get_module_body	src/module.c	/^char* get_module_body(sCLModule* module)$/;"	f
get_native_method	src/native_method.c	/^fNativeMethod get_native_method(char* path)$/;"	f
get_number	src/parser.c	/^static BOOL get_number(BOOL minus, unsigned int* node, sParserInfo* info)$/;"	f	file:
get_object_pointer	src/heap.c	/^sCLHeapMem* get_object_pointer(CLObject obj)$/;"	f
get_oct_number	src/parser.c	/^static BOOL get_oct_number(unsigned int* node, sParserInfo* info)$/;"	f	file:
get_pointer_from_buffer_object	src/clover_to_clang.c	/^void* get_pointer_from_buffer_object(CLObject buffer)$/;"	f
get_size_from_buffer_object	src/clover_to_clang.c	/^int get_size_from_buffer_object(CLObject buffer)$/;"	f
get_sum_of_parent_var_num	src/vtable.c	/^static int get_sum_of_parent_var_num(sVarTable* table)$/;"	f	file:
get_value_from_Bool	src/clover_to_clang.c	/^BOOL get_value_from_Bool(CLObject object)$/;"	f
get_value_from_Byte	src/clover_to_clang.c	/^char get_value_from_Byte(CLObject object)$/;"	f
get_value_from_Char	src/clover_to_clang.c	/^wchar_t get_value_from_Char(CLObject object)$/;"	f
get_value_from_Double	src/clover_to_clang.c	/^double get_value_from_Double(CLObject object)$/;"	f
get_value_from_Float	src/clover_to_clang.c	/^float get_value_from_Float(CLObject object)$/;"	f
get_value_from_Integer	src/clover_to_clang.c	/^int get_value_from_Integer(CLObject object)$/;"	f
get_value_from_Long	src/clover_to_clang.c	/^long get_value_from_Long(CLObject object)$/;"	f
get_value_from_Pointer	src/clover_to_clang.c	/^char* get_value_from_Pointer(CLObject object)$/;"	f
get_value_from_Short	src/clover_to_clang.c	/^short get_value_from_Short(CLObject object)$/;"	f
get_value_from_UByte	src/clover_to_clang.c	/^unsigned char get_value_from_UByte(CLObject object)$/;"	f
get_value_from_UInteger	src/clover_to_clang.c	/^unsigned int get_value_from_UInteger(CLObject object)$/;"	f
get_value_from_ULong	src/clover_to_clang.c	/^unsigned long get_value_from_ULong(CLObject object)$/;"	f
get_value_from_UShort	src/clover_to_clang.c	/^unsigned short get_value_from_UShort(CLObject object)$/;"	f
get_var_num	src/vtable.c	/^int get_var_num(sVarTable* table)$/;"	f
get_variable_from_table	src/vtable.c	/^sVar* get_variable_from_table(sVarTable* table, char* name)$/;"	f
get_variable_from_this_table_only	src/vtable.c	/^static sVar* get_variable_from_this_table_only(sVarTable* table, char* name)$/;"	f	file:
get_variable_index	src/vtable.c	/^int get_variable_index(sVarTable* table, char* name)$/;"	f
heap_final	src/heap.c	/^void heap_final()$/;"	f
heap_init	src/heap.c	/^void heap_init(int heap_size, int size_hadles)$/;"	f
if_expression	src/parser.c	/^static BOOL if_expression(unsigned int* node, sParserInfo* info)$/;"	f	file:
include_file	src/class_compiler.c	/^static BOOL include_file(sParserInfo* info, sCompileInfo* cinfo)$/;"	f	file:
included_source	src/common.h	/^    BOOL included_source;$/;"	m	struct:sParserInfoStruct
includedir	Makefile	/^includedir=${prefix}\/include\/clover2$/;"	m
increment_operand_core	src/node.c	/^static void increment_operand_core(unsigned int node, sCompileInfo* info, unsigned int lnode, int add_operand, int sub_operand, int ldc_operand, BOOL monadic, BOOL with_value)$/;"	f	file:
increment_operand_core_for_field	src/node.c	/^static BOOL increment_operand_core_for_field(unsigned int node, sCompileInfo* info, unsigned int lnode, int add_operand, int sub_operand, int ldc_operand, BOOL monadic, BOOL with_value)$/;"	f	file:
init_block_vtable	src/vtable.c	/^sVarTable* init_block_vtable(sVarTable* lv_table)$/;"	f
init_node_types	src/node_type.c	/^void init_node_types()$/;"	f
init_nodes	src/node.c	/^void init_nodes()$/;"	f
init_var_table	src/vtable.c	/^sVarTable* init_var_table()$/;"	f
init_vtable	src/vtable.c	/^void init_vtable()$/;"	f
initialize_carray_object	src/carray.c	/^BOOL initialize_carray_object(CLObject array_object, int num_elements, CLObject* items, CLVALUE* stack, int var_num, CLVALUE** stack_ptr, sVMInfo* info, sCLClass* class_items)$/;"	f
initialize_class	src/vm.c	/^static BOOL initialize_class(sCLClass* klass)$/;"	f	file:
initialize_equalable_carray_object	src/carray.c	/^BOOL initialize_equalable_carray_object(CLObject array_object, int num_elements, CLObject* items, CLVALUE* stack, int var_num, CLVALUE** stack_ptr, sVMInfo* info, sCLClass* class_items)$/;"	f
initialize_equalable_list_object	src/list.c	/^BOOL initialize_equalable_list_object(CLObject list_object, int num_elements, CLObject* items, CLVALUE* stack, int var_num, CLVALUE** stack_ptr, sVMInfo* info, sCLClass* class_items)$/;"	f
initialize_hash_object	src/hash.c	/^BOOL initialize_hash_object(CLObject hash_object, int num_elements, CLObject* keys, CLObject* items, CLVALUE* stack, int var_num, CLVALUE** stack_ptr, sVMInfo* info, sCLClass* class_keys, sCLClass* class_items)$/;"	f
initialize_list_object	src/list.c	/^BOOL initialize_list_object(CLObject list_object, int num_elements, CLObject* items, CLVALUE* stack, int var_num, CLVALUE** stack_ptr, sVMInfo* info, sCLClass* class_items)$/;"	f
initialize_sortable_carray_object	src/carray.c	/^BOOL initialize_sortable_carray_object(CLObject array_object, int num_elements, CLObject* items, CLVALUE* stack, int var_num, CLVALUE** stack_ptr, sVMInfo* info, sCLClass* class_items)$/;"	f
initialize_sortable_list_object	src/list.c	/^BOOL initialize_sortable_list_object(CLObject list_object, int num_elements, CLObject* items, CLVALUE* stack, int var_num, CLVALUE** stack_ptr, sVMInfo* info, sCLClass* class_items)$/;"	f
initialize_tuple_object	src/tuple.c	/^BOOL initialize_tuple_object(CLObject tuple_object, int num_elements, CLObject* items, CLVALUE* stack, int var_num, CLVALUE** stack_ptr, sVMInfo* info)$/;"	f
invoke_block	src/vm.c	/^BOOL invoke_block(CLObject block_object, CLVALUE* stack, int var_num, int num_params, CLVALUE** stack_ptr, sVMInfo* info)$/;"	f
invoke_method	src/vm.c	/^BOOL invoke_method(sCLClass* klass, sCLMethod* method, CLVALUE* stack, int var_num, CLVALUE** stack_ptr, sVMInfo* info)$/;"	f
is_assign_operator	src/parser.c	/^static BOOL is_assign_operator(sParserInfo* info) $/;"	f	file:
is_exception_type	src/node_type.c	/^BOOL is_exception_type(sNodeType* exception_type)$/;"	f
is_this_class_with_class_name	src/type.c	/^BOOL is_this_class_with_class_name(sCLClass* klass, char* class_name)$/;"	f
is_valid_class	src/klass.c	/^BOOL is_valid_class(sCLClass* klass)$/;"	f
is_valid_object	src/heap.c	/^BOOL is_valid_object(CLObject obj)$/;"	f
is_void_type	src/type.c	/^BOOL is_void_type(sCLType* cl_type, sCLClass* klass)$/;"	f
kNodeTypeAndAnd	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeArrayValue	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeAssignVariable	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeBlockCall	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeBlockObject	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeBreak	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeBuffer	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeByteValue	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeCArrayValue	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeChar	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeClassMethodCall	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeConditional	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeDecrementOperand	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeDecrementWithValueOperand	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeDoubleValue	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeEqualableCArrayValue	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeEqualableListValue	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeFalse	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeFloatValue	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeFor	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeGetAddress	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeHashValue	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeIf	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeImplements	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeIncrementOperand	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeIncrementWithValueOperand	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeInheritCall	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeIntValue	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeListValue	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeLoadArrayElement	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeLoadClassField	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeLoadField	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeLoadValueFromPointer	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeLoadVariable	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeLongValue	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeMethodCall	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeMonadicDecrementOperand	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeMonadicIncrementOperand	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeNewOperator	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeNormalBlock	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeNull	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeOperand	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeOrOr	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypePath	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeRegex	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeReturn	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeShortValue	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeSortableCArrayValue	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeSortableListValue	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeStoreArrayElement	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeStoreClassField	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeStoreField	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeStoreValueToPointer	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeString	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeThrow	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeTrue	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeTry	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeTupleValue	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeUByteValue	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeUIntValue	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeULongValue	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeUShortValue	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kNodeTypeWhile	src/common.h	/^enum eNodeType { kNodeTypeOperand, kNodeTypeByteValue, kNodeTypeUByteValue, kNodeTypeShortValue, kNodeTypeUShortValue, kNodeTypeIntValue, kNodeTypeUIntValue, kNodeTypeLongValue, kNodeTypeULongValue, kNodeTypeAssignVariable, kNodeTypeLoadVariable, kNodeTypeIf, kNodeTypeWhile, kNodeTypeBreak, kNodeTypeTrue, kNodeTypeFalse, kNodeTypeNull, kNodeTypeFor, kNodeTypeClassMethodCall, kNodeTypeMethodCall, kNodeTypeReturn, kNodeTypeNewOperator, kNodeTypeLoadField, kNodeTypeStoreField , kNodeTypeLoadClassField, kNodeTypeStoreClassField, kNodeTypeLoadValueFromPointer, kNodeTypeStoreValueToPointer, kNodeTypeIncrementOperand, kNodeTypeDecrementOperand, kNodeTypeIncrementWithValueOperand, kNodeTypeDecrementWithValueOperand, kNodeTypeMonadicIncrementOperand, kNodeTypeMonadicDecrementOperand, kNodeTypeLoadArrayElement, kNodeTypeStoreArrayElement, kNodeTypeChar, kNodeTypeString, kNodeTypeBuffer, kNodeTypeThrow, kNodeTypeTry, kNodeTypeBlockObject, kNodeTypeBlockCall, kNodeTypeConditional, kNodeTypeNormalBlock, kNodeTypeArrayValue, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeHashValue, kNodeTypeRegex, kNodeTypeListValue, kNodeTypeSortableListValue, kNodeTypeEqualableListValue, kNodeTypeTupleValue, kNodeTypeCArrayValue, kNodeTypeEqualableCArrayValue, kNodeTypeSortableCArrayValue, kNodeTypeImplements, kNodeTypeGetAddress, kNodeTypeInheritCall, kNodeTypeFloatValue, kNodeTypeDoubleValue, kNodeTypePath };$/;"	e	enum:eNodeType
kOpAdd	src/common.h	/^enum eOperand { kOpAdd, kOpSub , kOpComplement, kOpLogicalDenial, kOpMult, kOpDiv, kOpMod, kOpLeftShift, kOpRightShift, kOpComparisonEqual, kOpComparisonNotEqual,kOpComparisonGreaterEqual, kOpComparisonLesserEqual, kOpComparisonGreater, kOpComparisonLesser, kOpAnd, kOpXor, kOpOr };$/;"	e	enum:eOperand
kOpAnd	src/common.h	/^enum eOperand { kOpAdd, kOpSub , kOpComplement, kOpLogicalDenial, kOpMult, kOpDiv, kOpMod, kOpLeftShift, kOpRightShift, kOpComparisonEqual, kOpComparisonNotEqual,kOpComparisonGreaterEqual, kOpComparisonLesserEqual, kOpComparisonGreater, kOpComparisonLesser, kOpAnd, kOpXor, kOpOr };$/;"	e	enum:eOperand
kOpComparisonEqual	src/common.h	/^enum eOperand { kOpAdd, kOpSub , kOpComplement, kOpLogicalDenial, kOpMult, kOpDiv, kOpMod, kOpLeftShift, kOpRightShift, kOpComparisonEqual, kOpComparisonNotEqual,kOpComparisonGreaterEqual, kOpComparisonLesserEqual, kOpComparisonGreater, kOpComparisonLesser, kOpAnd, kOpXor, kOpOr };$/;"	e	enum:eOperand
kOpComparisonGreater	src/common.h	/^enum eOperand { kOpAdd, kOpSub , kOpComplement, kOpLogicalDenial, kOpMult, kOpDiv, kOpMod, kOpLeftShift, kOpRightShift, kOpComparisonEqual, kOpComparisonNotEqual,kOpComparisonGreaterEqual, kOpComparisonLesserEqual, kOpComparisonGreater, kOpComparisonLesser, kOpAnd, kOpXor, kOpOr };$/;"	e	enum:eOperand
kOpComparisonGreaterEqual	src/common.h	/^enum eOperand { kOpAdd, kOpSub , kOpComplement, kOpLogicalDenial, kOpMult, kOpDiv, kOpMod, kOpLeftShift, kOpRightShift, kOpComparisonEqual, kOpComparisonNotEqual,kOpComparisonGreaterEqual, kOpComparisonLesserEqual, kOpComparisonGreater, kOpComparisonLesser, kOpAnd, kOpXor, kOpOr };$/;"	e	enum:eOperand
kOpComparisonLesser	src/common.h	/^enum eOperand { kOpAdd, kOpSub , kOpComplement, kOpLogicalDenial, kOpMult, kOpDiv, kOpMod, kOpLeftShift, kOpRightShift, kOpComparisonEqual, kOpComparisonNotEqual,kOpComparisonGreaterEqual, kOpComparisonLesserEqual, kOpComparisonGreater, kOpComparisonLesser, kOpAnd, kOpXor, kOpOr };$/;"	e	enum:eOperand
kOpComparisonLesserEqual	src/common.h	/^enum eOperand { kOpAdd, kOpSub , kOpComplement, kOpLogicalDenial, kOpMult, kOpDiv, kOpMod, kOpLeftShift, kOpRightShift, kOpComparisonEqual, kOpComparisonNotEqual,kOpComparisonGreaterEqual, kOpComparisonLesserEqual, kOpComparisonGreater, kOpComparisonLesser, kOpAnd, kOpXor, kOpOr };$/;"	e	enum:eOperand
kOpComparisonNotEqual	src/common.h	/^enum eOperand { kOpAdd, kOpSub , kOpComplement, kOpLogicalDenial, kOpMult, kOpDiv, kOpMod, kOpLeftShift, kOpRightShift, kOpComparisonEqual, kOpComparisonNotEqual,kOpComparisonGreaterEqual, kOpComparisonLesserEqual, kOpComparisonGreater, kOpComparisonLesser, kOpAnd, kOpXor, kOpOr };$/;"	e	enum:eOperand
kOpComplement	src/common.h	/^enum eOperand { kOpAdd, kOpSub , kOpComplement, kOpLogicalDenial, kOpMult, kOpDiv, kOpMod, kOpLeftShift, kOpRightShift, kOpComparisonEqual, kOpComparisonNotEqual,kOpComparisonGreaterEqual, kOpComparisonLesserEqual, kOpComparisonGreater, kOpComparisonLesser, kOpAnd, kOpXor, kOpOr };$/;"	e	enum:eOperand
kOpDiv	src/common.h	/^enum eOperand { kOpAdd, kOpSub , kOpComplement, kOpLogicalDenial, kOpMult, kOpDiv, kOpMod, kOpLeftShift, kOpRightShift, kOpComparisonEqual, kOpComparisonNotEqual,kOpComparisonGreaterEqual, kOpComparisonLesserEqual, kOpComparisonGreater, kOpComparisonLesser, kOpAnd, kOpXor, kOpOr };$/;"	e	enum:eOperand
kOpLeftShift	src/common.h	/^enum eOperand { kOpAdd, kOpSub , kOpComplement, kOpLogicalDenial, kOpMult, kOpDiv, kOpMod, kOpLeftShift, kOpRightShift, kOpComparisonEqual, kOpComparisonNotEqual,kOpComparisonGreaterEqual, kOpComparisonLesserEqual, kOpComparisonGreater, kOpComparisonLesser, kOpAnd, kOpXor, kOpOr };$/;"	e	enum:eOperand
kOpLogicalDenial	src/common.h	/^enum eOperand { kOpAdd, kOpSub , kOpComplement, kOpLogicalDenial, kOpMult, kOpDiv, kOpMod, kOpLeftShift, kOpRightShift, kOpComparisonEqual, kOpComparisonNotEqual,kOpComparisonGreaterEqual, kOpComparisonLesserEqual, kOpComparisonGreater, kOpComparisonLesser, kOpAnd, kOpXor, kOpOr };$/;"	e	enum:eOperand
kOpMod	src/common.h	/^enum eOperand { kOpAdd, kOpSub , kOpComplement, kOpLogicalDenial, kOpMult, kOpDiv, kOpMod, kOpLeftShift, kOpRightShift, kOpComparisonEqual, kOpComparisonNotEqual,kOpComparisonGreaterEqual, kOpComparisonLesserEqual, kOpComparisonGreater, kOpComparisonLesser, kOpAnd, kOpXor, kOpOr };$/;"	e	enum:eOperand
kOpMult	src/common.h	/^enum eOperand { kOpAdd, kOpSub , kOpComplement, kOpLogicalDenial, kOpMult, kOpDiv, kOpMod, kOpLeftShift, kOpRightShift, kOpComparisonEqual, kOpComparisonNotEqual,kOpComparisonGreaterEqual, kOpComparisonLesserEqual, kOpComparisonGreater, kOpComparisonLesser, kOpAnd, kOpXor, kOpOr };$/;"	e	enum:eOperand
kOpOr	src/common.h	/^enum eOperand { kOpAdd, kOpSub , kOpComplement, kOpLogicalDenial, kOpMult, kOpDiv, kOpMod, kOpLeftShift, kOpRightShift, kOpComparisonEqual, kOpComparisonNotEqual,kOpComparisonGreaterEqual, kOpComparisonLesserEqual, kOpComparisonGreater, kOpComparisonLesser, kOpAnd, kOpXor, kOpOr };$/;"	e	enum:eOperand
kOpRightShift	src/common.h	/^enum eOperand { kOpAdd, kOpSub , kOpComplement, kOpLogicalDenial, kOpMult, kOpDiv, kOpMod, kOpLeftShift, kOpRightShift, kOpComparisonEqual, kOpComparisonNotEqual,kOpComparisonGreaterEqual, kOpComparisonLesserEqual, kOpComparisonGreater, kOpComparisonLesser, kOpAnd, kOpXor, kOpOr };$/;"	e	enum:eOperand
kOpSub	src/common.h	/^enum eOperand { kOpAdd, kOpSub , kOpComplement, kOpLogicalDenial, kOpMult, kOpDiv, kOpMod, kOpLeftShift, kOpRightShift, kOpComparisonEqual, kOpComparisonNotEqual,kOpComparisonGreaterEqual, kOpComparisonLesserEqual, kOpComparisonGreater, kOpComparisonLesser, kOpAnd, kOpXor, kOpOr };$/;"	e	enum:eOperand
kOpXor	src/common.h	/^enum eOperand { kOpAdd, kOpSub , kOpComplement, kOpLogicalDenial, kOpMult, kOpDiv, kOpMod, kOpLeftShift, kOpRightShift, kOpComparisonEqual, kOpComparisonNotEqual,kOpComparisonGreaterEqual, kOpComparisonLesserEqual, kOpComparisonGreater, kOpComparisonLesser, kOpAnd, kOpXor, kOpOr };$/;"	e	enum:eOperand
klass	src/common.h	/^    sCLClass* klass;$/;"	m	struct:sParserInfoStruct
libdir	Makefile	/^libdir=${exec_prefix}\/lib$/;"	m
list_to_array	src/clover_to_clang.c	/^ALLOC CLObject* list_to_array(CLObject list, int* num_elements)$/;"	f
load_class	src/klass.c	/^sCLClass* load_class(char* class_name)$/;"	f
load_class_from_class_file	src/klass.c	/^static sCLClass* load_class_from_class_file(char* class_name, char* class_file_name)$/;"	f	file:
load_class_with_initialize	src/vm.c	/^static BOOL load_class_with_initialize(char* class_name)$/;"	f	file:
load_fundamental_classes_on_compile_time	src/klass.c	/^static void load_fundamental_classes_on_compile_time()$/;"	f	file:
load_fundamental_classes_on_runtime	src/vm.c	/^static BOOL load_fundamental_classes_on_runtime()$/;"	f	file:
load_module_from_file	src/module.c	/^BOOL load_module_from_file(ALLOC sCLModule** self, char* module_name)$/;"	f
lv_table	src/common.h	/^    sVarTable* lv_table;$/;"	m	struct:sCompileInfoStruct
lv_table	src/common.h	/^    sVarTable* lv_table;$/;"	m	struct:sParserInfoStruct
mAnchored	src/common.h	/^            BOOL mAnchored;$/;"	m	struct:sNodeTreeStruct::__anon2::__anon20
mAnchored	src/common.h	/^    BOOL mAnchored;$/;"	m	struct:sRegexObjectStruct
mArray	src/common.h	/^    BOOL mArray;$/;"	m	struct:sCLTypeStruct
mArray	src/common.h	/^    BOOL mArray;$/;"	m	struct:sNodeTypeStruct
mArrayElements	src/common.h	/^            unsigned int mArrayElements[ARRAY_VALUE_ELEMENT_MAX];$/;"	m	struct:sNodeTreeStruct::__anon2::__anon16
mArrayNum	src/common.h	/^            unsigned int mArrayNum;$/;"	m	struct:sNodeTreeStruct::__anon2::__anon10
mArrayNum	src/common.h	/^        int mArrayNum;$/;"	m	union:sCLObjectStruct::__anon21
mArrayNum	src/common.h	/^    int mArrayNum;$/;"	m	struct:sBlockObjectStruct
mArrayNum	src/common.h	/^    int mArrayNum;$/;"	m	struct:sCLHeapMemStruct
mArrayNum	src/common.h	/^    int mArrayNum;$/;"	m	struct:sRegexObjectStruct
mBlock	src/common.h	/^        sNodeBlock* mBlock;$/;"	m	union:sNodeTreeStruct::__anon2
mBlockLevel	src/common.h	/^    int mBlockLevel;$/;"	m	struct:sVarStruct
mBlockLevel	src/common.h	/^    int mBlockLevel;$/;"	m	struct:sVarTableStruct
mBlockObjectCode	src/common.h	/^            sNodeBlock* mBlockObjectCode;$/;"	m	struct:sNodeTreeStruct::__anon2::__anon13
mBlockType	src/common.h	/^    MANAGED struct sNodeBlockTypeStruct* mBlockType;$/;"	m	struct:sNodeTypeStruct	typeref:struct:sNodeTypeStruct::sNodeBlockTypeStruct
mBlockType	src/common.h	/^    sCLBlockType* mBlockType;$/;"	m	struct:sCLTypeStruct
mBlockVarNum	src/common.h	/^    int mBlockVarNum;$/;"	m	struct:sBlockObjectStruct
mBody	src/common.h	/^    sBuf mBody;$/;"	m	struct:sCLModuleStruct
mBoolValue	src/common.h	/^    BOOL mBoolValue;$/;"	m	union:CLVALUEUnion
mBoxingClass	src/common.h	/^    struct sCLClassStruct* mBoxingClass; \/\/ This requires on the run time $/;"	m	struct:sCLClassStruct	typeref:struct:sCLClassStruct::sCLClassStruct
mBuf	src/buffer.h	/^    char* mBuf;$/;"	m	struct:sBufStruct
mBuffer	src/common.h	/^            char* mBuffer;$/;"	m	struct:sNodeTreeStruct::__anon2::__anon12
mByteCodes	src/common.h	/^        sByteCode mByteCodes;$/;"	m	union:sCLMethodStruct::__anon1
mByteValue	src/common.h	/^        char mByteValue;$/;"	m	union:sNodeTreeStruct::__anon2
mByteValue	src/common.h	/^    char mByteValue;$/;"	m	union:CLVALUEUnion
mCallingClassMethodIndex	src/common.h	/^    int mCallingClassMethodIndex;$/;"	m	struct:sCLClassStruct
mCallingMethodIndex	src/common.h	/^    int mCallingMethodIndex;$/;"	m	struct:sCLClassStruct
mCatchNodeBlock	src/common.h	/^            MANAGED sNodeBlock* mCatchNodeBlock;$/;"	m	struct:sNodeTreeStruct::__anon2::__anon7
mCharValue	src/common.h	/^    wchar_t mCharValue;$/;"	m	union:CLVALUEUnion
mCharacter	src/common.h	/^        wchar_t mCharacter;$/;"	m	union:sNodeTreeStruct::__anon2
mClass	src/common.h	/^            sCLClass* mClass;$/;"	m	struct:sNodeTreeStruct::__anon2::__anon11
mClass	src/common.h	/^            sCLClass* mClass;$/;"	m	struct:sNodeTreeStruct::__anon2::__anon3
mClass	src/common.h	/^            sNodeType* mClass;$/;"	m	struct:sNodeTreeStruct::__anon2::__anon8
mClass	src/common.h	/^    sCLClass* mClass;       \/\/ NULL --> no class only memory$/;"	m	struct:sBlockObjectStruct
mClass	src/common.h	/^    sCLClass* mClass;       \/\/ NULL --> no class only memory$/;"	m	struct:sCLHeapMemStruct
mClass	src/common.h	/^    sCLClass* mClass;       \/\/ NULL --> no class only memory$/;"	m	struct:sRegexObjectStruct
mClass	src/common.h	/^    sCLClass* mClass;$/;"	m	struct:sCLObjectStruct
mClass	src/common.h	/^    sCLClass* mClass;$/;"	m	struct:sNodeTypeStruct
mClassFields	src/common.h	/^    sCLField* mClassFields;$/;"	m	struct:sCLClassStruct
mClassFinalizeMethodIndex	src/common.h	/^    int mClassFinalizeMethodIndex;$/;"	m	struct:sCLClassStruct
mClassInitializeMethodIndex	src/common.h	/^    int mClassInitializeMethodIndex;$/;"	m	struct:sCLClassStruct
mClassNameOffset	src/common.h	/^    int mClassNameOffset;$/;"	m	struct:sCLClassStruct
mClassNameOffset	src/common.h	/^    int mClassNameOffset;$/;"	m	struct:sCLTypeStruct
mCodes	src/common.h	/^    char* mCodes;$/;"	m	struct:sByteCodeStruct
mCodes	src/common.h	/^    sByteCode mCodes;$/;"	m	struct:sBlockObjectStruct
mConst	src/common.h	/^    char* mConst;$/;"	m	struct:sConstStruct
mConst	src/common.h	/^    sConst mConst;$/;"	m	struct:sCLClassStruct
mConstant	src/common.h	/^    sConst mConstant;$/;"	m	struct:sBlockObjectStruct
mCurrentMem	src/heap.c	/^    unsigned char* mCurrentMem;$/;"	m	struct:sCLHeapManager_	file:
mDollarEndOnly	src/common.h	/^            BOOL mDollarEndOnly;$/;"	m	struct:sNodeTreeStruct::__anon2::__anon20
mDollarEndOnly	src/common.h	/^    BOOL mDollarEndOnly;$/;"	m	struct:sRegexObjectStruct
mDotAll	src/common.h	/^            BOOL mDotAll;$/;"	m	struct:sNodeTreeStruct::__anon2::__anon20
mDotAll	src/common.h	/^    BOOL mDotAll;$/;"	m	struct:sRegexObjectStruct
mDoubleValue	src/common.h	/^        double mDoubleValue;$/;"	m	union:sNodeTreeStruct::__anon2
mDoubleValue	src/common.h	/^    double mDoubleValue;$/;"	m	union:CLVALUEUnion
mElifExpressionNodes	src/common.h	/^            unsigned int mElifExpressionNodes[ELIF_NUM_MAX];$/;"	m	struct:sNodeTreeStruct::__anon2::__anon4
mElifNodeBlocks	src/common.h	/^            MANAGED sNodeBlock* mElifNodeBlocks[ELIF_NUM_MAX];$/;"	m	struct:sNodeTreeStruct::__anon2::__anon4
mElifNum	src/common.h	/^            int mElifNum;$/;"	m	struct:sNodeTreeStruct::__anon2::__anon4
mElseNodeBlock	src/common.h	/^            MANAGED sNodeBlock* mElseNodeBlock;$/;"	m	struct:sNodeTreeStruct::__anon2::__anon4
mExceptionVarName	src/common.h	/^            char mExceptionVarName[VAR_NAME_MAX];$/;"	m	struct:sNodeTreeStruct::__anon2::__anon7
mExpressionNode	src/common.h	/^            unsigned int mExpressionNode;$/;"	m	struct:sNodeTreeStruct::__anon2::__anon4
mExpressionNode	src/common.h	/^            unsigned int mExpressionNode;$/;"	m	struct:sNodeTreeStruct::__anon2::__anon5
mExpressionNode	src/common.h	/^            unsigned int mExpressionNode;$/;"	m	struct:sNodeTreeStruct::__anon2::__anon6
mExpressionNode2	src/common.h	/^            unsigned int mExpressionNode2;$/;"	m	struct:sNodeTreeStruct::__anon2::__anon6
mExpressionNode3	src/common.h	/^            unsigned int mExpressionNode3;$/;"	m	struct:sNodeTreeStruct::__anon2::__anon6
mExtended	src/common.h	/^            BOOL mExtended;$/;"	m	struct:sNodeTreeStruct::__anon2::__anon20
mExtended	src/common.h	/^    BOOL mExtended;$/;"	m	struct:sRegexObjectStruct
mFields	src/common.h	/^    CLVALUE mFields[DUMMY_ARRAY_SIZE];$/;"	m	struct:sCLObjectStruct
mFields	src/common.h	/^    sCLField* mFields;$/;"	m	struct:sCLClassStruct
mFileName	src/debug.c	/^    char mFileName[NAME_SIZE];$/;"	m	struct:_t_malloc_entry	file:
mFinalizeMethodIndex	src/common.h	/^    int mFinalizeMethodIndex;$/;"	m	struct:sCLClassStruct
mFlags	src/common.h	/^    long mFlags;$/;"	m	struct:sCLClassStruct
mFlags	src/common.h	/^    long mFlags;$/;"	m	struct:sCLFieldStruct
mFlags	src/common.h	/^    long mFlags;$/;"	m	struct:sCLMethodStruct
mFloatValue	src/common.h	/^        float mFloatValue;$/;"	m	union:sNodeTreeStruct::__anon2
mFloatValue	src/common.h	/^    float mFloatValue;$/;"	m	union:CLVALUEUnion
mForNodeBlock	src/common.h	/^            MANAGED sNodeBlock* mForNodeBlock;$/;"	m	struct:sNodeTreeStruct::__anon2::__anon6
mFreeFun	src/common.h	/^    fFreeFun mFreeFun;$/;"	m	struct:sCLClassStruct
mFreeHandles	src/heap.c	/^    int mFreeHandles;    \/\/ -1 for NULL. index of mHandles$/;"	m	struct:sCLHeapManager_	file:
mFreed	src/common.h	/^    BOOL mFreed;$/;"	m	struct:sClassTableStruct
mFun	src/native_method.c	/^    fNativeMethod mFun;$/;"	m	struct:sNativeMethodHashItem	file:
mFun	src/native_method.c	/^    fNativeMethod mFun;$/;"	m	struct:sNativeMethodStruct	file:
mFuncName	src/debug.c	/^    char mFuncName[NAME_SIZE];$/;"	m	struct:_t_malloc_entry	file:
mGenericsParamClassNum	src/common.h	/^    int mGenericsParamClassNum;   \/\/ -1 is none generics param $/;"	m	struct:sCLClassStruct
mGenericsParamTypeOffsets	src/common.h	/^    int mGenericsParamTypeOffsets[GENERICS_TYPES_MAX];$/;"	m	struct:sCLClassStruct
mGenericsTypes	src/common.h	/^    struct sCLTypeStruct* mGenericsTypes[GENERICS_TYPES_MAX];$/;"	m	struct:sCLTypeStruct	typeref:struct:sCLTypeStruct::sCLTypeStruct
mGenericsTypes	src/common.h	/^    struct sNodeTypeStruct* mGenericsTypes[GENERICS_TYPES_MAX];$/;"	m	struct:sNodeTypeStruct	typeref:struct:sNodeTypeStruct::sNodeTypeStruct
mGlobal	src/common.h	/^            BOOL mGlobal;$/;"	m	struct:sNodeTreeStruct::__anon2::__anon20
mGlobal	src/common.h	/^    BOOL mGlobal;$/;"	m	struct:sRegexObjectStruct
mHandles	src/heap.c	/^    sHandle* mHandles;$/;"	m	struct:sCLHeapManager_	file:
mHashItems	src/common.h	/^            unsigned int mHashItems[HASH_VALUE_ELEMENT_MAX];$/;"	m	struct:sNodeTreeStruct::__anon2::__anon19
mHashKeys	src/common.h	/^            unsigned int mHashKeys[HASH_VALUE_ELEMENT_MAX];$/;"	m	struct:sNodeTreeStruct::__anon2::__anon19
mIfNodeBlock	src/common.h	/^            MANAGED sNodeBlock* mIfNodeBlock;$/;"	m	struct:sNodeTreeStruct::__anon2::__anon4
mIgnoreCase	src/common.h	/^            BOOL mIgnoreCase;$/;"	m	struct:sNodeTreeStruct::__anon2::__anon20
mIgnoreCase	src/common.h	/^    BOOL mIgnoreCase;$/;"	m	struct:sRegexObjectStruct
mIndex	src/common.h	/^    int mIndex;$/;"	m	struct:sVarStruct
mIntValue	src/common.h	/^        int mIntValue;$/;"	m	union:sNodeTreeStruct::__anon2
mIntValue	src/common.h	/^    int mIntValue;$/;"	m	union:CLVALUEUnion
mInterface	src/common.h	/^    sCLClass* mInterface[GENERICS_TYPES_MAX];$/;"	m	struct:sGenericsParamInfoStruct
mItem	src/common.h	/^    sCLClass* mItem;$/;"	m	struct:sClassTableStruct
mLVTable	src/common.h	/^    sVarTable* mLVTable;$/;"	m	struct:sNodeBlockStruct
mLambda	src/common.h	/^            BOOL mLambda;$/;"	m	struct:sNodeTreeStruct::__anon2::__anon13
mLambda	src/common.h	/^    BOOL mLambda;$/;"	m	struct:sBlockObjectStruct
mLeft	src/common.h	/^    unsigned int mLeft;$/;"	m	struct:sNodeTreeStruct
mLen	src/buffer.h	/^    int mLen;$/;"	m	struct:sBufStruct
mLen	src/common.h	/^            int mLen;$/;"	m	struct:sNodeTreeStruct::__anon2::__anon12
mLen	src/common.h	/^    int mLen;$/;"	m	struct:sConstStruct
mLen	src/common.h	/^    unsigned int mLen;$/;"	m	struct:sByteCodeStruct
mLine	src/debug.c	/^    int mLine;$/;"	m	struct:_t_malloc_entry	file:
mListElements	src/common.h	/^            unsigned int mListElements[LIST_VALUE_ELEMENT_MAX];$/;"	m	struct:sNodeTreeStruct::__anon2::__anon17
mLocalVariables	src/common.h	/^    sVar mLocalVariables[LOCAL_VARIABLE_MAX];  \/\/ open address hash$/;"	m	struct:sVarTableStruct
mLongValue	src/common.h	/^        long mLongValue;$/;"	m	union:sNodeTreeStruct::__anon2
mLongValue	src/common.h	/^    long mLongValue;$/;"	m	union:CLVALUEUnion
mMaxBlockVarNum	src/common.h	/^    int mMaxBlockVarNum;$/;"	m	struct:sVarTableStruct
mMem	src/common.h	/^    void* mMem;$/;"	m	struct:sCLHeapMemStruct
mMem	src/heap.c	/^    unsigned char* mMem;$/;"	m	struct:sCLHeapManager_	file:
mMemB	src/heap.c	/^    unsigned char* mMemB;$/;"	m	struct:sCLHeapManager_	file:
mMemLen	src/heap.c	/^    unsigned int mMemLen;$/;"	m	struct:sCLHeapManager_	file:
mMemSize	src/heap.c	/^    unsigned int mMemSize;$/;"	m	struct:sCLHeapManager_	file:
mMemory	src/debug.c	/^    void* mMemory;$/;"	m	struct:_t_malloc_entry	file:
mMethodIndex	src/common.h	/^            int mMethodIndex;$/;"	m	struct:sNodeTreeStruct::__anon2::__anon15
mMethodIndexOnCompileTime	src/common.h	/^    int mMethodIndexOnCompileTime;                  \/\/ This requires on the compile time$/;"	m	struct:sCLClassStruct
mMethodName	src/common.h	/^            char mMethodName[METHOD_NAME_MAX];$/;"	m	struct:sNodeTreeStruct::__anon2::__anon8
mMethodName	src/common.h	/^            char mMethodName[METHOD_NAME_MAX];$/;"	m	struct:sNodeTreeStruct::__anon2::__anon9
mMethodNameAndParamsOffset	src/common.h	/^    int mMethodNameAndParamsOffset;$/;"	m	struct:sCLMethodStruct
mMethods	src/common.h	/^    sCLMethod* mMethods;$/;"	m	struct:sCLClassStruct
mMiddle	src/common.h	/^    unsigned int mMiddle;$/;"	m	struct:sNodeTreeStruct
mModified	src/common.h	/^    BOOL mModified;$/;"	m	struct:sCLModuleStruct
mMultiline	src/common.h	/^            BOOL mMultiline;$/;"	m	struct:sNodeTreeStruct::__anon2::__anon20
mMultiline	src/common.h	/^    BOOL mMultiline;$/;"	m	struct:sRegexObjectStruct
mName	src/common.h	/^    char mName[CL_MODULE_NAME_MAX+1];$/;"	m	struct:sCLModuleStruct
mName	src/common.h	/^    char mName[VAR_NAME_MAX];$/;"	m	struct:sParserParamStruct
mName	src/common.h	/^    char mName[VAR_NAME_MAX];$/;"	m	struct:sVarStruct
mName	src/common.h	/^    char* mName;$/;"	m	struct:sClassTableStruct
mNameOffset	src/common.h	/^    int mNameOffset;                \/\/ variable name$/;"	m	struct:sCLParamStruct
mNameOffset	src/common.h	/^    int mNameOffset;$/;"	m	struct:sCLFieldStruct
mNameOffset	src/common.h	/^    int mNameOffset;$/;"	m	struct:sCLMethodStruct
mNativeMethod	src/common.h	/^        fNativeMethod mNativeMethod;$/;"	m	union:sCLMethodStruct::__anon1
mNext	src/common.h	/^    struct sVarTableStruct* mNext;              \/\/ for free var table$/;"	m	struct:sVarTableStruct	typeref:struct:sVarTableStruct::sVarTableStruct
mNextClass	src/common.h	/^    struct sClassTableStruct* mNextClass;$/;"	m	struct:sClassTableStruct	typeref:struct:sClassTableStruct::sClassTableStruct
mNextEntry	src/debug.c	/^    struct _t_malloc_entry* mNextEntry;$/;"	m	struct:_t_malloc_entry	typeref:struct:_t_malloc_entry::_t_malloc_entry	file:
mNextFreeHandle	src/heap.c	/^    int mNextFreeHandle;         \/\/ -1 for NULL. index of mHandles$/;"	m	struct:sHandle_	file:
mNextStack	src/common.h	/^    struct sCLStackStruct* mNextStack;$/;"	m	struct:sCLStackStruct	typeref:struct:sCLStackStruct::sCLStackStruct
mNodeType	src/common.h	/^    enum eNodeType mNodeType;$/;"	m	struct:sNodeTreeStruct	typeref:enum:sNodeTreeStruct::eNodeType
mNodes	src/common.h	/^    unsigned int* mNodes;$/;"	m	struct:sNodeBlockStruct
mNumArrayElements	src/common.h	/^            int mNumArrayElements;$/;"	m	struct:sNodeTreeStruct::__anon2::__anon16
mNumClassFields	src/common.h	/^    int mNumClassFields;$/;"	m	struct:sCLClassStruct
mNumFields	src/common.h	/^        int mNumFields;$/;"	m	union:sCLObjectStruct::__anon21
mNumFields	src/common.h	/^    int mNumFields;$/;"	m	struct:sCLClassStruct
mNumGenerics	src/common.h	/^    int mNumGenerics;$/;"	m	struct:sCLClassStruct
mNumGenericsTypes	src/common.h	/^    int mNumGenericsTypes;$/;"	m	struct:sCLTypeStruct
mNumGenericsTypes	src/common.h	/^    int mNumGenericsTypes;$/;"	m	struct:sNodeTypeStruct
mNumHandles	src/heap.c	/^    int mNumHandles;$/;"	m	struct:sCLHeapManager_	file:
mNumHashElements	src/common.h	/^            int mNumHashElements;$/;"	m	struct:sNodeTreeStruct::__anon2::__anon19
mNumListElements	src/common.h	/^            int mNumListElements;$/;"	m	struct:sNodeTreeStruct::__anon2::__anon17
mNumMethods	src/common.h	/^    int mNumMethods;$/;"	m	struct:sCLClassStruct
mNumNodes	src/common.h	/^    unsigned int mNumNodes;$/;"	m	struct:sNodeBlockStruct
mNumParams	src/common.h	/^            int mNumParams;$/;"	m	struct:sNodeTreeStruct::__anon2::__anon10
mNumParams	src/common.h	/^            int mNumParams;$/;"	m	struct:sNodeTreeStruct::__anon2::__anon13
mNumParams	src/common.h	/^            int mNumParams;$/;"	m	struct:sNodeTreeStruct::__anon2::__anon14
mNumParams	src/common.h	/^            int mNumParams;$/;"	m	struct:sNodeTreeStruct::__anon2::__anon15
mNumParams	src/common.h	/^            int mNumParams;$/;"	m	struct:sNodeTreeStruct::__anon2::__anon8
mNumParams	src/common.h	/^            int mNumParams;$/;"	m	struct:sNodeTreeStruct::__anon2::__anon9
mNumParams	src/common.h	/^    int mNumParams;$/;"	m	struct:sCLBlockTypeStruct
mNumParams	src/common.h	/^    int mNumParams;$/;"	m	struct:sCLMethodStruct
mNumParams	src/common.h	/^    int mNumParams;$/;"	m	struct:sGenericsParamInfoStruct
mNumParams	src/common.h	/^    int mNumParams;$/;"	m	struct:sNodeBlockTypeStruct
mNumTupleElements	src/common.h	/^            int mNumTupleElements;$/;"	m	struct:sNodeTreeStruct::__anon2::__anon18
mNumTypedef	src/common.h	/^    int mNumTypedef;$/;"	m	struct:sCLClassStruct
mObjectValue	src/common.h	/^    CLObject mObjectValue;$/;"	m	union:CLVALUEUnion
mOffset	src/heap.c	/^    int mOffset;                 \/\/ -1 for FreeHandle$/;"	m	struct:sHandle_	file:
mOperand	src/common.h	/^        enum eOperand mOperand;$/;"	m	union:sNodeTreeStruct::__anon2	typeref:enum:sNodeTreeStruct::__anon2::eOperand
mParamNames	src/common.h	/^    char mParamNames[GENERICS_TYPES_MAX][VAR_NAME_MAX];$/;"	m	struct:sGenericsParamInfoStruct
mParams	src/common.h	/^            sParserParam mParams[PARAMS_MAX];$/;"	m	struct:sNodeTreeStruct::__anon2::__anon13
mParams	src/common.h	/^            unsigned int mParams[PARAMS_MAX];$/;"	m	struct:sNodeTreeStruct::__anon2::__anon10
mParams	src/common.h	/^            unsigned int mParams[PARAMS_MAX];$/;"	m	struct:sNodeTreeStruct::__anon2::__anon14
mParams	src/common.h	/^            unsigned int mParams[PARAMS_MAX];$/;"	m	struct:sNodeTreeStruct::__anon2::__anon15
mParams	src/common.h	/^            unsigned int mParams[PARAMS_MAX];$/;"	m	struct:sNodeTreeStruct::__anon2::__anon8
mParams	src/common.h	/^            unsigned int mParams[PARAMS_MAX];$/;"	m	struct:sNodeTreeStruct::__anon2::__anon9
mParams	src/common.h	/^    sCLParam mParams[PARAMS_MAX]; \/\/ +1 --> self$/;"	m	struct:sCLMethodStruct
mParams	src/common.h	/^    sNodeType* mParams[PARAMS_MAX];$/;"	m	struct:sNodeBlockTypeStruct
mParams	src/common.h	/^    struct sCLTypeStruct* mParams[PARAMS_MAX];$/;"	m	struct:sCLBlockTypeStruct	typeref:struct:sCLBlockTypeStruct::sCLTypeStruct
mParent	src/common.h	/^    struct sVarTableStruct* mParent;            \/\/ make linked list$/;"	m	struct:sVarTableStruct	typeref:struct:sVarTableStruct::sVarTableStruct
mParentStack	src/common.h	/^    CLVALUE* mParentStack;$/;"	m	struct:sBlockObjectStruct
mParentVarNum	src/common.h	/^    int mParentVarNum;$/;"	m	struct:sBlockObjectStruct
mPath	src/native_method.c	/^    char* mPath;$/;"	m	struct:sNativeMethodHashItem	file:
mPath	src/native_method.c	/^    const char* mPath;$/;"	m	struct:sNativeMethodStruct	file:
mPathOffset	src/common.h	/^    int mPathOffset;$/;"	m	struct:sCLMethodStruct
mPointerValue	src/common.h	/^    char* mPointerValue;$/;"	m	union:CLVALUEUnion
mRegex	src/common.h	/^    pcre* mRegex;$/;"	m	struct:sRegexObjectStruct
mRegexStr	src/common.h	/^            char* mRegexStr;$/;"	m	struct:sNodeTreeStruct::__anon2::__anon20
mResultType	src/common.h	/^            sNodeType* mResultType;$/;"	m	struct:sNodeTreeStruct::__anon2::__anon13
mResultType	src/common.h	/^    sCLType* mResultType;$/;"	m	struct:sCLFieldStruct
mResultType	src/common.h	/^    sCLType* mResultType;$/;"	m	struct:sCLMethodStruct
mResultType	src/common.h	/^    struct sCLTypeStruct* mResultType;$/;"	m	struct:sCLBlockTypeStruct	typeref:struct:sCLBlockTypeStruct::sCLTypeStruct
mResultType	src/common.h	/^    struct sNodeTypeStruct* mResultType;$/;"	m	struct:sNodeBlockTypeStruct	typeref:struct:sNodeBlockTypeStruct::sNodeTypeStruct
mRight	src/common.h	/^    unsigned int mRight;$/;"	m	struct:sNodeTreeStruct
mShortValue	src/common.h	/^        short mShortValue;$/;"	m	union:sNodeTreeStruct::__anon2
mShortValue	src/common.h	/^    short mShortValue;$/;"	m	union:CLVALUEUnion
mSize	src/buffer.h	/^    int mSize;$/;"	m	struct:sBufStruct
mSize	src/common.h	/^    int mSize;$/;"	m	struct:sBlockObjectStruct
mSize	src/common.h	/^    int mSize;$/;"	m	struct:sCLHeapMemStruct
mSize	src/common.h	/^    int mSize;$/;"	m	struct:sCLObjectStruct
mSize	src/common.h	/^    int mSize;$/;"	m	struct:sConstStruct
mSize	src/common.h	/^    int mSize;$/;"	m	struct:sRegexObjectStruct
mSize	src/common.h	/^    size_t mSize;$/;"	m	struct:sByteCodeStruct
mSizeClassFields	src/common.h	/^    int mSizeClassFields;$/;"	m	struct:sCLClassStruct
mSizeFields	src/common.h	/^    int mSizeFields;$/;"	m	struct:sCLClassStruct
mSizeHandles	src/heap.c	/^    int mSizeHandles;$/;"	m	struct:sCLHeapManager_	file:
mSizeMethods	src/common.h	/^    int mSizeMethods;$/;"	m	struct:sCLClassStruct
mSizeNodes	src/common.h	/^    unsigned int mSizeNodes;$/;"	m	struct:sNodeBlockStruct
mSleepMem	src/heap.c	/^    unsigned char* mSleepMem;$/;"	m	struct:sCLHeapManager_	file:
mStack	src/common.h	/^    CLVALUE* mStack;$/;"	m	struct:sCLStackStruct
mStackID	src/common.h	/^    int mStackID;$/;"	m	struct:sBlockObjectStruct
mStackID	src/common.h	/^    int mStackID;$/;"	m	struct:sCLStackStruct
mStackPtr	src/common.h	/^    CLVALUE** mStackPtr;$/;"	m	struct:sCLStackStruct
mString	src/common.h	/^        char* mString;$/;"	m	union:sNodeTreeStruct::__anon2
mTryNodeBlock	src/common.h	/^            MANAGED sNodeBlock* mTryNodeBlock;$/;"	m	struct:sNodeTreeStruct::__anon2::__anon7
mTupleElements	src/common.h	/^            unsigned int mTupleElements[TUPLE_VALUE_ELEMENT_MAX];$/;"	m	struct:sNodeTreeStruct::__anon2::__anon18
mType	src/common.h	/^            sNodeType* mType;$/;"	m	struct:sNodeTreeStruct::__anon2::__anon10
mType	src/common.h	/^    sCLType* mType;$/;"	m	struct:sCLParamStruct
mType	src/common.h	/^    sNodeType* mType;$/;"	m	struct:sNodeTreeStruct
mType	src/common.h	/^    sNodeType* mType;$/;"	m	struct:sParserParamStruct
mType	src/common.h	/^    sNodeType* mType;$/;"	m	struct:sVarStruct
mTypedefClassName1Offsets	src/common.h	/^    int mTypedefClassName1Offsets[TYPEDEF_MAX];$/;"	m	struct:sCLClassStruct
mTypedefClassName2Offsets	src/common.h	/^    int mTypedefClassName2Offsets[TYPEDEF_MAX];$/;"	m	struct:sCLClassStruct
mUByteValue	src/common.h	/^        unsigned char mUByteValue;$/;"	m	union:sNodeTreeStruct::__anon2
mUByteValue	src/common.h	/^    unsigned char mUByteValue;$/;"	m	union:CLVALUEUnion
mUIntValue	src/common.h	/^        unsigned int mUIntValue;$/;"	m	union:sNodeTreeStruct::__anon2
mUIntValue	src/common.h	/^    unsigned int mUIntValue;$/;"	m	union:CLVALUEUnion
mULongValue	src/common.h	/^        unsigned long mULongValue;$/;"	m	union:sNodeTreeStruct::__anon2
mULongValue	src/common.h	/^    unsigned long mULongValue;$/;"	m	union:CLVALUEUnion
mUShortValue	src/common.h	/^        unsigned short mUShortValue;$/;"	m	union:sNodeTreeStruct::__anon2
mUShortValue	src/common.h	/^    unsigned short mUShortValue;$/;"	m	union:CLVALUEUnion
mUnboxingClass	src/common.h	/^    struct sCLClassStruct* mUnboxingClass; \/\/ This requires on the run time$/;"	m	struct:sCLClassStruct	typeref:struct:sCLClassStruct::sCLClassStruct
mUngreedy	src/common.h	/^            BOOL mUngreedy;$/;"	m	struct:sNodeTreeStruct::__anon2::__anon20
mUngreedy	src/common.h	/^    BOOL mUngreedy;$/;"	m	struct:sRegexObjectStruct
mValue	src/common.h	/^    CLVALUE mValue;$/;"	m	struct:sCLFieldStruct
mVarName	src/common.h	/^            char mVarName[VAR_NAME_MAX];$/;"	m	struct:sNodeTreeStruct::__anon2::__anon11
mVarName	src/common.h	/^            char mVarName[VAR_NAME_MAX];$/;"	m	struct:sNodeTreeStruct::__anon2::__anon3
mVarName	src/common.h	/^        char mVarName[VAR_NAME_MAX];$/;"	m	union:sNodeTreeStruct::__anon2
mVarNum	src/common.h	/^    int mVarNum;$/;"	m	struct:sCLMethodStruct
mVarNum	src/common.h	/^    int mVarNum;$/;"	m	struct:sVarTableStruct
mVirtualMethodTable	src/common.h	/^    sCLMethod* mVirtualMethodTable[METHOD_NUM_MAX]; \/\/ This requires on the run time$/;"	m	struct:sCLClassStruct
mWhileNodeBlock	src/common.h	/^            MANAGED sNodeBlock* mWhileNodeBlock;$/;"	m	struct:sNodeTreeStruct::__anon2::__anon5
main	src/compiler.c	/^int main(int argc, char** argv)$/;"	f
main	src/main.c	/^int main(int argc, char** argv)$/;"	f
make_boxing_type	src/node_type.c	/^void make_boxing_type(sNodeType* type, sNodeType** result)$/;"	f
mandir	Makefile	/^mandir=${datarootdir}\/man$/;"	m
mark	src/heap.c	/^static void mark(unsigned char* mark_flg)$/;"	f	file:
mark_all_class_fields	src/heap.c	/^static void mark_all_class_fields(unsigned char* mark_flg)$/;"	f	file:
mark_object	src/heap.c	/^void mark_object(CLObject obj, unsigned char* mark_flg)$/;"	f
method	src/common.h	/^    sCLMethod* method;$/;"	m	struct:sCompileInfoStruct
method_name	src/node.c	/^    char* method_name;$/;"	m	struct:sCastMethods	file:
method_name_existance	src/klass_compile_time.c	/^BOOL method_name_existance(sCLClass* klass, char* method_name)$/;"	f
module_final	src/module.c	/^void module_final()$/;"	f
module_init	src/module.c	/^void module_init()$/;"	f
native_method_final	src/native_method.c	/^void native_method_final()$/;"	f
native_method_init	src/native_method.c	/^void native_method_init()$/;"	f
new_expression	src/parser.c	/^static BOOL new_expression(unsigned int* node, sParserInfo* info)$/;"	f	file:
new_vm_mutex	src/vm.c	/^void new_vm_mutex()$/;"	f
no_cast_types_for_binary_operator	src/node_type.c	/^BOOL no_cast_types_for_binary_operator(sNodeType* left_type, sNodeType* right_type)$/;"	f
no_output	src/common.h	/^    BOOL no_output;$/;"	m	struct:sCompileInfoStruct
node_type_to_cl_type	src/klass_compile_time.c	/^static void node_type_to_cl_type(sNodeType* node_type, ALLOC sCLType** cl_type, sCLClass* klass)$/;"	f	file:
num_break_points	src/common.h	/^    int* num_break_points;$/;"	m	struct:sCompileInfoStruct
object_implements_interface	src/object.c	/^BOOL object_implements_interface(CLObject object, sCLClass* interface)$/;"	f
object_mark_fun	src/object.c	/^void object_mark_fun(CLObject self, unsigned char* mark_flg)$/;"	f
object_size	src/array.c	/^static unsigned int object_size(sCLClass* klass, int array_num)$/;"	f	file:
object_size	src/block.c	/^static unsigned int object_size()$/;"	f	file:
object_size	src/object.c	/^static unsigned int object_size(sCLClass* klass)$/;"	f	file:
object_size	src/regex.c	/^static unsigned int object_size()$/;"	f	file:
operand_posibility	src/node_type.c	/^BOOL operand_posibility(sNodeType* left, sNodeType* right, char* op_string)$/;"	f
operand_posibility_with_class_name	src/node_type.c	/^BOOL operand_posibility_with_class_name(sNodeType* left, char* right_class_name, char* op_string)$/;"	f
p	src/common.h	/^    char* p;$/;"	m	struct:sParserInfoStruct
parse_array_value	src/parser.c	/^static BOOL parse_array_value(unsigned int* node, sParserInfo* info) $/;"	f	file:
parse_block	src/node_block.c	/^BOOL parse_block(ALLOC sNodeBlock** node_block, sParserInfo* info, sVarTable* new_table, BOOL block_object)$/;"	f
parse_block_object	src/parser.c	/^static BOOL parse_block_object(unsigned int* node, sParserInfo* info, BOOL lambda)$/;"	f	file:
parse_carray_value	src/parser.c	/^static BOOL parse_carray_value(unsigned int* node, sParserInfo* info) $/;"	f	file:
parse_class	src/class_compiler.c	/^static BOOL parse_class(sParserInfo* info, sCompileInfo* cinfo, BOOL interface, BOOL dynamic_class)$/;"	f	file:
parse_class_name_and_attributes	src/class_compiler.c	/^static BOOL parse_class_name_and_attributes(char* class_name, int class_name_size, sParserInfo* info, sCompileInfo* cinfo)$/;"	f	file:
parse_class_on_add_methods_and_fields	src/class_compiler.c	/^static BOOL parse_class_on_add_methods_and_fields(sParserInfo* info, sCompileInfo* cinfo, BOOL interface)$/;"	f	file:
parse_class_on_alloc_classes_phase	src/class_compiler.c	/^static BOOL parse_class_on_alloc_classes_phase(sParserInfo* info, sCompileInfo* cinfo, BOOL interface, BOOL dynamic_class)$/;"	f	file:
parse_class_on_compile_code	src/class_compiler.c	/^static BOOL parse_class_on_compile_code(sParserInfo* info, sCompileInfo* cinfo, BOOL interface)$/;"	f	file:
parse_class_source	src/class_compiler.c	/^static BOOL parse_class_source(sParserInfo* info, sCompileInfo* cinfo)$/;"	f	file:
parse_class_type	src/parser.c	/^BOOL parse_class_type(sCLClass** klass, sParserInfo* info)$/;"	f
parse_equalable_carray_value	src/parser.c	/^static BOOL parse_equalable_carray_value(unsigned int* node, sParserInfo* info) $/;"	f	file:
parse_equalable_list_value	src/parser.c	/^static BOOL parse_equalable_list_value(unsigned int* node, sParserInfo* info) $/;"	f	file:
parse_field_attributes_and_type	src/class_compiler.c	/^static BOOL parse_field_attributes_and_type(BOOL* private_, BOOL* protected_, BOOL* static_, sNodeType** result_type, sParserInfo* info, sCompileInfo* cinfo)$/;"	f	file:
parse_generics_params	src/class_compiler.c	/^static BOOL parse_generics_params(sParserInfo* info, sCompileInfo* cinfo)$/;"	f	file:
parse_hash_value	src/parser.c	/^static BOOL parse_hash_value(unsigned int* node, sParserInfo* info) $/;"	f	file:
parse_iniherit	src/parser.c	/^BOOL parse_iniherit(unsigned int* node, sParserInfo* info)$/;"	f
parse_list_value	src/parser.c	/^static BOOL parse_list_value(unsigned int* node, sParserInfo* info) $/;"	f	file:
parse_method_name_and_params	src/class_compiler.c	/^static BOOL parse_method_name_and_params(char* method_name, int method_name_max, sParserParam* params, int* num_params, sNodeType** result_type, BOOL* native_, BOOL* static_, sParserInfo* info, sCompileInfo* cinfo)$/;"	f	file:
parse_method_params	src/parser.c	/^static BOOL parse_method_params(int* num_params, unsigned int* params, sParserInfo* info)$/;"	f	file:
parse_methods_and_fields	src/class_compiler.c	/^static BOOL parse_methods_and_fields(sParserInfo* info, sCompileInfo* cinfo, BOOL interface)$/;"	f	file:
parse_methods_and_fields_on_compile_time	src/class_compiler.c	/^BOOL parse_methods_and_fields_on_compile_time(sParserInfo* info, sCompileInfo* cinfo, BOOL interface)$/;"	f
parse_module	src/class_compiler.c	/^static BOOL parse_module(sParserInfo* info, sCompileInfo* cinfo)$/;"	f	file:
parse_normal_block	src/parser.c	/^static BOOL parse_normal_block(unsigned int* node, sParserInfo* info)$/;"	f	file:
parse_param	src/parser.c	/^static BOOL parse_param(sParserParam* param, sParserInfo* info)$/;"	f	file:
parse_params	src/parser.c	/^BOOL parse_params(sParserParam* params, int* num_params, sParserInfo* info)$/;"	f
parse_params_and_entry_to_lvtable	src/parser.c	/^static BOOL parse_params_and_entry_to_lvtable(sParserParam* params, int* num_params, sParserInfo* info, sVarTable** new_table, sVarTable* parent_lv_table)$/;"	f	file:
parse_phase	src/common.h	/^    int parse_phase;$/;"	m	struct:sParserInfoStruct
parse_sortable_carray_value	src/parser.c	/^static BOOL parse_sortable_carray_value(unsigned int* node, sParserInfo* info) $/;"	f	file:
parse_sortable_list_value	src/parser.c	/^static BOOL parse_sortable_list_value(unsigned int* node, sParserInfo* info) $/;"	f	file:
parse_throws	src/class_compiler.c	/^static BOOL parse_throws(sParserInfo* info, sCompileInfo* cinfo, BOOL* throw_existance)$/;"	f	file:
parse_tuple_value	src/parser.c	/^static BOOL parse_tuple_value(unsigned int* node, sParserInfo* info) $/;"	f	file:
parse_type	src/parser.c	/^BOOL parse_type(sNodeType** result_type, sParserInfo* info)$/;"	f
parse_type_for_new	src/parser.c	/^BOOL parse_type_for_new(sNodeType** result_type, unsigned int* array_num, sParserInfo* info)$/;"	f
parse_word	src/parser.c	/^BOOL parse_word(char* buf, int buf_size, sParserInfo* info, BOOL print_out_err_msg)$/;"	f
parser_err_msg	src/parser.c	/^void parser_err_msg(sParserInfo* info, const char* msg, ...)$/;"	f
parser_param_to_cl_param	src/klass_compile_time.c	/^static void parser_param_to_cl_param(sParserParam* param, sCLParam* type, sCLClass* klass)$/;"	f	file:
pinfo	src/common.h	/^    sParserInfo* pinfo;$/;"	m	struct:sCompileInfoStruct
postposition_operator	src/parser.c	/^static BOOL postposition_operator(unsigned int* node, sParserInfo* info)$/;"	f	file:
prefix	Makefile	/^prefix=\/home\/ab25cq$/;"	m
print_node_type	src/node_type.c	/^void print_node_type(sNodeType* node_type)$/;"	f
prototypes	configure	/^   function prototypes and stuff, but not '\\xHH' hex character constants.$/;"	f
put_class_to_table	src/klass.c	/^BOOL put_class_to_table(char* class_name, sCLClass* klass)$/;"	f
put_fun_to_hash_for_native_method	src/native_method.c	/^static void put_fun_to_hash_for_native_method(char* path, fNativeMethod fun)$/;"	f	file:
read_char_from_file	src/klass.c	/^static BOOL read_char_from_file(int fd, char* c)$/;"	f	file:
read_cl_block_type_from_file	src/klass.c	/^static BOOL read_cl_block_type_from_file(int fd, sCLBlockType** cl_block_type)$/;"	f	file:
read_cl_type_from_file	src/klass.c	/^static BOOL read_cl_type_from_file(int fd, sCLType** cl_type)$/;"	f	file:
read_class_from_file	src/klass.c	/^static sCLClass* read_class_from_file(char* class_name, int fd)$/;"	f	file:
read_code_from_file	src/klass.c	/^static BOOL read_code_from_file(int fd, sByteCode* code)$/;"	f	file:
read_const_from_file	src/klass.c	/^static BOOL read_const_from_file(int fd, sConst* constant, char* class_name)$/;"	f	file:
read_fields_from_file	src/klass.c	/^static BOOL read_fields_from_file(int fd, sCLField** fields, int* num_fields, int* size_fields, sCLClass* klass)$/;"	f	file:
read_from_file	src/klass.c	/^static BOOL read_from_file(int fd, void* buf, size_t size)$/;"	f	file:
read_int_from_file	src/klass.c	/^static BOOL read_int_from_file(int fd, int* n)$/;"	f	file:
read_long_from_file	src/klass.c	/^static BOOL read_long_from_file(int fd, long* n)$/;"	f	file:
read_methods_from_file	src/klass.c	/^static BOOL read_methods_from_file(int fd, sCLMethod** methods, int* num_methods, int* size_methods, sCLClass* klass)$/;"	f	file:
read_source	src/compiler.c	/^BOOL read_source(char* fname, sBuf* source)$/;"	f
ready_for_typedef	src/klass.c	/^static BOOL ready_for_typedef(sCLClass* klass)$/;"	f	file:
regex_free_fun	src/regex.c	/^void regex_free_fun(CLObject obj)$/;"	f
release_entry	src/debug.c	/^void release_entry(void* memory, const char* file_name, int line, const char* func_name)$/;"	f
remove_class	src/klass.c	/^static void remove_class(char* class_name)$/;"	f	file:
remove_module_from_table	src/module.c	/^static void remove_module_from_table(char* module_name)$/;"	f	file:
remove_stack_to_stack_list	src/stack.c	/^BOOL remove_stack_to_stack_list(CLVALUE* stack)$/;"	f
reset_method_index_on_compile_time	src/class_compiler.c	/^static void reset_method_index_on_compile_time()$/;"	f	file:
return_expression	src/parser.c	/^static BOOL return_expression(unsigned int* node, sParserInfo* info)$/;"	f	file:
sArrayValue	src/common.h	/^        } sArrayValue;$/;"	m	union:sNodeTreeStruct::__anon2	typeref:struct:sNodeTreeStruct::__anon2::__anon16
sAssignVariable	src/common.h	/^        } sAssignVariable;$/;"	m	union:sNodeTreeStruct::__anon2	typeref:struct:sNodeTreeStruct::__anon2::__anon3
sBlockCall	src/common.h	/^        } sBlockCall;$/;"	m	union:sNodeTreeStruct::__anon2	typeref:struct:sNodeTreeStruct::__anon2::__anon14
sBlockObject	src/common.h	/^        } sBlockObject;$/;"	m	union:sNodeTreeStruct::__anon2	typeref:struct:sNodeTreeStruct::__anon2::__anon13
sBlockObject	src/common.h	/^typedef struct sBlockObjectStruct sBlockObject;$/;"	t	typeref:struct:sBlockObjectStruct
sBlockObjectStruct	src/common.h	/^struct sBlockObjectStruct$/;"	s
sBuf	src/buffer.h	/^typedef struct sBufStruct sBuf;$/;"	t	typeref:struct:sBufStruct
sBufStruct	src/buffer.h	/^struct sBufStruct {$/;"	s
sBuf_append	src/buffer.c	/^void sBuf_append(sBuf* self, void* str, size_t size)$/;"	f
sBuf_append_char	src/buffer.c	/^void sBuf_append_char(sBuf* self, char c)$/;"	f
sBuf_append_int	src/buffer.c	/^void sBuf_append_int(sBuf* self, int value)$/;"	f
sBuf_append_long	src/buffer.c	/^void sBuf_append_long(sBuf* self, long value)$/;"	f
sBuf_append_str	src/buffer.c	/^void sBuf_append_str(sBuf* self, char* str)$/;"	f
sBuf_init	src/buffer.c	/^void sBuf_init(sBuf* self)$/;"	f
sBuffer	src/common.h	/^        } sBuffer;$/;"	m	union:sNodeTreeStruct::__anon2	typeref:struct:sNodeTreeStruct::__anon2::__anon12
sByteCode	src/common.h	/^typedef struct sByteCodeStruct sByteCode;$/;"	t	typeref:struct:sByteCodeStruct
sByteCodeStruct	src/common.h	/^struct sByteCodeStruct {$/;"	s
sByteCode_free	src/code.c	/^void sByteCode_free(sByteCode* code)$/;"	f
sByteCode_init	src/code.c	/^void sByteCode_init(sByteCode* code)$/;"	f
sByteCode_init_with_size	src/code.c	/^void sByteCode_init_with_size(sByteCode* code, int size)$/;"	f
sCLBlockType	src/common.h	/^typedef struct sCLBlockTypeStruct sCLBlockType;$/;"	t	typeref:struct:sCLBlockTypeStruct
sCLBlockTypeStruct	src/common.h	/^struct sCLBlockTypeStruct {$/;"	s
sCLClass	src/common.h	/^typedef struct sCLClassStruct sCLClass;$/;"	t	typeref:struct:sCLClassStruct
sCLClassStruct	src/common.h	/^struct sCLClassStruct {$/;"	s
sCLField	src/common.h	/^typedef struct sCLFieldStruct sCLField;$/;"	t	typeref:struct:sCLFieldStruct
sCLFieldStruct	src/common.h	/^struct sCLFieldStruct {$/;"	s
sCLHeapManager	src/heap.c	/^typedef struct sCLHeapManager_ sCLHeapManager;$/;"	t	typeref:struct:sCLHeapManager_	file:
sCLHeapManager_	src/heap.c	/^struct sCLHeapManager_ {$/;"	s	file:
sCLHeapMem	src/common.h	/^typedef struct sCLHeapMemStruct sCLHeapMem;$/;"	t	typeref:struct:sCLHeapMemStruct
sCLHeapMemStruct	src/common.h	/^struct sCLHeapMemStruct {$/;"	s
sCLMethod	src/common.h	/^typedef struct sCLMethodStruct sCLMethod;$/;"	t	typeref:struct:sCLMethodStruct
sCLMethodStruct	src/common.h	/^struct sCLMethodStruct {$/;"	s
sCLModule	src/common.h	/^typedef struct sCLModuleStruct sCLModule;$/;"	t	typeref:struct:sCLModuleStruct
sCLModuleStruct	src/common.h	/^struct sCLModuleStruct {$/;"	s
sCLObject	src/common.h	/^typedef struct sCLObjectStruct sCLObject;$/;"	t	typeref:struct:sCLObjectStruct
sCLObjectStruct	src/common.h	/^struct sCLObjectStruct {$/;"	s
sCLParam	src/common.h	/^typedef struct sCLParamStruct sCLParam;$/;"	t	typeref:struct:sCLParamStruct
sCLParamStruct	src/common.h	/^struct sCLParamStruct {$/;"	s
sCLStack	src/common.h	/^typedef struct sCLStackStruct sCLStack;$/;"	t	typeref:struct:sCLStackStruct
sCLStackStruct	src/common.h	/^struct sCLStackStruct {$/;"	s
sCLType	src/common.h	/^typedef struct sCLTypeStruct sCLType;$/;"	t	typeref:struct:sCLTypeStruct
sCLTypeStruct	src/common.h	/^struct sCLTypeStruct {$/;"	s
sCastMethods	src/node.c	/^struct sCastMethods {$/;"	s	file:
sClassField	src/common.h	/^        } sClassField;$/;"	m	union:sNodeTreeStruct::__anon2	typeref:struct:sNodeTreeStruct::__anon2::__anon11
sClassMethodCall	src/common.h	/^        } sClassMethodCall;$/;"	m	union:sNodeTreeStruct::__anon2	typeref:struct:sNodeTreeStruct::__anon2::__anon8
sClassTable	src/common.h	/^typedef struct sClassTableStruct sClassTable;$/;"	t	typeref:struct:sClassTableStruct
sClassTableStruct	src/common.h	/^struct sClassTableStruct$/;"	s
sCompileInfo	src/common.h	/^typedef struct sCompileInfoStruct sCompileInfo;$/;"	t	typeref:struct:sCompileInfoStruct
sCompileInfoStruct	src/common.h	/^struct sCompileInfoStruct$/;"	s
sConst	src/common.h	/^typedef struct sConstStruct sConst;$/;"	t	typeref:struct:sConstStruct
sConstStruct	src/common.h	/^struct sConstStruct$/;"	s
sConst_append	src/constant.c	/^int sConst_append(sConst* self, void* data, size_t size, BOOL no_output)$/;"	f
sConst_free	src/constant.c	/^void sConst_free(sConst* self)$/;"	f
sConst_init	src/constant.c	/^void sConst_init(sConst* self)$/;"	f
sConst_init_with_size	src/constant.c	/^void sConst_init_with_size(sConst* self, int size)$/;"	f
sFor	src/common.h	/^        } sFor;$/;"	m	union:sNodeTreeStruct::__anon2	typeref:struct:sNodeTreeStruct::__anon2::__anon6
sGenericsParamInfo	src/common.h	/^typedef struct sGenericsParamInfoStruct sGenericsParamInfo;$/;"	t	typeref:struct:sGenericsParamInfoStruct
sGenericsParamInfoStruct	src/common.h	/^struct sGenericsParamInfoStruct$/;"	s
sHandle	src/heap.c	/^typedef struct sHandle_ sHandle;$/;"	t	typeref:struct:sHandle_	file:
sHandle_	src/heap.c	/^struct sHandle_ {$/;"	s	file:
sHashValue	src/common.h	/^        } sHashValue;$/;"	m	union:sNodeTreeStruct::__anon2	typeref:struct:sNodeTreeStruct::__anon2::__anon19
sIf	src/common.h	/^        } sIf;$/;"	m	union:sNodeTreeStruct::__anon2	typeref:struct:sNodeTreeStruct::__anon2::__anon4
sInheritCall	src/common.h	/^        } sInheritCall;$/;"	m	union:sNodeTreeStruct::__anon2	typeref:struct:sNodeTreeStruct::__anon2::__anon15
sListValue	src/common.h	/^        } sListValue;$/;"	m	union:sNodeTreeStruct::__anon2	typeref:struct:sNodeTreeStruct::__anon2::__anon17
sMethodCall	src/common.h	/^        } sMethodCall;$/;"	m	union:sNodeTreeStruct::__anon2	typeref:struct:sNodeTreeStruct::__anon2::__anon9
sNativeMethod	src/native_method.c	/^typedef struct sNativeMethodStruct sNativeMethod;$/;"	t	typeref:struct:sNativeMethodStruct	file:
sNativeMethodHashItem	src/native_method.c	/^struct sNativeMethodHashItem {$/;"	s	file:
sNativeMethodStruct	src/native_method.c	/^struct sNativeMethodStruct {$/;"	s	file:
sNewOperator	src/common.h	/^        } sNewOperator;$/;"	m	union:sNodeTreeStruct::__anon2	typeref:struct:sNodeTreeStruct::__anon2::__anon10
sNodeBlock	src/common.h	/^typedef struct sNodeBlockStruct sNodeBlock;$/;"	t	typeref:struct:sNodeBlockStruct
sNodeBlockStruct	src/common.h	/^struct sNodeBlockStruct$/;"	s
sNodeBlockType	src/common.h	/^typedef struct sNodeBlockTypeStruct sNodeBlockType;$/;"	t	typeref:struct:sNodeBlockTypeStruct
sNodeBlockTypeStruct	src/common.h	/^struct sNodeBlockTypeStruct {$/;"	s
sNodeBlock_alloc	src/node_block.c	/^static sNodeBlock* sNodeBlock_alloc()$/;"	f	file:
sNodeBlock_free	src/node_block.c	/^void sNodeBlock_free(sNodeBlock* block)$/;"	f
sNodeTree	src/common.h	/^typedef struct sNodeTreeStruct sNodeTree;$/;"	t	typeref:struct:sNodeTreeStruct
sNodeTreeStruct	src/common.h	/^struct sNodeTreeStruct $/;"	s
sNodeTree_break_expression	src/node.c	/^unsigned int sNodeTree_break_expression()$/;"	f
sNodeTree_conditional_expression	src/node.c	/^unsigned int sNodeTree_conditional_expression(unsigned int expression_node, unsigned int true_expression_node, unsigned int false_expression_node)$/;"	f
sNodeTree_create_and_and	src/node.c	/^unsigned int sNodeTree_create_and_and(unsigned int left_node, unsigned int right_node)$/;"	f
sNodeTree_create_array_value	src/node.c	/^unsigned int sNodeTree_create_array_value(int num_elements, unsigned int array_elements[])$/;"	f
sNodeTree_create_assign_class_field	src/node.c	/^unsigned int sNodeTree_create_assign_class_field(sCLClass* klass, char* name , unsigned int right_node)$/;"	f
sNodeTree_create_assign_field	src/node.c	/^unsigned int sNodeTree_create_assign_field(char* var_name, unsigned int left_node, unsigned int right_node)$/;"	f
sNodeTree_create_block_call	src/node.c	/^unsigned int sNodeTree_create_block_call(unsigned int block, int num_params, unsigned int params[])$/;"	f
sNodeTree_create_block_object	src/node.c	/^unsigned int sNodeTree_create_block_object(sParserParam* params, int num_params, sNodeType* result_type, MANAGED sNodeBlock* node_block, BOOL lambda)$/;"	f
sNodeTree_create_buffer_value	src/node.c	/^unsigned int sNodeTree_create_buffer_value(MANAGED char* value, int len)$/;"	f
sNodeTree_create_byte_value	src/node.c	/^unsigned int sNodeTree_create_byte_value(char value, unsigned int left, unsigned int right, unsigned int middle)$/;"	f
sNodeTree_create_carray_value	src/node.c	/^unsigned int sNodeTree_create_carray_value(int num_elements, unsigned int array_elements[])$/;"	f
sNodeTree_create_character_value	src/node.c	/^unsigned int sNodeTree_create_character_value(wchar_t c)$/;"	f
sNodeTree_create_class_fields	src/node.c	/^unsigned int sNodeTree_create_class_fields(sCLClass* klass, char* name)$/;"	f
sNodeTree_create_class_method_call	src/node.c	/^unsigned int sNodeTree_create_class_method_call(sNodeType* klass, char* method_name, unsigned int* params, int num_params)$/;"	f
sNodeTree_create_decrement_operand	src/node.c	/^BOOL sNodeTree_create_decrement_operand(unsigned int left_node)$/;"	f
sNodeTree_create_decrement_operand_with_value	src/node.c	/^BOOL sNodeTree_create_decrement_operand_with_value(unsigned int left_node, unsigned int value)$/;"	f
sNodeTree_create_double_value	src/node.c	/^unsigned int sNodeTree_create_double_value(double value, unsigned int left, unsigned int right, unsigned int middle)$/;"	f
sNodeTree_create_equalable_carray_value	src/node.c	/^unsigned int sNodeTree_create_equalable_carray_value(int num_elements, unsigned int array_elements[])$/;"	f
sNodeTree_create_equalable_list_value	src/node.c	/^unsigned int sNodeTree_create_equalable_list_value(int num_elements, unsigned int list_elements[])$/;"	f
sNodeTree_create_fields	src/node.c	/^unsigned int sNodeTree_create_fields(char* name, unsigned int left_node)$/;"	f
sNodeTree_create_float_value	src/node.c	/^unsigned int sNodeTree_create_float_value(float value, unsigned int left, unsigned int right, unsigned int middle)$/;"	f
sNodeTree_create_get_address	src/node.c	/^unsigned int sNodeTree_create_get_address(unsigned int rnode)$/;"	f
sNodeTree_create_hash_value	src/node.c	/^unsigned int sNodeTree_create_hash_value(int num_elements, unsigned int hash_keys[], unsigned int hash_items[])$/;"	f
sNodeTree_create_implements	src/node.c	/^unsigned int sNodeTree_create_implements(unsigned int lnode, char* interface_name)$/;"	f
sNodeTree_create_increment_operand	src/node.c	/^BOOL sNodeTree_create_increment_operand(unsigned int left_node)$/;"	f
sNodeTree_create_increment_operand_with_value	src/node.c	/^BOOL sNodeTree_create_increment_operand_with_value(unsigned int left_node, unsigned int value)$/;"	f
sNodeTree_create_inherit_call	src/node.c	/^unsigned int sNodeTree_create_inherit_call(int num_params, unsigned int params[], int method_index)$/;"	f
sNodeTree_create_int_value	src/node.c	/^unsigned int sNodeTree_create_int_value(int value, unsigned int left, unsigned int right, unsigned int middle)$/;"	f
sNodeTree_create_list_value	src/node.c	/^unsigned int sNodeTree_create_list_value(int num_elements, unsigned int list_elements[])$/;"	f
sNodeTree_create_load_array_element	src/node.c	/^unsigned int sNodeTree_create_load_array_element(unsigned int array, unsigned int index_node)$/;"	f
sNodeTree_create_load_value_from_pointer	src/node.c	/^unsigned int sNodeTree_create_load_value_from_pointer(unsigned int left_node, sNodeType* node_type)$/;"	f
sNodeTree_create_load_variable	src/node.c	/^unsigned int sNodeTree_create_load_variable(char* var_name)$/;"	f
sNodeTree_create_long_value	src/node.c	/^unsigned int sNodeTree_create_long_value(long value, unsigned int left, unsigned int right, unsigned int middle)$/;"	f
sNodeTree_create_method_call	src/node.c	/^unsigned int sNodeTree_create_method_call(unsigned int object_node, char* method_name, unsigned int* params, int num_params)$/;"	f
sNodeTree_create_monadic_decrement_operand	src/node.c	/^BOOL sNodeTree_create_monadic_decrement_operand(unsigned int right_node)$/;"	f
sNodeTree_create_monadic_increment_operand	src/node.c	/^BOOL sNodeTree_create_monadic_increment_operand(unsigned int right_node)$/;"	f
sNodeTree_create_new_operator	src/node.c	/^unsigned int sNodeTree_create_new_operator(sNodeType* node_type, unsigned int* params, int num_params, unsigned int array_num)$/;"	f
sNodeTree_create_normal_block	src/node.c	/^unsigned int sNodeTree_create_normal_block(MANAGED sNodeBlock* node_block)$/;"	f
sNodeTree_create_operand	src/node.c	/^unsigned int sNodeTree_create_operand(enum eOperand operand, unsigned int left, unsigned int right, unsigned int middle)$/;"	f
sNodeTree_create_or_or	src/node.c	/^unsigned int sNodeTree_create_or_or(unsigned int left_node, unsigned int right_node)$/;"	f
sNodeTree_create_path_value	src/node.c	/^unsigned int sNodeTree_create_path_value(MANAGED char* value, int len)$/;"	f
sNodeTree_create_regex	src/node.c	/^unsigned int sNodeTree_create_regex(MANAGED char* regex_str, BOOL global, BOOL ignore_case, BOOL multiline, BOOL extended, BOOL dotall, BOOL anchored, BOOL dollar_endonly, BOOL ungreedy)$/;"	f
sNodeTree_create_return_expression	src/node.c	/^unsigned int sNodeTree_create_return_expression(unsigned int expression_node)$/;"	f
sNodeTree_create_short_value	src/node.c	/^unsigned int sNodeTree_create_short_value(short value, unsigned int left, unsigned int right, unsigned int middle)$/;"	f
sNodeTree_create_sortable_carray_value	src/node.c	/^unsigned int sNodeTree_create_sortable_carray_value(int num_elements, unsigned int array_elements[])$/;"	f
sNodeTree_create_sortable_list_value	src/node.c	/^unsigned int sNodeTree_create_sortable_list_value(int num_elements, unsigned int list_elements[])$/;"	f
sNodeTree_create_store_array_element	src/node.c	/^unsigned int sNodeTree_create_store_array_element(unsigned int array, unsigned int index_node, unsigned int right_node)$/;"	f
sNodeTree_create_store_value_to_pointer	src/node.c	/^unsigned int sNodeTree_create_store_value_to_pointer(unsigned int left_node, sNodeType* node_type, unsigned int right_node)$/;"	f
sNodeTree_create_store_variable	src/node.c	/^unsigned int sNodeTree_create_store_variable(char* var_name, sNodeType* node_type, int right, sCLClass* klass)$/;"	f
sNodeTree_create_string_value	src/node.c	/^unsigned int sNodeTree_create_string_value(MANAGED char* value)$/;"	f
sNodeTree_create_throw_expression	src/node.c	/^unsigned int sNodeTree_create_throw_expression(unsigned int expression_node)$/;"	f
sNodeTree_create_tuple_value	src/node.c	/^unsigned int sNodeTree_create_tuple_value(int num_elements, unsigned int tuple_elements[])$/;"	f
sNodeTree_create_ubyte_value	src/node.c	/^unsigned int sNodeTree_create_ubyte_value(unsigned char value, unsigned int left, unsigned int right, unsigned int middle)$/;"	f
sNodeTree_create_uint_value	src/node.c	/^unsigned int sNodeTree_create_uint_value(unsigned int value, unsigned int left, unsigned int right, unsigned int middle)$/;"	f
sNodeTree_create_ulong_value	src/node.c	/^unsigned int sNodeTree_create_ulong_value(unsigned long value, unsigned int left, unsigned int right, unsigned int middle)$/;"	f
sNodeTree_create_ushort_value	src/node.c	/^unsigned int sNodeTree_create_ushort_value(unsigned short value, unsigned int left, unsigned int right, unsigned int middle)$/;"	f
sNodeTree_false_expression	src/node.c	/^unsigned int sNodeTree_false_expression()$/;"	f
sNodeTree_for_expression	src/node.c	/^unsigned int sNodeTree_for_expression(unsigned int expression_node1, unsigned int expression_node2, unsigned int expression_node3, MANAGED sNodeBlock* for_node_block)$/;"	f
sNodeTree_if_expression	src/node.c	/^unsigned int sNodeTree_if_expression(unsigned int expression_node, MANAGED sNodeBlock* if_node_block, unsigned int* elif_expression_nodes, MANAGED sNodeBlock** elif_node_blocks, int elif_num, MANAGED sNodeBlock* else_node_block)$/;"	f
sNodeTree_null_expression	src/node.c	/^unsigned int sNodeTree_null_expression()$/;"	f
sNodeTree_true_expression	src/node.c	/^unsigned int sNodeTree_true_expression()$/;"	f
sNodeTree_try_expression	src/node.c	/^unsigned int sNodeTree_try_expression(MANAGED sNodeBlock* try_node_block, MANAGED sNodeBlock* catch_node_block, char* exception_var_name)$/;"	f
sNodeTree_while_expression	src/node.c	/^unsigned int sNodeTree_while_expression(unsigned int expression_node, MANAGED sNodeBlock* while_node_block)$/;"	f
sNodeType	src/common.h	/^typedef struct sNodeTypeStruct sNodeType;$/;"	t	typeref:struct:sNodeTypeStruct
sNodeTypeStruct	src/common.h	/^struct sNodeTypeStruct {$/;"	s
sParserInfo	src/common.h	/^typedef struct sParserInfoStruct sParserInfo;$/;"	t	typeref:struct:sParserInfoStruct
sParserInfoStruct	src/common.h	/^struct sParserInfoStruct$/;"	s
sParserParam	src/common.h	/^typedef struct sParserParamStruct sParserParam;$/;"	t	typeref:struct:sParserParamStruct
sParserParamStruct	src/common.h	/^struct sParserParamStruct $/;"	s
sRegex	src/common.h	/^        } sRegex;$/;"	m	union:sNodeTreeStruct::__anon2	typeref:struct:sNodeTreeStruct::__anon2::__anon20
sRegexObject	src/common.h	/^typedef struct sRegexObjectStruct sRegexObject;$/;"	t	typeref:struct:sRegexObjectStruct
sRegexObjectStruct	src/common.h	/^struct sRegexObjectStruct$/;"	s
sTry	src/common.h	/^        } sTry;$/;"	m	union:sNodeTreeStruct::__anon2	typeref:struct:sNodeTreeStruct::__anon2::__anon7
sTupleValue	src/common.h	/^        } sTupleValue;$/;"	m	union:sNodeTreeStruct::__anon2	typeref:struct:sNodeTreeStruct::__anon2::__anon18
sVMInfo	src/common.h	/^typedef struct sVMInfoStruct sVMInfo;$/;"	t	typeref:struct:sVMInfoStruct
sVMInfoStruct	src/common.h	/^struct sVMInfoStruct {$/;"	s
sVar	src/common.h	/^typedef struct sVarStruct sVar;$/;"	t	typeref:struct:sVarStruct
sVarStruct	src/common.h	/^struct sVarStruct {$/;"	s
sVarTable	src/common.h	/^typedef struct sVarTableStruct sVarTable;$/;"	t	typeref:struct:sVarTableStruct
sVarTableStruct	src/common.h	/^struct sVarTableStruct {$/;"	s
sWhile	src/common.h	/^        } sWhile;$/;"	m	union:sNodeTreeStruct::__anon2	typeref:struct:sNodeTreeStruct::__anon2::__anon5
save_module_to_file	src/module.c	/^static BOOL save_module_to_file(sCLModule* self)$/;"	f	file:
search_for_class_field	src/klass_compile_time.c	/^int search_for_class_field(sCLClass* klass, char* field_name)$/;"	f
search_for_class_file	src/klass.c	/^static BOOL search_for_class_file(char* class_name, char* class_file_name, size_t class_file_name_size)$/;"	f	file:
search_for_field	src/klass_compile_time.c	/^int search_for_field(sCLClass* klass, char* field_name)$/;"	f
search_for_method	src/klass_compile_time.c	/^int search_for_method(sCLClass* klass, char* method_name, sNodeType** param_types, int num_params, BOOL search_for_class_method, int start_point, sNodeType* left_generics_type, sNodeType* right_generics_type, sNodeType** result_type)$/;"	f
search_for_method_from_virtual_method_table	src/klass.c	/^sCLMethod* search_for_method_from_virtual_method_table(sCLClass* klass, char* method_name_and_params)$/;"	f
search_for_methods_from_method_name	src/klass_compile_time.c	/^BOOL search_for_methods_from_method_name(int method_indexes[], int size_method_indexes, int* num_methods, sCLClass* klass, char* method_name, int start_point)$/;"	f
search_for_module_file_from_module_name	src/module.c	/^static BOOL search_for_module_file_from_module_name(char* module_file, unsigned int module_file_size, char* module_name)$/;"	f	file:
set_boxing_and_unboxing_class	src/klass.c	/^static void set_boxing_and_unboxing_class(char* primitive_class_name, char* lapper_class_name)$/;"	f	file:
set_boxing_and_unboxing_classes	src/klass.c	/^void set_boxing_and_unboxing_classes()$/;"	f
set_free_fun_to_classes	src/vm.c	/^static void set_free_fun_to_classes()$/;"	f	file:
set_max_block_var_num	src/vtable.c	/^void set_max_block_var_num(sVarTable* lv_table, sVarTable* old_table)$/;"	f
set_method_index_to_class	src/klass_compile_time.c	/^void set_method_index_to_class(sCLClass* klass)$/;"	f
set_signal	src/main.c	/^static void set_signal()$/;"	f	file:
sharedstatedir	Makefile	/^sharedstatedir=${prefix}\/com$/;"	m
show_exception_message	src/exception.c	/^void show_exception_message(char* message)$/;"	f
show_inst	src/vm.c	/^static void show_inst(unsigned inst)$/;"	f	file:
show_node	src/node.c	/^void show_node(unsigned int node)$/;"	f
show_stack	src/vm.c	/^static void show_stack(CLVALUE* stack, CLVALUE* stack_ptr, CLVALUE* lvar, int var_num)$/;"	f	file:
show_vtable	src/vtable.c	/^void show_vtable(sVarTable* table)$/;"	f
single_operator	src/node.c	/^static BOOL single_operator(sNodeType* type, int byte_operand, int ubyte_operand, int short_operand, int ushort_operand, int int_operand, int uint_operand, int long_operand, int ulong_operand, sCompileInfo* info)$/;"	f	file:
skip_block	src/class_compiler.c	/^static BOOL skip_block(sParserInfo* info)$/;"	f	file:
skip_spaces_and_lf	src/parser.c	/^void skip_spaces_and_lf(sParserInfo* info)$/;"	f
sline	src/common.h	/^    int sline;$/;"	m	struct:sParserInfoStruct
sname	src/common.h	/^    char* sname;$/;"	m	struct:sParserInfoStruct
solve_generics_for_variable	src/node_type.c	/^void solve_generics_for_variable(sNodeType* generics_type, sNodeType** generics_type2, sCLClass* generics_class)$/;"	f
solve_generics_for_variable_to_class	src/node_type.c	/^void solve_generics_for_variable_to_class(sCLClass* klass, sCLClass** result, sCLClass* generics_class)$/;"	f
solve_generics_types_for_node_type	src/node_type.c	/^BOOL solve_generics_types_for_node_type(sNodeType* node_type, ALLOC sNodeType** result, sNodeType* generics_type)$/;"	f
stack_final	src/stack.c	/^void stack_final()$/;"	f
stack_init	src/stack.c	/^void stack_init()$/;"	f
stack_num	src/common.h	/^    int stack_num;$/;"	m	struct:sCompileInfoStruct
string_object_to_char_array	src/clover_to_clang.c	/^ALLOC char* string_object_to_char_array(CLObject string_object)$/;"	f
string_object_to_wchar_array	src/clover_to_clang.c	/^ALLOC wchar_t* string_object_to_wchar_array(CLObject string_object)$/;"	f
substitution_posibility	src/node_type.c	/^BOOL substitution_posibility(sNodeType* left, sNodeType* right, sNodeType* left_generics_types, sNodeType* right_generics_types)$/;"	f
substitution_posibility_for_node_block_type	src/node_block_type.c	/^BOOL substitution_posibility_for_node_block_type(sNodeBlockType* left_block, sNodeBlockType* right_block, sNodeType* left_generics_types, sNodeType* right_generics_types)$/;"	f
substitution_posibility_with_class_name	src/node_type.c	/^BOOL substitution_posibility_with_class_name(sNodeType* left, char* right_class_name)$/;"	f
sysconfdir	Makefile	/^sysconfdir=${prefix}\/etc\/clover2$/;"	m
t_malloc_entry	src/debug.c	/^typedef struct _t_malloc_entry t_malloc_entry;$/;"	t	typeref:struct:_t_malloc_entry	file:
this_module_is_modified	src/module.c	/^void this_module_is_modified(sCLModule* self)$/;"	f
throw_expression	src/parser.c	/^static BOOL throw_expression(unsigned int* node, sParserInfo* info)$/;"	f	file:
try_expression	src/parser.c	/^static BOOL try_expression(unsigned int* node, sParserInfo* info)$/;"	f	file:
type	src/common.h	/^    sNodeType* type;$/;"	m	struct:sCompileInfoStruct
type_	src/node.c	/^    char* type_;$/;"	m	struct:sCastMethods	file:
type_identify	src/node_type.c	/^BOOL type_identify(sNodeType* left, sNodeType* right)$/;"	f
type_identify_with_class_name	src/node_type.c	/^BOOL type_identify_with_class_name(sNodeType* left, char* right_class_name)$/;"	f
uCode	src/common.h	/^    } uCode;$/;"	m	struct:sCLMethodStruct	typeref:union:sCLMethodStruct::__anon1
uValue	src/common.h	/^    } uValue;$/;"	m	struct:sNodeTreeStruct	typeref:union:sNodeTreeStruct::__anon2
unboxig_posibility	src/node_type.c	/^BOOL unboxig_posibility(sCLClass* klass)$/;"	f
unboxing_to_primitive_type	src/node_type.c	/^BOOL unboxing_to_primitive_type(sNodeType** left_type, struct sCompileInfoStruct* info)$/;"	f
unload_module	src/module.c	/^void unload_module(char* module_name)$/;"	f
utf32_index_to_utf8_index	src/utf.c	/^int utf32_index_to_utf8_index(char* str, int utf32_index)$/;"	f
utf8_index_to_utf32_index	src/utf.c	/^int utf8_index_to_utf32_index(char* str, int utf8_index)$/;"	f
vm	src/vm.c	/^BOOL vm(sByteCode* code, sConst* constant, CLVALUE* stack, int var_num, sCLClass* klass, sVMInfo* info)$/;"	f
vm_mutex_off	src/vm.c	/^void vm_mutex_off()$/;"	f
vm_mutex_on	src/vm.c	/^void vm_mutex_on()$/;"	f
while_expression	src/parser.c	/^static BOOL while_expression(unsigned int* node, sParserInfo* info)$/;"	f	file:
write_all_modified_classes	src/klass_compile_time.c	/^BOOL write_all_modified_classes()$/;"	f
write_all_modified_modules	src/module.c	/^void write_all_modified_modules()$/;"	f
write_class_to_buffer	src/klass_compile_time.c	/^static void write_class_to_buffer(sCLClass* klass, sBuf* buf)$/;"	f	file:
write_class_to_class_file	src/klass_compile_time.c	/^BOOL write_class_to_class_file(sCLClass* klass)$/;"	f
write_code_and_constant_to_file	src/script.c	/^static BOOL write_code_and_constant_to_file(sByteCode* code, sConst* constant, int var_num, char* fname)$/;"	f	file:
xcalloc	src/debug.c	/^ALLOC void* xcalloc(size_t count, size_t size)$/;"	f
xmalloc	src/debug.c	/^ALLOC void* xmalloc(size_t size)$/;"	f
xrealloc	src/debug.c	/^ALLOC void* xrealloc(void* ptr, size_t size)$/;"	f
xstrdup	src/debug.c	/^ALLOC char* xstrdup(char* str)$/;"	f
xstrncat	src/debug.c	/^static char* xstrncat(char* des, char* str, int size)$/;"	f	file:
xstrncat	src/xfunc.c	/^char* xstrncat(char* des, char* str, int size)$/;"	f
xstrncpy	src/debug.c	/^static char* xstrncpy(char* des, char* src, int size)$/;"	f	file:
xstrncpy	src/xfunc.c	/^char* xstrncpy(char* des, char* src, int size)$/;"	f
xwcstombs	src/xfunc.c	/^ALLOC char* xwcstombs(wchar_t* wstr, int len)$/;"	f
