include "Command.clcl"

class SortableList<T:ISortable>
{
    def grep(reg:regex) {
        self.each(closure(file_name:T) {
            if(file_name.className().equals("String")) {
                file_name2: String = file_name.toAnonymous();

                n:int = 1;
                file_name2.toPath().read().toString().split('\n')/*.each(closure(line:String) {
                    if(line.indexOf(reg) != -1) {
                        Global.printf("%s %d: %s\n", array { file_name2, n.toInteger, line });
                    }
                    n++;
                });
                */
            }
        });
    }
}

/*
class CLNodeTree
{
    type:int;

    left:CLNodeTree;
    right:CLNodeTree;
    middle:CLNodeTree;

    sourceName:String;
    sourceLine:int;
}

class CLParser
{
    sourceBuffer:Buffer;

    def initialize(sname:String) {
        self.sourceBuffer = File.read(sname);
    }

    def mainLoop() {
        p:pointer = self.sourceBuffer.buffer;

        while(p->char != '\0') {
        }
    }

    def expression()
}
*/
