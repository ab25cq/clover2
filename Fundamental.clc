
class System: final
{
    def exit(num:int): native static; # throws SystemException;
    def assert(exp:bool): native static;  # throws SystemException;
    def print(str:String): native static;
    def println(str:String): native static;
    def printToError(str:String): native static;
    def printlnToError(str:String): native static;
    def sleep(time:int): native static uint;

    def malloc(size:int): native static pointer;
    def calloc(number: int, size: int): native static pointer;
    def free(ptr:pointer): native static;
    def strlen(ptr:pointer): native static int;
    def strcpy(str1:pointer, str2:pointer): native static pointer;
    def strncpy(str1:pointer, str2:pointer, size:int): native static pointer;
    def strdup(str:pointer): native static pointer;

#    def wcstombs(dest:pointer, src:pointer, size:int): native int;
#    def mbstowcs(dest:pointer, src:pointer, size:int):native int;
}

class Clover: final
{
    def test(msg: String, expression:bool):static {
        System.printToError(msg.append("..."));
        System.assert(expression);
        System.printlnToError("OK");
    }
}

class String: final
{
    buffer: char[];

    def initialize() {
        self.buffer = new char[1]();
        self.buffer[0] = '\0';
    }

    def initialize(buffer:char[]) {
        self.buffer = buffer;
    }

    def chars(index:int):char {
        return self.buffer[index];
    }

    def length():int {
        return self.buffer.length-1;
    }

    def setValue(str: String) {
        self.buffer = new char[str.length()+1]();
        for(i:int = 0; i<str.length(); i++) {
            self.buffer[i] = str.chars(i);
        }
        self.buffer[str.length()] = '\0';
    }

    def append(str: String): String {
        new_buffer:char[] = new char[self.buffer.length + str.length()]();
        for(i:int = 0; i<self.buffer.length-1; i++) {
            new_buffer[i] = self.buffer[i];
        }
        for(i:int = 0; i<str.length(); i++) {
            new_buffer[i+self.buffer.length-1] = str.chars(i);
        }
        new_buffer[self.buffer.length-1 + str.length()] = '\0';

        return new String(new_buffer);
    }

    def equals(str: String):bool {
        if(self.buffer.length-1 == str.length()) {
            for(i:int = 0; i<self.buffer.length-1; i++) {
                if(self.buffer[i] != str.chars(i)) {
                    return false;
                }
            }

            return true;
        }
        else {
            return false;
        }
    }
}

class Exception
{
    message:String;

    def initialize(message:String) {
        self.message = message;
    }
}

