
class PcreOVec
{
    start:int[];
    end:int[];

    def initialize(max:int) {
        self.start = new int[max]();
        self.end = new int[max]();
    }
}

class System
{
    def exit(num:int): native static;
    def assert(exp:bool): native static throws Exception;
    def print(str:String): native static;
    def println(str:String): native static;
    def printToError(str:String): native static;
    def printlnToError(str:String): native static;
    def sleep(time:int): native static uint;

    def malloc(size:int): native static pointer;
    def calloc(number: int, size: int): native static pointer;
    def free(ptr:pointer): native static;
    def strlen(ptr:pointer): native static int;
    def strcpy(str1:pointer, str2:pointer): native static pointer;
    def strncpy(str1:pointer, str2:pointer, size:int): native static pointer;
    def strdup(str:pointer): native static pointer;

    def pcre_exec(regex:regex, str:String, ovec_max:int, ovec:PcreOVec): native static int;

#    def wcstombs(dest:pointer, src:pointer, size:int): native int;
#    def mbstowcs(dest:pointer, src:pointer, size:int):native int;
}

class Clover
{
    def test(msg: String, expression:bool):static {
        System.printToError(msg.append("..."));
        System.assert(expression);
        System.printlnToError("OK");
    }
}

class String
{
    buffer: char[];

    def initialize() {
        self.buffer = new char[1]();
        self.buffer[0] = '\0';
    }

    def initialize(buffer:char[]) {
        self.buffer = buffer;
    }

    def initialize(str:String) {
        self.setValue(str);
    }

    def chars(index:int):char {
        return self.buffer[index];
    }

    def length():int {
        return self.buffer.length-1;
    }

    def setValue(str: String) {
        self.buffer = new char[str.length()+1]();
        for(i:int = 0; i<str.length(); i++) {
            self.buffer[i] = str.chars(i);
        }
        self.buffer[str.length()] = '\0';
    }

    def setValue(buffer:char[]) {
        self.buffer = buffer;
    }

    def append(str: String): String {
        new_buffer:char[] = new char[self.buffer.length + str.length()]();
        for(i:int = 0; i<self.buffer.length-1; i++) {
            new_buffer[i] = self.buffer[i];
        }
        for(i = 0; i<str.length(); i++) {
            new_buffer[i+self.buffer.length-1] = str.chars(i);
        }
        new_buffer[self.buffer.length-1 + str.length()] = '\0';

        self.setValue(new_buffer);

        return self;
    }

    def equals(str: String):bool {
        if(self.buffer.length-1 == str.length()) {
            for(i:int = 0; i<self.buffer.length-1; i++) {
                if(self.buffer[i] != str.chars(i)) {
                    return false;
                }
            }

            return true;
        }
        else {
            return false;
        }
    }

    def getHashKey(): uint {
        key:uint = 0;
        for(i:int =1; i<self.buffer.length-1; i++) {
            key += self.buffer[i].to_uint;
        }

        return key;
    }
}

class Exception
{
    message:String;

    def initialize(message:String) {
        self.message = message;
    }
}

class SystemException
{
    message:String;

    def initialize(message:String) {
        self.message = message;
    }
}

interface Object 
{
}

class Byte 
{
    value:byte;

    def initialize() {
        self.value = 0.to_byte;
    }

    def initialize(value:byte) {
        self.value = value;
    }

    def initialize(value:int) {
        self.value = value.to_byte;
    }

    def getValue(): byte {
        return self.value;
    }

    def setValue(value:byte) {
        self.value = value;
    }

    def toUByte():UByte {
        return self.value.toUByte;
    }
}

class UByte 
{
    value:ubyte;

    def initialize() {
        self.value = 0.to_ubyte;
    }

    def initialize(value:ubyte) {
        self.value = value;
    }

    def initialize(value:int) {
        self.value = value.to_ubyte;
    }

    def getValue(): ubyte {
        return self.value;
    }

    def setValue(value:ubyte) {
        self.value = value;
    }

    def toByte():Byte {
        return self.value.toByte;
    }
}

class Short 
{
    value:short;

    def initialize() {
        self.value = 0.to_short;
    }

    def initialize(value:short) {
        self.value = value;
    }

    def initialize(value:int) {
        self.value = value.to_short;
    }

    def getValue(): short {
        return self.value;
    }

    def setValue(value:short) {
        self.value = value;
    }

    def toUShort():UShort {
        return self.value.toUShort;
    }
}

class UShort 
{
    value:ushort;

    def initialize() {
        self.value = 0.to_ushort;
    }

    def initialize(value:ushort) {
        self.value = value;
    }

    def initialize(value:int) {
        self.value = value.to_ushort;
    }

    def getValue(): ushort {
        return self.value;
    }

    def setValue(value:ushort) {
        self.value = value;
    }

    def toShort():Short {
        return self.value.toShort;
    }
}

class Integer 
{
    value:int;

    def initialize() {
        self.value = 0;
    }

    def initialize(value:int) {
        self.value = value;
    }

    def getValue(): int {
        return self.value;
    }

    def setValue(value:int) {
        self.value = value;
    }

    def toUInteger():UInteger {
        return self.value.toUInteger;
    }

    def toString():String {
        return self.value.toString;
    }
}

class UInteger 
{
    value: uint;

    def initialize() {
        self.value = 0.to_uint;
    }

    def initialize(value:uint) {
        self.value = value;
    }

    def initialize(value:int) {
        self.value = value.to_uint;
    }

    def getValue(): uint {
        return self.value;
    }

    def setValue(value:uint) {
        self.value = value;
    }

    def toInteger():Integer {
        return self.value.toInteger;
    }
}

class Long 
{
    value:long;

    def initialize() {
        self.value = 0.to_long;
    }

    def initialize(value:long) {
        self.value = value;
    }

    def getValue(): long {
        return self.value;
    }

    def setValue(value:long) {
        self.value = value;
    }

    def toULong():ULong {
        return self.value.toULong;
    }
}

class ULong 
{
    value: ulong;

    def initialize() {
        self.value = 0.to_ulong;
    }

    def initialize(value:long) {
        self.value = value;
    }

    def initialize(value:int) {
        self.value = value.to_long;
    }

    def getValue(): long {
        return self.value;
    }

    def setValue(value:long) {
        self.value = value;
    }

    def toLong():Long {
        return self.value.toLong;
    }
}

class Float 
{
    value: float;

    def initialize() {
        self.value = 0.to_float;
    }

    def initialize(value:float) {
        self.value = value;
    }

    def initialize(value:int) {
        self.value = value.to_float;
    }

    def getValue(): float {
        return self.value;
    }

    def setValue(value:float) {
        self.value = value;
    }
}

class Double
{
    value: double;

    def initialize() {
        self.value = 0.to_double;
    }

    def initialize(value:double) {
        self.value = value;
    }

    def initialize(value:int) {
        self.value = value.to_double;
    }

    def getValue(): double {
        return self.value;
    }

    def setValue(value:double) {
        self.value = value;
    }
}

class Pointer
{
    value: pointer;

    def initialize() {
        self.value = 0.to_pointer;
    }

    def initialize(value:pointer) {
        self.value = value;
    }

    def initialize(value:int) {
        self.value = value.to_pointer;
    }

    def getValue(): pointer {
        return self.value;
    }

    def setValue(value:pointer) {
        self.value = value;
    }
}

class Char
{
    value: char;

    def initialize() {
        self.value = 0.to_char;
    }

    def initialize(value:char) {
        self.value = value;
    }

    def initialize(value:int) {
        self.value = value.to_char;
    }

    def getValue(): char {
        return self.value;
    }

    def setValue(value:char) {
        self.value = value;
    }
}

class Bool
{
    value: bool;

    def initialize() {
        self.value = 0.to_bool;
    }

    def initialize(value:bool) {
        self.value = value;
    }

    def initialize(value:int) {
        self.value = value.to_bool;
    }

    def getValue(): bool {
        return self.value;
    }

    def setValue(value:bool) {
        self.value = value;
    }
}

class Array<T:Object>
{
    items:T[];

    def initialize(items:T[]) {
        self.items = items;
    }

    def length():int {
        return self.items.length;
    }

    def items(index:int):T throws Exception {
        return self.items[index];
    }

    def each(block_:lambda(T)) {
        for(i:int = 0; i<self.items.length; i++) {
            block_(self.items[i]);
        }
    }
}

interface HashKey
{
    def getHashKey(): uint;
    def equals(key:SELF): bool;
}

class HashItem <T:HashKey, T2:Object>
{
    key:T;
    item:T2;

    def initialize() {
        self.key = null;
        self.item = null;
    }

    def initialize(key:T, item:T2) {
        self.key = key;
        self.item = item;
    }
}

class Hash <T:HashKey, T2:Object>
{
    hashSizeDefault: static int;

    def initialize():static {
        Hash.hashSizeDefault = 128;
    }

    table: HashItem<T,T2>[];
    itemNumber: uint;
    tableSize: uint;

    def initialize() {
        self.table = new HashItem<T,T2>[Hash.hashSizeDefault];
        self.tableSize = Hash.hashSizeDefault;
        self.itemNumber = 0;
    }

    def initialize(keys: T[], items:T2[], num_elements:uint) {
        hash_size:uint = num_elements * 2;

        self.table = new HashItem<T,T2>[hash_size];
        self.tableSize = hash_size;
        self.itemNumber = num_elements;

        for(i:=0; i<num_elements; i++) {
            self.put(keys[i], items[i]);
        }
    }

    def put(key:T, item:T2) {
        if(self.itemNumber * 2 >= self.tableSize) {
            self.rehash();
        }

        hash_key:uint = key.getHashKey() % self.tableSize;
        n:uint = hash_key;

        while(true) {
            if(self.table[n].isNull) {
                self.table[n] = new HashItem<T, T2>(key,item);
                self.itemNumber++;
                break;
            }
            else {
                if(self.table[n].key.equals(key)) {
                    self.table[n].item = item;
                    break;
                }
            }

            n++;

            if(n == self.tableSize) {
                n = 0;
            }
            elif(n == hash_key) {
                self.rehash();
                self.put(key, item);
                break;
            }
        }
    }

    def rehash() {
        table := self.table;
        itemNumber := self.itemNumber;

        self.tableSize *= 2;
        self.table = new HashItem<T,T2>[self.tableSize];
        self.itemNumber = 0;

        for(i:=0; i<itemNumber; i++) {
            if(!table[i].isNull) {
                self.put(table[i].key, table[i].item);
            }
        }
    }

    def get(key:T): T2 {
        hash_key:uint = key.getHashKey() % self.tableSize;

        n:uint = hash_key;

        while(true) {
            if(!self.table[n].isNull) {
                if(self.table[n].key.equals(key)) {
                    return self.table[n].item;
                }
            }

            n++;

            if(n == self.tableSize) {
                n = 0;
            }
            elif(n == hash_key) {
                return null;
            }
        }
    }
}


class ListItem <T:Object>
{
    item: T;
    next: ListItem<T>;
    prev: ListItem<T>;

    def initialize() {
        self.item = null;
        self.next = null;
        self.prev = null;
    }

    def initialize(item:T, prev:ListItem<T>, next:ListItem<T>) {
        self.item = item;
        self.prev = prev;
        self.next = next;
    }
}

class List<T:Object>
{
    head: ListItem<T>;
    tail: ListItem<T>;
    number: uint;

    def initialize() {
        self.head = null;
        self.tail = null;
        self.number = 0;
    }

    def add(item:T) {
        if(self.head.isNull) {
            self.head = new ListItem<T>(item, null, null);
            self.tail = self.head;
        }
        else {
            new_item:ListItem<T> = new ListItem<T>(item, self.tail, null);

            self.tail.next = new_item;
            self.tail = new_item;
        }
    }

    def each(block_:lambda(T)) {
        it:ListItem<T> = self.head;

        while(!it.isNull) {
            block_(it.item);
            it = it.next;
        }
    }
}
