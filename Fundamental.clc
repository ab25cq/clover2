
class System
{
    typedef size_t ulong;
    typedef time_t ulong;

    def assert(exp:bool): native static throws Exception;
    def exit(num:int): native static;
    def sleep(time:int): native static uint;

    def malloc(size:size_t): native static pointer@alloc;
    def calloc(number: int, size: size_t): native static pointer@alloc;
    def realloc(ptr:pointer, size: size_t): native static pointer@alloc;
    def strdup(str:pointer): native static pointer@alloc;
    def free(ptr:pointer): native static;

    def strlen(ptr:pointer): native static int;
    def strlen(array:byte[]): native static int;
    def strcpy(str1:pointer, str2:pointer): native static pointer;
    def strncpy(str1:pointer, str2:pointer, size:size_t): native static pointer;
    def memcpy(str1:pointer, str2:pointer, size:size_t): native static pointer;
    def memcmp(str1:pointer, str2:pointer, size:size_t): native static int;

    def srand(value:uint): static native;
    def rand(): static native int;
    def time(): static native time_t;

    def getenv(name:String): static native String;
    def setenv(name:String, value:String, overwrite:int): static native throws Exception;
    def unsetenv(name:String): static native throws Exception;

    def print(str:String): native static;
    def println(str:String): native static;
    def printToError(str:String): native static;
    def printlnToError(str:String): native static;
}

class Global
{
    def getenv(name:String): static String {
        return System.getenv(name);
    }
}

class String
{
    buffer: char[];
    size:int;
    len:int;

    def initialize() {
        self.buffer = new char[128]();
        self.buffer[0] = '\0';

        self.size = 128;
        self.len = 0;
    }

    def initialize(size:int) {
        self.buffer = new char[size+1]();
        self.buffer[0] = '\0';

        self.size = size + 1;
        self.len = 0;
    }

    def initialize(buffer:char[]) {
        self.setValue(buffer);
    }

    def initialize(str:String) {
        self.setValue(str);
    }

    def setValue(str: String) {
        len:int = str.length();
        size:int = len * 2 + 1;

        self.buffer = new char[size]();

        for(i:int = 0; i<len; i++) {
            self.buffer[i] = str.buffer[i];
        }
        self.buffer[i] = '\0';

        self.len = len;
        self.size = size;
    }

    def setValue(buffer:char[]) {
        self.buffer = buffer;
        self.len = buffer.length-1;
        self.size = buffer.length;
    }

    def chars(index:int):char {
        if(index < 0) {
            index += self.len;
        }

        if(index < 0) {
            index = 0;
        }
        if(index >= self.len) {
            index = self.len -1;
        }

        return self.buffer[index];
    }

    def length(): int {
        return self.len;
    }

    def append(str: String):  String {
        len:int = str.length();

        if(self.len+len+1 < self.size) {
            for(i:int=self.len; i<self.len + len; i++) {
                self.buffer[i] = str.buffer[i-self.len];
            }
            self.buffer[i] = '\0';

            self.len += len;
        }
        else {
            new_size:int = (self.len + len + 1) * 2;
            new_buffer:char[] = new char[new_size];

            for(i:int = 0; i<self.len; i++) {
                new_buffer[i] = self.buffer[i];
            }
            for(i=self.len; i<self.len + len; i++) {
                new_buffer[i] = str.buffer[i-self.len];
            }
            new_buffer[i] = '\0';

            self.buffer = new_buffer;
            self.len += len;
            self.size = new_size;
        }

        return self;
    }

    def append(c:char):  String {
        len:int = 1;

        if(self.len+len+1 < self.size) {
            self.buffer[self.len] = c;
            self.buffer[self.len+1] = '\0';

            self.len += len;
        }
        else {
            new_size:int = (self.len + len + 1) * 2;
            new_buffer:char[] = new char[new_size];

            for(i:int = 0; i<self.len; i++) {
                new_buffer[i] = self.buffer[i];
            }
            new_buffer[i] = c;
            new_buffer[i+1] = '\0';

            self.buffer = new_buffer;
            self.len += len;
            self.size = new_size;
        }

        return self;
    }

    def replace(index:int, c:char): {
        if(index < 0) {
            index += self.len;
        }

        if(index < 0) {
            index = 0;
        }
        if(index >= self.len) {
            index = self.len -1;
        }

        self.buffer[index] = c;
    }
}

class Exception
{
    message:String;

    def initialize(message:String) {
        self.message = message;
    }
}

interface Object 
{
}

class Clover
{
    def initialize():static {
        System.srand(System.time().to_uint);
    }

#    def load(file_name:String): native throws Exception;
}

module MWrapperClassBase 
{
    def toByte(): Byte {
        return self.value.toByte;
    }

    def toUByte(): UByte {
        return self.value.toUByte;
    }

    def toShort(): Short {
        return self.value.toShort;
    }

    def toUShort(): UShort {
        return self.value.toUShort;
    }

    def toInteger(): Integer {
        return self.value.toInteger;
    }

    def toUInteger(): UInteger {
        return self.value.toUInteger;
    }

    def toLong(): Long {
        return self.value.toLong;
    }

    def toULong(): ULong {
        return self.value.toULong;
    }

    def toChar(): Char {
        return self.value.toChar;
    }

    def toBool(): Bool {
        return self.value.toBool;
    }

    def toString(): String {
        return self.value.toString;
    }

    def equals(right:SELF): bool {
        return self.value == right.value;
    }

    def compare(right:SELF):  int {
        if(self.value < right.value) {
            return -1;
        }
        elif(self.value == right.value) {
            return 0;
        }
        else {
            return 1;
        }
    }
}

class Byte 
{
    include MWrapperClassBase;

    value:byte;

    def initialize() {
        self.value = 0.to_byte;
    }

    def initialize(value:byte) {
        self.value = value;
    }

    def initialize(value:int) {
        self.value = value.to_byte;
    }

    def getValue(): byte {
        return self.value;
    }

    def setValue(value:byte) {
        self.value = value;
    }

    def toFloat():Float {
        return self.value.toFloat;
    }

    def toDouble():Double {
        return self.value.toDouble
    }

    def toPointer():Pointer {
        return self.value.toPointer;
    }
}

class UByte 
{
    include MWrapperClassBase;

    value:ubyte;

    def initialize() {
        self.value = 0.to_ubyte;
    }

    def initialize(value:ubyte) {
        self.value = value;
    }

    def initialize(value:int) {
        self.value = value.to_ubyte;
    }

    def getValue(): ubyte {
        return self.value;
    }

    def setValue(value:ubyte) {
        self.value = value;
    }

    def toFloat():Float {
        return self.value.toFloat;
    }

    def toDouble():Double {
        return self.value.toDouble
    }

    def toPointer():Pointer {
        return self.value.toPointer;
    }
}

class Short 
{
    include MWrapperClassBase;

    value:short;

    def initialize() {
        self.value = 0.to_short;
    }

    def initialize(value:short) {
        self.value = value;
    }

    def initialize(value:int) {
        self.value = value.to_short;
    }

    def getValue(): short {
        return self.value;
    }

    def setValue(value:short) {
        self.value = value;
    }

    def toFloat():Float {
        return self.value.toFloat;
    }

    def toDouble():Double {
        return self.value.toDouble
    }

    def toPointer():Pointer {
        return self.value.toPointer;
    }
}

class UShort 
{
    include MWrapperClassBase;

    value:ushort;

    def initialize() {
        self.value = 0.to_ushort;
    }

    def initialize(value:ushort) {
        self.value = value;
    }

    def initialize(value:int) {
        self.value = value.to_ushort;
    }

    def getValue(): ushort {
        return self.value;
    }

    def setValue(value:ushort) {
        self.value = value;
    }

    def toFloat():Float {
        return self.value.toFloat;
    }

    def toDouble():Double {
        return self.value.toDouble
    }

    def toPointer():Pointer {
        return self.value.toPointer;
    }
}

class Integer 
{
    include MWrapperClassBase;

    value:int;

    def initialize() {
        self.value = 0;
    }

    def initialize(value:int) {
        self.value = value;
    }

    def getValue(): int {
        return self.value;
    }

    def setValue(value:int) {
        self.value = value;
    }

    def toFloat():Float {
        return self.value.toFloat;
    }

    def toDouble():Double {
        return self.value.toDouble
    }

    def toPointer():Pointer {
        return self.value.toPointer;
    }

    def times(block_:lambda()) {
        for(i:int = 0; i<self.value; i++) {
            block_();
        }
    }
}

class UInteger 
{
    include MWrapperClassBase;

    value: uint;

    def initialize() {
        self.value = 0.to_uint;
    }

    def initialize(value:uint) {
        self.value = value;
    }

    def initialize(value:int) {
        self.value = value.to_uint;
    }

    def getValue(): uint {
        return self.value;
    }

    def setValue(value:uint) {
        self.value = value;
    }

    def toFloat():Float {
        return self.value.toFloat;
    }

    def toDouble():Double {
        return self.value.toDouble
    }

    def toPointer():Pointer {
        return self.value.toPointer;
    }
}

class Long 
{
    include MWrapperClassBase;

    value:long;

    def initialize() {
        self.value = 0.to_long;
    }

    def initialize(value:int) {
        self.value = value.to_long;
    }

    def initialize(value:long) {
        self.value = value;
    }

    def getValue(): long {
        return self.value;
    }

    def setValue(value:long) {
        self.value = value;
    }

    def toFloat():Float {
        return self.value.toFloat;
    }

    def toDouble():Double {
        return self.value.toDouble
    }

    def toPointer():Pointer {
        return self.value.toPointer;
    }
}

class ULong 
{
    include MWrapperClassBase;

    value: ulong;

    def initialize() {
        self.value = 0.to_ulong;
    }

    def initialize(value:long) {
        self.value = value;
    }

    def initialize(value:int) {
        self.value = value.to_long;
    }

    def getValue(): long {
        return self.value;
    }

    def setValue(value:long) {
        self.value = value;
    }

    def toFloat():Float {
        return self.value.toFloat;
    }

    def toDouble():Double {
        return self.value.toDouble
    }

    def toPointer():Pointer {
        return self.value.toPointer;
    }
}

class Float 
{
    include MWrapperClassBase;

    value: float;

    def initialize() {
        self.value = 0.to_float;
    }

    def initialize(value:float) {
        self.value = value;
    }

    def initialize(value:int) {
        self.value = value.to_float;
    }

    def getValue(): float {
        return self.value;
    }

    def setValue(value:float) {
        self.value = value;
    }

    def toFloat():Float {
        return self.value.toFloat;
    }

    def toDouble():Double {
        return self.value.toDouble
    }
}

class Double
{
    include MWrapperClassBase;

    value: double;

    def initialize() {
        self.value = 0.to_double;
    }

    def initialize(value:double) {
        self.value = value;
    }

    def initialize(value:int) {
        self.value = value.to_double;
    }

    def getValue(): double {
        return self.value;
    }

    def setValue(value:double) {
        self.value = value;
    }

    def toFloat():Float {
        return self.value.toFloat;
    }

    def toDouble():Double {
        return self.value.toDouble
    }
}

class Pointer
{
    include MWrapperClassBase;

    value: pointer;

    def initialize() {
        self.value = 0.to_pointer;
    }

    def initialize(value:pointer) {
        self.value = value;
    }

    def initialize(value:int) {
        self.value = value.to_pointer;
    }

    def getValue(): pointer {
        return self.value;
    }

    def setValue(value:pointer) {
        self.value = value;
    }

    def toPointer():Pointer {
        return self.value.toPointer;
    }
}

class Char
{
    include MWrapperClassBase;

    value: char;

    def initialize() {
        self.value = 0.to_char;
    }

    def initialize(value:char) {
        self.value = value;
    }

    def initialize(value:int) {
        self.value = value.to_char;
    }

    def getValue(): char {
        return self.value;
    }

    def setValue(value:char) {
        self.value = value;
    }

    def toFloat():Float {
        return self.value.toFloat;
    }

    def toDouble():Double {
        return self.value.toDouble
    }

    def toPointer():Pointer {
        return self.value.toPointer;
    }

    def toLowerCase():Char {
        if(self.value >= 'A' && self.value <= 'Z') {
            return self.value - 'A' + 'a';
        }
        else {
            return self.value;
        }
    }

    def toUpperCase():Char {
        if(self.value >= 'a' && self.value <= 'z') {
            return self.value - 'a' + 'A';
        }
        else {
            return self.value;
        }
    }

    def multiply(n:int):String {
        result:String = "";

        for(i:=0; i<n; i++) {
            result.append(self.value);
        }
        
        return result;
    }
}

class Bool
{
    value: bool;

    def initialize() {
        self.value = 0.to_bool;
    }

    def initialize(value:bool) {
        self.value = value;
    }

    def initialize(value:int) {
        self.value = value.to_bool;
    }

    def getValue(): bool {
        return self.value;
    }

    def setValue(value:bool) {
        self.value = value;
    }

    def toFloat():Float {
        return self.value.toFloat;
    }

    def toDouble():Double {
        return self.value.toDouble
    }

    def toPointer():Pointer {
        return self.value.toPointer;
    }

    def toByte():Byte {
        return self.value.toByte;
    }

    def toUByte():UByte {
        return self.value.toUByte;
    }

    def toShort():Short {
        return self.value.toShort;
    }

    def toUShort():UShort {
        return self.value.toUShort;
    }

    def toInteger():Integer {
        return self.value.toInteger;
    }

    def toUInteger():UInteger {
        return self.value.toUInteger;
    }

    def toLong():Long {
        return self.value.toLong;
    }

    def toULong():ULong {
        return self.value.toULong;
    }

    def toChar():Char {
        return self.value.toChar;
    }

    def toBool():Bool {
        return self.value.toBool;
    }

    def toString():String {
        return self.value.toString;
    }

    def equals(right:Bool):bool {
        return self.value == right.value;
    }
}

