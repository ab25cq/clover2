class System:js
{
    typedef Any Anonymous;

    def println(obj:Anonymous):static native {
        console.log(obj);
    }
    def println(str:String):static native {
        console.log(str);
    }
    def print(str:String):static native {
        process.stdout.write(str);
    }
    def println(num:Number):static native {
        console.log(num);
    }
    def typeOf(obj:Anonymous): static native String {
        return typeOf(obj);
    }
    def typeOfNativeObject(obj:Anonymous): static native bool {
        return typeOfNativeObject(obj);
    }
    def assert(exp:bool): static native {
        console.assert(exp);
    }
}

class Clover:js
{
    def test(str:String, exp:bool):static native {
        process.stdout.write(str + "...");
        console.log(exp);
        console.assert(exp);
    }
}

interface IEqualable:js
{
    def equals(right:Self): pure_native bool;
    def toString(): pure_native String;
    def clone(): pure_native Self;
}

interface ISortable:js
{
    def equals(right:Self): pure_native bool;
    def compare(item:Self): pure_native Number;
    def toString(): pure_native String;
    def clone(): pure_native Self;
    def add(right:Self):Self;
}

interface IIteratorable:js
{
    def equals(right:Self): pure_native bool;
    def compare(item:Self): pure_native Number;
    def toString(): pure_native String;
    def clone(): pure_native Self;
    def add(right:Self):Self;
    def next(): Self;
    def prev(): Self;
}

interface IHashKey:js
{
    def equals(right:Self): pure_native bool;
    def toString(): pure_native String;
    def clone(): pure_native Self;
}

class Array<T:ISortable>:native js
{
    def initialize(num:Number):native Array<T> {
        return this;
    }
    def items(n:Number): native T {
        return this[n];
    }
    def slice(n:Number, n2:Number): pure_native Array<T>;
    def length(): native Number {
        return this.length;
    }
    def includes(item:T):native bool {
        for(var i=0; i<this.length; i++) {
            if(this[i].equals(item)) {
                return true;
            }
        }

        return false;
    }
    def copyWithin(index:Number, start:Number=0): native Array<T> {
        var end = this.length;
        this.copyWithin(index, start, end);

        return this;
    }
    def copyWithin(index:Number, start:Number, end:Number): native Array<T> {
        this.copyWithin(index, start, end);

        return this;
    }
    def fill(data:T, start:Number=0): native Array<T> {
        var end = this.length;
        this.fill(data, start, end);

        return this;
    }
    def fill(data:T, start:Number, end:Number): native Array<T> {
        this.fill(data, start, end);

        return this;
    }

    def equals(array_:Array<T>): pure_native bool {
        if(this.length == array_.length) {
            for(var i=0; i<this.length; i++) {
                if(!this[i].equals(array_[i])) 
                {
                    return false;
                }
            }

            return true;
        }
        else {
            return false;
        }
    }

    def pop(): pure_native T;
    def push(item:T): pure_native Number;
    def reverse(): pure_native Array<T>;
    def shift(): pure_native T;

    def replace(n:Number, item:T): native T {
        var item = this[n];
        this[n] = item;
        return item;
    }

    def toString():pure_native String {
        var result= "Array {";

        for(var i= 0; i<this.length; i++) {
            result = result + this[i].toString();

            if(i < this.length-1) {
                result = result + ",";
            }
        }
        
        result = result + "}";

        return result;
    }

    def quickSort(left:Number, right:Number, fun:lambda(T, T):Number):pure_native Array<T> {
        var l_hold = left;
        var r_hold = right;

        var pivot = this[left];
        var pivot_num = left;

        while(left < right) {
            while((fun(this[right], pivot) >= 0) && (left < right)) {
                right--;
            }

            if(left != right) {
                this[left] = this[right];
                left++;
            }

            while((fun(this[left], pivot) <= 0) && (left < right)) {
                left++;
            }

            if(left != right) {
                this[right] = this[left];
                right--;
            }
        }

        this[left] = pivot;

        pivot_num = left;

        var left2 = l_hold;
        var right2 = r_hold;

        if(left2 < pivot_num) {
            this.quickSort(left2, pivot_num-1, fun);
        }

        if(right2 > pivot_num) {
            this.quickSort(pivot_num+1, right2, fun);
        }

        return this;
    }

    def sort():native Array<T> {
        if(this.length > 0) {
            return this.quickSort(0, this.length-1, function(left, right) { return left.compare(right); });
        }
    }

    def splice(index:Number): pure_native Array<T>;
    def splice(index:Number, len:Number): pure_native Array<T>;
    def splice(index:Number, len:Number, item1:T): pure_native Array<T>;

    def splice(index:Number, len:Number, item1:T, item2:T): pure_native Array<T>;

    def splice(index:Number, len:Number, item1:T, item2:T, item3:T): pure_native Array<T>;

    def splice(index:Number, len:Number, item1:T, item2:T, item3:T, item4:T): pure_native Array<T>;

    def splice(index:Number, len:Number, item1:T, item2:T, item3:T, item4:T, item5:T): pure_native Array<T>;

    def splice(index:Number, len:Number, item1:T, item2:T, item3:T, item4:T, item5:T, item6:T): pure_native Array<T>;

    def splice(index:Number, len:Number, item1:T, item2:T, item3:T, item4:T, item5:T, item6:T, item7:T): pure_native Array<T>;
    def splice(index:Number, len:Number, item1:T, item2:T, item3:T, item4:T, item5:T, item6:T, item7:T, item8:T): pure_native Array<T>;

    def splice(index:Number, len:Number, item1:T, item2:T, item3:T, item4:T, item5:T, item6:T, item7:T, item8:T, item9:T): pure_native Array<T>;

    def concat(array_:Array<T>):pure_native Array<T>;

    def every(block_:lambda(T):bool):bool {
        len := self.length();
        for(i:=0; i<len; i++) {
            if(!block_(self.items(i))) {
                return false;
            }
        }
        return true;
    }

    def unshift(item1:T): pure_native Number;
    def unshift(item1:T, item2:T): pure_native Number;
    def unshift(item1:T, item2:T, item3:T): pure_native Number;
    def unshift(item1:T, item2:T, item3:T, item4:T): pure_native Number;

    def unshift(item1:T, item2:T, item3:T, item4:T, item5:T): pure_native Number;

    def unshift(item1:T, item2:T, item3:T, item4:T, item5:T, item6:T): pure_native Number;

    def unshift(item1:T, item2:T, item3:T, item4:T, item5:T, item6:T, item7:T): pure_native Number;

    def unshift(item1:T, item2:T, item3:T, item4:T, item5:T, item6:T, item7:T, item8:T): pure_native Number;

    def unshift(item1:T, item2:T, item3:T, item4:T, item5:T, item6:T, item7:T, item8:T, item9:T): pure_native Number;

    def filter(block_:lambda(T):bool):Array<T> {
        result := Array<T>(0);

        for(i:=0; i<length(); i++) {
            if(block_(items(i))) {
                result.push(items(i));
            }
        }

        return result;
    }

    def find(block_:lambda(T):bool):T? {
        result := Array<T>(0);

        for(i:=0; i<length(); i++) {
            if(block_(items(i))) {
                return items(i);
            }
        }

        return null;
    }

    def findIndex(block_:lambda(T):bool):Number {
        result := Array<T>(0);

        for(i:=0; i<length(); i++) {
            if(block_(items(i))) {
                return i;
            }
        }

        return -1;
    }

    def forEach(block_:lambda(T)) {
        for(i:=0; i<length(); i++) {
            block_(items(i))
        }
    }

    def indexOf(item:T, count:Number=1):native Number {
        var n = 0;
        for(var i= 0; i<this.length; i++) {
            if(this[i].equals(item)) {
                n++;

                if(n == count) {
                    return i;
                }
            }
        }

        return -1;
    }
}

class Tuple1 <T:IEqualable>: js
{
    value1: T?;

    def initialize() {
        self.value1 = null;
    }

    def initialize(value1:T) {
        self.value1 = value1;
    }

    def clone(): pure_native Tuple1<T> {
        var result = new Tuple1();

        if(this.value1 != null) {
            result.value1 = this.value1.clone();
        }

        return result;
    }

    def equals(right:Tuple1<T>):pure_native bool {
        return this.value1.equals(right.value1);
    }

    def toString():pure_native String {
        return "tuple {" + this.value1.toString() + "}";
    }
}

class Tuple2 <T:IEqualable, T2:IEqualable>: js
{
    value1: T?;
    value2: T2?;

    def initialize() {
        self.value1 = null;
        self.value2 = null;
    }

    def initialize(value1:T, value2:T2) {
        self.value1 = value1;
        self.value2 = value2;
    }

    def clone(): pure_native Tuple2<T, T2> {
        var result = new Tuple2();

        if(this.value1 != null) {
            result.value1 = this.value1.clone();
        }
        if(this.value2 != null) {
            result.value2 = this.value2.clone();
        }

        return result;
    }

    def equals(right:Tuple2<T,T2>):pure_native bool {
        return this.value1.equals(right.value1) && this.value2.equals(right.value2);
    }

    def toString():pure_native String {
        return "tuple {" + this.value1.toString() + "," + this.value2.toString() + "}";
    }
}

class Tuple3 <T:IEqualable, T2:IEqualable, T3:IEqualable>: js
{
    value1: T?;
    value2: T2?;
    value3: T3?;

    def initialize() {
        self.value1 = null;
        self.value2 = null;
        self.value3 = null;
    }

    def initialize(value1:T, value2:T2, value3:T3) {
        self.value1 = value1;
        self.value2 = value2;
        self.value3 = value3;
    }

    def clone(): pure_native Tuple3<T, T2, T3> {
        var result = new Tuple3();

        if(this.value1 != null) {
            result.value1 = this.value1.clone();
        }
        if(this.value2 != null) {
            result.value2 = this.value2.clone();
        }
        if(this.value3 != null) {
            result.value3 = this.value3.clone();
        }

        return result;
    }

    def equals(right:Tuple3<T,T2,T3>):pure_native bool {
        return this.value1.equals(right.value1) && this.value2.equals(right.value2) && this.value3.equals(right.value3);
    }

    def toString():pure_native String {
        return "tuple {" + this.value1.toString() + "," + this.value2.toString() + "," + this.value3.toString() + "}";
    }
}

class Tuple4 <T:IEqualable, T2:IEqualable, T3:IEqualable, T4:IEqualable>: js
{
    value1: T?;
    value2: T2?;
    value3: T3?;
    value4: T4?;

    def initialize() {
        self.value1 = null;
        self.value2 = null;
        self.value3 = null;
        self.value4 = null;
    }

    def initialize(value1:T, value2:T2, value3:T3, value4:T4) {
        self.value1 = value1;
        self.value2 = value2;
        self.value3 = value3;
        self.value4 = value4;
    }

    def clone(): pure_native Tuple4<T, T2, T3, T4> {
        var result = new Tuple4();

        if(this.value1 != null) {
            result.value1 = this.value1.clone();
        }
        if(this.value2 != null) {
            result.value2 = this.value2.clone();
        }
        if(this.value3 != null) {
            result.value3 = this.value3.clone();
        }
        if(this.value4 != null) {
            result.value4 = this.value4.clone();
        }

        return result;
    }

    def equals(right:Tuple4<T,T2,T3,T4>):pure_native bool {
        return this.value1.equals(right.value1) && this.value2.equals(right.value2) && this.value3.equals(right.value3) && this.value4.equals(right.value4);
    }

    def toString():pure_native String {
        return "tuple {" + this.value1.toString() + "," + this.value2.toString() + "," + this.value3.toString() + "," + this.value4.toString() + "}";
    }
}

class Tuple5 <T:IEqualable, T2:IEqualable, T3:IEqualable, T4:IEqualable, T5:IEqualable>: js
{
    value1: T?;
    value2: T2?;
    value3: T3?;
    value4: T4?;
    value5: T5?;

    def initialize() {
        self.value1 = null;
        self.value2 = null;
        self.value3 = null;
        self.value4 = null;
        self.value5 = null;
    }

    def initialize(value1:T, value2:T2, value3:T3, value4:T4, value5:T5) {
        self.value1 = value1;
        self.value2 = value2;
        self.value3 = value3;
        self.value4 = value4;
        self.value5 = value5;
    }

    def clone(): pure_native Tuple5<T, T2, T3, T4, T5> {
        var result = new Tuple5();

        if(this.value1 != null) {
            result.value1 = this.value1.clone();
        }
        if(this.value2 != null) {
            result.value2 = this.value2.clone();
        }
        if(this.value3 != null) {
            result.value3 = this.value3.clone();
        }
        if(this.value4 != null) {
            result.value4 = this.value4.clone();
        }
        if(this.value5 != null) {
            result.value5 = this.value5.clone();
        }

        return result;
    }

    def equals(right:Tuple5<T,T2,T3,T4,T5>):pure_native bool {
        return this.value1.equals(right.value1) && this.value2.equals(right.value2) && this.value3.equals(right.value3) && this.value4.equals(right.value4) && this.value5.equals(right.value5);
    }

    def toString():pure_native String {
        return "tuple {" + this.value1.toString() + ","+ this.value2.toString() + "," + this.value3.toString() + "," + this.value4.toString() + "," + this.value5.toString() + "}";
    }
}

class Tuple6 <T:IEqualable, T2:IEqualable, T3:IEqualable, T4:IEqualable, T5:IEqualable, T6:IEqualable>: js
{
    value1: T?;
    value2: T2?;
    value3: T3?;
    value4: T4?;
    value5: T5?;
    value6: T6?;

    def initialize() {
        self.value1 = null;
        self.value2 = null;
        self.value3 = null;
        self.value4 = null;
        self.value5 = null;
        self.value6 = null;
    }

    def initialize(value1:T, value2:T2, value3:T3, value4:T4, value5:T5, value6:T6) {
        self.value1 = value1;
        self.value2 = value2;
        self.value3 = value3;
        self.value4 = value4;
        self.value5 = value5;
        self.value6 = value6;
    }

    def clone(): pure_native Tuple6<T, T2, T3, T4, T5, T6> {
        var result = new Tuple6();

        if(this.value1 != null) {
            result.value1 = this.value1.clone();
        }
        if(this.value2 != null) {
            result.value2 = this.value2.clone();
        }
        if(this.value3 != null) {
            result.value3 = this.value3.clone();
        }
        if(this.value4 != null) {
            result.value4 = this.value4.clone();
        }
        if(this.value5 != null) {
            result.value5 = this.value5.clone();
        }
        if(this.value6 != null) {
            result.value6 = this.value6.clone();
        }

        return result;
    }

    def equals(right:Tuple6<T,T2,T3,T4,T5,T6>):pure_native bool {
        return this.value1.equals(right.value1) && this.value2.equals(right.value2) && this.value3.equals(right.value3) && this.value4.equals(right.value4) && this.value5.equals(right.value5) && this.value6.equals(right.value6);
    }

    def toString():pure_native String {
        return "tuple {" + this.value1.toString() + "," + this.value2.toString() + "," + this.value3.toString() + "," + this.value4.toString() + "," + this.value5.toString() + "," + this.value6.toString() + "}";
    }
}

class Tuple7 <T:IEqualable, T2:IEqualable, T3:IEqualable, T4:IEqualable, T5:IEqualable, T6:IEqualable, T7:IEqualable>: js
{
    value1: T?;
    value2: T2?;
    value3: T3?;
    value4: T4?;
    value5: T5?;
    value6: T6?;
    value7: T7?;

    def initialize() {
        self.value1 = null;
        self.value2 = null;
        self.value3 = null;
        self.value4 = null;
        self.value5 = null;
        self.value6 = null;
        self.value7 = null;
    }

    def initialize(value1:T, value2:T2, value3:T3, value4:T4, value5:T5, value6:T6, value7:T7) {
        self.value1 = value1;
        self.value2 = value2;
        self.value3 = value3;
        self.value4 = value4;
        self.value5 = value5;
        self.value6 = value6;
        self.value7 = value7;
    }

    def clone(): pure_native Tuple7<T, T2, T3, T4, T5, T6, T7> {
        var result = new Tuple7();

        if(this.value1 != null) {
            result.value1 = this.value1.clone();
        }
        if(this.value2 != null) {
            result.value2 = this.value2.clone();
        }
        if(this.value3 != null) {
            result.value3 = this.value3.clone();
        }
        if(this.value4 != null) {
            result.value4 = this.value4.clone();
        }
        if(this.value5 != null) {
            result.value5 = this.value5.clone();
        }
        if(this.value6 != null) {
            result.value6 = this.value6.clone();
        }
        if(this.value7 != null) {
            result.value7 = this.value7.clone();
        }

        return result;
    }

    def equals(right:Tuple7<T,T2,T3,T4,T5,T6,T7>):pure_native bool {
        return this.value1.equals(right.value1) && this.value2.equals(right.value2) && this.value3.equals(right.value3) && this.value4.equals(right.value4) && this.value5.equals(right.value5) && this.value6.equals(right.value6) && this.value7.equals(right.value7);
    }

    def toString():pure_native String {
        return "tuple {" + this.value1.toString() + "," + this.value2.toString() + "," + this.value3.toString() + "," + this.value4.toString() + "," + this.value5.toString() + "," + this.value6.toString() + "," + this.value7.toString() + "}";
    }
}

class Tuple8 <T:IEqualable, T2:IEqualable, T3:IEqualable, T4:IEqualable, T5:IEqualable, T6:IEqualable, T7:IEqualable, T8:IEqualable>: js
{
    value1: T?;
    value2: T2?;
    value3: T3?;
    value4: T4?;
    value5: T5?;
    value6: T6?;
    value7: T7?;
    value8: T8?;

    def initialize() {
        self.value1 = null;
        self.value2 = null;
        self.value3 = null;
        self.value4 = null;
        self.value5 = null;
        self.value6 = null;
        self.value7 = null;
        self.value8 = null;
    }

    def initialize(value1:T, value2:T2, value3:T3, value4:T4, value5:T5, value6:T6, value7:T7, value8:T8) {
        self.value1 = value1;
        self.value2 = value2;
        self.value3 = value3;
        self.value4 = value4;
        self.value5 = value5;
        self.value6 = value6;
        self.value7 = value7;
        self.value8 = value8;
    }

    def clone(): pure_native Tuple8<T, T2, T3, T4, T5, T6, T7, T8> {
        var result = new Tuple8();

        if(this.value1 != null) {
            result.value1 = this.value1.clone();
        }
        if(this.value2 != null) {
            result.value2 = this.value2.clone();
        }
        if(this.value3 != null) {
            result.value3 = this.value3.clone();
        }
        if(this.value4 != null) {
            result.value4 = this.value4.clone();
        }
        if(this.value5 != null) {
            result.value5 = this.value5.clone();
        }
        if(this.value6 != null) {
            result.value6 = this.value6.clone();
        }
        if(this.value7 != null) {
            result.value7 = this.value7.clone();
        }
        if(this.value8 != null) {
            result.value8 = this.value8.clone();
        }

        return result;
    }

    def equals(right:Tuple8<T,T2,T3,T4,T5,T6,T7,T8>):pure_native bool {
        return this.value1.equals(right.value1) && this.value2.equals(right.value2) && this.value3.equals(right.value3) && this.value4.equals(right.value4) && this.value5.equals(right.value5) && this.value6.equals(right.value6) && this.value7.equals(right.value7) && this.value8.equals(right.value8);
    }

    def toString():pure_native String {
        return "tuple {" + this.value1.toString() + "," + this.value2.toString() + ","+ this.value3.toString() + "," + this.value4.toString() + ","+ this.value5.toString() + "," + this.value6.toString() + "," + this.value7.toString() + "," + this.value8.toString() + "}";
    }
}

class Tuple9 <T:IEqualable, T2:IEqualable, T3:IEqualable, T4:IEqualable, T5:IEqualable, T6:IEqualable, T7:IEqualable, T8:IEqualable, T9:IEqualable>: js
{
    value1: T?;
    value2: T2?;
    value3: T3?;
    value4: T4?;
    value5: T5?;
    value6: T6?;
    value7: T7?;
    value8: T8?;
    value9: T9?;

    def initialize() {
        self.value1 = null;
        self.value2 = null;
        self.value3 = null;
        self.value4 = null;
        self.value5 = null;
        self.value6 = null;
        self.value7 = null;
        self.value8 = null;
        self.value9 = null;
    }

    def initialize(value1:T, value2:T2, value3:T3, value4:T4, value5:T5, value6:T6, value7:T7, value8:T8, value9:T9) {
        self.value1 = value1;
        self.value2 = value2;
        self.value3 = value3;
        self.value4 = value4;
        self.value5 = value5;
        self.value6 = value6;
        self.value7 = value7;
        self.value8 = value8;
        self.value9 = value9;
    }

    def clone(): pure_native Tuple9<T, T2, T3, T4, T5, T6, T7, T8, T9> {
        var result = Tuple9();

        if(this.value1 != null) {
            result.value1 = this.value1.clone();
        }
        if(this.value2 != null) {
            result.value2 = this.value2.clone();
        }
        if(this.value3 != null) {
            result.value3 = this.value3.clone();
        }
        if(this.value4 != null) {
            result.value4 = this.value4.clone();
        }
        if(this.value5 != null) {
            result.value5 = this.value5.clone();
        }
        if(this.value6 != null) {
            result.value6 = this.value6.clone();
        }
        if(this.value7 != null) {
            result.value7 = this.value7.clone();
        }
        if(this.value8 != null) {
            result.value8 = this.value8.clone();
        }
        if(this.value9 != null) {
            result.value9 = this.value9.clone();
        }

        return result;
    }

    def equals(right:Tuple9<T,T2,T3,T4,T5,T6,T7,T8,T9>):pure_native bool {
        return this.value1.equals(right.value1) && this.value2.equals(right.value2) && this.value3.equals(right.value3) && this.value4.equals(right.value4) && this.value5.equals(right.value5) && this.value6.equals(right.value6) && this.value7.equals(right.value7) && this.value8.equals(right.value8) && this.value9.equals(right.value9);
    }

    def toString():pure_native String {
        return "tuple {" + this.value1.toString() + "," + this.value2.toString() + "," + this.value3.toString() + "," + this.value4.toString() + "," + this.value5.toString() + "," + this.value6.toString() + "," + this.value7.toString() + "," + this.value8.toString() + "," + this.value9.toString() + "}";
    }
}

class IteratorResult:js
{
    var value:Array<Any>;
    var done:bool;
}

interface Iterator:js
{
    def next(): pure_native IteratorResult;
}

class Map<T:IHashKey, T2:IEqualable>:native js
{
    def initialize(num:Number):native Map<T, T2> {
        return this;
    }

    def entries(): pure_native Iterator;

    def get(key:T): native T2? {
        for(var [key2, value] of this.entries()) {
            if(key2.equals(key)) {
                return value;
            }
        }

        return null;
    }
}

class Function:native js
{
}

class Lambda:js
{
    var function_:Function;
    var lambda_:bool;
    var parentVarNum:Number;

    def initialize(function_:Function, lambda_:bool, parent_var_num:Number) {
        self.function_ = function_;
        self.lambda_ = lambda_;
        self.parentVarNum = parent_var_num;
    }

    def constructor(function_:Function, lambda_:bool, parent_var_num:Number):native Lambda 
    {
        this.function_ = function_;
        this.lambda_ = lambda_;
        this.parentVarNum = parent_var_num;
        return this;
    }
}

class String:native js
{
    def initialize(str:String):native String {
        return this;
    }
    def toString():pure_native String {
        return this;
    }

    def match(regex_:regex): native bool {
        return regex_.test(this);
    }
    def clone(): pure_native String {
        return `${this}`;
    }

    def equals(str:String):pure_native bool {
        return this == str;
    }
    def compare(right:String): pure_native Number {
        if(this == right) {
            return 0;
        }
        else if(this < right) {
            return -1;
        }
        else {
            return 1;
        }
    }
    def add(right:String):native String {
        return this + right;
    }
}

class Number:native js
{
    def initialize():native Number {
        return this;
    }

    def compare(item:Number): pure_native Number {
        if(this < item) {
            return -1;
        }
        else if(this > item) {
            return 1;
        }
        else {
            return 0;
        }
    }
    def equals(right:Number): pure_native bool {
        return this == right;
    }
    def toString(): pure_native String {
        return `${this}`;
    }
    def clone(): pure_native Number {
        return this;
    }
    def add(right:Number):native Number {
        return this + right;
    }

    def println() {
        System.println(self);
    }
}

class Bool:js unboxing bool
{
    var num:bool;

    def constructor(num:bool):native Bool {
        this.num = num;

        return this;
    }

    def toString():pure_native String {
        if(self.num) {
            return "true";
        }
        else {
            return "false";
        }
    }
}

interface Object:js
{
}

class Null:js
{
}

class Error:js
{
}

class Exception:js
{
    message:String;

    def initialize(message:String) {
        self.message = message;
    }
}

