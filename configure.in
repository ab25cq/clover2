AC_INIT(src/main.c)

AC_CONFIG_HEADER(config.h)

AC_PROG_CC
AC_PROG_INSTALL
AC_C_BIGENDIAN

if test $prefix = NONE
then
    myprefix=/usr/local
else
    myprefix=$prefix
fi

##############################################################
# configure arguments
##############################################################
DEBUGGING=0
LOGGING=0

AC_ARG_WITH(debug,              [  --with-debug              include debug info ], [ DEBUGGING=1; ], [])
AC_ARG_WITH(log,                [  --with-log                create log ], [ LOGGING=1; ], [])
AC_ARG_WITH(optimize,           [  --with-optimize           with optimize(-O in CFLAGS) ], [ ENABLE_OPTIMIZE=1 ], [ ENABLE_OPTIMIZE=0 ])
AC_ARG_WITH(interpreter,        [  --with-interpreter        with interpreter ], [ ENABLE_INTERPRETER=1 ], [ ENABLE_INTERPRETER=0])
AC_ARG_WITH(jit,                [  --with-jit                with jit ], [ ENABLE_JIT=1 ], [ ENABLE_JIT=0])
AC_ARG_WITH(c-ffi,              [  --with-c-ffi              with c ffi ], [ ENABLE_CFFI=1 ], [ ENABLE_CFFI=0])
AC_ARG_WITH(thread,             [  --with-thread             with thread ], [ ENABLE_THREAD=1 ], [ ENABLE_THREAD=0])

##############################################################
# check cpu type
##############################################################
AC_MSG_CHECKING(CPU type)

if test `uname -m` = x86_64
then
    echo x86_64

    AC_DEFINE(__64BIT_CPU__, 1)
elif test `uname -m` = i386 || test `uname -m` = i686
then
    echo x86_32

    AC_DEFINE(__32BIT_CPU__, 1)
elif test `uname -p` = sparc
then
    echo sparc

    AC_DEFINE(__32BIT_CPU__, 1)
    AC_DEFINE(__BIG_ENDIAN__, 1)
elif test `uname -m` = sparc64
then
    echo sparc64

    AC_DEFINE(__64BIT_CPU__, 1)
    AC_DEFINE(__BIG_ENDIAN__, 1)
elif test `uname -m` = ppc
then
    echo ppc

    AC_DEFINE(__32BIT_CPU__, 1)
    AC_DEFINE(__BIG_ENDIAN__, 1)
elif test `uname -m` = ppc64
then
    echo ppc64

    AC_DEFINE(__64BIT_CPU__, 1)
    AC_DEFINE(__BIG_ENDIAN__, 1)
elif test `uname -m` = armv6l
then
    echo armv6l

    AC_DEFINE(__32BIT_CPU__, 1)
elif test `uname -m` = armv7l
then
    echo armv7l

    AC_DEFINE(__32BIT_CPU__, 1)
else
    echo other

    AC_DEFINE(__32BIT_CPU__, 1)
fi

##############################################################
# check operating systems
##############################################################
AC_MSG_CHECKING(Operating System)

CFLAGS='-DPREFIX="\"${DESTDIR}/\""'
CFLAGS="-fPIC -rdynamic $CFLAGS"

AR_LIB=

if test `uname -s` = "Darwin"; then
    echo "Darwin"

    OS=DARWIN

    AC_DEFINE(__DARWIN__, 1)

    if test $myprefix = /usr/local; then
        CFLAGS="-Isrc/ -I. -L . $CFLAGS"
    else 
        CFLAGS="-Isrc/ -I. -L . -I$myprefix/include -L$myprefix/lib $CFLAGS"
    fi
elif test `uname -s` = "FreeBSD"; then
    echo "FreeBSD"

    OS=FREEBSD

    AC_DEFINE(__FREEBSD__, 1)

    CFLAGS="-Isrc/ -I. -L . -I$myprefix/include -L$myprefix/lib $CFLAGS"
elif uname -s | grep -q CYGWIN_NT; then
    echo CYGWIN

    OS=CYGWIN

    AC_DEFINE(__CYGWIN__, 1)

    if test $myprefix = /usr/local; then
        CFLAGS="-Isrc/ -I. -L . $CFLAGS"
    else 
        CFLAGS="-Isrc/ -I. -L . -I$myprefix/include -L$myprefix/lib $CFLAGS"
    fi
else
    echo "Linux"

    OS=LINUX

    AC_DEFINE(__LINUX__, 1)

    if test $myprefix = /usr/local; then
        CFLAGS="-Isrc/ -I. -L . $CFLAGS"
    else
        CFLAGS="-Isrc/ -I. -L . -I$myprefix/include -L$myprefix/lib $CFLAGS"
    fi

    AC_HAVE_LIBRARY(util, [ LIBS="$LIBS -lutil" ], [])
fi

##############################################################
# CFLAGS settings
##############################################################
if test -d /usr/local/include
then
    CFLAGS="$CFLAGS -I/usr/local/include"
fi

if test -d /usr/local/lib
then
    CFLAGS="$CFLAGS -L /usr/local/lib"
fi

if test -d /opt/local/include
then
    CFLAGS="$CFLAGS -I/opt/local/include"
fi

if test -d /opt/local/lib
then
    CFLAGS="$CFLAGS -L /opt/local/lib"
fi

if test -d /usr/include/i386-linux-gnu/
then
    CFLAGS="$CFLAGS -I /usr/include/i386-linux-gnu//"
fi

if test -d /usr/lib/i386-linux-gnu/
then
    CFLAGS="$CFLAGS -L /usr/lib/i386-linux-gnu/"
fi

if test $ENABLE_OPTIMIZE = 1
then
    if test $ENABLE_THREAD = 1
    then
        echo "Enable thread with optimization is not supported"
        exit 1;
    else
        CFLAGS="$CFLAGS -O3"
    fi
fi

if test $ENABLE_INTERPRETER = 1
then
    CFLAGS="$CFLAGS -DENABLE_INTERPRETER"
    INTERPRETER=iclover2
    AC_SUBST(INTERPRETER)
fi

if test $DEBUGGING = 1
then
    CFLAGS="$CFLAGS -g -DMDEBUG"
    #CFLAGS="$CFLAGS -g -DMDEBUG -Werror"
fi

if test $LOGGING = 1
then
    CFLAGS="$CFLAGS -DVM_LOG"
fi

AC_SUBST(OS)

export CFLAGS

##########################################################
# Libs
##########################################################
CC=gcc

INSTALL="$(which install) -c"

if test $ENABLE_THREAD = 1
then
    AC_CHECK_HEADER(pthread.h, [AC_DEFINE(HAVE_PTHREAD_H, 1)], [ exit ])
    AC_HAVE_LIBRARY(pthread, [ LIBS="$LIBS -lpthread"; ], [ exit ])
    AC_SUBST(ENABLE_THREAD)
fi

AC_CHECK_HEADER(ncurses.h, [AC_DEFINE(HAVE_NCURSESW_H, 1)], [])
AC_HAVE_LIBRARY(ncursesw, [ LIBS="$LIBS -lncursesw"; ], [])

AC_CHECK_HEADER(readline/readline.h, [AC_DEFINE(HAVE_READLINE_H, 1)], [])
AC_HAVE_LIBRARY(readline, [ LIBS="$LIBS -lreadline"; ], [])

AC_CHECK_HEADER(bsd/stdlib.h, [AC_DEFINE(HAVE_BSD_H, 1)], [])
AC_HAVE_LIBRARY(bsd, [ LIBS="$LIBS -lbsd"; ], [])

if test "$OS" != FREEBSD
then
    AC_HAVE_LIBRARY(dl, [ LIBS="$LIBS -ldl"; ], [exit])
fi

AC_CHECK_HEADER(math.h, [AC_DEFINE(HAVE_MATH_H,1)], [])
AC_HAVE_LIBRARY(m, [ LIBS="$LIBS -lm"; ], [])
AC_CHECK_HEADER(iconv.h, [AC_DEFINE(HAVE_ICONV_H, 1)], [])

if test "$OS" = CYGWIN || test "$OS" = DARWIN || test "$OS" = FREEBSD
then
    LIBS="$LIBS -liconv"
fi

AC_CHECK_HEADER(pcre.h, [AC_DEFINE(HAVE_PCRE_H,1)], [])
AC_HAVE_LIBRARY(pcre, [ LIBS="$LIBS -lpcre"; ], [ eixt ])

AC_HAVE_LIBRARY(rt, [ LIBS="$LIBS -lrt"; ], [])

if test "$ENABLE_CFFI" = 1
then
    CFFI=1
    AC_CHECK_HEADER(avcall.h, [AC_DEFINE(HAVE_AVCALL_H,1)], [ exit ])
    AC_HAVE_LIBRARY(avcall, [ LIBS="$LIBS -lavcall"; ], [ exit ])
else
    CFFI=0
fi

AC_SUBST(CFFI)

AC_SUBST(LIBS)

if which clang-7 > /dev/null
then
    CC=clang-7
    if which ccache > /dev/null
    then
        CC="ccache clang-7"
    fi
elif which clang > /dev/null
then
    CC=clang
    if which ccache > /dev/null
    then
        CC="ccache clang"
    fi
else
    CC=gcc

    if which ccache > /dev/null
    then
        CC="ccache gcc"
    fi
fi

AC_SUBST(CC)

DESTDIR=$myprefix

AC_SUBST(DESTDIR)

CXXFLAGS='-DPREFIX="\"${DESTDIR}/\""'
CXXFLAGS="-I . $CXXFLAGS"
CXXFLAGS="-fPIC -rdynamic $CXXFLAGS"

if which clang++-7 > /dev/null
then
    CXX=clang++-7
    if which ccache > /dev/null
    then
        CXX="ccache clang++-7"
    fi
elif which clang++ > /dev/null
then
    CXX=clang++
    if which ccache > /dev/null
    then
        CXX="ccache clang++"
    fi
else
    CXX=g++
    if which ccache > /dev/null
    then
        CXX="ccache g++"
    fi
fi

if which llvm-config-7 > /dev/null
then
    if test $DEBUGGING = 1
    then
        CXXFLAGS='`llvm-config-7 --cxxflags --ldflags --system-libs --libs all` -lffi -DMDEBUG -g'" $CXXFLAGS"
    else
        CXXFLAGS='`llvm-config-7 --cxxflags --ldflags --system-libs --libs all` -lffi -O3'" $CXXFLAGS"
    fi
else
    if test $DEBUGGING = 1
    then
        CXXFLAGS='`llvm-config --cxxflags --ldflags --system-libs --libs all` -lffi -DMDEBUG -g'" $CXXFLAGS"
    else
        CXXFLAGS='`llvm-config --cxxflags --ldflags --system-libs --libs all` -lffi -O3'" $CXXFLAGS"
    fi
fi

if which clang-7
then
    LLVM_DIS=llvm-dis-7
    LLC=llc-7
    CLANG=clang-7
    CLANGPLUSPLUS=clang++-7
    LLVM_CONFIG=llvm-config-7
else
    LLVM_DIS=llvm-dis
    LLC=llc
    CLANG=clang
    CLANGPLUSPLUS=clang++
    LLVM_CONFIG=llvm-config
fi

echo "LLVM_DIS=\"$LLVM_DIS\"" > bclover2
echo "LLC=\"$LLC\"" >> bclover2
echo "CLANG=\"$CLANG\"" >> bclover2
echo "CLANGPLUSPLUS=\"$CLANGPLUSPLUS\"" >> bclover2
echo "LLVM_CONFIG=\"$LLVM_CONFIG\"" >> bclover2
echo "LIBS=\"$LIBS\"" >> bclover2
echo "DESTDIR=\"$DESTDIR\"" >> bclover2
cat <<'EOF' >> bclover2
if test $1 = -core; then CORE=1; CLASS_NAME=${2%.*}; else CORE=0; CLASS_NAME=${1%.*}; fi
if test -e ./cclover2; then COMPILER=./cclover2; else COMPILER=cclover2; fi;

echo "bitcompile $CLASS_NAME"

if test $CORE = 1; then $COMPILER -core -jit $CLASS_NAME.oclcl; else $COMPILER -jit $CLASS_NAME.oclcl; fi

if test -e $CLASS_NAME.bc
then
    $LLVM_DIS $CLASS_NAME.bc
    $LLC -relocation-model=pic $CLASS_NAME.bc
    $CLANG -o $CLASS_NAME.o -c $CLASS_NAME.s
    $CLANG -shared -Wl,-soname=$CLASS_NAME.so.1 -o $CLASS_NAME.so.1.0.0 $CLASS_NAME.o
    ln -fs $CLASS_NAME.so.1.0.0 $CLASS_NAME.so
fi
EOF

chmod 755 bclover2

AC_SUBST(CXX)

CFLAGS="$CFLAGS -Qunused-arguments"
#CFLAGS="$CFLAGS -Qunused-arguments -Wunused-variable"

if test $ENABLE_JIT = 1
then
    CFLAGS="$CFLAGS -DENABLE_JIT"
    OBJS="src/vm.o src/script.o src/object.o src/array.o src/string.o src/block.o src/regex.o src/integer.o src/byte.o src/short.o src/long.o src/float.o src/pointer.o src/char.o src/bool.o src/hash.o src/list.o src/tuple.o src/carray.o src/type.o src/stack.o src/heap.o src/exception.o src/native_method.o src/class_system.o src/class_parser.o src/class_clover.o src/class_clover_runtime.o src/clover_to_clang.o src/class_thread.o"
    COMPILER_OBJS="src/parser.o src/node_type.o src/node.o src/cast.o src/vtable.o src/script_ctime.o src/node_block.o src/node_block_type.o src/class_compiler.o src/klass_compile_time.o src/method_compiler.o src/module.o src/class_clover_compile_time.o"
    JIT_OBJS="src/jit.o src/jit2.o src/jit3.o src/jit4.o src/jit5.o src/jit6.o"
    JIT_RUNTIME_OBJS="src/jit_runtime.o"
    JIT=1
else
    OBJS="src/vm.o src/script.o src/object.o src/array.o src/string.o src/block.o src/regex.o src/integer.o src/byte.o src/short.o src/long.o src/float.o src/pointer.o src/char.o src/bool.o src/hash.o src/list.o src/tuple.o src/carray.o src/type.o src/stack.o src/heap.o src/exception.o src/native_method.o src/class_system.o src/class_parser.o src/class_clover.o src/class_clover_runtime.o src/clover_to_clang.o src/class_thread.o"
    COMPILER_OBJS="src/parser.o src/node_type.o src/node.o src/cast.o src/vtable.o src/script_ctime.o src/node_block.o src/node_block_type.o src/class_compiler.o src/klass_compile_time.o src/method_compiler.o src/module.o src/class_clover_compile_time.o"
    JIT_OBJS=
    JIT_RUNTIME_OBJS=
    JIT=0
fi

AC_CHECK_FUNCS(lchmod)

CXXFLAGS="$CXXFLAGS -Qunused-arguments"

AC_SUBST(JIT)
AC_SUBST(CXXFLAGS)
AC_SUBST(CFLAGS)

AC_CHECK_FUNCS(execvpe)

COMMON_OBJS="src/buffer.o src/debug.o src/xfunc.o src/klass.o src/constant.o src/code.o src/alignment.o src/utf.o"

AC_SUBST(OBJS)
AC_SUBST(JIT_OBJS)
AC_SUBST(JIT_RUNTIME_OBJS)
AC_SUBST(COMPILER_OBJS)
AC_SUBST(COMMON_OBJS)
AC_SUBST(SCRIPT_OBJS)

AC_OUTPUT(Makefile)
