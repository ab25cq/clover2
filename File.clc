include "String.clc"

class System
{
    typedef mode_t int;
    typedef dev_t ulong;
    typedef uid_t int;
    typedef gid_t int;
    typedef DIR pointer;

    S_IFMT: static int;
    S_IFDIR: static int;
    S_IFCHR: static int;
    S_IFBLK: static int;
    S_IFREG: static int;
    S_IFIFO: static int;
    S_IFLNK: static int;
    S_IFSOCK: static int;
    S_ISUID: static int;
    S_ISGID: static int;
    S_ISVTX: static int;
    S_IRUSR: static int;
    S_IWUSR: static int;
    S_IXUSR: static int;
    S_IRWXU: static int;
    S_IRGRP: static int;
    S_IWGRP: static int;
    S_IXGRP: static int;
    S_IRWXG: static int;
    S_IROTH: static int;
    S_IWOTH: static int;
    S_IXOTH: static int;
    S_IRWXO: static int;
    R_OK: static int;
    W_OK: static int;
    X_OK: static int;
    F_OK: static int;
    O_APPEND: static int;
    O_ASYNC: static int;
    O_RDONLY: static int;
    O_WRONLY: static int;
    O_RDWR: static int;
    O_CREAT: static int;
    O_DIRECTORY: static int;
    O_EXCL: static int;
    O_NOCTTY: static int;
    O_NOFOLLOW: static int;
    O_TMPFILE: static int;
    O_TRUNC: static int;
    O_TTY_INIT: static int;
    O_CLOEXEC: static int;
    O_DIRECT: static int;
    O_DSYNC: static int;
    O_LARGEFILE: static int;
    O_NOATIME: static int;
    O_NONBLOCK: static int;
    O_PATH: static int;
    O_SYNC : static int;

    def initialize(): static native;
    def open(file_name:String, flags:int, mode:mode_t):static native int throws Exception;
    def close(fd:int): static native int throws Exception;
    def read(fd:int, buf:Buffer, size:size_t): static native int throws Exception;
    def write(fd:int, buf:Buffer, size:size_t): static native int throws Exception;

    def time(): static native time_t;
    def localtime(time:time_t, tm_sec:pointer@of_int, tm_min:pointer@of_int, tm_hour:pointer@of_int, tm_mday:pointer@of_int, tm_mon:pointer@of_int, tm_year:pointer@of_int, tm_wday:pointer@of_int, tm_yday:pointer@of_int, tm_isdst:pointer@of_bool): static native throws Exception;
    def mktime(time:tm): static native time_t throws Exception;
    def lstat(path:String, stat_:stat): static native int throws Exception;
    def stat(path:String, stat_:stat): static native int throws Exception;
    def realpath(path:String): static native String throws Exception;
    def dirname(path:String): static native String;
    def basename(path:String): static native String;
    def opendir(path:String): static native DIR throws Exception;
    def readdir(dir:DIR): static native String@Nullable;
    def closedir(dir:DIR): static native int throws Exception;
}

class tm
{
    tm_sec:int;
    tm_min:int;
    tm_hour:int;
    tm_mday:int;
    tm_mon:int;
    tm_year:int;
    tm_wday:int;
    tm_yday:int;
    tm_isdst:bool;
    
    def initialize() {
        self.initialize(System.time());
    }

    def initialize(time:time_t) {
        System.localtime(time, &self.tm_sec, &self.tm_min, &self.tm_hour, &self.tm_mday, &self.tm_mon, &self.tm_year, &self.tm_wday, &self.tm_yday, &self.tm_isdst);
    }

    def initialize(year:int, month:int, day_of_month:int, hour:int, minuts:int, sec:int, day_of_week:int, day_of_year:int, isdst:bool) 
    {
        self.setYear(year);
        self.setMonth(month);
        self.setDayOfMonth(day_of_month);
        self.setHour(hour);
        self.setMinuts(minuts);
        self.setSecond(sec);
        self.setDayOfWeek(day_of_week);
        self.setDayOfYear(day_of_year);
        self.setDaylightSavingTime(isdst);
    }

    def second():int {
        return self.tm_sec;
    }
    def setSecond(value:int) {
        self.tm_sec = value;
    }
    def minuts():int {
        return self.tm_min;
    }
    def setMinuts(value:int) {
        self.tm_min = value;
    }
    def hour():int {
        return self.tm_hour;
    }
    def setHour(value:int) {
        self.tm_hour = value;
    }
    def dayOfMonth():int {
        return self.tm_mday;
    }
    def setDayOfMonth(value:int) {
        self.tm_mday = value;
    }
    def month():int {
        return self.tm_mon + 1;
    }
    def setMonth(value:int) {
        self.tm_mon = value -1;
    }
    def year():int {
        return self.tm_year + 1900;
    }
    def setYear(value:int) {
        self.tm_year = value - 1900;
    }
    def dayOfWeek():int {
        return self.tm_wday;
    }
    def setDayOfWeek(value:int) {
        self.tm_wday = value;
    }
    def dayOfYear():int {
        return self.tm_yday;
    }
    def setDayOfYear(value:int) {
        self.tm_yday = value;
    }
    def isDaylightSavingTime():bool {
        return self.tm_isdst;
    }
    def setDaylightSavingTime(value:bool) {
        self.tm_isdst = value;
    }

    def toString():String {
        return System.sprintf("%d-%02d-%02d %02d:%02d", array { self.year().toInteger, self.month().toInteger, self.dayOfMonth().toInteger, self.hour().toInteger, self.minuts().toInteger });
    }

    def to_time_t():time_t throws Exception {
        return System.mktime(self);
    }
}

class stat
{
    st_dev:dev_t;
    st_mode:mode_t;
    st_uid:uid_t;
    st_gid:gid_t;
    st_rdev:dev_t;
    st_size: size_t;

    st_atime:time_t;
    st_mtime:time_t;
    st_ctime:time_t;

    def initialize(path:String, lstat:bool) throws Exception {
        if(lstat) {
            System.lstat(path, self);
        }
        else {
            System.stat(path, self);
        }
    }
    def initialize(path:String) throws Exception {
        self.initialize(path, false);
    }
    def S_ISDIR():bool {
        return (self.st_mode & System.S_IFMT) == System.S_IFDIR;
    }
    def S_ISCHR():bool {
        return (self.st_mode & System.S_IFMT) == System.S_IFCHR;
    }
    def S_ISBLK():bool {
        return (self.st_mode & System.S_IFMT) == System.S_IFBLK;
    }
    def S_ISREG():bool {
        return (self.st_mode & System.S_IFMT) == System.S_IFREG;
    }
    def S_ISFIFO():bool {
        return (self.st_mode & System.S_IFMT) == System.S_IFIFO;
    }
    def S_ISLNK():bool {
        return (self.st_mode & System.S_IFMT) == System.S_IFLNK;
    }
    def S_ISSOCK():bool {
        return (self.st_mode & System.S_IFMT) == System.S_IFSOCK;
    }
    def permission():int {
        return self.st_mode & (System.S_ISUID|System.S_ISGID|System.S_ISVTX|System.S_IRWXU|System.S_IRWXG|System.S_IRWXO);
    }
    def S_IXUGO():int {
        return ((self.st_mode & System.S_IXUSR) == System.S_IXUSR) && ((self.st_mode & System.S_IXGRP) == System.S_IXGRP) && ((self.st_mode & System.S_IXOTH) == System.S_IXOTH);
    }
    def atime():tm {
        return new tm(self.st_atime);
    }
    def ctime():tm {
        return new tm(self.st_ctime);
    }
    def mtime():tm {
        return new tm(self.st_mtime);
    }
    def size():size_t {
        return self.st_size;
    }
    def uid():uid_t {
        return self.st_uid;
    }
    def gid():gid_t {
        return self.st_gid;
    }

    def userName():String {
        result:String = "";

        p"/etc/passwd".read().toString().split(/\n/).each(closure(line:String) {
            fields:List<String> = line.chomp().split(/:/);
            
            if(fields.items(2).to_int() == self.st_uid) {
                result = fields.items(0);
            }
        });

        return result;
    }

    def groupName():String {
        result:String = "";

        p"/etc/group".read().toString().split(/\n/).each(closure(line:String) {
            fields:List<String> = line.chomp().split(/:/);
            
            if(fields.items(2).to_int() == self.st_gid) {
                result = fields.items(0);
            }
        });

        return result;
    }
}

class String 
{
    def toPath(): Path {
        return new Path(self);
    }
}

class File
{
    fd:int;
    fileName:String;

    def initialize() {
        self.fd = -1;
        self.fileName = null;
    }

    def initialize(file_name:String, flags:int, mode:mode_t) throws Exception {
        self.fd = System.open(file_name, flags, mode);
        self.fileName = file_name;
    }

    def initialize(file_name:String) throws Exception {
        self.initialize(file_name, System.O_RDONLY, 0);
    }

    def finalize() {
        if(self.fd != -1) {
            System.close(self.fd);
        }
    }

    def close() {
        if(self.fd != -1) {
            System.close(self.fd);

            self.fd = -1;
            self.fileName = null;
        }
    }

    def read(size:size_t): Buffer throws Exception {
        if(self.fd == -1) {
            throw new Exception("File is not opened");
        }

        result:Buffer = new Buffer(size);
        System.read(self.fd, result, size);
        return result;
    }

    def to_stat(): stat throws Exception {
        if(self.fileName.identifyWith(null)) {
            throw new Exception("File is not opened");
        }

        return new stat(self.fileName);
    }
    def to_lstat(): stat throws Exception {
        if(self.fileName.identifyWith(null)) {
            throw new Exception("File is not opened");
        }

        return new stat(self.fileName, true);
    }

    def read(file_name:String): static Buffer throws Exception {
        f:File = new File(file_name);
        result: Buffer = f.read();
        f.close();

        return result;
    }

    def read(): Buffer throws Exception {
        if(self.fd == -1) {
            throw new Exception("File is not opened");
        }

        size:size_t = self.to_stat().size();

        result:Buffer = new Buffer(size);
        System.read(self.fd, result, size);
        return result;
    }

    def write(buf:Buffer, size:size_t):int throws Exception {
        if(self.fd == -1) {
            throw new Exception("File is not opened");
        }

        return System.write(self.fd, buf, size);
    }

    def write(buf:Buffer):int throws Exception {
        return self.write(buf, buf.len);
    }

    def write(file_name:String, buf:Buffer, mode:mode_t): static int throws Exception {
        f:File = new File(file_name, System.O_CREAT|System.O_TRUNC|System.O_WRONLY, mode);
        result:int = f.write(buf);
        f.close();

        return result;
    }
    def write(file_name:String, buf:Buffer): static int throws Exception {
        return File.write(file_name, buf, 0644);
    }
}

class Path 
{
    path: String;

    def initialize(path:String) {
        self.path = path;
    }

    def to_stat():stat {
        return new stat(self.path);
    }
    def to_lstat():stat {
        return new stat(self.path,true);
    }

    def toString(): String {
        return self.path;
    }

    def equals(path:Path):bool {
        return self.path.equals(path.path)
    }

    def realpath():Path throws Exception {
        return System.realpath(self.path).toPath();
    }
    def dirname(): Path {
        return System.dirname(self.path).toPath();
    }
    def basename():Path {
        return System.basename(self.path).toPath();
    }

    def extname(): Path {
        index:int = -1;
        for(i:int =self.path.len-1; i>=0; i--) {
            if(self.path.chars(i) == '.') {
                index = i;
                break;
            }
        }
        dirname:Path = self.dirname();

        if(index == -1 || index == 0 || self.path.chars(index-1) == '/' 
            || index < dirname.path.length()) 
        {
            return p"";
        }
        else {
            return self.path.subString(index+1, -1).toPath();
        }
    }
    def read(): Buffer {
        return File.read(self.path);
    }
    def write(buf:Buffer):int {
        return File.write(self.path, buf);
    }

/*
    void chmod(mode_t mode) throws SystemException {
        System.chmod(self, mode);
    }
    void lchmod(mode_t mode) throws SystemException {
        System.lchmod(self, mode);
    }
    void chown(uid_t owner=-1l.to_uid_t(), gid_t group=-1l.to_gid_t()) throws SystemException 
    {
        System.chown(self, owner, group);
    }
    void lchown(uid_t owner=-1l.to_uid_t(), gid_t group=-1l.to_gid_t()) throws SystemException 
    {
        System.lchown(self, owner, group);
    }
    void unlink() throws SystemException {
        System.unlink(self);
    }
    int access(AccessMode mode=AccessMode.F_OK) {
        return System.access(self, mode).get1();
    }
    bool existance() {
        return self.access(AccessMode.F_OK) == 0;
    }
    void utime(time_t actime, time_t modtime) {
        System.utime(self, new utimbuf(actime, modtime));
    }

    bool fnmatch(String pattern, FnmatchFlags flags=0.toFnmatchFlags()) {
        return System.fnmatch(pattern, self, flags);
    }

    bool isIdentical(Path path2) {
        return self.absolutePath() == path2.absolutePath();
    }

    Path absolutePath() {
        String result = self.clone();

        /// add current path to head ///
        if(result[0] != '/') {
            result = System.getcwd() + "/" + result;
        }

        /// delete ./ ///
        result = result.sub(/(\/\.)($|\/)/g) {
            |Array<String> group_strings, String prematch, String match, String postmatch|
            if(group_strings.length() == 2) {
                if(group_strings[1] == "/") {
                    return "/";
                }
            }

            return "";
        };

        /// delete .. ///
        result = result.sub(/^(\/\.\.)+($|\/)/) {
            |Array<String> group_strings, String prematch, String match, String postmatch|
            if(group_strings.length() == 2) {
                if(group_strings[1] == "/") {
                    return "/";
                }
            }

            return "";
        }

        result = result.sub(/(\/[^\/]+)(\/\.\.)($|\/)/g) {
            |Array<String> group_strings, String prematch, String match, String postmatch|

            if(group_strings.length() == 3) {
                if(group_strings[2] == "/") {
                    return "/";
                }
            }
            
            return "";
        }

        /// Is this path directory? If that is true, append / to the tail. If that is false, remove '/' at the tail  ///
        bool is_directory = false;
        try {
            is_directory = result.toPath().to_stat().S_ISDIR();
        }
        catch(SystemException e) {
            if(result[-1] == '/') {
                try {
                    is_directory = result[0..-1].toPath().to_stat().S_ISDIR();
                }
                catch(SystemException e) {
                    is_directory = false;
                }
            }
        }

        if(is_directory) {
            if(result[-1] != '/') {
                result += "/";
            }
        }
        else {
            if(result[-1] == '/') {
                result = result[0..-1];
            }
        }

        if(result == "") {
            result = "/";
        }
        
        return result.toPath();
    }

    Path realpath() throws SystemException {
        return System.realpath(self);
    }

    void link(Path newpath) throws SystemException {
        System.link(self, newpath);
    }

    void symlink(Path newpath) throws SystemException {
        System.symlink(self, newpath);
    }

    Path readlink() throws SystemException {
        return System.readlink(self);
    }

    void rename(Path path) throws SystemException {
        System.rename(self, path);
    }

    void truncate(off_t length) throws SystemException {
        System.truncate(self, length);
    }

    Array<Path> entries() throws SystemException {
        return Directory.entries(self);
    }

    Array<Path> glob(String pattern, FnmatchFlags flags=0.toFnmatchFlags()) throws SystemException
    {
        return Directory.glob(self, pattern, flags);
    }

    void chdir() throws SystemException {
        System.chdir(self);
    }

    void rmdir() throws SystemException {
        System.rmdir(self);
    }

    void mkdir(mode_t mode=0777l.to_mode_t()) {
        System.mkdir(self, mode);
    }
*/
}

class Directory 
{
    path:String;
    dir:DIR;

    def initialize(path:String) throws Exception {
        self.path = path;
        self.dir = System.opendir(path);
    }

    def finalize() {
        if(self.dir != 0.to_pointer) {
            System.closedir(self.dir);
        }
    }
    
    def readdir(): String@Nullable throws Exception {
        if(self.dir == 0.to_pointer) {
            throw new Exception("This directory is not opened");
        }

        return System.readdir(self.dir);
    }

    def closedir() {
        if(self.dir != 0.to_pointer) {
            System.closedir(self.dir);
            self.dir = 0.to_pointer;
        }
    }
}

