; ModuleID = 'CStructTest.bc'
source_filename = "Module CStructTest"

@gSigInt = external global i32
@global_string = private constant [17 x i8] c"CStructTest.clcl\00", align 1
@global_string.11 = private constant [5 x i8] c"Char\00", align 1
@global_string.12 = private constant [17 x i8] c"CStructTest.clcl\00", align 1
@global_string.13 = private constant [7 x i8] c"String\00", align 1
@global_string.14 = private constant [10 x i8] c"Exception\00", align 1
@global_string.15 = private constant [17 x i8] c"Signal Interrupt\00", align 1
@global_string.16 = private constant [8 x i8] c"CStruct\00", align 1
@global_string.17 = private constant [8 x i8] c"CStruct\00", align 1
@global_string.18 = private constant [10 x i8] c"Exception\00", align 1
@global_string.19 = private constant [17 x i8] c"Signal Interrupt\00", align 1
@global_string.20 = private constant [10 x i8] c"Exception\00", align 1
@global_string.21 = private constant [26 x i8] c"Null pointer exception(1)\00", align 1
@global_string.22 = private constant [17 x i8] c"CStructTest.clcl\00", align 1
@global_string.23 = private constant [10 x i8] c"Exception\00", align 1
@global_string.24 = private constant [17 x i8] c"Signal Interrupt\00", align 1

declare void @entry_exception_object(i32, i64*)

declare i32 @entry_exception_object_with_class_name2(i64**, i64*, i32, i64*, i8*, i8*)

declare void @inc_andand_oror_array(i64*)

declare void @dec_andand_oror_array(i64*)

declare void @set_andand_oror_right_value(i32, i64*)

declare i32 @get_andand_oror_right_value(i64*)

declare void @set_andand_oror_left_value(i32, i64*)

declare i32 @get_andand_oror_left_value(i64*)

declare i64* @get_class_with_load_and_initialize(i8*, i32)

declare i8* @get_try_catch_label_name(i64*)

declare void @try_function(i64*, i32, i32, i64*, i64*)

declare i32 @call_invoke_method(i64*, i32, i64*, i32, i64**, i64*)

declare void @mark_source_position(i64*, i8*, i32)

declare void @mark_source_position2(i64*, i8*, i32)

declare i32 @get_field_from_object(i64**, i64*, i32, i64*, i32, i32, i64*)

declare i32 @create_array_object(i64*, i32, i64*)

declare i32 @create_object(i64*, i8*, i64*)

declare i32 @store_field(i64**, i64*, i32, i64*, i32, i64, i32, i32, i64*, i64*)

declare void @try_end_function(i64*, i32, i32, i64*, i64*)

declare i32 @run_store_to_buffer(i32, i8*, i64**, i64*, i32, i64*)

declare i32 @split_tuple(i64**, i64*, i32, i32, i64*, i32)

declare i32 @call_invoke_virtual_method(i32, i64*, i32, i64**, i64*, i64*, i32, i32, i32, i32)

declare i32 @call_invoke_dynamic_method(i32, i32, i32, i32, i32, i32, i64*, i32, i64**, i64*, i64*, i64*)

declare i32 @invoke_block(i32, i64*, i32, i32, i64**, i64*)

declare i32 @run_load_field_address(i64**, i64*, i32, i64*, i32, i32, i64*)

declare i32 @store_field_of_buffer(i64**, i64*, i32, i64*, i32, i64, i32, i64*)

declare i32 @load_class_field(i64**, i64*, i32, i64*, i32, i32, i64*, i64*)

declare i32 @run_load_class_field_address(i64**, i64*, i32, i64*, i32, i32, i64*, i64*)

declare i32 @store_class_field(i64**, i64*, i32, i64*, i32, i32, i64*, i64)

declare i32 @store_class_field_of_buffer(i64**, i64*, i32, i64*, i32, i32, i64*, i64)

declare i32 @get_string_object_of_object_name(i32, i64*)

declare i32 @get_object_allocated_size(i32)

declare i32 @op_is_fun(i32, i32)

declare i32 @object_implements_interface(i32, i64*)

declare i32 @load_element(i64**, i64*, i32, i64*, i32, i32, i64*)

declare i32 @run_store_element(i64**, i64*, i32, i64*, i32, i32, i64)

declare i32 @run_store_element_of_buffer(i64**, i64*, i32, i64*, i32, i32, i64)

declare i32 @get_array_length(i32)

declare i32 @get_regex_global(i32)

declare i32 @get_regex_ignorecase(i32)

declare i32 @get_regex_multiline(i32)

declare i32 @get_regex_extended(i32)

declare i32 @get_regex_dotall(i32)

declare i32 @get_regex_anchored(i32)

declare i32 @get_regex_dollar_endonly(i32)

declare i32 @get_regex_ungreedy(i32)

declare i32 @get_regex_multiline.1(i32)

declare i32 @char_uppercase(i32)

declare i32 @char_lowercase(i32)

declare i32 @create_string_object(i8*, i64*)

declare i32 @run_op_string_with_string_expression(i8*, i32*, i32, i64**, i64*)

declare i32 @run_op_buffer_with_string_expression(i8*, i32*, i32, i64**, i64*)

declare i32 @run_op_path_with_string_expression(i8*, i32*, i32, i64**, i64*)

declare i32 @create_buffer_object(i8*, i32, i64*)

declare i32 @create_path_object(i8*, i64*)

declare i32 @run_create_array(i64**, i64*, i32, i64*, i32, i32, i64*, i64*)

declare i32 @run_create_carray(i64**, i64*, i32, i64*, i32, i32, i32, i64*, i64*)

declare i32 @run_create_equalable_carray(i64**, i64*, i32, i64*, i32, i32, i32, i64*, i64*)

declare i32 @run_create_list(i64**, i64*, i32, i64*, i32, i32, i32, i64*, i64*)

declare i32 @run_create_sortable_list(i64**, i64*, i32, i64*, i32, i32, i32, i64*, i64*)

declare i32 @run_create_equalable_list(i64**, i64*, i32, i64*, i32, i32, i32, i64*, i64*)

declare i32 @run_create_tuple(i64**, i64*, i32, i64*, i32, i8*, i64*)

declare i32 @run_create_hash(i64**, i64*, i32, i64*, i32, i32, i32, i32, i64*, i64*)

declare i32 @run_create_block_object(i64**, i64*, i64*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64*, i32, i64*)

declare i32 @create_regex_object(i8*, i32, i32, i32, i32, i32, i32, i32, i32, i64*)

declare i32 @run_op_regex_with_string_expression(i8*, i32*, i32, i64**, i64*, i32, i32, i32, i32, i32, i32, i32, i32)

declare i32 @run_int_to_string_cast(i32, i64*)

declare i32 @run_long_to_string_cast(i64, i64*)

declare i32 @run_uint_to_string_cast(i32, i64*)

declare i32 @run_ulong_to_string_cast(i64, i64*)

declare i32 @run_float_to_string_cast(float, i64*)

declare i32 @run_double_to_string_cast(double, i64*)

declare i32 @run_bool_to_string_cast(i32, i64*)

declare i32 @run_regex_to_string_cast(i32, i64*)

declare i32 @run_pointer_to_string_cast(i8*, i64*)

declare i32 @run_char_to_string_cast(i32, i64*)

declare i32 @create_integer(i32, i64*)

declare i32 @create_uinteger(i32, i64*)

declare i32 @create_long(i64, i64*)

declare i32 @create_ulong(i64, i64*)

declare i32 @create_float(float, i64*)

declare i32 @create_double(double, i64*)

declare i32 @create_pointer(i8*, i64*)

declare i32 @create_char(i32, i64*)

declare i32 @create_bool(i32, i64*)

declare i32 @create_byte(i8, i64*)

declare i32 @create_ubyte(i8, i64*)

declare i32 @create_short(i16, i64*)

declare i32 @create_ushort(i16, i64*)

declare i32 @run_array_to_carray_cast(i64**, i64*, i32, i64*, i32, i8*, i64*)

declare i8* @run_buffer_to_pointer_cast(i32, i64*)

declare i8 @run_cbyte_to_byte_cast(i32)

declare i8 @run_cubyte_to_ubyte_cast(i32)

declare i16 @run_cshort_to_short_cast(i32)

declare i16 @run_cushort_to_ushort_cast(i32)

declare i32 @run_integer_to_int_cast(i32)

declare i32 @run_uinteger_to_uint_cast(i32)

declare i64 @run_clong_to_long_cast(i32)

declare i64 @run_culong_to_ulong_cast(i32)

declare float @run_cfloat_to_float_cast(i32)

declare double @run_cdouble_to_double_cast(i32)

declare void @print_value(i64)

declare void @print_str_value(i8*)

declare i32 @regex_equals(i32, i32)

declare i32 @run_create_sortable_carray(i64**, i64*, i32, i64*, i32, i32, i32, i64*, i64*)

declare i8* @get_object_head_of_memory(i32, i32)

declare void @show_vm_stack(i64*, i64**, i64*, i32)

declare void @push_value_to_global_stack(i64, i64*)

declare void @initialize_code_and_constant(i64*, i64*, i8*, i32, i8*, i32)

declare void @entry_jit_funcs(i8*, i32)

declare i32 @puts(i8*)

declare void @fun(i64)

declare void @fun.2(i64)

declare void @fun.3(i64)

declare void @fun.4(i64)

declare void @fun.5(i64)

declare void @fun.6(i64)

declare void @fun.7(i64)

declare void @fun.8(i64)

declare void @fun.9(i64)

declare void @fun.10(i64)

define i32 @"CStructTest.method(char)$$0STATIC"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code, i64** %global_stack_ptr_address, i64* %stack_plus_var_num) {
entry:
  store i32 0, i32* @gSigInt
  %lvar_offset_value = getelementptr i64, i64* %lvar, i64 0
  %0 = load i64, i64* %lvar_offset_value, align 8
  %trunc_variable = trunc i64 %0 to i32
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %1 = zext i32 %trunc_variable to i64
  store i64 %1, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value1 = load i64*, i64** %stack_ptr_address
  %"inc_ptr_value(1)" = getelementptr i64, i64* %loaded_stack_ptr_address_value1, i64 1
  store i64* %"inc_ptr_value(1)", i64** %stack_ptr_address
  %2 = call i32 @create_char(i32 %trunc_variable, i64* %info)
  %loaded_stack_ptr_address_value2 = load i64*, i64** %stack_ptr_address
  %"inc_ptr_value(1)3" = getelementptr i64, i64* %loaded_stack_ptr_address_value2, i64 -1
  store i64* %"inc_ptr_value(1)3", i64** %stack_ptr_address
  %loaded_stack_ptr_address_value4 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value4, align 8
  %3 = zext i32 %2 to i64
  store i64 %3, i64* %loaded_stack_ptr_address_value4, align 8
  %loaded_stack_ptr_address_value5 = load i64*, i64** %stack_ptr_address
  %"inc_ptr_value(1)6" = getelementptr i64, i64* %loaded_stack_ptr_address_value5, i64 1
  store i64* %"inc_ptr_value(1)6", i64** %stack_ptr_address
  call void @mark_source_position2(i64* %info, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @global_string, i32 0, i32 0), i32 13)
  %4 = call i64* @get_class_with_load_and_initialize(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_string.11, i32 0, i32 0), i32 0)
  %ifcond = icmp eq i64* %4, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %5 = call i32 @call_invoke_method(i64* %4, i32 14, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond7 = icmp ne i32 %5, 1
  br i1 %ifcond7, label %then_block8, label %entry_ifend9

then_block8:                                      ; preds = %entry_ifend
  %6 = call i8* @get_try_catch_label_name(i64* %info)
  %catchcond = icmp ne i8* %6, null
  br i1 %catchcond, label %then_block_b, label %entry_ifend_b

entry_ifend9:                                     ; preds = %entry_ifend
  %loaded_stack_ptr_address_value10 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value10, i64 -1
  %stack_pointer_offset_value11 = load i64, i64* %stack_pointer_offset_value, align 8
  %trunc_variable12 = trunc i64 %stack_pointer_offset_value11 to i32
  call void @mark_source_position2(i64* %info, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @global_string.12, i32 0, i32 0), i32 13)
  %7 = call i64* @get_class_with_load_and_initialize(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_string.13, i32 0, i32 0), i32 0)
  %ifcond15 = icmp eq i64* %7, null
  br i1 %ifcond15, label %then_block13, label %entry_ifend14

then_block_b:                                     ; preds = %then_block8
  ret i32 0

entry_ifend_b:                                    ; preds = %then_block8
  ret i32 0

then_block13:                                     ; preds = %entry_ifend9
  ret i32 0

entry_ifend14:                                    ; preds = %entry_ifend9
  %8 = call i32 @call_invoke_method(i64* %7, i32 41, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond16 = icmp ne i32 %8, 1
  br i1 %ifcond16, label %then_block17, label %entry_ifend18

then_block17:                                     ; preds = %entry_ifend14
  %9 = call i8* @get_try_catch_label_name(i64* %info)
  %catchcond19 = icmp ne i8* %9, null
  br i1 %catchcond19, label %then_block_b20, label %entry_ifend_b21

entry_ifend18:                                    ; preds = %entry_ifend14
  %loaded_stack_ptr_address_value22 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value23 = getelementptr i64, i64* %loaded_stack_ptr_address_value22, i64 -1
  %stack_pointer_offset_value24 = load i64, i64* %stack_pointer_offset_value23, align 8
  %trunc_variable25 = trunc i64 %stack_pointer_offset_value24 to i32
  %sig_int_value = load i32, i32* @gSigInt, align 4
  %10 = trunc i32 %sig_int_value to i1
  br i1 %10, label %sigint_then_block, label %entry_after_sigint

then_block_b20:                                   ; preds = %then_block17
  ret i32 0

entry_ifend_b21:                                  ; preds = %then_block17
  ret i32 0

sigint_then_block:                                ; preds = %entry_ifend18
  store i32 0, i32* @gSigInt
  %11 = call i32 @entry_exception_object_with_class_name2(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_string.14, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @global_string.15, i32 0, i32 0))
  ret i32 0

entry_after_sigint:                               ; preds = %entry_ifend18
  %loaded_stack_ptr_address_value26 = load i64*, i64** %stack_ptr_address
  %"inc_ptr_value(1)27" = getelementptr i64, i64* %loaded_stack_ptr_address_value26, i64 -1
  store i64* %"inc_ptr_value(1)27", i64** %stack_ptr_address
  %loaded_stack_ptr_address_value28 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value28, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value28, align 8
  %loaded_stack_ptr_address_value29 = load i64*, i64** %stack_ptr_address
  %"inc_ptr_value(1)30" = getelementptr i64, i64* %loaded_stack_ptr_address_value29, i64 1
  store i64* %"inc_ptr_value(1)30", i64** %stack_ptr_address
  %store_address_value = getelementptr i64, i64* %stack, i32 %var_num
  store i64 0, i64* %store_address_value, align 8
  ret i32 1

entry_after_return:                               ; No predecessors!
  ret i32 1
}

define i32 @"CStructTest.method()$$1STATIC"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code, i64** %global_stack_ptr_address, i64* %stack_plus_var_num) {
entry:
  store i32 0, i32* @gSigInt
  %0 = call i64* @get_class_with_load_and_initialize(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_string.16, i32 0, i32 0), i32 0)
  %ifcond = icmp eq i64* %0, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %1 = call i32 @create_object(i64* %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_string.17, i32 0, i32 0), i64* %info)
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %2 = zext i32 %1 to i64
  store i64 %2, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value1 = load i64*, i64** %stack_ptr_address
  %"inc_ptr_value(1)" = getelementptr i64, i64* %loaded_stack_ptr_address_value1, i64 1
  store i64* %"inc_ptr_value(1)", i64** %stack_ptr_address
  %lvar_offset_value = getelementptr i64, i64* %lvar, i64 0
  %3 = zext i32 %1 to i64
  store i64 %3, i64* %lvar_offset_value, align 8
  %sig_int_value = load i32, i32* @gSigInt, align 4
  %4 = trunc i32 %sig_int_value to i1
  br i1 %4, label %sigint_then_block, label %entry_after_sigint

sigint_then_block:                                ; preds = %entry_ifend
  store i32 0, i32* @gSigInt
  %5 = call i32 @entry_exception_object_with_class_name2(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_string.18, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @global_string.19, i32 0, i32 0))
  ret i32 0

entry_after_sigint:                               ; preds = %entry_ifend
  %loaded_stack_ptr_address_value2 = load i64*, i64** %stack_ptr_address
  %"inc_ptr_value(1)3" = getelementptr i64, i64* %loaded_stack_ptr_address_value2, i64 -1
  store i64* %"inc_ptr_value(1)3", i64** %stack_ptr_address
  store i32 0, i32* @gSigInt
  %lvar_offset_value4 = getelementptr i64, i64* %lvar, i64 0
  %6 = load i64, i64* %lvar_offset_value4, align 8
  %trunc_variable = trunc i64 %6 to i32
  %loaded_stack_ptr_address_value5 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value5, align 8
  %7 = zext i32 %trunc_variable to i64
  store i64 %7, i64* %loaded_stack_ptr_address_value5, align 8
  %loaded_stack_ptr_address_value6 = load i64*, i64** %stack_ptr_address
  %"inc_ptr_value(1)7" = getelementptr i64, i64* %loaded_stack_ptr_address_value6, i64 1
  store i64* %"inc_ptr_value(1)7", i64** %stack_ptr_address
  %ifcond10 = icmp eq i32 %trunc_variable, 0
  br i1 %ifcond10, label %then_block8, label %entry_ifend9

then_block8:                                      ; preds = %entry_after_sigint
  %8 = call i32 @entry_exception_object_with_class_name2(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_string.20, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @global_string.21, i32 0, i32 0))
  ret i32 0

entry_ifend9:                                     ; preds = %entry_after_sigint
  %9 = call i8* @get_object_head_of_memory(i32 %trunc_variable, i32 0)
  %loaded_stack_ptr_address_value11 = load i64*, i64** %stack_ptr_address
  %"inc_ptr_value(1)12" = getelementptr i64, i64* %loaded_stack_ptr_address_value11, i64 -1
  store i64* %"inc_ptr_value(1)12", i64** %stack_ptr_address
  %loaded_stack_ptr_address_value13 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value13, align 8
  %10 = ptrtoint i8* %9 to i64
  store i64 %10, i64* %loaded_stack_ptr_address_value13, align 8
  %loaded_stack_ptr_address_value14 = load i64*, i64** %stack_ptr_address
  %"inc_ptr_value(1)15" = getelementptr i64, i64* %loaded_stack_ptr_address_value14, i64 1
  store i64* %"inc_ptr_value(1)15", i64** %stack_ptr_address
  call void @mark_source_position2(i64* %info, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @global_string.22, i32 0, i32 0), i32 24)
  %11 = bitcast i8* %9 to i64*
  %12 = load i64, i64* %11, align 8
  %sig_int_value16 = load i32, i32* @gSigInt, align 4
  %13 = trunc i32 %sig_int_value16 to i1
  br i1 %13, label %sigint_then_block17, label %entry_after_sigint18

sigint_then_block17:                              ; preds = %entry_ifend9
  store i32 0, i32* @gSigInt
  %14 = call i32 @entry_exception_object_with_class_name2(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_string.23, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @global_string.24, i32 0, i32 0))
  ret i32 0

entry_after_sigint18:                             ; preds = %entry_ifend9
  %loaded_stack_ptr_address_value19 = load i64*, i64** %stack_ptr_address
  %"inc_ptr_value(1)20" = getelementptr i64, i64* %loaded_stack_ptr_address_value19, i64 -1
  store i64* %"inc_ptr_value(1)20", i64** %stack_ptr_address
  %loaded_stack_ptr_address_value21 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value21, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value21, align 8
  %loaded_stack_ptr_address_value22 = load i64*, i64** %stack_ptr_address
  %"inc_ptr_value(1)23" = getelementptr i64, i64* %loaded_stack_ptr_address_value22, i64 1
  store i64* %"inc_ptr_value(1)23", i64** %stack_ptr_address
  %store_address_value = getelementptr i64, i64* %stack, i32 %var_num
  store i64 0, i64* %store_address_value, align 8
  ret i32 1

entry_after_return:                               ; No predecessors!
  ret i32 1
}
