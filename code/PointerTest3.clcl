class PointerTest3
{
    var value:Buffer;
    var value2: static Buffer;

    def initialize() {}

    def main(): static {
        b:pointer = b"ABCDEF";

        Clover.test("Pointer Test3", b->byte == 'A' && (b+1)->byte == 'B' && (b+2)->byte == 'C' && (b+3)->byte =='D');

        c := b"ABCDEFG";
        c++;

        Clover.test("Memory safe pointer test1", c->byte == 'B');

        c++;
        Clover.test("Memory safe pointer test2", c->byte == 'C');

        c += 2;
        Clover.test("Memory safe pointer test2.5", c->byte == 'E');

        c --;
        Clover.test("Memory safe pointer test2.6", c->byte == 'D');

        c -=2;
        Clover.test("Memory safe pointer test2.7", c->byte == 'B');

/*
        print("Memory safe pointer test3...");
        try {
            c+=1000;
        } catch(e:Exception) {
            println("OK");
        }

        print("Memory safe pointer test4...");
        try {
            c -= 1000;
        } catch(e:Exception) {
            println("OK");
        }

        d := b"ABC";

        d++;

        Clover.test("Memory safe pointer test5", memcmp(d, b"BC", 2) == 0);

        object := PointerTest3();

        object.value = b"ABC";

        object.value++;

        Clover.test("Memory safe pointer test6", object.value->byte == 'B');

        object.value--;

        Clover.test("Memory safe pointer test7", object.value->byte == 'A');

        object.value+=2;

        Clover.test("Memory safe pointer test8", object.value->byte == 'C');

        object.value-=2;

        Clover.test("Memory safe pointer test9", object.value->byte == 'A');

        object.value->byte = '1';

        Clover.test("Memory safe pointer test9.5", memcmp(object.value, b"1BC", 3) == 0);

        print("Memory safe pointer test10...");
        try {
            object.value -= 1000;
        } catch(e:Exception) {
            println("OK");
        }

        print("Memory safe pointer test11...");
        try {
            object.value += 1000;
        } catch(e:Exception) {
            println("OK");
        }

        PointerTest3.value2 = b"ABC";

        PointerTest3.value2++;

        Clover.test("Memory safe pointer test12", PointerTest3.value2->byte == 'B');

        PointerTest3.value2--;

        Clover.test("Memory safe pointer test13", PointerTest3.value2->byte == 'A');

        PointerTest3.value2+=2;

        Clover.test("Memory safe pointer test14", PointerTest3.value2->byte == 'C');

        PointerTest3.value2-=2;

        Clover.test("Memory safe pointer test15", PointerTest3.value2->byte == 'A');

        PointerTest3.value2->byte = '1';

        Clover.test("Memory safe pointer test15.5", memcmp(PointerTest3.value2, b"1BC", 3) == 0);

        print("Memory safe pointer test16...");
        try {
            PointerTest3.value2 -= 1000;
        } catch(e:Exception) {
            println("OK");
        }

        print("Memory safe pointer test17...");
        try {
            PointerTest3.value2 += 1000;
        } catch(e:Exception) {
            println("OK");
        }

        e := b"ABC";

        e++;
        e->byte = '1';
        e--;

        Clover.test("Memory safe pointer test16", memcmp(e, B"A1C", 3) == 0);

        buf := B"ABCDEFGHI";

        p := Buffer(buf.buffer, buf.size, false);

        p++;

        Clover.test("Memory safe pointer test17", p->byte == 'B');
*/
    }
}
