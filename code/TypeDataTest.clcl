class TypeDataTest
{
    def initialize() {
    }

    def main():static {
        new List<String>().className();
        Clover.test("type test", new List<String>().className().equals("List<String>"));
        Clover.test("type test2", list { "AAA", "BBB", "CCC" }.className().equals("List<String>"));
        Clover.test("type test3", new SortableList<String>().className().equals("SortableList<String>"));
        Clover.test("type test4", sortable_list { "AAA", "BBB", "CCC" }.className().equals("SortableList<String>"));
        Clover.test("type test5", new EqualableList<String>().className().equals("EqualableList<String>"));
        Clover.test("type test6", equalable_list { "AAA", "BBB", "CCC" }.className().equals("EqualableList<String>"));
        Clover.test("type test7", hash { "AAA":1, "BBB":2, "CCC":3 }.className().equals("Hash<String,Integer>"));
        Clover.test("type test8", new Hash<String,Integer>().className().equals("Hash<String,Integer>"));
        Clover.test("type test9", array { "AAA", "BBB", "CCC" }.className().equals("Array<String>"));
        Clover.test("type test10", new Array<String>().className().equals("Array<String>"));
        Clover.test("type test11", sortable_array { "AAA", "BBB", "CCC" }.className().equals("SortableArray<String>"));
        Clover.test("type test12", new EqualableArray<String>().className().equals("EqualableArray<String>"));
        Clover.test("type test13", equalable_array { "AAA", "BBB", "CCC" }.className().equals("EqualableArray<String>"));
        Clover.test("type test14", tuple { "AAA", 1 }.className().equals("Tuple2<String,Integer>"));
        Clover.test("type test15", new Tuple3<String,Integer,Integer>("AAA", 1, 2).className().equals("Tuple3<String,Integer,Integer>"));

        b:int[] = new int[123]();

        Clover.test("type test2", b.className().equals("int[]"));
    }
}
