Clover.test("num test1", 1 == 1);

var a = 1;
Clover.test("num test2", a == 1);

if(1 == 1) {
    a = 2;
}

Clover.test("num test3", a == 2);

if(0 == 1) {
    a = 3;
}

Clover.test("num test4", a == 2);

if(1 == 2) {
    a = 1;
}
else {
    a = 3;
}

Clover.test("num test5", a == 3);

if(1 == 2) {
    a = 1;
}
elif(1 == 1) {
    a = 2;
}
else {
    a = 3;
}

Clover.test("num test6", a == 2);

if(1 == 2) {
    a = 1;
}
elif(0 == 1) {
    a = 2;
}
elif(1 == 1) {
    a = 3;
}
else {
    a = 4;
}

Clover.test("num test7", a == 3);

var b = Person("Ichiro",  29);

b.hello();

println("HELLO JS&CLOVER2 WORLD");

var c = "ABC";

Clover.test("string test1", c.equals("ABC"));

var d = "123";
var e = "456";

Clover.test("string test2", "\{d}\{e}".equals("123456"));
Clover.test("string test3", "ABC".match(/^A/));

var i = "^A";
Clover.test("string test4", "ABC".match(/\{i}/));

var k = lambda(x:Number,y:Number):Number { return x + y };
Clover.test("lambda test1", k(1,2) == 3);

var l = 9;

var m = closure(x:Number, y:Number):Number { return x + y + l };
Clover.test("lambda test2", m(1, 2) == 12);
Clover.test("lambda test3", l == 9);

var n = 9;

var o = closure(x:Number, y:Number):Number { n = 5; return x + y + n };
Clover.test("lambda test4", o(1, 2) == 8);
Clover.test("lambda test5", n == 5);

var m2 = closure(x:Number):Number { l = 6; return x + 2 + l };
Clover.test("lambda test6", m2(1) == 9);

Clover.test("lambda test7", l == 6);
var m3 = closure():Number {
    var o = 94;

    var p = closure():Number {
        l = 6; return l + o;
    }

    return p();
}

Clover.test("lambda test8", m3() == 100);

Clover.test("lambda test9", l == 6);

m4 := lambda(x:Number, y:Number):Number { return x + y };

Clover.test("lambda test10", m4(1,2) == 3);

print("try test1...");
try {
    var person = Person("Ichiro",  29);

    person.method();

    println("FALSE");
}
catch(e:Exception) {
    println(e.message);
}

Clover.test("true && false test1", true);
Clover.test("true && false test2", !false);

Clover.test("true && false test1", true && true);
Clover.test("true && false test2", false || true);
var m5 = 1;
true || { m5 = 2; true }
Clover.test("true && false test3", m5 == 1);
false && { m5 = 3; true }
Clover.test("true && false test4", m5 == 1);

var m6 = new Person("Rei", 25);
Clover.test("class name test1", m6.className().equals("object"));
var m7 = [1,2,3];

Clover.test("JS array test1", m7.equals([1,2,3]));
Clover.test("JS array test2", m7.slice(0,2).equals([1,2]));
Clover.test("JS array test3", [1,2,3].slice(0,2).equals([1,2]));
Clover.test("JS array test4", [1,2,3].length == 3);
Clover.test("JS array test5", [1,2,3].includes(1));


Clover.test("JS array test6", [1,2,3,4,5].copyWithin(-2).equals([1,2,3,1,2]));
Clover.test("JS array test7", [1,2,3,4,5].copyWithin(0,3).equals([4,5,3,4,5]));
Clover.test("JS array test8", [1,2,3,4,5].copyWithin(0,3,4).equals([4,2,3,4,5]));
Clover.test("JS array test9", [1,2,3,4,5].copyWithin(0,-2,-1).equals([4,2,3,4,5]));
Clover.test("JS array test10", [1,2,3].fill(4).equals([4,4,4]));
Clover.test("JS array test11", [1,2,3].fill(4,1).equals([1,4,4]));
Clover.test("JS array test12", [1,2,3].fill(4,1,2).equals([1,4,3]));
Clover.test("JS array test13", [1,2,3].fill(4,1,1).equals([1,2,3]));
Clover.test("JS array test14", [1,2,3].fill(4,3,3).equals([1,2,3]));
Clover.test("JS array test15", [1,2,3].fill(4,-3,-2).equals([4,2,3]));

Clover.test("JS array test16", Array<Number>(3).fill(4).equals([4,4,4]));
var plants = ["broccoli", "cauliflower", "cabbage", "kale", "tomato"];
Clover.test("JS array test17", plants.pop().equals("tomato"));
Clover.test("JS array test18", plants.equals(["broccoli", "cauliflower", "cabbage", "kale"]));

var animals = ["pigs", "goats", "sheep"];

Clover.test("JS array test18", animals.push("cows") == 4);
Clover.test("JS array test19", animals.equals(["pigs", "goats", "sheep", "cows"]));

var array1 = ["one", "two", "three"];

Clover.test("JS array test20", array1.reverse().equals(["three", "two", "one"]));
Clover.test("JS array test21", array1.equals(["three", "two", "one"]));

var array2 = [1, 2, 3];

var firstElement = array2.shift();

Clover.test("JS array test22", firstElement == 1);
Clover.test("JS array test23", array2.equals([2,3]));

Clover.test("JS lambda test X", b.method2(1,2) {return it + it2;} == 3);

var months = ["March", "Jan", "Feb", "Dec"];

Clover.test("JS array test24", months.sort().equals(["Dec", "Feb", "Jan", "March"]));
Clover.test("JS array test25", months.equals(["Dec", "Feb", "Jan", "March"]));

var array3 = [1, 30, 4, 21, 100000];
Clover.test("JS array test25", array3.sort().equals([1, 4, 21, 30, 100000]));
Clover.test("JS array test25", array3.equals([1, 4, 21, 30, 100000]));

var myFish = ["angel", "clown", "mandarin", "sturgeon"];
var removed = myFish.splice(2, 0, "drum");

Clover.test("JS array test26", myFish.equals(["angel", "clown", "drum", "mandarin", "sturgeon"]) && removed.equals([]));

var myFish2 = ["angel", "clown", "drum", "mandarin", "sturgeon"];
var removed2 = myFish2.splice(3, 1);

Clover.test("JS array test27", myFish2.equals(["angel", "clown", "drum", "sturgeon"]) && removed2.equals(["mandarin"]));

var myFish3 = ["angel", "clown", "drum", "sturgeon"];
var removed3 = myFish3.splice(2, 1, "trumpet");

Clover.test("JS array test28", myFish3.equals(["angel", "clown", "trumpet", "sturgeon"]) && removed3.equals(["drum"]));

var myFish4 = ["angel", "clown", "trumpet", "sturgeon"];
var removed4 = myFish4.splice(0, 2, "parrot", "anemone", "blue");

Clover.test("JS array test29", myFish4.equals(["parrot", "anemone", "blue", "trumpet", "sturgeon"]) && removed4.equals(["angel", "clown"]));

var myFish5 = ["parrot", "anemone", "blue", "trumpet", "sturgeon"];
var removed5 = myFish5.splice(myFish5.length - 3, 2);

Clover.test("JS array test30", myFish5.equals(["parrot", "anemone", "sturgeon"]) && removed5.equals(["blue", "trumpet"]));

var myFish6 = ["angel", "clown", "mandarin", "sturgeon"];
var removed6 = myFish6.splice(-2, 1);

Clover.test("JS array test31", myFish6.equals(["angel", "clown", "sturgeon"]) && removed6.equals(["mandarin"]));

var myFish7 = ["angel", "clown", "mandarin", "sturgeon"];
var removed7 = myFish7.splice(2);

Clover.test("JS array test32", myFish7.equals(["angel", "clown"]) && removed7.equals(["mandarin", "sturgeon"]));

var alpha = ["a", "b", "c"];
var numeric = ["1", "2", "3"];

Clover.test("JS array test33", alpha.concat(numeric).equals(["a", "b", "c", "1", "2", "3"]));

for(jj:=0; jj<6; jj++) {
    println(jj);
}

Clover.test("JS loop test1", jj == 6);
xxx := 123;

when(xxx) {
    case (123) {
        xxx = 345;
    }
    else {
        xxx = 234;
    }
}

Clover.test("JS loop test2", xxx == 345);

aa := 125;

print("when test...");
when(aa) {
    case( 1 ){
        println("FALSE");
        System.assert(false);
    }
    case (123,125) {
        println("TRUE");
    }
    else {
        println("FALSE");
        System.assert(false);
    }
}

bb := "ABC";

print("when test2...");
when(bb) {
    case ("A") {
        println("FALSE");
        System.assert(false);
    }
    case("ABC") {
        println("TRUE");
    }
    else {
        println("FALSE");
        System.assert(false);
    }
}

cc := when(123) {
    case(123) {
        "ABC";
    }

    case (234) {
        "DEF";
        System.assert(false);
    }

    else {
        "GHI";
        System.assert(false);
    }
}

Clover.test("when test3", cc.cast("String").equals("ABC"));

dd := when(234) {
    case (123) {
        "ABC";
        System.assert(false);
    }

    case (234) {
        123;
    }

    else {
        "GHI";
        System.assert(false);
    }
}

Clover.test("when test4", dd.cast("Number").equals(123));

ee := "Array<String>";

ff := when(ee) {
    match (/.+<String>/) {
        123;
    }
    else {
        456;
    }
}

Clover.test("when test5", ff == 123);

Clover.test("JS array test34", [1, 30, 39, 29, 10, 13].every(closure(it:Number):bool { return it < 40 }));
Clover.test("JS array test35", [1, 30, 39, 29, 10, 13].every { it < 40; });
Clover.test("JS array test36", ![1, 30, 39, 29, 10, 41].every { it < 40; });

var array_unshift1 = [1,2,3];
Clover.test("JS array test37", array_unshift1.unshift(4, 5) == 5);
Clover.test("JS array test38", array_unshift1.equals([4, 5, 1,2,3]));

println([1,2,3,4,5,6].filter { it > 3 });

Clover.test("JS array test39", [1,2,3,4,5,6].filter { it > 3 }.equals([4,5,6]));
Clover.test("JS array test40", [1,2,3,4,5,6].find { it > 3 } ==  4);
Clover.test("JS array test41", [1,2,3,4,5,6].findIndex { it > 3 } ==  3);

println([1,2,3,4,5,6].indexOf(3));
#println([1,2,3,4,5,6,1].indexOf(1, 2));

Clover.test("JS array test42", [1,2,3,4,5,6].indexOf(3) == 2 && [1,2,3,4,5,6,1].indexOf(1, 2) == 6);

Clover.test("JS array test43", b.method3());

var kkk = 0;
while(kkk < 3) {
    println(kkk);
    kkk++;
}

var tuple2:Tuple2<Number,Number> = (1,2);

Clover.test("tuple test1", tuple2.value1 == 1 && tuple2.value2 == 2);

var tuple3:Tuple3<Number,String,String> = new Tuple3<Number, String, String>();

tuple3.value1 = 111;
tuple3.value2 = "ABC";
tuple3.value3 = "DEF";

Clover.test("tuple test2", tuple3.value1 == 111 && tuple3.value2.equals("ABC") && tuple3.value3.equals("DEF"));

var tuple9 = (1, "AAA", 2, "BBB", 3, "CCC", 4, "DDD", "EEE");

Clover.test("tuple test3", tuple9.value1 == 1 && tuple9.value2.equals("AAA") && tuple9.value3 == 2 && tuple9.value4.equals("BBB") && tuple9.value5 == 3 && tuple9.value6.equals("CCC") && tuple9.value7 == 4 && tuple9.value8.equals("DDD") && tuple9.value9.equals("EEE"));

var map1 = ["AAA"=>1, "BBB"=>2];

var iterator1 = map1.entries();

while(true) {
    var iterator_result = iterator1.next();

    if(iterator_result.done) {
        break;
    }

    println(iterator_result.value);
    println(iterator_result.done);
}

Clover.test("map test1", map1.get("AAA") == 1);

var map2 = [Person("ichiro", 29)=>1, Person("jiro",30)=>2];

var iterator2 = map2.entries();

while(true) {
    var iterator_result = iterator2.next();

    if(iterator_result.done) {
        break;
    }

    println(iterator_result.value);
    println(iterator_result.done);
}

Clover.test("map test2", map2.get(Person("ichiro", 29)) == 1);

jiro := Person("ichiro", 29).clone();

Clover.test("map test3", map2.get(jiro) == 1);

var tuple4 = (111, "AAA");

(x2, y2) := tuple4;

Clover.test("tuple test1", x2 == 111 && y2.equals("AAA"));

var map3 = ["AAA"=>1, "BBB"=>2];
map3.set("CCC", 3);

Clover.test("map test4", map3.get("CCC") == 3 && map3.size == 3);

Clover.test("array test44", [1,2,3].join("+").equals("1+2+3") && [1,2,3].join().equals("1,2,3"));

Clover.test("array test45", [1,2,3,1,2,3].lastIndexOf(1) == 3 && [1,2,3,1,2,3].lastIndexOf(1,2) == 0 && [1,2,3,1,2,3].lastIndexOf(1,-1) == 3 && [1,2,3,1,2,3].lastIndexOf(1, -4) == 0);

var it3 = ["AAA", "BBB", "CCC"].entries();

while(true) {
    var iterator_result = it3.next();

    if(iterator_result.done) {
        break;
    }

    println(iterator_result.value);
    println(iterator_result.done);
}

var it4 = ["AAA", "BBB", "CCC"].keys();

while(true) {
    var iterator_result = it4.next();

    if(iterator_result.done) {
        break;
    }

    println(iterator_result.value);
    println(iterator_result.done);
}

Clover.test("array test46", [1,2,3].map { it * 2 }.equals([2,4,6]));
Clover.test("array test47", [1,2,3].map { it.toString() }.equals(["1", "2", "3"]));
Clover.test("array test48", [1,2,3,4,5].some { it % 2 == 0});

var it5 = ["AAA", "BBB", "CCC"].values();

while(true) {
    var iterator_result = it5.next();

    if(iterator_result.done) {
        break;
    }

    println(iterator_result.value);
    println(iterator_result.done);
}

var map4 = ["AAA"=>1, "BBB"=>2];

map4.clear();

Clover.test("map test5", map4.size == 0);

var map5 = ["AAA"=>1, "BBB"=>2];

Clover.test("map test6", map5.has("AAA"));

map5.delete("AAA");

Clover.test("map test7", !map5.has("AAA"));

["AAA"=>1, "BBB"=>2, "CCC"=>3].forEach {
    println(it.toString());
    println(it2.toString());
}

Clover.test("string test5", "ABC".charAt(0).equals("A"));
Clover.test("string test6", "ABC".charCodeAt(0) == 65);
#Clover.test("string test7", "ABC".charPointAt(1) == 66);
Clover.test("string test8", "ABC".concat("DEF").equals("ABCDEF"));
Clover.test("string test9", "ABC".includes("BC"));
Clover.test("string test10", !"ABC".includes("BC",2));
Clover.test("string test11", "ABC".endsWith("BC"));
Clover.test("string test12", "ABC".indexOf("BC") == 1);
Clover.test("string test13", "ABCABC".lastIndexOf("BC") == 4);
Clover.test("string test14", "A".localeCompare("B") < 0);
Clover.test("string test15", "B".localeCompare("A") > 0);
Clover.test("string test16", "A".localeCompare("A") == 0);
Clover.test("string test17", "ABC".padEnd(6).equals("ABC   "));
Clover.test("string test18", "ABC".padEnd(6,"123456").equals("ABC123"));
Clover.test("string test19", "ABC".padStart(6).equals("   ABC"));
Clover.test("string test20", "ABC".padStart(6, "123456").equals("123ABC"));
Clover.test("string test21", "ABC".repeat(0).equals(""));
Clover.test("string test22", "ABC".repeat(2).equals("ABCABC"));
Clover.test("string test23", "ABC".replace(/BC/, "DEF").equals("ADEF"));
Clover.test("string test24", "ABCBC".replace(/BC/g, "DEF").equals("ADEFDEF"));
Clover.test("string test25", "ABCBC".search(/BC/) == 1);
Clover.test("string test26", "ABCBC".slice(0,2).equals("AB"));
Clover.test("string test27", "ABCBC".slice(1,-2).equals("BC"));
Clover.test("string test28", "ABC,DEF,GHI".split(",").equals(["ABC", "DEF", "GHI"]));
Clover.test("string test29", "ABC,DEF,GHI".split(/,/).equals(["ABC", "DEF", "GHI"]));
Clover.test("string test30", "ABC".startsWith("ABC"));
Clover.test("string test31", "ABC".startsWith("BC", 1));
Clover.test("string test32", "ABC".substring(1).equals("BC"));
Clover.test("string test33", "ABCABC".substring(2,5).equals("CAB"));
Clover.test("string test34", "ABCABC".toLowerCase().equals("abcabc"));
Clover.test("string test35", "abcabc".toUpperCase().equals("ABCABC"));
Clover.test("string test36", "   abcabc   ".trim().equals("abcabc"));
Clover.test("string test37", "   abcabc   ".trimEnd().equals("   abcabc"));
Clover.test("string test38", "   abcabc   ".trimStart().equals("abcabc   "));

var set1 = Set<Number>([1,2,3,3]);
set1.add(3);

Clover.test("set test1", set1.equals(Set<Number>([1,2,3])));

set1.clear();

Clover.test("set test2", set1.size == 0);

var set2 = Set<String>(["AAA", "AAA", "BBB", "BBB", "CCC"]);

Clover.test("set test3", set2.delete("CCC"));
Clover.test("set test4", !set2.delete("CCC"));
Clover.test("set test5", set2.equals(Set<String>(["AAA", "BBB"])));

var set3 = Set<Number>([1,2,3,3]);

set3.forEach {
    it.println();
}

var map6 = ["AAA"=>1, "BBB"=>2];

map6.forEach {
    println(it);
    println(it2);
}

var array4 = [1,2,3];

Clover.test("array element test1", array4[0] == 1 && array4[1] == 2);

array4[0] = 3;

Clover.test("array element test2", array4[0] == 3);

var funa = lambda(x:Number, y:Number):Number { return x + y };

Clover.test("1 + 2", funa(1, 2) == 3);

var a2 = 1;

def funb(x:Number, y:Number):Number {
    a2 = 2;
    return a2 + x + y;
}

Clover.test("function test", funb(2, 3) == 7 && a2 == 2);

xyz := Map<String,Number>();

xyz2 := Array<Number>(5);

xyz3 := String("ABC");

xyz4 := Bool(true);

xyz5 := Number();

var int8array = Int8Array(16);

Clover.test("int8array test", int8array.length == 16);

int8array[0] = 16;
int8array[1] = 32;

Clover.test("int8array test", int8array[0] == 16 && int8array[1] == 32);

var int8array2 = Int8Array([40, 1, 2]);

int8array2.sort();

Clover.test("int8array test2", int8array2[0] == 1 && int8array2[1] == 2 && int8array2[2] == 40);

