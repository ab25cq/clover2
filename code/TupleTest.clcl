class TupleData {
    a:int;
    b:double;

    c:static int;
    d:static int;

    def initialize(a:int, b:double) {
        self.a = a;
        self.b = b;
    }
}



class TupleTest {
    def main():static {
        a:Tuple2<Integer, Bool> = new Tuple2<Integer, Bool>(1.toInteger, true.toBool);

        Clover.test("tuple test", a.value1 == 1 && a.value2 == true);

        b:Tuple3<Integer, Bool,Integer> = tuple {3, false, 4};

        Clover.test("tuple test2", b.value1 == 3 && b.value2 == false && b.value3 == 4);

        c:Tuple2<String, Integer> = ("AAA", 1);

        Clover.test("tuple test3", c.value1.equals("AAA") && c.value2 == 1);

        (d, e) := ("AAA", 1);

        Clover.test("tuple test4", d.equals("AAA") && e == 1);

        x := 1;
        y := 2;

        (x, y) = (y, x);

        Clover.test("tuple test5", x == 2 && y == 1);

        (f,g) := (2,3);

        Clover.test("tuple test6", f == 2 && g == 3);

        (f,g) = (3,4);

        Clover.test("tuple test7", f == 3 && g == 4);

        (h,i) := (1.1, 1.2);

        Clover.test("tuple test8", h == 1.1 && i == 1.2);

        j := 1.2;
        k := 1.3;

        (j,k) = (2.3, 3.0);

        Clover.test("tuple test9", j == 2.3 && k == 3.0);

        l := ("AAA", 1);

        (m,n) := l;

        Clover.test("tuple test10", m.equals("AAA") && n == 1);

/*
        l := new TupleData(0, 0.0);
        (l.a, l.b, k) = (1, 2.0, 2.1);

        Clover.test("tuple test10", l.a == 1 && l.b == 2.0 && k == 2.1);

        (TupleData.c, TupleData.d) = (1,2);

        Clover.test("tuple test11", TupleData.c == 1 && TupleData.d == 2);
*/
    }
}
