class MFiler5 version 3 {
    var isearchString:String;
    var isearchMode:bool;

    def initialize():dynamic {
        inherit();
        
        isearchMode = false;

        keyEvents['/'.to_int] = lambda(self:MFiler5, key:int, key2:int) {
            isearchMode();
        }
    }
    
    def isearchMode() {
        isearchMode = true;
        isearchString = "";
    }
    def finishISearch() {
        isearchMode = false;
        #readDir(dirPath);
    }
    
    def makeISearchDir() {
        readDir(dirPath);
        
        files = files.select { it.indexOf(isearchString) != -1 }
        
        cursor = 0;
        scrollTop = 0;
    }
    
    def view(): dynamic {
        inherit();
        
        maxx := getmaxx();
        maxy := getmaxy();
        
        if(isearchMode) {
            mvprintw(maxy-1, 0, " ".multiply(maxx-1));
            mvprintw(maxy-1, 0, "/\{isearchString}");
        }
    }
    
    def isearchMode(key:int){
        when(key) {
            case ('\n'.to_int) {
                finishISearch();
            }
            case (('H'-'A').to_int, KEY_BACKSPACE) {
                isearchString.delete(-1);
                
                n := 0;
                files.each {
                    if(it.indexOf(isearchString) != -1)
                    {
                        scrollTop = n;
                        cursor = 0;
                        break;
                    }
                    
                    n++;
                }
            }
            else {
                if(isgraph(key.to_char)) {
                    isearchString.append(key.to_char);
                    
                    makeISearchDir();
                }
            }
        }
    }
    
    def runKeyEvents(key:int, key2:int):dynamic {
        if(isearchMode) {
            isearchMode(key);
        }
        else {
            inherit(key, key2);
        }
    }
}