
class ViClone version 13
{
    lastKey: int;
    lastKey2: int;
    lastInsertedTextPos: Tuple2<Integer, Integer>;
    lastInsertedString: SortableList<String>;
    
    def initialize():dynamic {
        inherit();
        
        lastKey = 0;
        lastKey2 = 0;
        lastInsertedTextPos = (0, 0);
        
        lastInsertedString = SortableList<String>();

        ### Insert Mode ###
        keyEvents['.'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            when(lastKey) {
                case ('i'.to_int) {
                    insertOnceMore();
                }
                case ('a'.to_int) {
                    insertOnceMore();
                }
                case ('o'.to_int) {
                    insertOnceMore();
                }
                case ('A'.to_int) {
                    insertOnceMore();
                }
                case ('c'.to_int) {
                    if(lastKey2 == 'w'.to_int || lastKey2 == 'e'.to_int) {
                        win.addUndoText();

                        (y, x) := forwardWord(0); 
                        
                        (y2, x2) := (win.getRealPosY(), win.getRealPosX());
                     
                        line := win.texts.items(y2);
                        
                        if(y > y2) {
                            line.delete(x2, -1);
                        } 
                        else { 
                            line.delete(x2, x); 
                        } 

                        insertOnceMore();
                    }
                }
            }
        }
    }
    
    def setLastInsertedTextPos():dynamic {
        lastInsertedTextPos = (win.getRealPosY(), win.getRealPosX());
        lastInsertedString = SortableList<String>();
    }
    
    def getLastInsertedText():dynamic {
        (y, x) := (win.getRealPosY(), win.getRealPosX());

        list := win.texts.subList(lastInsertedTextPos.value1, y+1)

        if(list.length() == 1) {
            lastInsertedString.push(list.items(0).subString(lastInsertedTextPos.value2, x));
        }
        elif(list.length() == 2) {
            lastInsertedString.push(list.items(0).subString(lastInsertedTextPos.value2, -1));
            lastInsertedString.push(list.items(1).subString(0, x+1));
        }
        else {
            lastInsertedString.push(list.items(0).subString(lastInsertedTextPos.value2, -1));
            lastInsertedString.push(list.subList(1,-2));
            lastInsertedString.push(list.items(-1).subString(0, x+1));
        }
    }
    
    def insertOnceMore() {
        x := win.getRealPosX();
        y := win.getRealPosY();

        if(lastInsertedString.length() == 1) {
            win.addUndoText();

            line := win.texts.items(y);
            line.insert(x, lastInsertedString.items(0));

            win.makeVisibleTexts();
        }
        elif(lastInsertedString.length() > 1) {
            win.addUndoText();

            line := win.texts.items(y);
            line.insert(x, lastInsertedString.items(0));
            win.texts.insert(y+1, lastInsertedString().subList(1,-1));

            win.makeVisibleTexts();
        }
    }

    def runKeyEvents(key:int, key2:int):dynamic {
        if(mode == EDITMODE) {
            inherit(key, key2);

            if(keyEvents[key] != null) {
                if(key != '.' && key != 'j' && key != 'k' && key != 'l' && key != 'h' && key != ('D'-'A').to_int+1 && key != ('U'-'A').to_int+1 && key != '/' && key != 'u' && key != 'n' && key != 'N' && key != 'g') 
                {
                    lastKey = key;
                    lastKey2 = key2;
                }
            }
        }
        else {
            inherit(key, key2);
        }
    }
}
