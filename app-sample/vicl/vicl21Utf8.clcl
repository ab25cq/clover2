class ViCloneWindow version 13
{
    def realPosToViewPos(y:int, x:int): dynamic Tuple2<Integer, Integer> {
        for(i:=0; i<visibleTextsPos.length(); i++) {
            (y2, head, line_num) := visibleTextsPos.items(i);
            line := visibleTexts.items(i);

            width := line.length();
            
            if(y2 == y) {
                if(x >= head && width == 0) {
                    return (i, 0);
                }
                elif(x >= head && x == 0 && width == 0) {
                    return (i, x-head);
                }
                elif(x >= head && x <= head + width)  {
                    return (i, x-head);
                }
            }
        }

        return (-1,-1)
    }
    def fixCursorAndScrollTop(scrolltop_y_before:int):dynamic {
        if(visibleTexts.length() < MaxY -1 && cursorY >= visibleTexts.length()) 
        {
            cursorY = visibleTexts.length()-1;
        }
        
        if(cursorY >= MaxY-1) {
            (tmp, tmp2, top_line_size) := visibleTextsPos.items(0);

            if(top_line_size >= MaxY-1)
            {
                scrollTopY++;
                cursorY = 0;
                cursorX = 0;
            }
            else {
                scroll_size := cursorY - MaxY +2;

                scrollTopY += scroll_size;
                cursorY -= scroll_size + top_line_size -1;
            }
        }
        if(cursorY < 0) {
            scroll_size := -cursorY;

            cursorY = 0;
            scrollTopY -= scroll_size;
        }
        
        if(scrollTopY >= texts.length()) {
            cursorY = 0;
            scrollTopY = texts.length()-1;
        }

        if(scrollTopY < 0) {
            scrollTopY = 0;
        }

        if(scrolltop_y_before != scrollTopY) {
            makeVisibleTexts();
        }

        line := visibleTexts.items(cursorY);

        if(line == null) {
            cursorX = 0;
        }
        elif(line.length() == 0) {
            if(cursorX > 0) {
                cursorX = 0;
                cursorY++;
            }
        }
        elif(cursorX >= line.length()) {
            cursorX = 0;
            cursorY++;
        }

        if(cursorX < 0) {
            cursorY--;
            if(cursorY >= 0) {
                line := visibleTexts.items(cursorY);
                cursorX = line.length() -1;
            }
        }

        if(cursorY < 0) {
            cursorY = 0;
            cursorX = 0;
        }
        
        if(cursorY >= visibleTexts.length()) {
            cursorY = visibleTexts.length() - 1;
        }
    }

    def moveCursor(y:int, x:int):dynamic int {
        (y2,x2) := realPosToViewPos(y, x);

        if(y2 >= 0 && y2 < visibleTexts.length())
        {
            (cursorY, cursorX) = realPosToViewPos(y, x);
        }
        else {
            scroll_size := (MaxY-1)/2;
            scrollTopY = y - scroll_size;

            fixCursorAndScrollTop(scrollTopY);
            makeVisibleTexts();

            (cursorY, cursorX) = realPosToViewPos(y, x);

            if(cursorY == -1 && cursorX == -1) {
                scrollTopY = y;

                fixCursorAndScrollTop(scrollTopY);
                makeVisibleTexts();

                (cursorY, cursorX) = realPosToViewPos(y, x);
                fixCursorAndScrollTop(scrollTopY);
                makeVisibleTexts();
            }
            else {
                fixCursorAndScrollTop(scrollTopY);
                makeVisibleTexts();
            }
        }
    }

    def makeVisibleTexts():dynamic {
        visibleTexts = SortableList<String>();
        visibleTextsPos = EqualableList<Tuple3<Integer, Integer, Integer>>();
        
        view_y := 0;
        for(y:=scrollTopY; y < texts.length() && view_y < MaxY-1; y++) {
            line := texts.items(y);
            if(line == null) {
                break;
            }

            term_len := ViClone.getTermLen(line);

            if(term_len > MaxX-1) {
                view_x := 0;
                
                x := 0;
                head := 0;
                line_height := 1;
                while(x < line.length() && view_y < MaxY-1) {
                    c := line.chars(x);
                    
                    if(c > 127) {
                        view_x += 2;
                        x++;
                    }
                    else {
                        view_x ++;
                        x++;
                    }
                    
                    if(view_x >= MaxX-1) {
                        visibleTexts.push(line.subString(head, x));
                        visibleTextsPos.push((y, head, line_height));
                        
                        head = x;
                        line_height++;
                        view_x = 0;
                        view_y++;
                    }
                }

                if(x == line.length() && view_x == MaxX-1) {
                    visibleTexts.push(line.subString(head, x));
                    visibleTextsPos.push((y, head, line_height));
                    
                    head = x;
                    line_height++;
                    view_y++;

                    visibleTexts.push("");
                    visibleTextsPos.push((y, head, line_height));
                }
                else {
                    visibleTexts.push(line.subString(head, x));
                    visibleTextsPos.push((y, head, line_height));
                    view_y++
                }
            }
            else {
                term_len := ViClone.getTermLen(line);

                if(term_len == MaxX-1) {
                    visibleTexts.push(line);
                    visibleTextsPos.push((y, 0, 1));
                    
                    visibleTexts.push("");
                    visibleTextsPos.push((y, 0, 2));
                    view_y+=2;
                }
                else {
                    visibleTexts.push(line);
                    visibleTextsPos.push((y, 0, 1));
                    view_y++;
                }
            }
        }
    }
    def view():dynamic {
        if(visualMode) {
            for(y:=0; y<visibleTexts.length(); y++) {
                line := visibleTexts.items(y);
                pos := visibleTextsPos.items(y);

                if(line == null) {
                    break;
                }

                if(pos.value3 > 1) {
                    mvprintw(y + winPos, 0, "~~~~ ", array { y + scrollTopY });
                }
                else {
                    mvprintw(y + winPos, 0, "%04d ", array { y + scrollTopY });
                }

                y2 := viewYToRealY(y);
                cursor_line := viewYToRealY(cursorY);

                if((y2 >= visualModeStart && y2 <= cursor_line) || (y2 >= cursor_line && y2 <= visualModeStart))
                {
                    attron(A_REVERSE);
                }

                mvprintw(y + winPos, 5 + ViClone.vicl.dirPaneLength, line);

                if((y2 >= visualModeStart && y2 <= cursor_line) || (y2 >= cursor_line && y2 <= visualModeStart))
                {
                    attroff(A_REVERSE);
                }
            }

            try {
                attron(A_REVERSE);
                mvprintw(MaxY -1 + winPos, 0 + ViClone.vicl.dirPaneLength, "%s/%s%s", { dirPath, fileName, " ".multiply(getmaxx()-1-ViClone.vicl.dirPaneLength-dirPath.length()-fileName.length()-1) });
                attroff(A_REVERSE);
            }
        }
        elif(vvisualMode) {
            for(y:=0; y<visibleTexts.length(); y++) {
                line := visibleTexts.items(y);
                pos := visibleTextsPos.items(y);

                if(line == null) {
                    break;
                }

                if(pos.value3 > 1) {
                    mvprintw(y + winPos, 0, "~~~~ ", array { y + scrollTopY });
                }
                else {
                    mvprintw(y + winPos, 0, "%04d ", array { y + scrollTopY });
                }

                y2 := viewYToRealY(y);
                cursor_line := viewYToRealY(cursorY);

                if((y2 >= vvisualModeStart && y2 <= cursor_line) || (y2 >= cursor_line && y2 <= vvisualModeStart))
                {
                    x2 := getRealPosX();
                    
                    if(x2 == vvisualModeStartX) {
                        x2++;
                        line1 := line.subString(0, vvisualModeStartX);
                        line2 := line.subString(vvisualModeStartX, x2);
                        line3 := line.subString(x2, -1);
                        
                        mvprintw(y + winPos, 5 + ViClone.vicl.dirPaneLength, line1);
                        
                        attron(A_REVERSE);
                        mvprintw(y + winPos, 5 + line1.length() + ViClone.vicl.dirPaneLength, line2);
                        attroff(A_REVERSE);
                        
                        mvprintw(y + winPos, 5 + line1.length() + line2.length() + ViClone.vicl.dirPaneLength, line3);
                    }
                    elif(x2 > vvisualModeStartX) {
                        line1 := line.subString(0, vvisualModeStartX);
                        line2 := line.subString(vvisualModeStartX, x2);
                        line3 := line.subString(x2, -1);
                        
                        mvprintw(y + winPos, 5 + ViClone.vicl.dirPaneLength, line1);
                        
                        attron(A_REVERSE);
                        mvprintw(y + winPos, 5 + line1.length() + ViClone.vicl.dirPaneLength, line2);
                        attroff(A_REVERSE);
                        
                        mvprintw(y + winPos, 5+ line1.length() + line2.length() + ViClone.vicl.dirPaneLength, line3);
                    }
                    else {
                        line1 := line.subString(0, x2);
                        line2 := line.subString(x2, vvisualModeStartX);
                        line3 := line.subString(vvisualModeStartX, -1);
                        
                        mvprintw(y + winPos, 5 + ViClone.vicl.dirPaneLength, line1);
                        
                        attron(A_REVERSE);
                        mvprintw(y + winPos, 5 + line1.length() + ViClone.vicl.dirPaneLength, line2);
                        attroff(A_REVERSE);
                        
                        mvprintw(y + winPos, 5 + line1.length() + line2.length() + ViClone.vicl.dirPaneLength, line3);
                    }
                }
                else {
                    mvprintw(y + winPos, 5 + ViClone.vicl.dirPaneLength, line);
                }
            }

            try {
                attron(A_REVERSE);
                mvprintw(MaxY -1 + winPos, 0 + ViClone.vicl.dirPaneLength, "%s/%s%s", { dirPath, fileName, " ".multiply(getmaxx()-1-ViClone.vicl.dirPaneLength-dirPath.length()-fileName.length()-1) });
                attroff(A_REVERSE);
            }
        }
        elif(rangeMode) {
            for(y:=0; y<visibleTexts.length(); y++) {
                line := visibleTexts.items(y);
                pos := visibleTextsPos.items(y);

                if(line == null) {
                    break;
                }

                if(pos.value3 > 1) {
                    mvprintw(y + winPos, 0, "~~~~ ", array { y + scrollTopY });
                }
                else {
                    mvprintw(y + winPos, 0, "%04d ", array { y + scrollTopY });
                }

                y2 := viewYToRealY(y);
                cursor_line := viewYToRealY(cursorY);

                if(y2 == cursor_line && y2 == rangeModeStart) 
                {
                    x2 := getRealPosX();
                
                    if(x2 >= rangeModeStartX) 
                    {
                        line1 := line.subString(0, rangeModeStartX);
                        line2 := line.subString(rangeModeStartX, x2);
                        line3 := line.subString(x2, -1);
                        
                        mvprintw(y + winPos, 5 + ViClone.vicl.dirPaneLength, line1);
                        
                        attron(A_REVERSE);
                        mvprintw(y + winPos, 5 + line1.length() + ViClone.vicl.dirPaneLength, line2);
                        attroff(A_REVERSE);
                        
                        mvprintw(y + winPos, 5 + line1.length() + line2.length() + ViClone.vicl.dirPaneLength, line3);
                    }
                    else {
                        line1 := line.subString(0, x2);
                        line2 := line.subString(x2, rangeModeStartX);
                        line3 := line.subString(rangeModeStartX, -1);
                        
                        mvprintw(y + winPos, 5 + ViClone.vicl.dirPaneLength, line1);
                        
                        attron(A_REVERSE);
                        mvprintw(y + winPos, 5 + line1.length() + ViClone.vicl.dirPaneLength, line2);
                        attroff(A_REVERSE);
                        
                        mvprintw(y + winPos, 5 + line1.length() + line2.length() + ViClone.vicl.dirPaneLength, line3);
                    }
                }
                elif(y2 == rangeModeStart) 
                {
                    if(y2 < cursor_line) {
                        line1 := line.subString(0, rangeModeStartX);
                        line2 := line.subString(rangeModeStartX, -1);
                        
                        mvprintw(y + winPos, 5 + ViClone.vicl.dirPaneLength, line1);
                        
                        attron(A_REVERSE);
                        mvprintw(y + winPos, 5 + line1.length() + ViClone.vicl.dirPaneLength, line2);
                        attroff(A_REVERSE);
                    }
                    else {
                        line1 := line.subString(0, rangeModeStartX);
                        line2 := line.subString(rangeModeStartX, -1);
                        
                        attron(A_REVERSE);
                        mvprintw(y + winPos, 5 + ViClone.vicl.dirPaneLength, line1);
                        attroff(A_REVERSE);
                        
                        mvprintw(y + winPos, 5 + line1.length() + ViClone.vicl.dirPaneLength, line2);
                    }
                }
                elif(y2 == cursor_line) {
                    if(y2 < rangeModeStart) {
                        x2 := getRealPosX();
                        
                        line1 := line.subString(0, x2);
                        line2 := line.subString(x2, -1);
                        
                        mvprintw(y + winPos, 5 + ViClone.vicl.dirPaneLength, line1);
                        
                        attron(A_REVERSE);
                        mvprintw(y + winPos, 5 + line1.length() + ViClone.vicl.dirPaneLength, line2);
                        attroff(A_REVERSE);
                    }
                    else {
                        x2 := getRealPosX();
                        
                        line1 := line.subString(0, x2);
                        line2 := line.subString(x2, -1);
                        
                        attron(A_REVERSE);
                        mvprintw(y + winPos, 5 + ViClone.vicl.dirPaneLength, line1);
                        attroff(A_REVERSE);
                        
                        mvprintw(y + winPos, 5 + line1.length() + ViClone.vicl.dirPaneLength, line2);
                    }
                }
                elif(y2 < rangeModeStart && y2 > cursor_line) {
                    attron(A_REVERSE);
                    mvprintw(y + winPos, 5 + ViClone.vicl.dirPaneLength, line);
                    attroff(A_REVERSE);
                }
                elif(y2 > rangeModeStart && y2 < cursor_line) {
                    attron(A_REVERSE);
                    mvprintw(y + winPos, 5 + ViClone.vicl.dirPaneLength, line);
                    attroff(A_REVERSE);
                }
                else {
                    mvprintw(y + winPos, 5 + ViClone.vicl.dirPaneLength, line);
                }
            }

            try {
                attron(A_REVERSE);
                mvprintw(MaxY -1 + winPos, 0 + ViClone.vicl.dirPaneLength, "%s/%s%s", { dirPath, fileName, " ".multiply(getmaxx()-1-ViClone.vicl.dirPaneLength-dirPath.length()-fileName.length()-1) });
                attroff(A_REVERSE);
            }
        }
        else {
            termux := false;
            termux_env := getenv("TERMUX");
            if(termux_env != null && termux_env.equals("1")) {
                termux = true;
            }

            for(y:=0; y<visibleTexts.length() && y < MaxY -1; y++) {
                line := visibleTexts.items(y);
                pos := visibleTextsPos.items(y);

                if(line == null) {
                    break;
                }

                if(pos.value3 > 1) {
                    mvprintw(y + winPos, 0, "~~~~ ", array { y + scrollTopY });
                }
                else {
                    mvprintw(y + winPos, 0, "%04d ", array { y + scrollTopY });
                }

                ### cursor line ####
                if(cursorY == y && ViClone.vicl.win == self) {
                    if(line.length() == 0) {
                        attron(A_REVERSE);
                        mvprintw(y + winPos, 5 + 0 + ViClone.vicl.dirPaneLength, " ");
                        attroff(A_REVERSE);
                    }
                    else {
                        cursor_x_term_len := 0;
                        if(termux) {
                            cursor_x_term_len = cursorX;
                        }
                        else {
                            cursor_x_term_len = ViClone.getTermLen(line.subString(0, cursorX));
                        }
                        if(cursorX >= line.length()) {
                            mvprintw(y + winPos
                                , 5 + 0 + ViClone.vicl.dirPaneLength, line);

                            attron(A_REVERSE);
                            mvprintw(y + winPos, 5 + cursor_x_term_len + ViClone.vicl.dirPaneLength, " ");
                            attroff(A_REVERSE);
                        }
                        else {
                            mvprintw(y + winPos
                                , 5 + ViClone.vicl.dirPaneLength
                                , "%s", array { line.subString(0, cursorX) } );

                            c := line.chars(cursorX);

                            attron(A_REVERSE);
                            printw("%s", array { c.toString() });
                            attroff(A_REVERSE);

                            printw("%s", array { line.subString(cursorX+1, -1) });
                       }
                   }
                }
                ### visible line ###
                else {
                    mvprintw(y + winPos, 5 + 0 + ViClone.vicl.dirPaneLength, "%s", array { line });
                }
            }

            try {
                attron(A_REVERSE);
                str := sprintf("%s/%s%s", array { dirPath, fileName, " ".multiply(getmaxx()-1-ViClone.vicl.dirPaneLength-dirPath.length()-fileName.length()-1) });
                mvprintw(MaxY -1 + winPos, 0 + ViClone.vicl.dirPaneLength, "%s", array { str.subString(0, getmaxx()-1-ViClone.vicl.dirPaneLength) });
                attroff(A_REVERSE);
            }
        }
    }
}

class ViClone version 21
{
    var fep:bool;
    var fepString:String;

    def enterFEP() {
       fep = true;
       fepString = "";
    }
    def finishFEP() {
       fep = false;
       fepString = "";
    }
    
    def initialize() {
        inherit();

        fep = false;
        fepString = "";
            
        keyEvents[('O'-'A').to_int+1] = lambda(self:ViClone, key:int, key2:int) {
           key = getch();

           if(key == 'i' || key == 'a' || key == 'A' || key == 'o' || key == 'C') {
               enterFEP();
               runKeyEvents(key, 0);
           }
        }
    }
    def finishInsertMode():dynamic {
        inherit();

        finishFEP();
    }
    def statusView(): dynamic {
        if(!fepString.equals("")) {
            maxy := getmaxy();

            attron(A_REVERSE);
            try {
                mvprintw(maxy-1, 0, "%s", array { fepString });
            }
            attroff(A_REVERSE);
        }
        elif(fep) {
            maxy := getmaxy();

            clearStatusLine();

            attron(A_REVERSE);
            if(win.fileName == null) {
                mvprintw(maxy-1, 0, "FEP-INSERT %d %d", { win.getRealPosY(), win.getRealPosX() } );
            }
            else {
                mvprintw(maxy-1, 0, "FEP-INSERT %s %d %d", { win.fileName, win.getRealPosY(), win.getRealPosX()});
            }
            attroff(A_REVERSE);
        }
        else {
            inherit();
        }
    }
    # result is -1 --> canceled to select
    def selectStrings(message:String, strings:SortableList<String>):int {
        result := -1;

        cursor := 0;
        scroll_top := 0;
        maxy := getmaxy()-1;
        maxx := getmaxx();

        while(true) {
            clear();

            n := 0;
            mvprintw(0, 0 , ">");
            str := ViClone.getTermLenString(message, maxx-2);
            mvprintw(0, 1 , str);

            strings.subList(scroll_top, scroll_top+maxy-1).each  {
                mvprintw(n+1, 0 , "%c.", array { ('a'.to_byte + n).to_char }); 

                str := ViClone.getTermLenString(it, maxx-3);

                if(cursor == n) {
                    attron(A_REVERSE);
                    mvprintw(n+1, 3, str);
                    attroff(A_REVERSE);
                }
                else {
                    mvprintw(n+1, 3, str);
                }
                n++;
            }

            refresh();

            key := getch();

            when(key) {
                case (('['-'A').to_int+1, ('C'-'A').to_int + 1) {
                    break;
                }
                case (KEY_UP, 'k'.to_int) {
                    cursor--;
                }
                case (KEY_DOWN, 'j'.to_int, ('I'-'A').to_int + 1, ' '.to_int) {
                    cursor++;
                }
                case (('J'-'A').to_int + 1) {
                    result = scroll_top + cursor;
                    break;
                }
                case (('D'-'A').to_int + 1) {
                    cursor += 10;
                }
                case (('U'-'A').to_int + 1) {
                    cursor -= 10;
                }
            }

            if(cursor > maxy-1) {
                scroll_top += maxy-1;
                cursor = 0;
            }

            if(scroll_top+cursor >= strings.length()) {
                cursor = strings.length()-scroll_top-1;
            }

            if(cursor < 0) {
                cursor += maxy-1;
                scroll_top -= maxy-1;
            }

            if(scroll_top < 0) {
                scroll_top = 0;
                cursor = 0;
            }
        }

        return result;
    }
    def selectFEPString(): String {
        oomoji := true;

        if(fepString.equals("")) {
            return "";
        }

        head := fepString.chars(0);

        if(head >= 'A' && head <= 'Z') {
            oomoji = true;
        }

        fepString = fepString.lowerCase();

        # change Roma-ji to Hiragana
        hiragana := "";
        katakana := "";
        hiragana_list := SortableList<String>();

        for(i:=0; i<fepString.length(); i++) {
            c := fepString.chars(i);

            if(i+1<fepString.length()) {
                c2 := fepString.chars(i+1);

                if(c == c2 && c != 'n' && c != 'a' && c != 'i' && c != 'u' && c != 'e' && c != 'o') {
                    hiragana.append("っ");
                    katakana.append("ッ");
                    i++;
                    if(i < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i)));
                    }

                    c = fepString.chars(i);
                }
            }

            if(c == 'k') {
                c2 := fepString.chars(i+1);
                if(c2 == 'y') {
                    c3 := fepString.chars(i+2);

                    if(c3 == 'a') {
                        hiragana.append("きゃ");
                        katakana.append("キャ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                    elif(c3 == 'i') {
                        hiragana.append("きぃ");
                        katakana.append("キィ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                    elif(c3 == 'u') {
                        hiragana.append("きゅ");
                        katakana.append("キュ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                    elif(c3 == 'e') {
                        hiragana.append("きぇ");
                        katakana.append("キェ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                    elif(c3 == 'o') {
                        hiragana.append("きょ");
                        katakana.append("キョ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                }
                elif(c2 == 'a') {
                    hiragana.append("か");
                    katakana.append("カ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'i') {
                    hiragana.append("き");
                    katakana.append("キ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'u') {
                    hiragana.append("く");
                    katakana.append("ク");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'e') {
                    hiragana.append("け");
                    katakana.append("ケ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'o') {
                    hiragana.append("こ");
                    katakana.append("コ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
            }
            elif(c == 's') {
                c2 := fepString.chars(i+1);
                if(c2 == 'y') {
                    c3 := fepString.chars(i+2);

                    if(c3 == 'a') {
                        hiragana.append("しゃ");
                        katakana.append("シャ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                    elif(c3 == 'i') {
                        hiragana.append("しぃ");
                        katakana.append("シィ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                    elif(c3 == 'u') {
                        hiragana.append("しゅ");
                        katakana.append("シュ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                    elif(c3 == 'e') {
                        hiragana.append("しぇ");
                        katakana.append("シェ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                    elif(c3 == 'o') {
                        hiragana.append("しょ");
                        katakana.append("ショ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                }
                elif(c2 == 'h') {
                    c3 := fepString.chars(i+2);

                    if(c3 == 'a') {
                        hiragana.append("しゃ");
                        katakana.append("シャ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                    elif(c3 == 'i') {
                        hiragana.append("し");
                        katakana.append("シ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                    elif(c3 == 'u') {
                        hiragana.append("しゅ");
                        katakana.append("シュ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                    elif(c3 == 'e') {
                        hiragana.append("しぇ");
                        katakana.append("シェ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                    elif(c3 == 'o') {
                        hiragana.append("しょ");
                        katakana.append("ショ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                }
                elif(c2 == 'a') {
                    hiragana.append("さ");
                    katakana.append("サ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'i') {
                    hiragana.append("し");
                    katakana.append("シ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'u') {
                    hiragana.append("す");
                    katakana.append("ス");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'e') {
                    hiragana.append("せ");
                    katakana.append("セ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'o') {
                    hiragana.append("そ");
                    katakana.append("ソ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
            }
            elif(c == 't' || c == 'c') {
                c2 := fepString.chars(i+1);
                if(c2 == 'y') {
                    c3 := fepString.chars(i+2);

                    if(c3 == 'a') {
                        hiragana.append("ちゃ");
                        katakana.append("チャ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                    elif(c3 == 'i') {
                        hiragana.append("ちぃ");
                        katakana.append("チィ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                    elif(c3 == 'u') {
                        hiragana.append("ちゅ");
                        katakana.append("チュ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                    elif(c3 == 'e') {
                        hiragana.append("ちぇ");
                        katakana.append("チェ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                    elif(c3 == 'o') {
                        hiragana.append("ちょ");
                        katakana.append("チョ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                }
                elif(c2 == 'a') {
                    hiragana.append("た");
                    katakana.append("タ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'i') {
                    hiragana.append("ち");
                    katakana.append("チ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'u') {
                    hiragana.append("つ");
                    katakana.append("ツ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'e') {
                    hiragana.append("て");
                    katakana.append("テ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'o') {
                    hiragana.append("と");
                    katakana.append("ト");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
            }
            elif(c == 'f') {
                c2 := fepString.chars(i+1);
                if(c2 == 'a') {
                    hiragana.append("ふぁ");
                    katakana.append("ファ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'i') {
                    hiragana.append("ふぃ");
                    katakana.append("フィ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'u') {
                    hiragana.append("ふ");
                    katakana.append("フ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'e') {
                    hiragana.append("ふぇ");
                    katakana.append("フェ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'o') {
                    hiragana.append("ふぉ");
                    katakana.append("フォ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
            }
            elif(c == 'v') {
                c2 := fepString.chars(i+1);
                if(c2 == 'a') {
                    hiragana.append("ゔぁ");
                    katakana.append("ヴァ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'i') {
                    hiragana.append("ゔぃ");
                    katakana.append("ヴィ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'u') {
                    hiragana.append("ゔ");
                    katakana.append("ヴ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'e') {
                    hiragana.append("ゔぇ");
                    katakana.append("ヴェ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'o') {
                    hiragana.append("ゔぉ");
                    katakana.append("ヴォ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
            }
            elif(c == 'n') {
                c2 := fepString.chars(i+1);

                if(c2 == 'y') {
                    c3 := fepString.chars(i+2);

                    if(c3 == 'a') {
                        hiragana.append("にゃ");
                        katakana.append("ニャ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                    elif(c3 == 'i') {
                        hiragana.append("にぃ");
                        katakana.append("ニィ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                    elif(c3 == 'u') {
                        hiragana.append("にゅ");
                        katakana.append("ニュ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                    elif(c3 == 'e') {
                        hiragana.append("にぇ");
                        katakana.append("ニェ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                    elif(c3 == 'o') {
                        hiragana.append("にょ");
                        katakana.append("ニョ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                }
                elif(c2 == 'a') {
                    hiragana.append("な");
                    katakana.append("ナ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'i') {
                    hiragana.append("に");
                    katakana.append("ニ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'u') {
                    hiragana.append("ぬ");
                    katakana.append("ヌ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'e') {
                    hiragana.append("ね");
                    katakana.append("ネ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'o') {
                    hiragana.append("の");
                    katakana.append("ノ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'n') {
                    hiragana.append("ん");
                    katakana.append("ン");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                else {
                    hiragana.append("ん");
                    katakana.append("ン");
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
            }
            elif(c == 'h') {
                c2 := fepString.chars(i+1);
                if(c2 == 'y') {
                    c3 := fepString.chars(i+2);

                    if(c3 == 'a') {
                        hiragana.append("ひゃ");
                        katakana.append("ヒャ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                    elif(c3 == 'i') {
                        hiragana.append("ひぃ");
                        katakana.append("ヒィ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                    elif(c3 == 'u') {
                        hiragana.append("ひゅ");
                        katakana.append("ヒュ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                    elif(c3 == 'e') {
                        hiragana.append("ひぇ");
                        katakana.append("ヒェ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                    elif(c3 == 'o') {
                        hiragana.append("ひょ");
                        katakana.append("ヒョ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                }
                elif(c2 == 'a') {
                    hiragana.append("は");
                    katakana.append("ハ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'i') {
                    hiragana.append("ひ");
                    katakana.append("ヒ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'u') {
                    hiragana.append("ふ");
                    katakana.append("フ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'e') {
                    hiragana.append("へ");
                    katakana.append("ヘ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'o') {
                    hiragana.append("ほ");
                    katakana.append("ホ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
            }
            elif(c == 'm') {
                c2 := fepString.chars(i+1);
                if(c2 == 'y') {
                    c3 := fepString.chars(i+2);

                    if(c3 == 'a') {
                        hiragana.append("みゃ");
                        katakana.append("ミャ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                    elif(c3 == 'i') {
                        hiragana.append("みぃ");
                        katakana.append("ミィ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                    elif(c3 == 'u') {
                        hiragana.append("みゅ");
                        katakana.append("ミュ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                    elif(c3 == 'e') {
                        hiragana.append("みぇ");
                        katakana.append("ミャ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                    elif(c3 == 'o') {
                        hiragana.append("みょ");
                        katakana.append("ミョ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                }
                elif(c2 == 'a') {
                    hiragana.append("ま");
                    katakana.append("マ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'i') {
                    hiragana.append("み");
                    katakana.append("ミ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'u') {
                    hiragana.append("む");
                    katakana.append("ム");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'e') {
                    hiragana.append("め");
                    katakana.append("メ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'o') {
                    hiragana.append("も");
                    katakana.append("モ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
            }
            elif(c == 'y') {
                c2 := fepString.chars(i+1);
                if(c2 == 'a') {
                    hiragana.append("や");
                    katakana.append("ヤ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'u') {
                    hiragana.append("ゆ");
                    katakana.append("ユ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'o') {
                    hiragana.append("よ");
                    katakana.append("ヨ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
            }
            elif(c == 'r') {
                c2 := fepString.chars(i+1);
                if(c2 == 'y') {
                    c3 := fepString.chars(i+2);

                    if(c3 == 'a') {
                        hiragana.append("りゃ");
                        katakana.append("リャ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                    elif(c3 == 'i') {
                        hiragana.append("りぃ");
                        katakana.append("リィ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                    elif(c3 == 'u') {
                        hiragana.append("りゅ");
                        katakana.append("リュ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                    elif(c3 == 'e') {
                        hiragana.append("りぇ");
                        katakana.append("リェ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                    elif(c3 == 'o') {
                        hiragana.append("りょ");
                        katakana.append("リョ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                }
                elif(c2 == 'a') {
                    hiragana.append("ら");
                    katakana.append("ラ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'i') {
                    hiragana.append("り");
                    katakana.append("リ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'u') {
                    hiragana.append("る");
                    katakana.append("ル");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'e') {
                    hiragana.append("れ");
                    katakana.append("レ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'o') {
                    hiragana.append("ろ");
                    katakana.append("ロ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
            }
            elif(c == 'j') {
                c2 := fepString.chars(i+1);
                if(c2 == 'y') {
                    c3 := fepString.chars(i+2);

                    if(c3 == 'a') {
                        hiragana.append("じゃ");
                        katakana.append("ジャ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                    elif(c3 == 'i') {
                        hiragana.append("じぃ");
                        katakana.append("ジィ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                    elif(c3 == 'u') {
                        hiragana.append("じゅ");
                        katakana.append("ジュ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                    elif(c3 == 'e') {
                        hiragana.append("じぇ");
                        katakana.append("ジェ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                    elif(c3 == 'o') {
                        hiragana.append("じょ");
                        katakana.append("ジョ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                }
                elif(c2 == 'a') {
                    hiragana.append("じゃ");
                    katakana.append("ジャ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'i') {
                    hiragana.append("じ");
                    katakana.append("ジ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'u') {
                    hiragana.append("じゅ");
                    katakana.append("ジュ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'e') {
                    hiragana.append("じぇ");
                    katakana.append("ジェ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'o') {
                    hiragana.append("じょ");
                    katakana.append("ジョ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
            }
            elif(c == 'w') {
                c2 := fepString.chars(i+1);
                if(c2 == 'a') {
                    hiragana.append("わ");
                    katakana.append("ワ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'o') {
                    hiragana.append("を");
                    katakana.append("ヲ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
            }
            elif(c == 'g') {
                c2 := fepString.chars(i+1);
                if(c2 == 'y') {
                    c3 := fepString.chars(i+2);

                    if(c3 == 'a') {
                        hiragana.append("ぎゃ");
                        katakana.append("ギャ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                    elif(c3 == 'i') {
                        hiragana.append("ぎぃ");
                        katakana.append("ギィ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                    elif(c3 == 'u') {
                        hiragana.append("ぎゅ");
                        katakana.append("ギュ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                    elif(c3 == 'e') {
                        hiragana.append("ぎぇ");
                        katakana.append("ギェ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                    elif(c3 == 'o') {
                        hiragana.append("ぎょ");
                        katakana.append("ギョ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                }
                elif(c2 == 'a') {
                    hiragana.append("が");
                    katakana.append("ガ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'i') {
                    hiragana.append("ぎ");
                    katakana.append("ギ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'u') {
                    hiragana.append("ぐ");
                    katakana.append("グ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'e') {
                    hiragana.append("げ");
                    katakana.append("ゲ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'o') {
                    hiragana.append("ご");
                    katakana.append("ゴ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
            }
            elif(c == 'z') {
                c2 := fepString.chars(i+1);
                if(c2 == 'y') {
                    c3 := fepString.chars(i+2);

                    if(c3 == 'a') {
                        hiragana.append("じゃ");
                        katakana.append("ジャ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                    elif(c3 == 'i') {
                        hiragana.append("じぃ");
                        katakana.append("ジィ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                    elif(c3 == 'u') {
                        hiragana.append("じゅ");
                        katakana.append("ジュ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                    elif(c3 == 'e') {
                        hiragana.append("じぇ");
                        katakana.append("ジェ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                    elif(c3 == 'o') {
                        hiragana.append("じょ");
                        katakana.append("ジョ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                }
                elif(c2 == 'a') {
                    hiragana.append("ざ");
                    katakana.append("ザ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'i') {
                    hiragana.append("じ");
                    katakana.append("ジ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'u') {
                    hiragana.append("ず");
                    katakana.append("ズ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'e') {
                    hiragana.append("ぜ");
                    katakana.append("ゼ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'o') {
                    hiragana.append("ぞ");
                    katakana.append("ゾ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
            }
            elif(c == 'd') {
                c2 := fepString.chars(i+1);
                if(c2 == 'y') {
                    c3 := fepString.chars(i+2);

                    if(c3 == 'a') {
                        hiragana.append("ぢゃ");
                        katakana.append("ヂャ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                    elif(c3 == 'i') {
                        hiragana.append("ぢぃ");
                        katakana.append("ヂィ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                    elif(c3 == 'u') {
                        hiragana.append("ぢゅ");
                        katakana.append("ヂュ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                    elif(c3 == 'e') {
                        hiragana.append("ぢぇ");
                        katakana.append("ヂェ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                    elif(c3 == 'o') {
                        hiragana.append("ぢょ");
                        katakana.append("ヂョ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                }
                elif(c2 == 'a') {
                    hiragana.append("だ");
                    katakana.append("ダ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'i') {
                    hiragana.append("ぢ");
                    katakana.append("ヂ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'u') {
                    hiragana.append("づ");
                    katakana.append("ヅ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'e') {
                    hiragana.append("で");
                    katakana.append("デ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'o') {
                    hiragana.append("ど");
                    katakana.append("ド");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
            }
            elif(c == 'b') {
                c2 := fepString.chars(i+1);
                if(c2 == 'y') {
                    c3 := fepString.chars(i+2);

                    if(c3 == 'a') {
                        hiragana.append("びゃ");
                        katakana.append("ビャ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                    elif(c3 == 'i') {
                        hiragana.append("びぃ");
                        katakana.append("ビィ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                    elif(c3 == 'u') {
                        hiragana.append("びゅ");
                        katakana.append("ビュ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                    elif(c3 == 'e') {
                        hiragana.append("びぇ");
                        katakana.append("ビェ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                    elif(c3 == 'o') {
                        hiragana.append("びょ");
                        katakana.append("ビョ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                }
                elif(c2 == 'a') {
                    hiragana.append("ば");
                    katakana.append("バ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'i') {
                    hiragana.append("び");
                    katakana.append("ビ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'u') {
                    hiragana.append("ぶ");
                    katakana.append("ブ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'e') {
                    hiragana.append("べ");
                    katakana.append("ベ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'o') {
                    hiragana.append("ぼ");
                    katakana.append("ボ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
            }
            elif(c == 'p') {
                c2 := fepString.chars(i+1);
                if(c2 == 'y') {
                    c3 := fepString.chars(i+2);

                    if(c3 == 'a') {
                        hiragana.append("ぴゃ");
                        katakana.append("ピャ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                    elif(c3 == 'i') {
                        hiragana.append("ぴぃ");
                        katakana.append("ピィ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                    elif(c3 == 'u') {
                        hiragana.append("ぴゅ");
                        katakana.append("ピュ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                    elif(c3 == 'e') {
                        hiragana.append("ぴぇ");
                        katakana.append("ピェ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                    elif(c3 == 'o') {
                        hiragana.append("ぴょ");
                        katakana.append("ピョ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                }
                elif(c2 == 'a') {
                    hiragana.append("ぱ");
                    katakana.append("パ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'i') {
                    hiragana.append("ぴ");
                    katakana.append("ピ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'u') {
                    hiragana.append("ぷ");
                    katakana.append("プ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'e') {
                    hiragana.append("ぺ");
                    katakana.append("ペ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'o') {
                    hiragana.append("ぽ");
                    katakana.append("ポ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
            }
            elif(c == 'x') {
                c2 := fepString.chars(i+1);
                if(c2 == 't') {
                    c3 := fepString.chars(i+1);

                    if(c3 == 'u') {
                        hiragana.append("っ");
                        katakana.append("ッ");
                        i+=2;
                        if(i+1 < fepString.length() ) {
                            hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                        }
                    }
                }
                elif(c2 == 'a') {
                    hiragana.append("ぁ");
                    katakana.append("ァ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'i') {
                    hiragana.append("ぃ");
                    katakana.append("ィ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'u') {
                    hiragana.append("ぅ");
                    katakana.append("ゥ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'e') {
                    hiragana.append("ぇ");
                    katakana.append("ェ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
                elif(c2 == 'o') {
                    hiragana.append("ぉ");
                    katakana.append("ォ");
                    i++;
                    if(i+1 < fepString.length() ) {
                        hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                    }
                }
            }
            elif(c == 'a') {
                hiragana.append("あ");
                katakana.append("ア");
                if(i+1 < fepString.length() ) {
                    hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                }
            }
            elif(c == 'i') {
                hiragana.append("い");
                katakana.append("イ");
                if(i+1 < fepString.length() ) {
                    hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                }
            }
            elif(c == 'u') {
                hiragana.append("う");
                katakana.append("ウ");
                if(i+1 < fepString.length() ) {
                    hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                }
            }
            elif(c == 'e') {
                hiragana.append("え");
                katakana.append("エ");
                if(i+1 < fepString.length() ) {
                    hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                }
            }
            elif(c == 'o') {
                hiragana.append("お");
                katakana.append("オ");
                if(i+1 < fepString.length() ) {
                    hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                }
            }
            elif(c == '-') {
                hiragana.append("ー");
                katakana.append("ー");
                if(i+1 < fepString.length() ) {
                    hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                }
            }
            elif(c == '.') {
                hiragana.append("。");
                katakana.append("。");
                if(i+1 < fepString.length() ) {
                    hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                }
            }
            elif(c == ',') {
                hiragana.append("、");
                katakana.append("、");
                if(i+1 < fepString.length() ) {
                    hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                }
            }
            else {
                hiragana.append(c.toString());
                if(i+1 < fepString.length() ) {
                    hiragana_list.push(hiragana.clone().append(fepString.chars(i+1)));
                }
            }
        }

        if(oomoji) {
            candidates := SortableList<String>();
            candidates.push(hiragana);
            candidates.push(katakana);

            lines := bash("-c", "cat ~/.clover2/vicl/SKK-JISYO.L | egrep '^\{hiragana} '").toString().split('\n');
            for(i:=0; i<lines.length(); i++) {
                line := lines.items(i);

                if(line.match(regex"/(.+)/")) {
                    words := line.scan(regex"/(.+)/").items(1).split('/');
                    for(i:=0; i<words.length(); i++) {
                        word := words.items(i);
                        word = word.sub(/;.+/, "");
                        candidates.push(word);
                    }
                }
            }
            for(j:=0; j<hiragana_list.length(); j++) {
                hiragana_part := hiragana_list.items(j);

                lines := bash("-c", "cat ~/.clover2/vicl/SKK-JISYO.L | egrep '^\{hiragana_part} '").toString().split('\n');

                for(k:=0; k<lines.length(); k++) {
                    line := lines.items(k);

                    if(line.match(regex"/(.+)/")) {
                        words := line.scan(regex"/(.+)/").items(1).split('/');
                        match_word := line.scan(/^(\S+)/).items(1);

                        match_word2 := match_word.subString(0, -2);

                        okurigana := hiragana.subString(match_word2.length(), -1);

                        for(l:=0; l<words.length(); l++) {
                            word := words.items(l);
                            word = word.sub(/;.+/, "");
                            candidates.push(word.add(okurigana));
                        }
                    }
                }
            }
/*
            for(j=0; j<hiragana_list.length(); j++) {
                hiragana_part := hiragana_list.items(j).subString(0,-2);

                lines := bash("-c", "cat ~/.clover2/vicl/SKK-JISYO.L | egrep '^\{hiragana_part} '").toString().split('\n');

                for(k:=0; k<lines.length(); k++) {
                    line := lines.items(k);

                    if(line.match(regex"/(.+)/")) {
                        words := line.scan(regex"/(.+)/").items(1).split('/');
                        match_word := line.scan(/^(\S+)/).items(1);

                        match_word2 := match_word;

                        okurigana := hiragana.subString(match_word2.length(), -1);

                        for(l:=0; l<words.length(); l++) {
                            word := words.items(l);
                            word = word.sub(/;.+/, "");
                            candidates.push(word.add(okurigana));
                        }
                    }
                }
            }
*/

            if(candidates.length() > 0) {
                index := selectStrings(hiragana, candidates);

                if(index == -1) {
                    return "";
                }
                else {
                    return candidates.items(index);
                }
            }
            else {
                return hiragana;
            }
        }
        else {
            return hiragana;
        }
    }

    def getTermLen(str:String):static int {
        result := 0;

        for(i:=0; i<str.length(); i++) {
            c := str.chars(i);

            if(c > 127) {
                result += 2;
            }
            else {
                result ++;
            }
        }

        return result;
    }
    def getTermLenString(str:String, len:int):static String {
        result := "";

        n := 0;
        for(i:=0; i<str.length(); i++) {
            c := str.chars(i);

            if(c > 127) {
                n += 2;
            }
            else {
                n ++;
            }

            if(n >= len) {
                break;
            }

            result.append(c);
        }

        return result;
    }

    def forwardWord(offset:int=0):dynamic Tuple2<Integer, Integer> {
        real_pos_x := win.getRealPosX();
        real_pos_y := win.getRealPosY(); 

        line := win.texts.items(real_pos_y);

        x := real_pos_x + offset;
        y := real_pos_y;

        c := line?.chars(x):'\0';

        if(line == null || line.equals("")) {
            x = 0;
            y++;
        }
        else {
            if(c > 127) {
                while(c > 127) {
                    x++;

                    if(x >= line.length()) {
                        x = 0;
                        y++;
                        
                        if(y >= win.texts.length()) {
                            y--;
                            line = win.texts.items(y);
                            if(line.length() == 0) {
                                x = 0;
                            }
                            else {
                                x = line.length()-1;
                            }
                            break;
                        }
                        else {
                            line = win.texts.items(y);
                        }
                    }
                    c = line?.chars(x):'\0';
                }
            }
            elif(c.isalpha() || c == '_') {
                while((c.isalpha() || c == '_') && c <= 127) {
                    x++;

                    if(x >= line.length()) {
                        x = 0;
                        y++;
                        
                        if(y >= win.texts.length()) {
                            y--;
                            line = win.texts.items(y);
                            if(line.length() == 0) {
                                x = 0;
                            }
                            else {
                                x = line.length()-1;
                            }
                            break;
                        }
                        else {
                            line = win.texts.items(y);
                        }
                    }
                    c = line?.chars(x):'\0';
                }
            }
            elif(c.isdigit()) {
                while(c.isdigit()) {
                    x++;

                    if(x >= line.length()) {
                        x = 0;
                        y++;
                        if(y >= win.texts.length()) {
                            y--;
                            line = win.texts.items(y);
                            if(line.length() == 0) {
                                x = 0;
                            }
                            else {
                                x = line.length()-1;
                            }
                            break;
                        }
                        else {
                            line = win.texts.items(y);
                        }
                    }

                    c = line?.chars(x):'\0';
                }
            }
            elif(c.isspace()) {
                while(c.isspace()) {
                    x++;

                    if(x >= line.length()) {
                        x = 0;
                        y++;
                        if(y >= win.texts.length()) {
                            y--;
                            line = win.texts.items(y);
                            if(line.length() == 0) {
                                x = 0;
                            }
                            else {
                                x = line.length()-1;
                            }
                            break;
                        }
                        else {
                            line = win.texts.items(y);
                        }
                    }

                    c = line?.chars(x):'\0';
                }
            }
            elif(c != '\0') {
                while(!c.isalpha() && !c.isdigit() && !c.isspace()) {
                    x++;

                    if(x >= line.length()) {
                        x = 0;
                        y++;
                        if(y >= win.texts.length()) {
                            y--;
                            
                            line = win.texts.items(y);
                            if(line.length() == 0) {
                                x = 0;
                            }
                            else {
                                x = line.length()-1;
                            }
                            break;
                        }
                        else {
                            line = win.texts.items(y);
                        }
                    }

                    c = line?.chars(x):'\0';
                }
            }
        }

        return (y, x);
    }

    def main():dynamic static {
        vicl = ViClone();

        sockfd := socket(AF_UNIX, SOCK_STREAM,  0);

        saddr := sockaddr_un();

        saddr.sun_family = AF_UNIX;
        saddr.sun_path = getenv("HOME").append("/.clover2/vicl/socket");

        rm("-rf", saddr.sun_path);

        bind(sockfd, saddr);
        listen(sockfd, 1);

        mask := fd_set();
        read_ok := fd_set();

        FD_ZERO(mask);
        FD_SET(0, mask);
        FD_SET(sockfd, mask);

        loop_num := 0;

        termux_env := getenv("TERMUX");
        clear_flag := false;
        if(termux_env != null) {
            clear_flag = termux_env.equals("1");
        }

        while(!vicl.endOfAplication) {
            if(clear_flag) {
                erase();
                vicl.clearStatusLine();
                vicl.dirView();
                vicl.view();
                vicl.statusView();

                idcok(false);
                idlok(false);
                clear();
                vicl.clearStatusLine();
                vicl.dirView();
                vicl.view();
                vicl.statusView();
                refresh();
            }
            else {
                #vicl.clearWithoutBlink();
                erase();
                vicl.clearStatusLine();
                vicl.dirView();
                vicl.view();
                vicl.statusView();
                refresh();
            }

            read_ok = mask.clone();

            result := -1;
            try {
                result = select(sockfd+1, read_ok, null, null, null);
            } catch(e:Exception) {
                if(!e.message.match(/Interrupted system call/) )
                {
                    e.message.println();
                    exit(2);
                }
            }

            if(FD_ISSET(0, read_ok)) {
                key := getch();

                if(key == 127) {
                    key = 'H'-'A'+1
                }

                key2 := 0;

                if(vicl.mode == ViClone.EDITMODE) {
                    if(!vicl.macroMode) {
                        when(key) {
                            case ('@'.to_int, 'q'.to_int, 'd'.to_int, 'c'.to_int, 'Z'.to_int, 'g'.to_int, 'z'.to_int, '['.to_int, ']'.to_int, '`'.to_int, 'm'.to_int, 't'.to_int, ('W'-'A').to_int+1) 
                            {
                                key2 = getch();
                            }
                        }
                    }
                    else {
                        when(key) {
                            case ('@'.to_int, 'd'.to_int, 'c'.to_int, 'Z'.to_int, 'g'.to_int, 'z'.to_int, '['.to_int, ']'.to_int, '`'.to_int, 'm'.to_int, 't'.to_int, ('W'-'A').to_int+1) 
                            {
                                key2 = getch();
                            }
                        }
                    }
                }

                vicl.runKeyEvents(key, key2);
            }
            elif(FD_ISSET(sockfd, read_ok)) {
                caddr := sockaddr_un();
                csockfd := accept(sockfd, caddr);

                buf := Buffer(128);
                read(csockfd, buf, 128);
                
                message := buf.toString();
                
                if(message.match(/^OPEN_FILE .+ \d+$/)) {
                    array := message.scan(/^OPEN_FILE (.+) (\d+)/)
                    
                    file_name := array.items(1);
                    try {
                        file_name = realpath(file_name);
                    }
                    line_num := array.items(2).to_int();

                    vicl.openFile(file_name, line_num);
                }
                elif(message.match(/^INSERT_FILE .+$/)) {
                    array := message.scan(/^INSERT_FILE (.+)$/)
                    
                    file_name := array.items(1).chomp();

                    text := file_name.toPath().read().toString();
                    
                    vicl.win.addUndoText();
                    vicl.win.insertText(text);
                }
            }

            if(loop_num % 1024 == 0) {
                Clover.compaction();
            }
            
            loop_num++;
        }

        close(sockfd);
    }

    def enterNewLine(no_tails_getting:bool):dynamic {
        y := win.getRealPosY();
        x := win.getRealPosX();

        line := win.texts.items(y);

        spaces_num := line.scan(/^\s+/)?.items(0).length():0;

        tails := "";
        if(!no_tails_getting) {
            tails = line.subString(x..-1);
            line.delete(x..-1);
        }

        win.cursorX = spaces_num;
        win.cursorY++;

        if(win.cursorY >= win.MaxY-1) {
            (tmp, tmp2, top_line_size) := win.visibleTextsPos.items(0);

            if(top_line_size >= win.MaxY-1) {
                win.scrollTopY++;
                win.cursorY = 0;
                win.cursorX = 0;
            }
            else {
                scroll_size := win.cursorY - win.MaxY +2;

                win.scrollTopY += scroll_size;
                win.cursorY -= scroll_size + top_line_size -1;
            }
        }
        
        spaces := " ".multiply(spaces_num);
        spaces.append(tails);
        win.texts.insert(y+1, spaces);

        win.makeVisibleTexts();
        #win.fixCursorAndScrollTopOnInsertMode(win.scrollTopY);

        win.cursorX = spaces_num;
    }

    def appendFEPString() {
        y := win.getRealPosY();
        x := win.getRealPosX();

        line := win.texts.items(y);
        
        if(line != null) {
            buf := selectFEPString();

            line.insert(x, buf);

            win.makeVisibleTexts();

            win.cursorX+=buf.length();

            line2 := win.visibleTexts.items(win.cursorY);

            term_len := getTermLen(line2)

            cursor_term_len := getTermLen(line2.subString(0, win.cursorX));

            if(cursor_term_len == term_len && term_len >= win.MaxX-1) {
                win.cursorY++;
                win.cursorX = 0;

                if(win.cursorY >= win.MaxY -1) {
                    win.scrollTopY++;
                    win.cursorY--;
                    win.makeVisibleTexts();

                    win.fixCursorAndScrollTop(win.scrollTopY);
                }
            }
            fepString = "";
        }
    }

    def insertMode(key:int):dynamic {
        when(key) {
            case (('['-'A').to_int+1, ('C'-'A').to_int+1) {
                finishInsertMode();
            }

            case (('O'-'A').to_int+1) {
                if(fep) {
                    finishFEP();
                }
                else {
                    enterFEP();
                }
            }

            ### Backspace ###
            case (('H'-'A').to_int+1, KEY_BACKSPACE) {
                if(!fepString.equals("")) {
                    fepString.deleteAt(-1);
                }
                else {
                    y := win.getRealPosY();
                    x := win.getRealPosX();

                    line := win.texts.items(y);
                    
                    if(line != null && win.cursorX >= 0) {
                        line.delete(x-1);
                        win.cursorX--;

                        if(win.cursorX < 0) {
                            win.cursorY --;

                            if(win.cursorY < 0) {
                                win.cursorY = 0;
                                win.cursorX = 0;
                            }
                            else {
                                line := win.visibleTexts.items(win.cursorY);
                                win.cursorX = line.length();

                                if(win.cursorX < 0) {
                                    win.cursorX = 0;
                                }
                            }
                        }
                    } 
                    
                    win.makeVisibleTexts();
                }
            }

            case ('\n'.to_int) {
                if(!fepString.equals("")) {
                    appendFEPString();
                }
                else {
                    enterNewLine(false);
                    
                    win.makeVisibleTexts();
                }
            }

            case (('D'-'A').to_int+1) {
                if(!fepString.equals("")) {
                }
                else {
                    y := win.getRealPosY();
                    x := win.getRealPosX();

                    line := win.texts.items(y);
                    
                    if(line != null) {
                        4.times {
                            if(win.cursorX >= 0) {
                                line.delete(x -1);
                                win.cursorX--;
                            }
                        }
                    } 
                    
                    win.makeVisibleTexts();
                }
            } 

            ### delete Back word ###
            case (('W'-'A').to_int+1) {
                if(!fepString.equals("")) {
                }
                else {
                    deleteBackwardWord();
                }
            }
            
            case (('X'-'A').to_int+1) {
                if(!fepString.equals("")) {
                }
                else {
                    if(win.fileName.match(/.+\.cl$|.+\.clcl$|.+\.jsclcl$|.+\.jscl$/)) {
                        clover2Completion();
                    }
                    elif(win.fileName.match(/.+\.c$/)) {
                        CCompletion();
                    }
                    else {
                        completion();
                    }
                }
            }

            case (('I'-'A').to_int+1) {
                if(!fepString.equals("")) {
                    appendFEPString();
                }
                else {
                    y := win.getRealPosY();
                    x := win.getRealPosX();

                    line := win.texts.items(y);
                    
                    if(line != null) {
                        if(line.subString(0, x).match(/^\s*$/)) {
                            4.times { 
                                line.insert(x, " ");
                                win.cursorX++;
                            } 
                        }
                        else {
                            completion();
                        }
                    }
                    
                    win.makeVisibleTexts();
                }
            }
            else {
                y := win.getRealPosY();
                x := win.getRealPosX();

                line := win.texts.items(y);
                
                if(line != null) {
                    if(fep) {
                        c := key.to_char;

                        if(c == ' ') {
                            appendFEPString();
                        }
                        elif(c <= 127) {
                            fepString.append(c.toString());
                        }
                    }
                    else {
                        c := key.to_char;

                        if(c > 127) {
                            size := ((c.to_int & 0x80) >> 7) + ((c.to_int & 0x40) >> 6) + ((c.to_int & 0x20) >> 5) + ((c.to_int & 0x10) >> 4);

                            buf := Buffer();
                            buf.append(c.to_byte);

                            for(i:=0; i<size-1; i++) {
                                key2 := getch();
                                buf.append(key2.to_byte);
                            }

                            line.insert(x, buf.toString());

                            win.makeVisibleTexts();

                            win.cursorX++;

                            line2 := win.visibleTexts.items(win.cursorY);

                            term_len := getTermLen(line2)

                            cursor_term_len := getTermLen(line2.subString(0, win.cursorX));

                            if(cursor_term_len == term_len && term_len >= win.MaxX-1) {
                                win.cursorY++;
                                win.cursorX = 0;

                                if(win.cursorY >= win.MaxY -1) {
                                    win.scrollTopY++;
                                    win.cursorY--;
                                    win.makeVisibleTexts();

                                    win.fixCursorAndScrollTop(win.scrollTopY);
                                }
                            }
                        }
                        elif(c.isalnum() || c == ' ' || c.isgraph()) {
                            line2 := win.visibleTexts.items(win.cursorY-1);

                            term_len := getTermLen(line2)

                            line3 := win.visibleTexts.items(win.cursorY);

                            term_len2 := getTermLen(line3)

                            if(term_len == win.MaxX-1 && term_len2 == 0) {
                                line.append(c.toString());
                            }
                            else {
                                line.insert(x, c.toString());
                            }

                            win.makeVisibleTexts();

                            if(key == '}' || key == ')')
                            {
                                blinkParen();
                            }

                            win.cursorX++;

                            line2 = win.visibleTexts.items(win.cursorY);

                            term_len = getTermLen(line2)

                            cursor_term_len := getTermLen(line2.subString(0, win.cursorX));

                            if(cursor_term_len == term_len && term_len >= win.MaxX-1) {
                                win.cursorY++;
                                win.cursorX = 0;
                                
                                if(win.cursorY >= win.MaxY -1) {
                                    win.scrollTopY++;
                                    win.cursorY--;
                                    win.makeVisibleTexts();

                                    win.fixCursorAndScrollTop(win.scrollTopY);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}