
class ViCloneWindow version 6
{
    var visualModeStart:int;
    var visualModeEnd:int;
    var visualMode:bool

    def initialize(fname:String, dir_path:String, win_pos:int, arg_line_num:int, vicl:ViClone):dynamic {
        inherit(fname, dir_path, win_pos, arg_line_num, vicl);

        visualModeStart = -1;
        visualModeEnd = -1;
        visualMode = false;
    }

    def view():dynamic {
        if(visualMode) {
            for(y:=0; y<visibleTexts.length(); y++) {
                line := visibleTexts.items(y);

                if(line == null) {
                    break;
                }

                y2 := viewYToRealY(y);
                cursor_line := viewYToRealY(cursorY);

                if((y2 >= visualModeStart && y2 <= cursor_line) || (y2 >= cursor_line && y2 <= visualModeStart))
                {
                    attron(A_REVERSE);
                }

                mvprintw(y + winPos, 0 + ViClone.vicl.dirPaneLength, line);

                if((y2 >= visualModeStart && y2 <= cursor_line) || (y2 >= cursor_line && y2 <= visualModeStart))
                {
                    attroff(A_REVERSE);
                }
            }

            try {
                attron(A_REVERSE);
                mvprintw(MaxY -1 + winPos, 0 + ViClone.vicl.dirPaneLength, "%s/%s%s", { dirPath, fileName, " ".multiply(getmaxx()-1-ViClone.vicl.dirPaneLength-dirPath.length()-fileName.length()-1) });
                attroff(A_REVERSE);
            }
        }
        else {
            inherit();
        }
    }
}

class ViClone version 10
{
    var clipBoard:SortableList<String>;
    var pasteMode: int;

    enum { PASTEMODE_LINE, PASTEMODE_CURSOR }

    def initialize():dynamic {
        inherit();

        path := getenv("HOME").add("/.clover2/vicl/clipbord")
        
        if(access(path, R_OK) == 0) {
            clipBoard = path.toPath().read().toString().split('\n');
        }
        else {
            clipBoard = SortableList<String>();
        }

        pasteMode = PASTEMODE_LINE;

        ### Insert Mode ###
        keyEvents['V'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            enterVisualMode();
        }
        keyEvents['p'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            if(pasteMode == PASTEMODE_LINE) {
                pasteAfterCursorLineMode();
            }
            else {
                pasteAfterCursor();
            }
        }
        keyEvents['P'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            if(pasteMode == PASTEMODE_LINE) {
                pasteBeforeCursorLineMode();
            }
            else {
                pasteBeforeCursor();
            }
        }
    }

    def enterVisualMode() {
        mode = VISUALMODE;

        win.visualModeStart = win.getRealPosY();

        win.visualMode = true;
    }
    
    def finishVisualMode() {
        mode = EDITMODE;
        win.visualModeEnd = win.getRealPosY();
        win.fixCursorAndScrollTop(win.scrollTopY);
        win.visualMode = false;
    }
    
    def renterVisualMode() {
        if(win.visualModeStart != -1 && win.visualModeEnd != -1) {
            mode = VISUALMODE;
            win.moveCursor(win.visualModeEnd, 0);
            view();
            win.visualMode = true;
        }
    }
    
    def finalize(): dynamic {
        inherit();
        path := getenv("HOME").add("/.clover2/vicl/clipbord")
        clipBoard.join("\n").write(path);
    }

    def clearClipBoard(): dynamic {
        clipBoard.clear();
    }
    def addClipBoard(line:String, line_mode:bool):dynamic {
        clearClipBoard();
        
        clipBoard.push(line);
        
        if(line_mode) {
            pasteMode = PASTEMODE_LINE;
        }
        else {
            pasteMode = PASTEMODE_CURSOR;
        }
    }
    def addClipBoard(line:SortableList<String>, line_mode:bool):dynamic {
        clearClipBoard();
        
        clipBoard.push(line);
        
        if(line_mode) {
            pasteMode = PASTEMODE_LINE;
        }
        else {
            pasteMode = PASTEMODE_CURSOR;
        }
    }

    def pasteBeforeCursorLineMode():dynamic {
        win.addUndoText();

        line := win.getRealPosY();
        win.texts.insert(line, clipBoard.clone());

        win.makeVisibleTexts();
        win.fixCursorAndScrollTop(win.scrollTopY);
    }
    def pasteAfterCursorLineMode():dynamic {
        win.addUndoText();

        line := win.getRealPosY();
        win.texts.insert(line+1, clipBoard.clone());

        win.makeVisibleTexts();
        win.fixCursorAndScrollTop(win.scrollTopY);
    }

    def pasteBeforeCursor():dynamic {
        win.addUndoText();

        y := win.getRealPosY();
        x := win.getRealPosX();

        line := win.texts.items(y);

        if(clipBoard.length() > 1) {
            tail := line.subString(x, -1);
            line.delete(x, -1);
            line.append(clipBoard.items(0));

            win.texts.insert(y+1, clipBoard.subList(1,-2).clone());
            win.texts.insert(y + clipBoard.length()-1, clipBoard.items(-1).add(tail));
        }
        elif(clipBoard.length() == 1) {
            line.insert(x, clipBoard.items(0));
        }

        win.makeVisibleTexts();
        win.fixCursorAndScrollTop(win.scrollTopY);
    }
    
    def pasteAfterCursor():dynamic {
        win.addUndoText();

        y := win.getRealPosY();
        x := win.getRealPosX();

        line := win.texts.items(y);

        if(clipBoard.length() > 1) {
            tail := line.subString(x+1, -1);
            line.delete(x+1, -1);
            line.append(clipBoard.items(0));

            win.texts.insert(y+1, clipBoard.subList(1,-2).clone());
            win.texts.insert(y + clipBoard.length()-1, clipBoard.items(-1).add(tail));
        }
        elif(clipBoard.length() == 1) {
            line.insert(x+1, clipBoard.items(0));
        }

        win.makeVisibleTexts();
        win.fixCursorAndScrollTop(win.scrollTopY);
    }

    def visualMode(key:int):dynamic {
        when(key) {
            case (('['-'A').to_int+1, ('C'-'A').to_int+1) {
                finishVisualMode(); 
            }

            case ('y'.to_int) {
                line := win.getRealPosY();

                if(win.visualModeStart < line) {
                    addClipBoard(win.texts.subList(win.visualModeStart, line+1), true);
                }
                else {
                    addClipBoard(win.texts.subList(line, win.visualModeStart+1), true);
                }

                finishVisualMode(); 
            }

            case ('d'.to_int) {
                win.addUndoText();

                real_pos_y := win.getRealPosY();

                if(win.visualModeStart < real_pos_y) {
                    addClipBoard(win.texts.subList(win.visualModeStart, real_pos_y+1), true);
                    win.texts.deleteWithRange(win.visualModeStart, real_pos_y+1);
                    
                    if(win.texts.length() == 0) {
                        win.texts.push("");
                    }
                }
                else {
                    addClipBoard(win.texts.subList(real_pos_y, win.visualModeStart+1), true);
                    win.texts.deleteWithRange(real_pos_y, win.visualModeStart+1);
                    if(win.texts.length() == 0) {
                        win.texts.push("");
                    }
                }

                win.makeVisibleTexts(); 
                if(win.visualModeStart < win.visibleTextsPos.length())
                {
                    win.moveCursor(win.visualModeStart, 0);
                }
                else {
                    win.moveCursor(win.visualModeStart-1, 0);
                }
                
                finishVisualMode(); 
            }
            case ('>'.to_int) {
                win.addUndoText();

                win.texts.subList(win.visualModeStart, win.getRealPosY()+1).each 
                {
                    it.insert(0, "    ");
                } 
                
                win.makeVisibleTexts(); 
                win.fixCursorAndScrollTop(win.scrollTopY);
            }
            case ('<'.to_int) {
                win.addUndoText();

                y := win.visualModeStart; 
                y2 := win.getRealPosY();
                
                lines := win.texts.subList(win.visualModeStart, y2+1).map {
                    it.sub(/^    /, "");
                } 
                
                win.texts.deleteWithRange(win.visualModeStart, y2+1).insert(win.visualModeStart, lines); 
                
                win.makeVisibleTexts(); 
                win.fixCursorAndScrollTop(win.scrollTopY);
            }
            case (':'.to_int) {
                enterCommandMode();
            }
            case ('!'.to_int) {
                win.addUndoText();

                path := getenv("HOME").add("/.clover2/vicl/vmode_out");

                win.texts.subList(win.visualModeStart, win.getRealPosY()+1).join("\n").write(path);
                endwin();
                iclover2("--controlling-terminal", "-s", "path := getenv(\"HOME\").add(\"/.clover2/vicl/vmode_out\"); path.toPath().read().toString()..toString().write(path)", "-p", -24.toString(), "-o")
                initscr();
                setEscapeDelay(0);
                keypad(stdscr, true);
                raw();
                noecho();

                command_result := path.toPath().read().toString().split('\n');

                real_pos_y := win.getRealPosY();

                if(win.visualModeStart < real_pos_y) {
                    win.texts.deleteWithRange(win.visualModeStart, real_pos_y+1);
                    
                    if(win.texts.length() == 0) {
                        win.texts.push("");
                    }
                }
                else {
                    win.texts.deleteWithRange(real_pos_y, win.visualModeStart+1);
                    if(win.texts.length() == 0) {
                        win.texts.push("");
                    }
                }

                win.makeVisibleTexts(); 
                win.moveCursor(win.visualModeStart, 0);
                
                y := win.getRealPosY();
                x := win.getRealPosX();

                line := win.texts.items(y);

                if(line != null) {
                    if(command_result.length() >= 1) {
                        win.texts.insert(y, command_result);
                        win.makeVisibleTexts();
                    }
                }

                finishVisualMode(); 

                mode = EDITMODE;
                statusLineInCommandMode = "";
            }
            else {
                mode = EDITMODE;
                key2 := 0;
                when(key) {
                    case ('d'.to_int, 'c'.to_int, 'Z'.to_int, 'g'.to_int, 'z'.to_int, '['.to_int, ']'.to_int, '`'.to_int, 'm'.to_int, 't'.to_int) 
                    {
                        key2 = getch();
                    }
                }
                runKeyEvents(key, key2);
                mode = VISUALMODE;
            }
        }
    }

    def runKeyEvents(key:int, key2:int):dynamic {
        if(mode == VISUALMODE) {
            visualMode(key);
        }
        else {
            inherit(key, key2);
        }
    }
    def commandMode(key:int):dynamic {
        if(win.visualMode) {
            when(key) {
                case (('['-'A').to_int+1, ('C'-'A').to_int+1) {
                    mode = EDITMODE;
                    statusLineInCommandMode = "";
                    win.visualMode = false;
                }
                case (KEY_ENTER, ('J'-'A').to_int+1) {
                    win.addUndoText();

                    word := statusLineInCommandMode;
                    
                    command_result := win.texts.subList(win.visualModeStart, win.getRealPosY()+1).join("\n").toCommand().bash("-c", word).toString().split('\n');

                    real_pos_y := win.getRealPosY();

                    if(win.visualModeStart < real_pos_y) {
                        win.texts.deleteWithRange(win.visualModeStart, real_pos_y+1);
                        
                        if(win.texts.length() == 0) {
                            win.texts.push("");
                        }
                    }
                    else {
                        win.texts.deleteWithRange(real_pos_y, win.visualModeStart+1);
                        if(win.texts.length() == 0) {
                            win.texts.push("");
                        }
                    }

                    win.makeVisibleTexts(); 
                    win.moveCursor(win.visualModeStart, 0);
                    
                    y := win.getRealPosY();
                    x := win.getRealPosX();

                    line := win.texts.items(y);

                    if(line != null) {
                        if(command_result.length() >= 1) {
                            win.texts.insert(y, command_result);
                            win.makeVisibleTexts();
                        }
                    }

                    finishVisualMode(); 

                    mode = EDITMODE;
                    statusLineInCommandMode = "";
                    win.visualMode = false;
                }
                else {
                    inherit(key);
                }
            }
        }
        else {
            inherit(key);
        }
    }
}