
class ViCloneWindow version 10
{
    var vvisualModeStart:int;
    var vvisualModeStartX:int;
    var vvisualModeEnd:int;
    var vvisualMode:bool

    def initialize(fname:String, dir_path:String, win_pos:int, arg_line_num:int, vicl:ViClone):dynamic {
        inherit(fname, dir_path, win_pos, arg_line_num, vicl);

        vvisualModeStart = -1;
        vvisualModeStartX = -1;
        vvisualModeEnd = -1;
        vvisualMode = false;
    }

    def view():dynamic {
        if(vvisualMode) {
            for(y:=0; y<visibleTexts.length(); y++) {
                line := visibleTexts.items(y);

                if(line == null) {
                    break;
                }

                y2 := viewYToRealY(y);
                cursor_line := viewYToRealY(cursorY);

                if((y2 >= vvisualModeStart && y2 <= cursor_line) || (y2 >= cursor_line && y2 <= vvisualModeStart))
                {
                    x2 := getRealPosX();
                    
                    if(x2 == vvisualModeStartX) {
                        x2++;
                        line1 := line.subString(0, vvisualModeStartX);
                        line2 := line.subString(vvisualModeStartX, x2);
                        line3 := line.subString(x2, -1);
                        
                        mvprintw(y + winPos, 0 + ViClone.vicl.dirPaneLength, line1);
                        
                        attron(A_REVERSE);
                        mvprintw(y + winPos, line1.length() + ViClone.vicl.dirPaneLength, line2);
                        attroff(A_REVERSE);
                        
                        mvprintw(y + winPos, line1.length() + line2.length() + ViClone.vicl.dirPaneLength, line3);
                    }
                    elif(x2 > vvisualModeStartX) {
                        line1 := line.subString(0, vvisualModeStartX);
                        line2 := line.subString(vvisualModeStartX, x2);
                        line3 := line.subString(x2, -1);
                        
                        mvprintw(y + winPos, 0 + ViClone.vicl.dirPaneLength, line1);
                        
                        attron(A_REVERSE);
                        mvprintw(y + winPos, line1.length() + ViClone.vicl.dirPaneLength, line2);
                        attroff(A_REVERSE);
                        
                        mvprintw(y + winPos, line1.length() + line2.length() + ViClone.vicl.dirPaneLength, line3);
                    }
                    else {
                        line1 := line.subString(0, x2);
                        line2 := line.subString(x2, vvisualModeStartX);
                        line3 := line.subString(vvisualModeStartX, -1);
                        
                        mvprintw(y + winPos, 0 + ViClone.vicl.dirPaneLength, line1);
                        
                        attron(A_REVERSE);
                        mvprintw(y + winPos, line1.length() + ViClone.vicl.dirPaneLength, line2);
                        attroff(A_REVERSE);
                        
                        mvprintw(y + winPos, line1.length() + line2.length() + ViClone.vicl.dirPaneLength, line3);
                    }
                }
                else {
                    mvprintw(y + winPos, 0 + ViClone.vicl.dirPaneLength, line);
                }
            }

            try {
                attron(A_REVERSE);
                mvprintw(MaxY -1 + winPos, 0 + ViClone.vicl.dirPaneLength, "%s/%s%s", { dirPath, fileName, " ".multiply(getmaxx()-1-ViClone.vicl.dirPaneLength-dirPath.length()-fileName.length()-1) });
                attroff(A_REVERSE);
            }
        }
        else {
            inherit();
        }
    }
}

class ViClone version 16
{
    def initialize():dynamic {
        inherit();

        ### Insert Mode ###
        keyEvents['V'-'A'.to_int+1] = lambda(self:ViClone, key:int, key2:int) {
            enterVisualMode();
        }
    }

    def enterVisualMode() {
        mode = VVISUALMODE;

        win.vvisualModeStart = win.getRealPosY();
        win.vvisualModeStartX = win.getRealPosX();

        win.vvisualMode = true;
    }
    
    def finishVisualMode() {
        mode = EDITMODE;
        win.vvisualModeEnd = win.getRealPosY();
        win.vvisualMode = false;
    }

    def vvisualMode(key:int):dynamic {
        when(key) {
            case (('['-'A').to_int+1, ('C'-'A').to_int+1) {
                finishVisualMode(); 
            }
            case ('d'.to_int) {
                win.addUndoText();
                
                x := win.vvisualModeStartX;
                x2 := win.getRealPosX();
                y := win.vvisualModeStart;
                y2 := win.getRealPosY();
                
                line_start := 0;
                line_end := 0;
                char_start := 0;
                char_end := 0;
                
                if(y <= y2) {
                    line_start = y;
                    line_end = y2;
                }
                else {
                    line_start = y2;
                    line_end = y;
                }
                
                if(x == x2) {
                    char_start = x;
                    char_end = x + 1;
                }
                elif(x < x2) {
                    char_start = x;
                    char_end = x2;
                }
                else {
                    char_start = x2;
                    char_end = x;
                }
                
                for(i:=line_start; i<=line_end; i++) {
                    line := win.texts.items(i);
                    line.delete(char_start, char_end);
                }
                
                win.makeVisibleTexts();
                win.fixCursorAndScrollTop(win.scrollTopY);
                
                finishVisualMode();
            }
            case ('I'.to_int) {
                win.addUndoText();
                
                mode = VINSERTMODE;
                win.modifiedText = true;
            }
            else {
                mode = EDITMODE;
                key2 := 0;
                when(key) {
                    case ('d'.to_int, 'c'.to_int, 'Z'.to_int, 'g'.to_int, 'z'.to_int, '['.to_int, ']'.to_int, '`'.to_int, 'm'.to_int, 't'.to_int) 
                    {
                        key2 = getch();
                    }
                }
                runKeyEvents(key, key2);
                mode = VVISUALMODE;
            }
        }
    }

    def runKeyEvents(key:int, key2:int):dynamic {
        if(mode == VVISUALMODE) {
            vvisualMode(key);
        }
        elif(mode == VINSERTMODE) {
            vinsertMode(key);
        }
        else {
            inherit(key, key2);
        }
    }
    
    def vinsertMode(key:int):dynamic {
        when(key) {
            case (('['-'A').to_int+1, ('C'-'A').to_int+1) {
                finishVisualMode(); 
            }

            ### Backspace ###
            case (('H'-'A').to_int+1, KEY_BACKSPACE) {
                win.addUndoText();
                
                x := win.vvisualModeStartX;
                x2 := win.getRealPosX();
                y := win.vvisualModeStart;
                y2 := win.getRealPosY();
                
                line_start := 0;
                line_end := 0;
                char_start := 0;
                char_end := 0;
                
                if(y <= y2) {
                    line_start = y;
                    line_end = y2;
                }
                else {
                    line_start = y2;
                    line_end = y;
                }
                
                if(x < x2) {
                    char_start = x;
                    char_end = x2;
                    
                    for(i:=line_start; i<=line_end; i++) {
                        line := win.texts.items(i);
                        line.delete(char_end-1);
                    }
                    
                    win.cursorX--;
                    win.makeVisibleTexts();
                }
            }

            else {
                win.addUndoText();
                
                x := win.vvisualModeStartX;
                x2 := win.getRealPosX();
                y := win.vvisualModeStart;
                y2 := win.getRealPosY();
                
                line_start := 0;
                line_end := 0;
                char_start := 0;
                char_end := 0;
                
                if(y <= y2) {
                    line_start = y;
                    line_end = y2;
                }
                else {
                    line_start = y2;
                    line_end = y;
                }
                
                if(x <= x2) {
                    char_start = x;
                    char_end = x2;
                }
                else {
                    char_start = x2;
                    char_end = x;
                }
                
                for(i:=line_start; i<=line_end; i++) {
                    line := win.texts.items(i);
                    c := key.to_char;
                    if(c.isalnum() || c == ' ' || c.isgraph()) {
                        line.insert(char_end, c.toString());
                    }
                }

                win.cursorX++;
                win.makeVisibleTexts();
            }
        }
    }
}
