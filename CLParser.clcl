
class CLNodeType
{
    className:String;

    genericsTypes:CLNodeType[];

/*
    array:bpool;
    nullabyle:bool;
    blockType:CLBlockType;
*/

    def initialize(class_name:String) {
        self.className = class_name;
        self.genericsTypes = new CLNodeType[CLParser.GENERICS_TYPES_MAX]();
    }
}

class CLNodeTree
{
    type:int;

    left:CLNodeTree;
    right:CLNodeTree;
    middle:CLNodeTree;

    sourceName:String;
    sourceLine:int;
}

class CLParser
{
    sourceBuffer:Buffer;

    GENERICS_TYPES_MAX:static int;
    PARAMS_MAX:static int;

    def initialize(): native static;

    def initialize(sname:String) {
        self.sourceBuffer = File.read(sname);
    }

    def parse() {
        self.sourceBuffer.append(0y);
        p:pointer = self.sourceBuffer.buffer;

        while(p->byte != 0) {
            printf("p %d\n", array { p->byte });
            p++;
        }
    }

    def expression() {
    }
}
