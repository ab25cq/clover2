
interface JITTestInterface
{
    def method(value:int):int;
    def method2();
}

class JITTestClassA
{
    value:int;

    def initialize() {
        self.value = 111;
    }

    def initialize(value:int) {
        self.value = value;
    }

    def method(value:int):int {
        return value;
    }
    def method2() throws Exception {
        throw new Exception("exception");
    }

    def classMethod(): static int {
        return 1;
    }
    def classMethod(a:int, b:int):static int {
        return a + b;
    }

    def getValue(): int {
        return self.value;
    }

    def runException(): static { 
        throw new Exception("AAA");
    }
}

class JITTest 
{
    field1: int;
    len:int;

    def initialize() {
        self.field1 = 123;
        self.len = 10;
    }

    def run(): int {
        return 3+1;
    }

    def run2(): String {
        return "ABC";
    }

    def run3(): {
        System.println("HELLO WORLD");
    }

    def run4(): int {
        return JITTestClassA.classMethod() + 3;
    }

    def run5(): int {
        return JITTestClassA.classMethod(1, 2);
    }

    def run6(): double {
        return System.strtod("123.1");
    }

    def run7():  int {
        a:int = 123;
        return a + 1;
    }

    def method(): String {
        return "ABC";
    }

    def run8(): String {
        return self.method().append("DEF");
    }

    def run9(): JITTestClassA {
        return new JITTestClassA(123);
    }

    def run10(): int {
        throw new Exception("Exception");
        return 1;
    }

    def method2() throws Exception {
        throw new Exception("exception");
    }

    def run11(): {
        print(" test11...");
        try {
            self.method2();
        }
        catch(e:Exception) {
            println("OK");
        }
    }

    def run12():  bool {
        a:int = 1;
        b:bool = a == 1;

        return b;
    }

    def run13(): int {
        a:int = 1;

        if(a == 1) {
            return 2;
        }
        else {
            return 3;
        }

        return a;
    }

    def run14():  int {
        a:int = 0;

        while(true) {
            a++;

            if(a == 1) {
                break;
            }
        }

        return a;
    }

    def run15():  int {
        a:int = 0;

        i:int = 0;
        while(i<3) {
            a++;
            i++;
        }

        return a;
    }

    def run16(): int {
        a:int = 0;

        for(i:int = 0; i<3; i++) {
            a++;
        }

        return a;
    }

    def run17():  int {
        a:int = 1;
        a.to_bool && ((a = 2).to_bool);
        
        return a;
    }

    def run18():  int {
        a:int = 1;
        a.to_bool || ((a = 2).to_bool);

        return a;
    }

    def run19():  int {
        return self.field1;
    }

    def run20(): regex {
        return /./;
    }

    def run21():  bool {
        return /./ == /./;
    }

    def run22():  bool {
        return /../ != /./;
    }

    def run23():  byte {
        a:byte = 1y;
        b:byte = 2y;

        return a + b;
    }
    def run24():  byte {
        a:byte = 1;

        return a;
    }
    def run25(): int {
        a:byte = 123y;
        b:byte = 123y;

        return a + b;
    }
    def run26():  int {
        a:byte = 123y;
        b:byte = 23y;

        return a - b;
    }
    def run27():  byte {
        a:byte = 1;
        b:byte = 2;

        return a * b;
    }
    def run28():  byte {
        a:byte = 9;
        b:byte = 3;

        return a / b;
    }
    def run29():  byte {
        a:byte = 5;
        b:byte = 3;

        return a % b;
    }
    def run30():  byte {
        return 1y << 1y;
    }
    def run31():  byte {
        return 2y >> 1y;
    }
    def run32():  byte {
        return 011y & 01y;
    }
    def run33():  byte {
        return 0x01y | 0x02y;
    }
    def run34():  byte {
        return 0x07y ^ 0x01y;
    }
    def run35():  long {
        return 1l + 2l;
    }
    def run36():  byte {
        return ~0x01y;
    }
    def run37():  int {
        return ~0x01;
    }
    def run38():  float {
        return 1.1f + 1.1f;
    }
    def run39():  float {
        return 1.1f * 2.0f;
    }
    def run40():  double {
        return 2.0 + 2.0;
    }
    def run41(): bool {
        return 1y < 2y;
    }
    def run42():  bool {
        return 1uy < 2uy;
    }
    def run43():  bool {
        return 1l < 2l;
    }
    def run44():  bool {
        return 100000ul < 200000000000ul;
    }
    def run45():  bool {
        return 1.1f < 2.2f;
    }
    def run46():  bool {
        return 1.1 < 2.2;
    }
    def run47():  bool {
        return 'a' < 'b';
    }
    def run48():  bool {
        return !false;
    }
    def run49():  bool {
        return !true;
    }
    def run49_5(a:pointer):bool {
        a++;
        a+=2ul;

        return true;
    }
    def run50():  String {
        a:String = "ABC";

        return a.className();
    }
    def run51():  bool {
        a:String = "ABC";

        return a.className().equals("String");
    }
    def run52():  bool {
        a:String = "ABC";
        return a implements Object;
    }
    def run53(): int {
        interface:JITTestInterface = new JITTestClassA();

        return interface.method(123) + 123;
    }

    def run53_5() throws Exception {
        interface:JITTestInterface = new JITTestClassA();

        interface.method2();
    }

/*
    def run54():  {
        ls("-al", "src/main.c");
    }

    def run55(x:int, y:int, block_:lambda(int,int):int):  int {
        return block_(x, y);
    }

    def run56():  {
        self.field1 = 777;
    }
    def run57():  int {
        return self.field1;
    }

    classField1: static int;

    def run58():  {
        JITTest.classField1 = 777;
    }
    def run59():  int {
        return JITTest.classField1;
    }

    def run60():  int {
        a:int = 123;
        b:pointer = &a;
        b->int = 245;
        return a;
    }

    def run61():  long {
        a:long = 123l;
        b:pointer = &a;
        b->long = 245l;
        return a;
    }

    def run62():  double {
        a:double = 123.1;
        b:pointer = &a;
        b->double = 245.1;
        return a;
    }
    def run63():  int {
        a:int[] = new int[5]();

        a[1] = 111;
        a[2] = 222;

        return a.length;
    }
    def run64():  int {
        a:int[] = new int[5]();

        a[1] = 111;
        a[2] = 222;

        return a[1];
    }
    def run65():  char {
        return 'a'.to_upper;
    }
    def run66():  char {
        return 'A'.to_lower;
    }
    def run67():  bool {
        return /aaa/g.global;
    }
    def run68():  bool {
        return /aaa/.global;
    }
    def run69():  bool {
        return /aaa/i.ignoreCase;
    }
    def run70():  bool {
        return /aaa/.ignoreCase;
    }
    def run71():  EqualableArray<Integer> {
        return equalable_array { 1,2,3 };
    }
    def run72():  lambda(int,int):int {
        return lambda(x:int, y:int):int { return x + y; };
    }
    def run73():  Integer {
        return 12y.toInteger;
    }
    def run74():  Integer {
        return 123l.toInteger;
    }
    def run75():  Integer {
        return 123.1f.toInteger;
    }
    def run76():  Integer {
        return 123.1.toInteger;
    }
    def run77():  Integer {
        return 'A'.toInteger;
    }
    def run78():  Integer {
        return true.toInteger;
    }
    def run79():  Byte {
        return 123.toByte;
    }
    def run80():  Byte {
        return 123.1.toByte;
    }
    def run81():  UByte {
        return 123.toUByte;
    }
    def run82():  UByte {
        return 123.1.toUByte;
    }
    def run83():  ULong {
        return 123.toULong;
    }
    def run84():  Long {
        return 123456.toLong;
    }
    def run85():  Float {
        return 123.toFloat;
    }
    def run86():  Float {
        return 123.1f.toFloat;
    }
    def run87():  Float {
        return 123.1.toFloat;
    }
    def run88():  Double {
        return 123.toDouble;
    }
    def run89():  Double {
        return 123.1f.toDouble;
    }
    def run90():  Double {
        return 123.1.toDouble;
    }
    def run91(p:pointer):  Pointer {
        return p.toPointer;
    }
    def run92():  Bool {
        return 1.1.toBool;
    }
    def run93():  String {
        return 1.1.toString;
    }
    def run94():  String {
        return 123.toString;
    }
    def run95():  String {
        return 'a'.toString;
    }
    def run96():  int {
        a:Integer = new Integer(123);
        return a;
    }
    def run97():  long {
        a:Integer = new Integer(123);
        return a;
    }
    def run98():  float {
        a:Integer = new Integer(123);
        return a;
    }
    def run99():  int {
        return 2.1f;
    }
    def run100():  float {
        return 2y;
    }
    def run101():  byte {
        return 2l;
    }
    def run102():  long {
        return 2y;
    }
    def run103():  bool {
        if(true) {
            if(false) {
                return false;
            }
            elif(false) {
                return false;
            }
            elif(false) {
                return false;
            }
            elif(true) {
                return true;
            }
            else {
                return false;
            }
        }
        elif(false) {
            return false;
        }
        else {
            return false;
        }

        return false;
    }
    def reverse(): String {
        a:String = "ABC";
        result:String = new String(a.size);

        for(i:int = 0; i<a.len; i++) {
            result.buffer[i] = a.buffer[a.len-i-1];
        }
        result.buffer[i] = '\0';

        result.len = a.len;

        return result;
    }
    def insert(index:int, str:String):  String {
        a:String = "ABC";

        if(index < 0) {
            index += a.len + 1;
        }
        if(index < 0) {
            index = 0;
        }
        if(index > a.len) {
            index = a.len;
        }

        len:int = str.length();

        if(a.len+len + 1 < a.size) {
            for(i:int = index; i<a.len; i++) {
                a.buffer[i+len] = a.buffer[i];
            }
            a.buffer[i] = '\0';
            for(i = 0; i<len; i++) {
                a.buffer[index+i] = str.buffer[i];
            }

            a.len += len;
        }
        else {
            new_size:int = (a.len + len + 1) * 2 + 1;
            new_buffer:char[] = new char[new_size];

            for(i:int = 0; i<index; i++) {
                new_buffer[i] = a.buffer[i];
            }
            for(i=0; i<len; i++) {
                new_buffer[i+index] = str.buffer[i];
            }
            for(i=index; i<a.len; i++) {
                new_buffer[i+len] = a.buffer[i];
            }
            new_buffer[i+len] = '\0';

            a.buffer = new_buffer;
            a.size = new_size;

            a.len += len;
        }

        return a;
    }
    def indexOf(regex_:regex, count:int): int throws Exception {
        result:int = -1;
        offset:int = 0;
        count2:int = 0;

        aaaa := "ABC";

        buffer:Buffer = aaaa.toBuffer();
        ovec_max:int = 16;
        ovec:PcreOVec = new PcreOVec(ovec_max);

        while(true) {
            regex_result:int = System.pcre_exec(regex_, buffer, offset, ovec_max, ovec);

            ### match ###
            if(regex_result > 0) {
                count2++;
                if(count2 == count) {
                    ovec_result:int = ovec.start[0];

                    if(ovec_result == 0) {
                        result = 0;
                    }
                    else {
                        utf32_offset:int = 0;

                        p:pointer = buffer.buffer;
                        while(p < p + buffer.len) {
                            c:ubyte = p->ubyte;

                            # utf8 character
                            if(c > 127uy) {
                                size:int = ((c & 0x80) >> 7) + ((c & 0x40) >> 6) + ((c & 0x20) >> 5) + ((c & 0x10) >> 4);
                                if(size > System.MB_LEN_MAX) {
                                    throw new Exception("unexpected error at String.indexOf");
                                }
                                else {
                                    p += size.to_ulong;
                                }

                                utf32_offset++;
                            }
                            # ascii
                            else {
                                p++;
                                utf32_offset++;
                            }

                            if(p - buffer.buffer == ovec_result) {
                                break;
                            }
                        }

                        result = utf32_offset;
                    }
                    break;
                }

                if(offset == ovec.end[0]) {
                    offset++;
                }
                else {
                    offset = ovec.end[0];
                }
            }
            ### no match ###
            else {
                break;
            }
        }

        return result;
    }
    def run104(): char {
        c:char = 'B';

        p:pointer = &c;

        return p->char;
    }
    def run105(): char {
        c:char = 'A';

        p:pointer = &c;

        p->char = 'B';

        return c;
    }
    def run106(): int {
println("HELLO JIT with mixin-layers");
        return 100;
    }
    def run106(): int {
        inherit();
        return 101;
    }
    def add(item:Integer):EqualableList<Integer> {
        aaa:EqualableList<Integer> = equalable_list { 1, 2, 3 };

        if(aaa.head.identifyWith(null)) {
            aaa.head = new ListItem<Integer>(item, null, null);
            aaa.tail = aaa.head;
        }
        else {
            new_item:ListItem<Integer> = new ListItem<Integer>(item, aaa.tail, null);

            aaa.tail.next = new_item;
            aaa.tail = new_item;
        }

        aaa.number++;

        return aaa;
    }
    def insert2(index:int, item:Integer): EqualableList<Integer> {
        aaa :EqualableList<Integer> = equalable_list { 1, 2, 3 };

        if(index < 0) {
            index += aaa.number + 1;
        }
        if(index < 0) {
            index = 0;
        }
        if(index > aaa.number) {
            index = aaa.number;
        }

        if(aaa.number == 0 || index == aaa.number) {
            aaa.add(item);
            return aaa;
        }

        if(index == 0) {
            new_item:ListItem<Integer> = new ListItem<Integer>(item, null, aaa.head);
            aaa.head.prev = new_item;
            aaa.head = new_item;

            aaa.number++;
        }
        else {
            it:ListItem<Integer> = aaa.head;

            i:= 0;

            while(!it.identifyWith(null)) {
                if(i == index-1) {
                    new_item:ListItem<Integer> = new ListItem<Integer>(item, it, it.next);
                    if(!it.next.identifyWith(null)) {
                        it.next.prev = new_item;
                    }
                    it.next = new_item;

                    aaa.number++;
                    break;
                }

                it = it.next;
                i++;
            }
        }

        return aaa;
    }
    def buffer_initialize(size:size_t): {
        a:Buffer = new Buffer();
        System.free(a.buffer);
        a.size = size;
        a.buffer = System.malloc(a.size);
        a.len = 0;
    }
    def buffer_initialize2(buf:pointer, size:size_t): {
        a:Buffer = new Buffer();
        System.free(a.buffer);
        a.size = size;
        a.buffer = System.malloc(a.size);
        System.memcpy(a.buffer, buf, size);
        a.len = a.size;
    }
    def sub(regex_:regex, replace:String, group_strings:EqualableList<String>):  String {
        aaa:String = "ABC";

        result: String = new String();
        offset:int = 0;

        buffer:Buffer = aaa.toBuffer();
        ovec_max:int = 16;
        ovec:PcreOVec = new PcreOVec(ovec_max);

        while(true) {
            regex_result:int = System.pcre_exec(regex_, buffer, offset, ovec_max, ovec);

            ### match and no group strings ###
            if(regex_result == 1 || group_strings.identifyWith(null) && regex_result > 0) {
                str:String = buffer.subBuffer(offset, ovec.start[0]).toString();
                result.append(str);
                result.append(replace);

                if(offset == ovec.end[0]) {
                    offset++;
                }
                else {
                    offset = ovec.end[0];
                }

                if(!regex_.global) {
                    str:String = buffer.subBuffer(offset, -1).toString();
                    result.append(str);
                    break;
                }
            }
            ### group strings ###
            elif(regex_result > 1) {
                str:String = buffer.subBuffer(offset, ovec.start[0]).toString();
                result.append(str);
                result.append(replace);

                if(offset == ovec.end[0]) {
                    offset++;
                }
                else {
                    offset = ovec.end[0];
                }

                for(i:int = 1; i<regex_result; i++) {
                    match_string:String = buffer.subBuffer(ovec.start[i], ovec.end[i]).toString();
                    group_strings.add(match_string);
                }

                if(!regex_.global) {
                    str:String = buffer.subBuffer(offset, -1).toString();
                    result.append(str);
                    break;
                }
            }
            ### no match ###
            else {
                str:String = buffer.subBuffer(offset, -1).toString();
                result.append(str);
                break;
            }
        }

        return result;
    }
    def subBuffer(start:int, end:int): Buffer {
        aaa:Buffer = b"ABC";
        if(start < 0) {
            start += aaa.len;
        }
        if(end < 0) {
            end += aaa.len.to_int + 1;
        }

        if(start < 0) {
            start = 0;
        }
        if(end > aaa.len) {
            end = aaa.len;
        }

        if(start >= end || start >= aaa.len || end < 0) {
            return B"";
        }

        result: Buffer = new Buffer(end.to_ulong-start.to_ulong);

        System.memcpy(result.buffer, aaa.buffer + start.to_ulong, (end-start).to_ulong);

        result.len = end-start;
        result.size = end-start;

        # no null-terminated buffer will be returned

        return result;
    }
    def scan(regex_:regex): EqualableList<String> {
        aaa:String = "ABC";

        result: EqualableList<String> = new EqualableList<String>();
        offset:int = 0;

        buffer:Buffer = aaa.toBuffer();
        ovec_max:int = 16;
        ovec:PcreOVec = new PcreOVec(ovec_max);

        while(true) {
            regex_result:int = System.pcre_exec(regex_, buffer, offset, ovec_max, ovec);

            ### match and no group strings ###
            if(regex_result == 1) {
                match_string:String = buffer.subBuffer(ovec.start[0], ovec.end[0]).toString();
                result.add(match_string);

                if(offset == ovec.end[0]) {
                    offset++;
                }
                else {
                    offset = ovec.end[0];
                }
            }
            ### group strings ###
            elif(regex_result > 1) {
                match_string:String = buffer.subBuffer(ovec.start[0], ovec.end[0]).toString();
                result.add(match_string);

                if(offset == ovec.end[0]) {
                    offset++;
                }
                else {
                    offset = ovec.end[0];
                }

                for(i:int = 1; i<regex_result; i++) {
                    match_string:String = buffer.subBuffer(ovec.start[i], ovec.end[i]).toString();
                    result.add(match_string);
                }
            }
            ### no match ###
            else {
                break;
            }
        }

        return result;
    }
    def groupName():String {
        aaa:stat = new stat("/bin");
        result:String = "";

        p"/etc/group".read().toString().split(/\n/).each(closure(line:String) {
            fields:EqualableList<String> = line.chomp().split(/:/);
            
            if(fields.items(2).to_int() == aaa.st_gid) {
                result = fields.items(0);
            }
        });

        return result;
    }
*/
}
