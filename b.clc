
interface JITTestInterface
{
    def method():int;
}

class JITTestClassA
{
    def initialize() {
    }

    def method():int {
        return 123;
    }
}

class JITTest 
{
    field1: int;
    len:int;

    def initialize() {
        self.field1 = 123;
        self.len = 10;
    }

    def run(): jit int {
        return 3+1;
    }

    def run2():jit String {
        return "ABC";
    }

    def run3():jit int {
        return 3+1;
    }

    def run4():jit {
        System.println("HELLO WORLD");
    }

    def run5():jit double {
        return System.strtod("123.1");
    }

    def run6(): jit int {
        a:int = 123;
        return a + 1;
    }

    def method(): String {
        return "ABC";
    }

    def run7():jit String {
        return self.method().append("DEF");
    }

    def run8(): jit {
        throw new Exception("JIT throw test");
    }

    def run9(): jit bool {
        a:int = 1;
        b:bool = a == 1;

        return b;
    }

    def run10(): jit int {
        a:int = 1;
        a.to_bool && ((a = 2).to_bool);
        
        return a;
    }

    def run11(): jit int {
        a:int = 1;
        a.to_bool || ((a = 2).to_bool);

        return a;
    }

    def run12(): jit int {
        a:int = 1;
        if(a == 1) {
            return 2;
        }
        else {
            return 3;
        }

        return a;
    }

    def run13(): jit int {
        a:int = 0;

        for(i:int=0; i<3; i++) {
            a++;
        }

        return a;
    }

    def run14(): jit int {
        a:int = 0;

        while(true) {
            a++;

            if(a == 1) {
                break;
            }
        }

        return a;
    }

    def run15(): jit int {
        return self.field1;
    }

    def run16(): jit {
        throw new Exception("exception");
    }

    def run17(): jit int {
        print("jit test14...");
        try {
            self.run16();
        }
        catch(e:Exception) {
            println("OK");
        }
    }

    def run18(): jit regex {
        return /./;
    }

    def run19(): jit bool {
        return /./ == /./;
    }

    def run20(): jit bool {
        return /../ != /./;
    }

    def run21(): jit byte {
        a:byte = 1y;
        b:byte = 2y;

        return a + b;
    }
    def run22(): jit byte {
        a:byte = 1;

        return a;
    }
    def run23(): jit byte {
        a:byte = 1;

        return a;
    }
    def run24(): jit int {
        a:byte = 123;

        return a;
    }
    def run25(): jit int {
        a:byte = 123y;
        b:byte = 123y;

        return a + b;
    }
    def run26(): jit int {
        a:byte = 123y;
        b:byte = 23y;

        return a - b;
    }
    def run27(): jit byte {
        a:byte = 1;
        b:byte = 2;

        return a * b;
    }
    def run28(): jit byte {
        a:byte = 9;
        b:byte = 3;

        return a / b;
    }
    def run29(): jit byte {
        a:byte = 5;
        b:byte = 3;

        return a % b;
    }
    def run30(): jit byte {
        return 1y << 1y;
    }
    def run31(): jit byte {
        return 2y >> 1y;
    }
    def run32(): jit byte {
        return 011y & 01y;
    }
    def run33(): jit byte {
        return 0x01y | 0x02y;
    }
    def run34(): jit byte {
        return 0x07y ^ 0x01y;
    }
    def run35(): jit long {
        return 1l + 2l;
    }
    def run36(): jit byte {
        return ~0x01y;
    }
    def run37(): jit int {
        return ~0x01;
    }
    def run38(): jit float {
        return 1.1f + 1.1f;
    }
    def run39(): jit float {
        return 1.1f * 2.0f;
    }
    def run40(): jit double {
        return 2.0 + 2.0;
    }
    def run41(): jit bool {
        return 1y < 2y;
    }
    def run42(): jit bool {
        return 1uy < 2uy;
    }
    def run43(): jit bool {
        return 1l < 2l;
    }
    def run44(): jit bool {
        return 100000ul < 200000000000ul;
    }
    def run45(): jit bool {
        return 1.1f < 2.2f;
    }
    def run46(): jit bool {
        return 1.1 < 2.2;
    }
    def run47(): jit bool {
        return 'a' < 'b';
    }
    def run48(): jit bool {
        return !false;
    }
    def run49(): jit bool {
        return !true;
    }
    def run50(): jit String {
        a:String = "ABC";

        return a.className();
    }
    def run51(): jit bool {
        a:String = "ABC";

        return a.className().equals("String");
    }
    def run52(): jit bool {
        a:String = "ABC";
        return a implements Object;
    }

    def run53(): jit int {
        interface:JITTestInterface = new JITTestClassA();

        return interface.method();
    }

    def run54(): jit {
        ls("-al", "src/main.c");
    }

    def run55(x:int, y:int, block_:lambda(int,int):int): jit int {
        return block_(x, y);
    }

    def run56(): jit {
        self.field1 = 777;
    }
    def run57(): jit int {
        return self.field1;
    }

    classField1: static int;

    def run58(): jit {
        JITTest.classField1 = 777;
    }
    def run59(): jit int {
        return JITTest.classField1;
    }

    def run60(): jit int {
        a:int = 123;
        b:pointer = &a;
        b->int = 245;
        return a;
    }

    def run61(): jit long {
        a:long = 123l;
        b:pointer = &a;
        b->long = 245l;
        return a;
    }

    def run62(): jit double {
        a:double = 123.1;
        b:pointer = &a;
        b->double = 245.1;
        return a;
    }
    def run63(): jit int {
        a:int[] = new int[5]();

        a[1] = 111;
        a[2] = 222;

        return a.length;
    }
    def run64(): jit int {
        a:int[] = new int[5]();

        a[1] = 111;
        a[2] = 222;

        return a[1];
    }
    def run65(): jit char {
        return 'a'.to_upper;
    }
    def run66(): jit char {
        return 'A'.to_lower;
    }
    def run67(): jit bool {
        return /aaa/g.global;
    }
    def run68(): jit bool {
        return /aaa/.global;
    }
    def run69(): jit bool {
        return /aaa/i.ignoreCase;
    }
    def run70(): jit bool {
        return /aaa/.ignoreCase;
    }
    def run71(): jit EqualableArray<Integer> {
        return equalable_array { 1,2,3 };
    }
    def run72(): jit lambda(int,int):int {
        return lambda(x:int, y:int):int { return x + y; };
    }
    def run73(): jit Integer {
        return 12y.toInteger;
    }
    def run74(): jit Integer {
        return 123l.toInteger;
    }
    def run75(): jit Integer {
        return 123.1f.toInteger;
    }
    def run76(): jit Integer {
        return 123.1.toInteger;
    }
    def run77(): jit Integer {
        return 'A'.toInteger;
    }
    def run78(): jit Integer {
        return true.toInteger;
    }
    def run79(): jit Byte {
        return 123.toByte;
    }
    def run80(): jit Byte {
        return 123.1.toByte;
    }
    def run81(): jit UByte {
        return 123.toUByte;
    }
    def run82(): jit UByte {
        return 123.1.toUByte;
    }
    def run83(): jit ULong {
        return 123.toULong;
    }
    def run84(): jit Long {
        return 123456.toLong;
    }
    def run85(): jit Float {
        return 123.toFloat;
    }
    def run86(): jit Float {
        return 123.1f.toFloat;
    }
    def run87(): jit Float {
        return 123.1.toFloat;
    }
    def run88(): jit Double {
        return 123.toDouble;
    }
    def run89(): jit Double {
        return 123.1f.toDouble;
    }
    def run90(): jit Double {
        return 123.1.toDouble;
    }
    def run91(p:pointer): jit Pointer {
        return p.toPointer;
    }
    def run92(): jit Bool {
        return 1.1.toBool;
    }
    def run93(): jit String {
        return 1.1.toString;
    }
    def run94(): jit String {
        return 123.toString;
    }
    def run95(): jit String {
        return 'a'.toString;
    }
    def run96(): jit int {
        a:Integer = new Integer(123);
        return a;
    }
    def run97(): jit long {
        a:Integer = new Integer(123);
        return a;
    }
    def run98(): jit float {
        a:Integer = new Integer(123);
        return a;
    }
    def run99(): jit int {
        return 2.1f;
    }
    def run100(): jit float {
        return 2y;
    }
    def run101(): jit byte {
        return 2l;
    }
    def run102(): jit long {
        return 2y;
    }
    def run103(): jit bool {
        if(true) {
            if(false) {
                return false;
            }
            elif(false) {
                return false;
            }
            elif(false) {
                return false;
            }
            elif(true) {
                return true;
            }
            else {
                return false;
            }
        }
        elif(false) {
            return false;
        }
        else {
            return false;
        }

        return false;
    }
}
