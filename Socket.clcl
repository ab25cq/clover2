include "CGI.clcl"

class sockaddr
{
    include MObjectBase;

    sa_family: int;
    sa_data: String;

    def initialize() {
    }

    def clone():sockaddr {
        result := sockaddr();

        result.sa_family = self.sa_family;
        if(self.sa_data.identifyWith(null).negative()) {
            result.sa_data = self.sa_data.clone();
        }

        return result;
    }
}

class sockaddr_un
{
    include MObjectBase;

    sun_family: int;
    sun_path: String;

    def initialize() {
    }

    def clone(): sockaddr_un {
        result := sockaddr_un();

        result.sun_family = self.sun_family;
        if(self.sun_path.identifyWith(null).negative()) {
            result.sun_path = self.sun_path.clone();
        }

        return result;
    }
}

class in_addr
{
    include MObjectBase;

    typedef in_addr_t uint;

    s_addr:in_addr_t;

    def initialize() {}

    def clone(): in_addr {
        result := in_addr();
        result.s_addr = self.s_addr;
        return result;
    }
}

class sockaddr_in
{
    include MObjectBase;

    sin_family: int;
    sin_addr: in_addr;
    sin_port: int;

    def initialize() {
        sin_addr = in_addr();
    }

    def clone(): sockaddr_in {
        result := sockaddr_in();

        result.sin_family = self.sin_family;
        if(self.sin_addr.identifyWith(null).negative()) {
            result.sin_addr = self.sin_addr.clone();
        }
        result.sin_port = self.sin_port;

        return result;
    }
}

class servent 
{
    include MObjectBase;

    s_name:String;
    s_aliases: String[];
    s_port:int;
    s_proto:String;

    def initialize() {}

    def clone(): servent {
        result := servent();

        if(!self.s_name.identifyWith(null)) {
            result.s_name = self.s_name.clone();
        }
        if(!self.s_aliases.identifyWith(null)) {
            result.s_aliases = String[self.s_aliases.length]();
            for(i:=0; i<self.s_aliases.length; i++) {
                result.s_aliases[i] = self.s_aliases[i].clone();
            }
        }
        result.s_port = self.s_port;
        if(!self.s_proto.identifyWith(null)) {
            result.s_proto = self.s_proto.clone();
        }

        return result;
    }
}

class hostent
{
    include MObjectBase;

    h_name:String;
    h_aliases:String[];
    h_addrtype:int;
    h_length:int;
    h_addr_list: String[];

    def initialize() {}

    def clone():hostent {
        result := hostent();

        if(!self.h_name.identifyWith(null)) {
            result.h_name = self.h_name.clone();
        }
        if(self.h_aliases.identifyWith(null).negative()) {
            result.h_aliases = String[self.h_aliases.length]();
            for(i:=0; i<self.h_aliases.length; i++) {
                result.h_aliases[i] = self.h_aliases[i].clone();
            }
        }
        result.h_addrtype = self.h_addrtype;
        result.h_length = self.h_length;

        if(self.h_addr_list.identifyWith(null).negative()) {
            result.h_addr_list = String[self.h_addr_list.length]();
            for(i:=0; i<self.h_addr_list.length; i++) {
                result.h_addr_list[i] = self.h_addr_list[i].clone();
            }
        }

        return result;
    }
}

class System
{
    AF_UNIX:static int;
    AF_LOCAL:static int;
    AF_INET:static int;
    AF_INET6:static int;
    AF_IPX:static int;
    AF_NETLINK:static int;
    AF_X25:static int;
    AF_AX25:static int;
    AF_ATMPVC:static int;
    AF_APPLETALK:static int;
    AF_PACKET:static int;
    AF_ALG:static int;

    SOCK_STREAM:static int;
    SOCK_DGRAM:static int;
    SOCK_SEQPACKET:static int;
    SOCK_RAW:static int;
    SOCK_RDM:static int;
    SOCK_PACKET:static int;
    SOCK_NONBLOCK:static int;
    SOCK_CLOEXEC:static int;
    SOCK_STREAM:static int;

    def initialize_socket_system(): static native;

    def initialize():static {
        inherit();
        initialize_socket_system();
    }

    def socket(domain:int, type:int, protocol:int): native static int throws Exception;
    def connect(sockfd:int, addr:sockaddr_un): native static throws Exception;
    def connect(sockfd:int, addr:sockaddr_in): native static throws Exception;
    def bind(sockfd:int, addr:sockaddr_un): native static throws Exception;
    def bind(sockfd:int, addr:sockaddr_in): native static throws Exception;
    def listen(sockfd:int, backlog:int): native static throws Exception;
    def accept(sockfd:int, addr:sockaddr_un): native static int throws Exception;

    def inet_addr(cp:String):static native in_addr_t;

    def gethostbyaddr(addr:pointer, len:size_t, type:int): static native hostent throws Exception;
    def gethostbyname(name:String): static native hostent throws Exception;

    def getservbyname(name:String, proto:String): static native servent throws Exception;
    def getservbyport(port:int, proto:String): static native servent throws Exception;

    def inet_ntoa(in:in_addr): static native String throws Exception;
    def gethostname(): static native String;
}
