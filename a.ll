; ModuleID = 'Module JITTest'

%clvalue_and_bool_struct = type { i64, i32 }
%pointer_and_bool_struct = type { i8*, i32 }

@gSigInt = external global i32

declare i32 @create_string_object(i8*)

declare i32 @create_byte(i8)

declare i32 @create_ubyte(i8)

declare i32 @create_short(i16)

declare i32 @create_ushort(i16)

declare i32 @create_integer(i32)

declare i32 @create_uinteger(i32)

declare i32 @create_long(i64)

declare i32 @create_ulong(i64)

declare i32 @create_float(float)

declare i32 @create_double(double)

declare i32 @create_pointer(i8*)

declare i32 @create_char(i32)

declare i32 @create_bool(i32)

declare i32 @create_buffer_object(i8*, i32)

declare i32 @create_path_object(i8*)

declare i32 @create_object(i64*)

declare i32 @create_regex_object(i8*, i32, i32, i32, i32, i32, i32, i32, i32)

declare i32 @create_array_object(i64*, i32)

declare void @show_inst_in_jit(i32)

declare void @show_number_in_jit(i32)

declare void @show_str_in_jit(i8*)

declare void @show_stack_stat(i64*)

declare i32 @show_stack_in_jit(i64*, i64*, i32, i64*)

declare i32 @call_invoke_method(i64*, i32, i64*, i32, i64**, i64*)

declare void @push_jit_object(i32)

declare void @try_function(i64*, i32, i32, i64*, i64*)

declare void @catch_function(i64*, i64*)

declare i8* @get_try_catch_label_name(i64*)

declare void @entry_exception_object(i32, i64*)

declare %clvalue_and_bool_struct* @get_field_from_object(i64**, i64*, i32, i64*, i32, i32)

declare i32 @regex_equals(i32, i32)

declare i32 @get_string_object_of_object_name(i32)

declare i32 @object_implements_interface(i32, i64*)

declare i32 @call_invoke_virtual_method(i32, i64*, i32, i64**, i64*, i64*, i32)

declare i32 @call_invoke_dynamic_method(i32, i32, i32, i32, i32, i32, i64*, i32, i64**, i64*, i64*, i64*)

declare i32 @invoke_block_in_jit(i32, i64*, i32, i64**, i64*)

declare i32 @store_field(i64**, i64*, i32, i64*, i32, i64, i32)

declare %clvalue_and_bool_struct* @load_class_field(i64**, i64*, i32, i64*, i32, i32, i64*)

declare %pointer_and_bool_struct* @run_load_class_field_address(i64**, i64*, i32, i64*, i32, i32, i64*)

declare i32 @store_class_field(i64**, i64*, i32, i64*, i32, i32, i64*, i64)

declare %clvalue_and_bool_struct* @load_element(i64**, i64*, i32, i64*, i32, i32)

declare i32 @run_store_element(i64**, i64*, i32, i64*, i32, i32, i64)

declare i32 @get_array_length(i32)

declare i32 @get_regex_global(i32)

declare i32 @get_regex_ignorecase(i32)

declare i32 @get_regex_multiline(i32)

declare i32 @get_regex_extended(i32)

declare i32 @get_regex_dotall(i32)

declare i32 @get_regex_anchored(i32)

declare i32 @get_regex_dollar_endonly(i32)

declare i32 @get_regex_ungreedy(i32)

declare i32 @get_regex_multiline.1(i32)

declare i32 @char_uppercase(i32)

declare i32 @char_lowercase(i32)

declare %clvalue_and_bool_struct* @run_create_array(i64**, i64*, i32, i64*, i32, i32, i64*)

declare %clvalue_and_bool_struct* @run_create_carray(i64**, i64*, i32, i64*, i32, i32, i64*)

declare %clvalue_and_bool_struct* @run_create_equalable_carray(i64**, i64*, i32, i64*, i32, i32, i64*)

declare %clvalue_and_bool_struct* @run_create_sortable_carray(i64**, i64*, i32, i64*, i32, i32, i64*)

declare %clvalue_and_bool_struct* @run_create_list(i64**, i64*, i32, i64*, i32, i32, i64*)

declare %clvalue_and_bool_struct* @run_create_sortable_list(i64**, i64*, i32, i64*, i32, i32, i64*)

declare %clvalue_and_bool_struct* @run_create_equalable_list(i64**, i64*, i32, i64*, i32, i32, i64*)

declare %clvalue_and_bool_struct* @run_create_tuple(i64**, i64*, i32, i64*, i32)

declare %clvalue_and_bool_struct* @run_create_hash(i64**, i64*, i32, i64*, i32, i32, i32, i64*)

declare i32 @run_create_block_object(i64**, i64*, i64*, i32, i32, i32, i32, i32, i32, i32, i64*)

declare i32 @run_int_to_string_cast(i32)

declare i32 @run_long_to_string_cast(i64)

declare i32 @run_uint_to_string_cast(i32)

declare i32 @run_ulong_to_string_cast(i64)

declare i32 @run_float_to_string_cast(float)

declare i32 @run_double_to_string_cast(double)

declare i32 @run_bool_to_string_cast(i32)

declare i32 @run_regex_to_string_cast(i32)

declare i32 @run_pointer_to_string_cast(i8*)

declare i32 @run_char_to_string_cast(i32)

declare i8 @run_cbyte_to_byte_cast(i32)

declare i16 @run_cshort_to_short_cast(i32)

declare i32 @run_integer_to_int_cast(i32)

declare i32 @run_cfloat_to_int_cast(i32)

declare i32 @run_cdouble_to_int_cast(i32)

declare i64 @run_clong_to_long_cast(i32)

declare i8 @run_cubyte_to_ubyte_cast(i32)

declare i16 @run_cushort_to_ushort_cast(i32)

declare i64 @run_culong_to_ulong_cast(i32)

declare i8* @run_cpointer_to_pointer_cast(i32)

declare i32 @run_uinteger_to_uint_cast(i32)

declare float @run_cfloat_to_float_cast(i32)

declare double @run_cdouble_to_double_cast(i32)

declare i32 @entry_exception_object_with_class_name2(i64**, i64*, i32, i64*, i8*, i8*)

declare %pointer_and_bool_struct* @run_load_field_address(i64**, i64*, i32, i64*, i32, i32)

declare %clvalue_and_bool_struct* @run_array_to_carray_cast(i64**, i64*, i32, i64*, i32, i8*)

declare i64* @get_class_with_load_and_initialize_in_jit(i8*)

define i32 @"JITTest.run()$$1"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  store i64 4, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run2()$$2"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_string_object(i8* inttoptr (i64 52656028 to i8*))
  call void @push_jit_object(i32 %0)
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run3()$$3"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_string_object(i8* inttoptr (i64 52656032 to i8*))
  call void @push_jit_object(i32 %0)
  %1 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52656044 to i8*))
  %ifcond = icmp eq i64* %1, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %2 = zext i32 %0 to i64
  store i64 %2, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value2 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value2, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  %3 = call i32 @call_invoke_method(i64* %1, i32 21, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond3 = icmp ne i32 %3, 1
  br i1 %ifcond3, label %then_block4, label %entry_ifend5

then_block4:                                      ; preds = %entry_ifend
  %4 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend5:                                     ; preds = %entry_ifend
  %stack_offset_value6 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value6, i64* %"lvar$0$", align 8
  %loaded_stack_ptr_address_value7 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value7, i64 -1
  %stack_pointer_offset_value8 = load i64, i64* %stack_pointer_offset_value, align 8
  %5 = trunc i64 %stack_pointer_offset_value8 to i32
  call void @push_jit_object(i32 %5)
  %loaded_stack_ptr_address_value9 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value9, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run4()$$4"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52656052 to i8*))
  %ifcond = icmp eq i64* %0, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %1 = call i32 @call_invoke_method(i64* %0, i32 4, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond2 = icmp ne i32 %1, 1
  br i1 %ifcond2, label %then_block3, label %entry_ifend4

then_block3:                                      ; preds = %entry_ifend
  %2 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend4:                                     ; preds = %entry_ifend
  %stack_offset_value5 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value5, i64* %"lvar$0$", align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value, i64 -1
  %stack_pointer_offset_value6 = load i64, i64* %stack_pointer_offset_value, align 8
  %3 = trunc i64 %stack_pointer_offset_value6 to i32
  call void @push_jit_object(i32 %3)
  %loaded_stack_ptr_address_value7 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value7, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  %addtmp = add nuw i32 %3, 3
  %4 = zext i32 %addtmp to i64
  store i64 %4, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run5()$$5"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52656068 to i8*))
  %ifcond = icmp eq i64* %0, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  store i64 1, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value2 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value2, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  store i64 2, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value4 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value5 = getelementptr i64, i64* %loaded_stack_ptr_address_value4, i64 1
  store i64* %inc_ptr_value5, i64** %stack_ptr_address
  %1 = call i32 @call_invoke_method(i64* %0, i32 5, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond6 = icmp ne i32 %1, 1
  br i1 %ifcond6, label %then_block7, label %entry_ifend8

then_block7:                                      ; preds = %entry_ifend
  %2 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend8:                                     ; preds = %entry_ifend
  %stack_offset_value9 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value9, i64* %"lvar$0$", align 8
  %loaded_stack_ptr_address_value10 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value10, i64 -1
  %stack_pointer_offset_value11 = load i64, i64* %stack_pointer_offset_value, align 8
  %3 = trunc i64 %stack_pointer_offset_value11 to i32
  call void @push_jit_object(i32 %3)
  %loaded_stack_ptr_address_value12 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value12, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 %stack_pointer_offset_value11, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run6()$$6"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_string_object(i8* inttoptr (i64 52656084 to i8*))
  call void @push_jit_object(i32 %0)
  %1 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52656092 to i8*))
  %ifcond = icmp eq i64* %1, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %2 = zext i32 %0 to i64
  store i64 %2, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value2 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value2, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  %3 = call i32 @call_invoke_method(i64* %1, i32 28, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond3 = icmp ne i32 %3, 1
  br i1 %ifcond3, label %then_block4, label %entry_ifend5

then_block4:                                      ; preds = %entry_ifend
  %4 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend5:                                     ; preds = %entry_ifend
  %stack_offset_value6 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value6, i64* %"lvar$0$", align 8
  %loaded_stack_ptr_address_value7 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value7, i64 -1
  %stack_pointer_offset_value8 = load i64, i64* %stack_pointer_offset_value, align 8
  %5 = trunc i64 %stack_pointer_offset_value8 to i32
  call void @push_jit_object(i32 %5)
  %loaded_stack_ptr_address_value9 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value9, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 %stack_pointer_offset_value8, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run7()$$7"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$1$"
  store i64 123, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  store i64 124, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.method()$$8"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_string_object(i8* inttoptr (i64 52656100 to i8*))
  call void @push_jit_object(i32 %0)
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run8()$$9"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = trunc i64 %stack_offset_value to i32
  %1 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52656104 to i8*))
  %ifcond = icmp eq i64* %1, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %then_block23, %entry_ifend6, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %2 = zext i32 %0 to i64
  store i64 %2, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value3 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value3, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  %3 = call i32 @call_invoke_method(i64* %1, i32 8, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond4 = icmp ne i32 %3, 1
  br i1 %ifcond4, label %then_block5, label %entry_ifend6

then_block5:                                      ; preds = %entry_ifend
  %4 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend6:                                     ; preds = %entry_ifend
  %stack_offset_value7 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value7, i64* %"lvar$0$", align 8
  %loaded_stack_ptr_address_value8 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value8, i64 -1
  %stack_pointer_offset_value9 = load i64, i64* %stack_pointer_offset_value, align 8
  %5 = trunc i64 %stack_pointer_offset_value9 to i32
  call void @push_jit_object(i32 %5)
  %loaded_stack_ptr_address_value10 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value10, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  %6 = call i32 @create_string_object(i8* inttoptr (i64 52656112 to i8*))
  call void @push_jit_object(i32 %6)
  %7 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52656116 to i8*))
  %ifcond13 = icmp eq i64* %7, null
  br i1 %ifcond13, label %then_block, label %entry_ifend12

entry_ifend12:                                    ; preds = %entry_ifend6
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value7, i64* %lvar, align 8
  %loaded_stack_ptr_address_value16 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value16, align 8
  store i64 %stack_pointer_offset_value9, i64* %loaded_stack_ptr_address_value16, align 8
  %loaded_stack_ptr_address_value17 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value18 = getelementptr i64, i64* %loaded_stack_ptr_address_value17, i64 1
  store i64* %inc_ptr_value18, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value18, align 8
  %8 = zext i32 %6 to i64
  store i64 %8, i64* %inc_ptr_value18, align 8
  %loaded_stack_ptr_address_value20 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value21 = getelementptr i64, i64* %loaded_stack_ptr_address_value20, i64 1
  store i64* %inc_ptr_value21, i64** %stack_ptr_address
  %9 = call i32 @call_invoke_method(i64* %7, i32 8, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond22 = icmp ne i32 %9, 1
  br i1 %ifcond22, label %then_block23, label %entry_ifend24

then_block23:                                     ; preds = %entry_ifend12
  %10 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend24:                                    ; preds = %entry_ifend12
  %stack_offset_value28 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value28, i64* %"lvar$0$", align 8
  %loaded_stack_ptr_address_value29 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value30 = getelementptr i64, i64* %loaded_stack_ptr_address_value29, i64 -1
  %stack_pointer_offset_value31 = load i64, i64* %stack_pointer_offset_value30, align 8
  %11 = trunc i64 %stack_pointer_offset_value31 to i32
  call void @push_jit_object(i32 %11)
  %loaded_stack_ptr_address_value32 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value33 = getelementptr i64, i64* %loaded_stack_ptr_address_value32, i64 1
  store i64* %dec_ptr_value33, i64** %stack_ptr_address
  store i64 %stack_pointer_offset_value31, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run9()$$10"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52656124 to i8*))
  %ifcond = icmp eq i64* %0, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %1 = call i32 @create_object(i64* %0)
  call void @push_jit_object(i32 %1)
  %2 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52656140 to i8*))
  %ifcond3 = icmp eq i64* %2, null
  br i1 %ifcond3, label %then_block, label %entry_ifend2

entry_ifend2:                                     ; preds = %entry_ifend
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %3 = zext i32 %1 to i64
  store i64 %3, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value5 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value5, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  store i64 123, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value7 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value8 = getelementptr i64, i64* %loaded_stack_ptr_address_value7, i64 1
  store i64* %inc_ptr_value8, i64** %stack_ptr_address
  %4 = call i32 @call_invoke_method(i64* %2, i32 1, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond9 = icmp ne i32 %4, 1
  br i1 %ifcond9, label %then_block10, label %entry_ifend11

then_block10:                                     ; preds = %entry_ifend2
  %5 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend11:                                    ; preds = %entry_ifend2
  %stack_offset_value12 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value12, i64* %"lvar$0$", align 8
  %loaded_stack_ptr_address_value13 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value13, i64 -1
  %stack_pointer_offset_value14 = load i64, i64* %stack_pointer_offset_value, align 8
  %6 = trunc i64 %stack_pointer_offset_value14 to i32
  call void @push_jit_object(i32 %6)
  %loaded_stack_ptr_address_value15 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value15, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 %stack_pointer_offset_value14, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run10()$$11"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52656156 to i8*))
  %ifcond = icmp eq i64* %0, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %1 = call i32 @create_object(i64* %0)
  call void @push_jit_object(i32 %1)
  %2 = call i32 @create_string_object(i8* inttoptr (i64 52656168 to i8*))
  call void @push_jit_object(i32 %2)
  %3 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52656180 to i8*))
  %ifcond3 = icmp eq i64* %3, null
  br i1 %ifcond3, label %then_block, label %entry_ifend2

entry_ifend2:                                     ; preds = %entry_ifend
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %4 = zext i32 %1 to i64
  store i64 %4, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value5 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value5, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  %5 = zext i32 %2 to i64
  store i64 %5, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value7 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value8 = getelementptr i64, i64* %loaded_stack_ptr_address_value7, i64 1
  store i64* %inc_ptr_value8, i64** %stack_ptr_address
  %6 = call i32 @call_invoke_method(i64* %3, i32 0, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond9 = icmp ne i32 %6, 1
  br i1 %ifcond9, label %then_block10, label %entry_ifend11

then_block10:                                     ; preds = %entry_ifend2
  %7 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend11:                                    ; preds = %entry_ifend2
  %stack_offset_value12 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value12, i64* %"lvar$0$", align 8
  %loaded_stack_ptr_address_value13 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value13, i64 -1
  %stack_pointer_offset_value14 = load i64, i64* %stack_pointer_offset_value, align 8
  %8 = trunc i64 %stack_pointer_offset_value14 to i32
  call void @push_jit_object(i32 %8)
  %loaded_stack_ptr_address_value15 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value15, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 %stack_pointer_offset_value14, i64* %stack, align 8
  call void @entry_exception_object(i32 %8, i64* %info)
  ret i32 0
}

define i32 @"JITTest.method2()$$12"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52656192 to i8*))
  %ifcond = icmp eq i64* %0, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %1 = call i32 @create_object(i64* %0)
  call void @push_jit_object(i32 %1)
  %2 = call i32 @create_string_object(i8* inttoptr (i64 52656204 to i8*))
  call void @push_jit_object(i32 %2)
  %3 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52656216 to i8*))
  %ifcond3 = icmp eq i64* %3, null
  br i1 %ifcond3, label %then_block, label %entry_ifend2

entry_ifend2:                                     ; preds = %entry_ifend
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %4 = zext i32 %1 to i64
  store i64 %4, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value5 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value5, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  %5 = zext i32 %2 to i64
  store i64 %5, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value7 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value8 = getelementptr i64, i64* %loaded_stack_ptr_address_value7, i64 1
  store i64* %inc_ptr_value8, i64** %stack_ptr_address
  %6 = call i32 @call_invoke_method(i64* %3, i32 0, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond9 = icmp ne i32 %6, 1
  br i1 %ifcond9, label %then_block10, label %entry_ifend11

then_block10:                                     ; preds = %entry_ifend2
  %7 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend11:                                    ; preds = %entry_ifend2
  %stack_offset_value12 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value12, i64* %"lvar$0$", align 8
  %loaded_stack_ptr_address_value13 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value13, i64 -1
  %stack_pointer_offset_value14 = load i64, i64* %stack_pointer_offset_value, align 8
  %8 = trunc i64 %stack_pointer_offset_value14 to i32
  call void @push_jit_object(i32 %8)
  %loaded_stack_ptr_address_value15 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value15, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 %stack_pointer_offset_value14, i64* %stack, align 8
  call void @entry_exception_object(i32 %8, i64* %info)
  ret i32 0
}

define i32 @"JITTest.run11()$$13"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_string_object(i8* inttoptr (i64 52656228 to i8*))
  call void @push_jit_object(i32 %0)
  %1 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52656244 to i8*))
  %ifcond = icmp eq i64* %1, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %then_block25, %entry_ifend7, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value3 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value3, align 8
  store i64 0, i64* %lvar_offset_value3, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %2 = zext i32 %0 to i64
  store i64 %2, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value4 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value4, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  %3 = call i32 @call_invoke_method(i64* %1, i32 1, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond5 = icmp ne i32 %3, 1
  br i1 %ifcond5, label %then_block6, label %entry_ifend7

then_block6:                                      ; preds = %entry_ifend
  %4 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend7:                                     ; preds = %entry_ifend
  %stack_offset_value8 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value8, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value9 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value9, i64* %"lvar$1$", align 8
  %loaded_stack_ptr_address_value10 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value10, i64 -1
  %stack_pointer_offset_value11 = load i64, i64* %stack_pointer_offset_value, align 8
  %5 = trunc i64 %stack_pointer_offset_value11 to i32
  call void @push_jit_object(i32 %5)
  %loaded_stack_ptr_address_value12 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value12, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i32 0, i32* @gSigInt
  call void @try_function(i64* %info, i32 12012, i32 92, i64* %code, i64* %constant)
  store i32 0, i32* @gSigInt
  %6 = trunc i64 %stack_offset_value8 to i32
  %7 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52656268 to i8*))
  %ifcond16 = icmp eq i64* %7, null
  br i1 %ifcond16, label %then_block, label %entry_ifend15

entry_ifend15:                                    ; preds = %entry_ifend7
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value8, i64* %lvar, align 8
  store i64 0, i64* %lvar_offset_value3, align 8
  store i64 %stack_offset_value9, i64* %lvar_offset_value3, align 8
  %loaded_stack_ptr_address_value21 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value21, align 8
  %8 = zext i32 %6 to i64
  store i64 %8, i64* %loaded_stack_ptr_address_value21, align 8
  %loaded_stack_ptr_address_value22 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value23 = getelementptr i64, i64* %loaded_stack_ptr_address_value22, i64 1
  store i64* %inc_ptr_value23, i64** %stack_ptr_address
  %9 = call i32 @call_invoke_method(i64* %7, i32 12, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond24 = icmp ne i32 %9, 1
  br i1 %ifcond24, label %then_block25, label %entry_ifend26

then_block25:                                     ; preds = %entry_ifend15
  %10 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend26:                                    ; preds = %entry_ifend15
  %stack_offset_value30 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value30, i64* %"lvar$0$", align 8
  %stack_offset_value32 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value32, i64* %"lvar$1$", align 8
  %loaded_stack_ptr_address_value33 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value34 = getelementptr i64, i64* %loaded_stack_ptr_address_value33, i64 -1
  %stack_pointer_offset_value35 = load i64, i64* %stack_pointer_offset_value34, align 8
  %11 = trunc i64 %stack_pointer_offset_value35 to i32
  call void @push_jit_object(i32 %11)
  %loaded_stack_ptr_address_value36 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value37 = getelementptr i64, i64* %loaded_stack_ptr_address_value36, i64 1
  store i64* %dec_ptr_value37, i64** %stack_ptr_address
  call void @try_function(i64* %info, i32 0, i32 0, i64* %code, i64* %constant)
  store i64 0, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run11_5()$$14"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$2$" = alloca i64
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i64 0, i64* %"lvar$2$"
  store i64 0, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$1$"
  store i64 1, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$2$"
  store i64 1, i64* %"lvar$2$", align 8
  store i64 0, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run12()$$15"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$2$" = alloca i64
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i64 0, i64* %"lvar$2$"
  store i64 0, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$1$"
  store i64 1, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$2$"
  store i64 1, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  store i64 1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run13()$$16"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$1$"
  store i64 1, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  store i32 0, i32* @gSigInt
  store i64 2, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run14()$$17"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  br label %entry_condend

entry_condend:                                    ; preds = %entry_condend, %entry
  %lvar913 = phi i64 [ 0, %entry ], [ %1, %entry_condend ]
  store i32 0, i32* @gSigInt
  %0 = trunc i64 %lvar913 to i32
  %addtmp = add nuw i32 %0, 1
  store i64 0, i64* %"lvar$1$"
  %1 = zext i32 %addtmp to i64
  store i64 %1, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %2 = trunc i64 %1 to i32
  %eqtmpx = icmp eq i32 %2, 1
  br i1 %eqtmpx, label %entry_condend4, label %entry_condend

entry_condend4:                                   ; preds = %entry_condend
  store i32 0, i32* @gSigInt
  store i32 0, i32* @gSigInt
  %3 = trunc i64 %1 to i32
  %4 = zext i32 %3 to i64
  store i64 %4, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run15()$$18"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$2$" = alloca i64
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i64 0, i64* %"lvar$2$"
  store i64 0, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$2$"
  store i64 0, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  br label %while_start_pointe

while_start_pointe:                               ; preds = %entry_condend, %entry
  %lvar2 = phi i64 [ %2, %entry_condend ], [ 0, %entry ]
  %lvar3 = phi i64 [ %3, %entry_condend ], [ 0, %entry ]
  %0 = trunc i64 %lvar3 to i32
  %letmp = icmp slt i32 %0, 3
  store i32 0, i32* @gSigInt
  %1 = trunc i64 %lvar2 to i32
  br i1 %letmp, label %entry_condend, label %label_whilee

entry_condend:                                    ; preds = %while_start_pointe
  %addtmp = add nuw i32 %1, 1
  store i64 0, i64* %"lvar$1$"
  %2 = zext i32 %addtmp to i64
  store i64 %2, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %addtmp4 = add nuw i32 %0, 1
  store i64 0, i64* %"lvar$2$"
  %3 = zext i32 %addtmp4 to i64
  store i64 %3, i64* %"lvar$2$", align 8
  br label %while_start_pointe

label_whilee:                                     ; preds = %while_start_pointe
  %4 = zext i32 %1 to i64
  store i64 %4, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run16()$$19"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$2$" = alloca i64
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i64 0, i64* %"lvar$2$"
  store i64 0, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$2$"
  store i64 0, i64* %"lvar$2$", align 8
  br label %for_start_pointf

for_start_pointf:                                 ; preds = %entry_condend, %entry
  %lvar2 = phi i64 [ %2, %entry_condend ], [ 0, %entry ]
  %lvar3 = phi i64 [ %3, %entry_condend ], [ 0, %entry ]
  %0 = trunc i64 %lvar3 to i32
  %letmp = icmp slt i32 %0, 3
  store i32 0, i32* @gSigInt
  %1 = trunc i64 %lvar2 to i32
  br i1 %letmp, label %entry_condend, label %label_for_endf

entry_condend:                                    ; preds = %for_start_pointf
  %addtmp = add nuw i32 %1, 1
  store i64 0, i64* %"lvar$1$"
  %2 = zext i32 %addtmp to i64
  store i64 %2, i64* %"lvar$1$", align 8
  %addtmp4 = add nuw i32 %0, 1
  store i64 0, i64* %"lvar$2$"
  %3 = zext i32 %addtmp4 to i64
  store i64 %3, i64* %"lvar$2$", align 8
  br label %for_start_pointf

label_for_endf:                                   ; preds = %for_start_pointf
  %4 = zext i32 %1 to i64
  store i64 %4, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run17()$$20"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %VALUE_FOR_ANDAND_OROR = alloca i64
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$1$"
  store i64 1, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %VALUE_FOR_ANDAND_OROR, align 8
  store i64 1, i64* %VALUE_FOR_ANDAND_OROR, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 2, i64* %"lvar$1$", align 8
  store i64 0, i64* %VALUE_FOR_ANDAND_OROR, align 8
  store i32 0, i32* @gSigInt
  %0 = trunc i64 2 to i32
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run18()$$21"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %VALUE_FOR_ANDAND_OROR = alloca i64
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$1$"
  store i64 1, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %VALUE_FOR_ANDAND_OROR, align 8
  store i64 1, i64* %VALUE_FOR_ANDAND_OROR, align 8
  store i32 0, i32* @gSigInt
  store i64 1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run19()$$22"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = trunc i64 %stack_offset_value to i32
  %1 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %0, i32 0)
  %2 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %1, i32 0, i32 0
  %3 = load i64, i64* %2, align 4
  %4 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %1, i32 0, i32 1
  %5 = load i32, i32* %4, align 4
  %ifcond = icmp eq i32 %5, 0
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %6 = trunc i64 %3 to i32
  %7 = zext i32 %6 to i64
  store i64 %7, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run20()$$23"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_regex_object(i8* inttoptr (i64 52656760 to i8*), i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0)
  call void @push_jit_object(i32 %0)
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run21()$$24"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_regex_object(i8* inttoptr (i64 52656764 to i8*), i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0)
  call void @push_jit_object(i32 %0)
  %1 = call i32 @create_regex_object(i8* inttoptr (i64 52656768 to i8*), i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0)
  call void @push_jit_object(i32 %1)
  %2 = call i32 @regex_equals(i32 %0, i32 %1)
  %3 = zext i32 %2 to i64
  store i64 %3, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run22()$$25"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_regex_object(i8* inttoptr (i64 52656772 to i8*), i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0)
  call void @push_jit_object(i32 %0)
  %1 = call i32 @create_regex_object(i8* inttoptr (i64 52656776 to i8*), i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0)
  call void @push_jit_object(i32 %1)
  %2 = call i32 @regex_equals(i32 %0, i32 %1)
  %bool_value_reverse = icmp eq i32 %2, 0
  %3 = zext i1 %bool_value_reverse to i64
  store i64 %3, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run23()$$26"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$2$" = alloca i64
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i64 0, i64* %"lvar$2$"
  store i64 0, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$1$"
  store i64 1, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$2$"
  store i64 2, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  store i64 3, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run24()$$27"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$1$"
  store i64 1, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  store i64 1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run25()$$28"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$2$" = alloca i64
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i64 0, i64* %"lvar$2$"
  store i64 0, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$1$"
  store i64 123, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$2$"
  store i64 123, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  store i64 246, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run26()$$29"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$2$" = alloca i64
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i64 0, i64* %"lvar$2$"
  store i64 0, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$1$"
  store i64 123, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$2$"
  store i64 23, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  store i64 100, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run27()$$30"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$2$" = alloca i64
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i64 0, i64* %"lvar$2$"
  store i64 0, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$1$"
  store i64 1, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$2$"
  store i64 2, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  store i64 2, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run28()$$31"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$2$" = alloca i64
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i64 0, i64* %"lvar$2$"
  store i64 0, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$1$"
  store i64 9, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$2$"
  store i64 3, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  store i64 3, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run29()$$32"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$2$" = alloca i64
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i64 0, i64* %"lvar$2$"
  store i64 0, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$1$"
  store i64 5, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$2$"
  store i64 3, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  store i64 2, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run30()$$33"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  store i64 2, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run31()$$34"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  store i64 1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run32()$$35"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  store i64 1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run33()$$36"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  store i64 3, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run34()$$37"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  store i64 6, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run35()$$38"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  store i64 3, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run36()$$39"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  store i64 254, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run37()$$40"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  store i64 4294967294, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run38()$$41"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  store i64 4612136378497499136, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run39()$$42"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  store i64 4612136378497499136, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run40()$$43"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  store i64 4616189618054758400, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run41()$$44"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  store i64 1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run42()$$45"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  store i64 1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run43()$$46"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  store i64 1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run44()$$47"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  store i64 1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run45()$$48"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  store i64 1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run46()$$49"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  store i64 1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run47()$$50"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  store i64 1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run48()$$51"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  store i64 1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run49()$$52"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run49_5(pointer)$$53"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value1 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value1, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %0 = inttoptr i64 %stack_offset_value1 to i8*
  %addtmp = getelementptr i8, i8* %0, i64 1
  store i64 0, i64* %"lvar$1$"
  %1 = ptrtoint i8* %addtmp to i64
  store i64 %1, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %2 = inttoptr i64 %1 to i8*
  %addtmp4 = getelementptr i8, i8* %2, i64 2
  store i64 0, i64* %"lvar$1$"
  %3 = ptrtoint i8* %addtmp4 to i64
  store i64 %3, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  store i64 1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run50()$$54"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_string_object(i8* inttoptr (i64 52656780 to i8*))
  call void @push_jit_object(i32 %0)
  store i64 0, i64* %"lvar$1$"
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %2 = trunc i64 %1 to i32
  %ifcond = icmp eq i32 %2, 0
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry
  %3 = call i32 @entry_exception_object_with_class_name2(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i8* inttoptr (i64 18179072 to i8*), i8* inttoptr (i64 16041118 to i8*))
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %4 = call i32 @get_string_object_of_object_name(i32 %2)
  call void @push_jit_object(i32 %4)
  %5 = zext i32 %4 to i64
  store i64 %5, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run51()$$55"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_string_object(i8* inttoptr (i64 52656784 to i8*))
  call void @push_jit_object(i32 %0)
  store i64 0, i64* %"lvar$1$"
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %2 = trunc i64 %1 to i32
  %ifcond = icmp eq i32 %2, 0
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry
  %3 = call i32 @entry_exception_object_with_class_name2(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i8* inttoptr (i64 18179072 to i8*), i8* inttoptr (i64 16041118 to i8*))
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %4 = call i32 @get_string_object_of_object_name(i32 %2)
  call void @push_jit_object(i32 %4)
  %5 = call i32 @create_string_object(i8* inttoptr (i64 52656788 to i8*))
  call void @push_jit_object(i32 %5)
  %6 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52656796 to i8*))
  %ifcond4 = icmp eq i64* %6, null
  br i1 %ifcond4, label %then_block2, label %entry_ifend3

then_block2:                                      ; preds = %entry_ifend
  ret i32 0

entry_ifend3:                                     ; preds = %entry_ifend
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value7 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value7, align 8
  store i64 %1, i64* %lvar_offset_value7, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %7 = zext i32 %4 to i64
  store i64 %7, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value8 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value8, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  %8 = zext i32 %5 to i64
  store i64 %8, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value10 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value11 = getelementptr i64, i64* %loaded_stack_ptr_address_value10, i64 1
  store i64* %inc_ptr_value11, i64** %stack_ptr_address
  %9 = call i32 @call_invoke_method(i64* %6, i32 14, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond12 = icmp ne i32 %9, 1
  br i1 %ifcond12, label %then_block13, label %entry_ifend14

then_block13:                                     ; preds = %entry_ifend3
  %10 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend14:                                    ; preds = %entry_ifend3
  %stack_offset_value15 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value15, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value16 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value16, i64* %"lvar$1$", align 8
  %loaded_stack_ptr_address_value17 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value17, i64 -1
  %stack_pointer_offset_value18 = load i64, i64* %stack_pointer_offset_value, align 8
  %11 = trunc i64 %stack_pointer_offset_value18 to i32
  call void @push_jit_object(i32 %11)
  %loaded_stack_ptr_address_value19 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value19, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 %stack_pointer_offset_value18, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run52()$$56"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_string_object(i8* inttoptr (i64 52656804 to i8*))
  call void @push_jit_object(i32 %0)
  store i64 0, i64* %"lvar$1$"
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %2 = trunc i64 %1 to i32
  %3 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52656808 to i8*))
  %ifcond = icmp eq i64* %3, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %ifcond4 = icmp eq i32 %2, 0
  br i1 %ifcond4, label %then_block2, label %entry_ifend3

then_block2:                                      ; preds = %entry_ifend
  %4 = call i32 @entry_exception_object_with_class_name2(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i8* inttoptr (i64 18179072 to i8*), i8* inttoptr (i64 16041144 to i8*))
  ret i32 0

entry_ifend3:                                     ; preds = %entry_ifend
  %5 = call i32 @object_implements_interface(i32 %2, i64* %3)
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run53()$$57"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52656816 to i8*))
  %ifcond = icmp eq i64* %0, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %then_block28, %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %1 = call i32 @create_object(i64* %0)
  call void @push_jit_object(i32 %1)
  %2 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52656832 to i8*))
  %ifcond3 = icmp eq i64* %2, null
  br i1 %ifcond3, label %then_block, label %entry_ifend2

entry_ifend2:                                     ; preds = %entry_ifend
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value6 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value6, align 8
  store i64 0, i64* %lvar_offset_value6, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %3 = zext i32 %1 to i64
  store i64 %3, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value7 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value7, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  %4 = call i32 @call_invoke_method(i64* %2, i32 0, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond8 = icmp ne i32 %4, 1
  br i1 %ifcond8, label %then_block9, label %entry_ifend10

then_block9:                                      ; preds = %entry_ifend2
  %5 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend10:                                    ; preds = %entry_ifend2
  %stack_offset_value11 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value11, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value12 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value12, i64* %"lvar$1$", align 8
  %loaded_stack_ptr_address_value13 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value13, i64 -1
  %stack_pointer_offset_value14 = load i64, i64* %stack_pointer_offset_value, align 8
  %6 = trunc i64 %stack_pointer_offset_value14 to i32
  call void @push_jit_object(i32 %6)
  %loaded_stack_ptr_address_value15 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value15, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_pointer_offset_value14, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value11, i64* %lvar, align 8
  store i64 0, i64* %lvar_offset_value6, align 8
  store i64 %stack_pointer_offset_value14, i64* %lvar_offset_value6, align 8
  %loaded_stack_ptr_address_value21 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value21, align 8
  %7 = zext i32 %6 to i64
  store i64 %7, i64* %loaded_stack_ptr_address_value21, align 8
  %loaded_stack_ptr_address_value22 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value23 = getelementptr i64, i64* %loaded_stack_ptr_address_value22, i64 1
  store i64* %inc_ptr_value23, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value23, align 8
  store i64 123, i64* %inc_ptr_value23, align 8
  %loaded_stack_ptr_address_value25 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value26 = getelementptr i64, i64* %loaded_stack_ptr_address_value25, i64 1
  store i64* %inc_ptr_value26, i64** %stack_ptr_address
  %8 = call i32 @call_invoke_virtual_method(i32 12608, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info, i64* %constant, i32 %6)
  %ifcond27 = icmp ne i32 %8, 1
  br i1 %ifcond27, label %then_block28, label %entry_ifend29

then_block28:                                     ; preds = %entry_ifend10
  %9 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend29:                                    ; preds = %entry_ifend10
  %stack_offset_value33 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value33, i64* %"lvar$0$", align 8
  %stack_offset_value35 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value35, i64* %"lvar$1$", align 8
  %loaded_stack_ptr_address_value36 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value37 = getelementptr i64, i64* %loaded_stack_ptr_address_value36, i64 -1
  %stack_pointer_offset_value38 = load i64, i64* %stack_pointer_offset_value37, align 8
  %10 = trunc i64 %stack_pointer_offset_value38 to i32
  call void @push_jit_object(i32 %10)
  %loaded_stack_ptr_address_value39 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value40 = getelementptr i64, i64* %loaded_stack_ptr_address_value39, i64 1
  store i64* %dec_ptr_value40, i64** %stack_ptr_address
  %addtmp = add nuw i32 %10, 123
  %11 = zext i32 %addtmp to i64
  store i64 %11, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run53_5()$$58"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52656860 to i8*))
  %ifcond = icmp eq i64* %0, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %then_block25, %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %1 = call i32 @create_object(i64* %0)
  call void @push_jit_object(i32 %1)
  %2 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52656876 to i8*))
  %ifcond3 = icmp eq i64* %2, null
  br i1 %ifcond3, label %then_block, label %entry_ifend2

entry_ifend2:                                     ; preds = %entry_ifend
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value6 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value6, align 8
  store i64 0, i64* %lvar_offset_value6, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %3 = zext i32 %1 to i64
  store i64 %3, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value7 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value7, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  %4 = call i32 @call_invoke_method(i64* %2, i32 0, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond8 = icmp ne i32 %4, 1
  br i1 %ifcond8, label %then_block9, label %entry_ifend10

then_block9:                                      ; preds = %entry_ifend2
  %5 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend10:                                    ; preds = %entry_ifend2
  %stack_offset_value11 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value11, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value12 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value12, i64* %"lvar$1$", align 8
  %loaded_stack_ptr_address_value13 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value13, i64 -1
  %stack_pointer_offset_value14 = load i64, i64* %stack_pointer_offset_value, align 8
  %6 = trunc i64 %stack_pointer_offset_value14 to i32
  call void @push_jit_object(i32 %6)
  %loaded_stack_ptr_address_value15 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value15, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_pointer_offset_value14, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value11, i64* %lvar, align 8
  store i64 0, i64* %lvar_offset_value6, align 8
  store i64 %stack_pointer_offset_value14, i64* %lvar_offset_value6, align 8
  %loaded_stack_ptr_address_value21 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value21, align 8
  %7 = zext i32 %6 to i64
  store i64 %7, i64* %loaded_stack_ptr_address_value21, align 8
  %loaded_stack_ptr_address_value22 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value23 = getelementptr i64, i64* %loaded_stack_ptr_address_value22, i64 1
  store i64* %inc_ptr_value23, i64** %stack_ptr_address
  %8 = call i32 @call_invoke_virtual_method(i32 12652, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info, i64* %constant, i32 %6)
  %ifcond24 = icmp ne i32 %8, 1
  br i1 %ifcond24, label %then_block25, label %entry_ifend26

then_block25:                                     ; preds = %entry_ifend10
  %9 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend26:                                    ; preds = %entry_ifend10
  %stack_offset_value30 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value30, i64* %"lvar$0$", align 8
  %stack_offset_value32 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value32, i64* %"lvar$1$", align 8
  %loaded_stack_ptr_address_value33 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value34 = getelementptr i64, i64* %loaded_stack_ptr_address_value33, i64 -1
  %stack_pointer_offset_value35 = load i64, i64* %stack_pointer_offset_value34, align 8
  %10 = trunc i64 %stack_pointer_offset_value35 to i32
  call void @push_jit_object(i32 %10)
  %loaded_stack_ptr_address_value36 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value37 = getelementptr i64, i64* %loaded_stack_ptr_address_value36, i64 1
  store i64* %dec_ptr_value37, i64** %stack_ptr_address
  store i64 0, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run54()$$59"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_string_object(i8* inttoptr (i64 52656904 to i8*))
  call void @push_jit_object(i32 %0)
  %1 = call i32 @create_string_object(i8* inttoptr (i64 52656908 to i8*))
  call void @push_jit_object(i32 %1)
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %2 = zext i32 %0 to i64
  store i64 %2, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value2 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value2, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  %3 = zext i32 %1 to i64
  store i64 %3, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value4 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value5 = getelementptr i64, i64* %loaded_stack_ptr_address_value4, i64 1
  store i64* %inc_ptr_value5, i64** %stack_ptr_address
  %4 = call i32 @call_invoke_dynamic_method(i32 12680, i32 12688, i32 2, i32 1, i32 0, i32 1, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info, i64* %code, i64* %constant)
  %ifcond = icmp ne i32 %4, 1
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry
  %5 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %stack_offset_value6 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value6, i64* %"lvar$0$", align 8
  %loaded_stack_ptr_address_value7 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value7, i64 -1
  %stack_pointer_offset_value8 = load i64, i64* %stack_pointer_offset_value, align 8
  %6 = trunc i64 %stack_pointer_offset_value8 to i32
  call void @push_jit_object(i32 %6)
  %loaded_stack_ptr_address_value9 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value9, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run55(int,int,lambda)$$60"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$3$" = alloca i64
  %"lvar$2$" = alloca i64
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value1 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value1, i64* %"lvar$1$", align 8
  %stack_offset_address_value2 = getelementptr i64, i64* %stack, i64 2
  %stack_offset_value3 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value3, i64* %"lvar$2$", align 8
  %stack_offset_address_value4 = getelementptr i64, i64* %stack, i64 3
  %stack_offset_value5 = load i64, i64* %stack_offset_address_value4, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value5, i64* %"lvar$3$", align 8
  store i32 0, i32* @gSigInt
  %0 = trunc i64 %stack_offset_value5 to i32
  %1 = trunc i64 %stack_offset_value1 to i32
  %2 = trunc i64 %stack_offset_value3 to i32
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %3 = zext i32 %0 to i64
  store i64 %3, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value9 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value9, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  %4 = zext i32 %1 to i64
  store i64 %4, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value11 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value12 = getelementptr i64, i64* %loaded_stack_ptr_address_value11, i64 1
  store i64* %inc_ptr_value12, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value12, align 8
  %5 = zext i32 %2 to i64
  store i64 %5, i64* %inc_ptr_value12, align 8
  %loaded_stack_ptr_address_value14 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value15 = getelementptr i64, i64* %loaded_stack_ptr_address_value14, i64 1
  store i64* %inc_ptr_value15, i64** %stack_ptr_address
  %6 = call i32 @invoke_block_in_jit(i32 2, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond = icmp eq i32 %6, 0
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %loaded_stack_ptr_address_value16 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value16, i64 -1
  %stack_pointer_offset_value17 = load i64, i64* %stack_pointer_offset_value, align 8
  %7 = trunc i64 %stack_pointer_offset_value17 to i32
  call void @push_jit_object(i32 %7)
  %loaded_stack_ptr_address_value18 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value18, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 %stack_pointer_offset_value17, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run56()$$61"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = trunc i64 %stack_offset_value to i32
  %1 = call i32 @store_field(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %0, i64 777, i32 0)
  %ifcond = icmp eq i32 %1, 0
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  store i64 0, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run57()$$62"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = trunc i64 %stack_offset_value to i32
  %1 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %0, i32 0)
  %2 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %1, i32 0, i32 0
  %3 = load i64, i64* %2, align 4
  %4 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %1, i32 0, i32 1
  %5 = load i32, i32* %4, align 4
  %ifcond = icmp eq i32 %5, 0
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %6 = trunc i64 %3 to i32
  %7 = zext i32 %6 to i64
  store i64 %7, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run58()$$63"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call %clvalue_and_bool_struct* @load_class_field(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 0, i32 12692, i64* %constant)
  %1 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %0, i32 0, i32 0
  %2 = load i64, i64* %1, align 4
  %3 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %0, i32 0, i32 1
  %4 = load i32, i32* %3, align 4
  %ifcond = icmp eq i32 %4, 0
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %5 = trunc i64 %2 to i32
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run59()$$64"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @store_class_field(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 0, i32 12700, i64* %constant, i64 777)
  %ifcond = icmp eq i32 %0, 0
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  store i32 0, i32* @gSigInt
  %1 = call %clvalue_and_bool_struct* @load_class_field(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 0, i32 12708, i64* %constant)
  %2 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %1, i32 0, i32 0
  %3 = load i64, i64* %2, align 4
  %4 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %1, i32 0, i32 1
  %5 = load i32, i32* %4, align 4
  %ifcond3 = icmp eq i32 %5, 0
  br i1 %ifcond3, label %then_block, label %entry_ifend2

entry_ifend2:                                     ; preds = %entry_ifend
  %6 = trunc i64 %3 to i32
  %7 = zext i32 %6 to i64
  store i64 %7, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run60()$$65"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$2$" = alloca i64
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i64 0, i64* %"lvar$2$"
  store i64 0, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$1$"
  store i64 123, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %gepaddtmp = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %"lvar$2$"
  %0 = ptrtoint i64* %gepaddtmp to i64
  store i64 %0, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  %1 = inttoptr i64 %0 to i8*
  store i64 %stack_offset_value, i64* %lvar, align 8
  store i64 123, i64* %gepaddtmp, align 8
  %lvar_offset_value6 = getelementptr i64, i64* %lvar, i64 2
  store i64 %0, i64* %lvar_offset_value6, align 8
  %2 = bitcast i8* %1 to i32*
  store i32 245, i32* %2, align 4
  %stack_offset_value7 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value7, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value8 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value8, i64* %"lvar$1$", align 8
  %stack_offset_address_value9 = getelementptr i64, i64* %stack, i64 2
  %stack_offset_value10 = load i64, i64* %stack_offset_address_value9, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value10, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  %3 = trunc i64 %stack_offset_value8 to i32
  %4 = zext i32 %3 to i64
  store i64 %4, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run61()$$66"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$2$" = alloca i64
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i64 0, i64* %"lvar$2$"
  store i64 0, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$1$"
  store i64 123, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %gepaddtmp = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %"lvar$2$"
  %0 = ptrtoint i64* %gepaddtmp to i64
  store i64 %0, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  %1 = inttoptr i64 %0 to i8*
  %2 = bitcast i8* %1 to i64*
  store i64 245, i64* %2, align 8
  %stack_offset_value2 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value2, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value3 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value3, i64* %"lvar$1$", align 8
  %stack_offset_address_value4 = getelementptr i64, i64* %stack, i64 2
  %stack_offset_value5 = load i64, i64* %stack_offset_address_value4, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value5, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  store i64 %stack_offset_value3, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run62()$$67"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$2$" = alloca i64
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i64 0, i64* %"lvar$2$"
  store i64 0, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$1$"
  store i64 4638362809345140326, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %gepaddtmp = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %"lvar$2$"
  %0 = ptrtoint i64* %gepaddtmp to i64
  store i64 %0, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  %1 = inttoptr i64 %0 to i8*
  %2 = bitcast i8* %1 to double*
  store double 2.451000e+02, double* %2, align 8
  %stack_offset_value2 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value2, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value3 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value3, i64* %"lvar$1$", align 8
  %stack_offset_address_value4 = getelementptr i64, i64* %stack, i64 2
  %stack_offset_value5 = load i64, i64* %stack_offset_address_value4, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value5, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  %3 = uitofp i64 %stack_offset_value3 to double
  %4 = bitcast double %3 to i64
  store i64 %4, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run63()$$68"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52656956 to i8*))
  %ifcond = icmp eq i64* %0, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry_ifend3, %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %1 = call i32 @create_array_object(i64* %0, i32 5)
  call void @push_jit_object(i32 %1)
  store i64 0, i64* %"lvar$1$"
  %2 = zext i32 %1 to i64
  store i64 %2, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %3 = trunc i64 %2 to i32
  %4 = call i32 @run_store_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %3, i32 1, i64 111)
  %ifcond4 = icmp eq i32 %4, 0
  br i1 %ifcond4, label %then_block, label %entry_ifend3

entry_ifend3:                                     ; preds = %entry_ifend
  store i32 0, i32* @gSigInt
  %5 = call i32 @run_store_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %3, i32 2, i64 222)
  %ifcond8 = icmp eq i32 %5, 0
  br i1 %ifcond8, label %then_block, label %entry_ifend7

entry_ifend7:                                     ; preds = %entry_ifend3
  store i32 0, i32* @gSigInt
  %6 = call i32 @get_array_length(i32 %3)
  %7 = zext i32 %6 to i64
  store i64 %7, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run64()$$69"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52656960 to i8*))
  %ifcond = icmp eq i64* %0, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry_ifend7, %entry_ifend3, %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %1 = call i32 @create_array_object(i64* %0, i32 5)
  call void @push_jit_object(i32 %1)
  store i64 0, i64* %"lvar$1$"
  %2 = zext i32 %1 to i64
  store i64 %2, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %3 = trunc i64 %2 to i32
  %4 = call i32 @run_store_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %3, i32 1, i64 111)
  %ifcond4 = icmp eq i32 %4, 0
  br i1 %ifcond4, label %then_block, label %entry_ifend3

entry_ifend3:                                     ; preds = %entry_ifend
  store i32 0, i32* @gSigInt
  %5 = call i32 @run_store_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %3, i32 2, i64 222)
  %ifcond8 = icmp eq i32 %5, 0
  br i1 %ifcond8, label %then_block, label %entry_ifend7

entry_ifend7:                                     ; preds = %entry_ifend3
  store i32 0, i32* @gSigInt
  %6 = call %clvalue_and_bool_struct* @load_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %3, i32 1)
  %7 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %6, i32 0, i32 0
  %8 = load i64, i64* %7, align 4
  %9 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %6, i32 0, i32 1
  %10 = load i32, i32* %9, align 4
  %ifcond12 = icmp eq i32 %10, 0
  br i1 %ifcond12, label %then_block, label %entry_ifend11

entry_ifend11:                                    ; preds = %entry_ifend7
  %11 = trunc i64 %8 to i32
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run65()$$70"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @char_uppercase(i32 97)
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run66()$$71"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @char_lowercase(i32 65)
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run67()$$72"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_regex_object(i8* inttoptr (i64 52656964 to i8*), i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0)
  call void @push_jit_object(i32 %0)
  %1 = call i32 @get_regex_global(i32 %0)
  %2 = zext i32 %1 to i64
  store i64 %2, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run68()$$73"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_regex_object(i8* inttoptr (i64 52656968 to i8*), i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0)
  call void @push_jit_object(i32 %0)
  %1 = call i32 @get_regex_global(i32 %0)
  %2 = zext i32 %1 to i64
  store i64 %2, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run69()$$74"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_regex_object(i8* inttoptr (i64 52656972 to i8*), i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0)
  call void @push_jit_object(i32 %0)
  %1 = call i32 @get_regex_ignorecase(i32 %0)
  %2 = zext i32 %1 to i64
  store i64 %2, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run70()$$75"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_regex_object(i8* inttoptr (i64 52656976 to i8*), i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0)
  call void @push_jit_object(i32 %0)
  %1 = call i32 @get_regex_ignorecase(i32 %0)
  %2 = zext i32 %1 to i64
  store i64 %2, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run70_5()$$76"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  store i64 1, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value1 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value1, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  store i64 2, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value3 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value4 = getelementptr i64, i64* %loaded_stack_ptr_address_value3, i64 1
  store i64* %inc_ptr_value4, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value4, align 8
  store i64 3, i64* %inc_ptr_value4, align 8
  %loaded_stack_ptr_address_value6 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value7 = getelementptr i64, i64* %loaded_stack_ptr_address_value6, i64 1
  store i64* %inc_ptr_value7, i64** %stack_ptr_address
  %0 = call %clvalue_and_bool_struct* @run_create_array(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 3, i32 12740, i64* %constant)
  %1 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %0, i32 0, i32 0
  %2 = load i64, i64* %1, align 4
  %3 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %0, i32 0, i32 1
  %4 = load i32, i32* %3, align 4
  %ifcond = icmp eq i32 %4, 0
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %5 = trunc i64 %2 to i32
  call void @push_jit_object(i32 %5)
  %loaded_stack_ptr_address_value8 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value8, i64 3
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 %2, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run70_7()$$77"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_integer(i32 1)
  call void @push_jit_object(i32 %0)
  %1 = call i32 @create_integer(i32 2)
  call void @push_jit_object(i32 %1)
  %2 = call i32 @create_integer(i32 3)
  call void @push_jit_object(i32 %2)
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %3 = zext i32 %0 to i64
  store i64 %3, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value1 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value1, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  %4 = zext i32 %1 to i64
  store i64 %4, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value3 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value4 = getelementptr i64, i64* %loaded_stack_ptr_address_value3, i64 1
  store i64* %inc_ptr_value4, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value4, align 8
  %5 = zext i32 %2 to i64
  store i64 %5, i64* %inc_ptr_value4, align 8
  %loaded_stack_ptr_address_value6 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value7 = getelementptr i64, i64* %loaded_stack_ptr_address_value6, i64 1
  store i64* %inc_ptr_value7, i64** %stack_ptr_address
  %6 = call %clvalue_and_bool_struct* @run_create_carray(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 3, i32 12744, i64* %constant)
  %7 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %6, i32 0, i32 0
  %8 = load i64, i64* %7, align 4
  %9 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %6, i32 0, i32 1
  %10 = load i32, i32* %9, align 4
  %ifcond = icmp eq i32 %10, 0
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %11 = trunc i64 %8 to i32
  call void @push_jit_object(i32 %11)
  store i64 %8, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run71()$$78"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_integer(i32 1)
  call void @push_jit_object(i32 %0)
  %1 = call i32 @create_integer(i32 2)
  call void @push_jit_object(i32 %1)
  %2 = call i32 @create_integer(i32 3)
  call void @push_jit_object(i32 %2)
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %3 = zext i32 %0 to i64
  store i64 %3, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value1 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value1, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  %4 = zext i32 %1 to i64
  store i64 %4, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value3 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value4 = getelementptr i64, i64* %loaded_stack_ptr_address_value3, i64 1
  store i64* %inc_ptr_value4, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value4, align 8
  %5 = zext i32 %2 to i64
  store i64 %5, i64* %inc_ptr_value4, align 8
  %loaded_stack_ptr_address_value6 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value7 = getelementptr i64, i64* %loaded_stack_ptr_address_value6, i64 1
  store i64* %inc_ptr_value7, i64** %stack_ptr_address
  %6 = call %clvalue_and_bool_struct* @run_create_equalable_carray(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 3, i32 12752, i64* %constant)
  %7 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %6, i32 0, i32 0
  %8 = load i64, i64* %7, align 4
  %9 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %6, i32 0, i32 1
  %10 = load i32, i32* %9, align 4
  %ifcond = icmp eq i32 %10, 0
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %11 = trunc i64 %8 to i32
  call void @push_jit_object(i32 %11)
  store i64 %8, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run71_1()$$79"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_integer(i32 1)
  call void @push_jit_object(i32 %0)
  %1 = call i32 @create_integer(i32 2)
  call void @push_jit_object(i32 %1)
  %2 = call i32 @create_integer(i32 3)
  call void @push_jit_object(i32 %2)
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %3 = zext i32 %0 to i64
  store i64 %3, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value1 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value1, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  %4 = zext i32 %1 to i64
  store i64 %4, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value3 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value4 = getelementptr i64, i64* %loaded_stack_ptr_address_value3, i64 1
  store i64* %inc_ptr_value4, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value4, align 8
  %5 = zext i32 %2 to i64
  store i64 %5, i64* %inc_ptr_value4, align 8
  %loaded_stack_ptr_address_value6 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value7 = getelementptr i64, i64* %loaded_stack_ptr_address_value6, i64 1
  store i64* %inc_ptr_value7, i64** %stack_ptr_address
  %6 = call %clvalue_and_bool_struct* @run_create_list(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 3, i32 12760, i64* %constant)
  %7 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %6, i32 0, i32 0
  %8 = load i64, i64* %7, align 4
  %9 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %6, i32 0, i32 1
  %10 = load i32, i32* %9, align 4
  %ifcond = icmp eq i32 %10, 0
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %11 = trunc i64 %8 to i32
  call void @push_jit_object(i32 %11)
  store i64 %8, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run71_2()$$80"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_integer(i32 1)
  call void @push_jit_object(i32 %0)
  %1 = call i32 @create_integer(i32 2)
  call void @push_jit_object(i32 %1)
  %2 = call i32 @create_integer(i32 3)
  call void @push_jit_object(i32 %2)
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %3 = zext i32 %0 to i64
  store i64 %3, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value1 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value1, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  %4 = zext i32 %1 to i64
  store i64 %4, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value3 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value4 = getelementptr i64, i64* %loaded_stack_ptr_address_value3, i64 1
  store i64* %inc_ptr_value4, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value4, align 8
  %5 = zext i32 %2 to i64
  store i64 %5, i64* %inc_ptr_value4, align 8
  %loaded_stack_ptr_address_value6 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value7 = getelementptr i64, i64* %loaded_stack_ptr_address_value6, i64 1
  store i64* %inc_ptr_value7, i64** %stack_ptr_address
  %6 = call %clvalue_and_bool_struct* @run_create_equalable_list(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 3, i32 12768, i64* %constant)
  %7 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %6, i32 0, i32 0
  %8 = load i64, i64* %7, align 4
  %9 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %6, i32 0, i32 1
  %10 = load i32, i32* %9, align 4
  %ifcond = icmp eq i32 %10, 0
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %11 = trunc i64 %8 to i32
  call void @push_jit_object(i32 %11)
  store i64 %8, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run71_3()$$81"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_integer(i32 1)
  call void @push_jit_object(i32 %0)
  %1 = call i32 @create_string_object(i8* inttoptr (i64 52657016 to i8*))
  call void @push_jit_object(i32 %1)
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %2 = zext i32 %0 to i64
  store i64 %2, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value1 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value1, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  %3 = zext i32 %1 to i64
  store i64 %3, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value3 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value4 = getelementptr i64, i64* %loaded_stack_ptr_address_value3, i64 1
  store i64* %inc_ptr_value4, i64** %stack_ptr_address
  %4 = call %clvalue_and_bool_struct* @run_create_tuple(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 2)
  %5 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %4, i32 0, i32 0
  %6 = load i64, i64* %5, align 4
  %7 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %4, i32 0, i32 1
  %8 = load i32, i32* %7, align 4
  %ifcond = icmp eq i32 %8, 0
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %9 = trunc i64 %6 to i32
  call void @push_jit_object(i32 %9)
  store i64 %6, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run71_4()$$82"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_string_object(i8* inttoptr (i64 52657020 to i8*))
  call void @push_jit_object(i32 %0)
  %1 = call i32 @create_integer(i32 1)
  call void @push_jit_object(i32 %1)
  %2 = call i32 @create_string_object(i8* inttoptr (i64 52657024 to i8*))
  call void @push_jit_object(i32 %2)
  %3 = call i32 @create_integer(i32 2)
  call void @push_jit_object(i32 %3)
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %4 = zext i32 %0 to i64
  store i64 %4, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value1 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value1, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  %5 = zext i32 %1 to i64
  store i64 %5, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value3 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value4 = getelementptr i64, i64* %loaded_stack_ptr_address_value3, i64 1
  store i64* %inc_ptr_value4, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value4, align 8
  %6 = zext i32 %2 to i64
  store i64 %6, i64* %inc_ptr_value4, align 8
  %loaded_stack_ptr_address_value6 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value7 = getelementptr i64, i64* %loaded_stack_ptr_address_value6, i64 1
  store i64* %inc_ptr_value7, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value7, align 8
  %7 = zext i32 %3 to i64
  store i64 %7, i64* %inc_ptr_value7, align 8
  %loaded_stack_ptr_address_value9 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value10 = getelementptr i64, i64* %loaded_stack_ptr_address_value9, i64 1
  store i64* %inc_ptr_value10, i64** %stack_ptr_address
  %8 = call %clvalue_and_bool_struct* @run_create_hash(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 2, i32 12788, i32 12796, i64* %constant)
  %9 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %8, i32 0, i32 0
  %10 = load i64, i64* %9, align 4
  %11 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %8, i32 0, i32 1
  %12 = load i32, i32* %11, align 4
  %ifcond = icmp eq i32 %12, 0
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %13 = trunc i64 %10 to i32
  call void @push_jit_object(i32 %13)
  store i64 %10, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run72()$$83"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @run_create_block_object(i64** %stack_ptr_address, i64* %stack, i64* %constant, i32 12804, i32 36, i32 12840, i32 0, i32 2, i32 0, i32 1, i64* %info)
  call void @push_jit_object(i32 %0)
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run72_5()$$84"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$2$" = alloca i64
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i64 0, i64* %"lvar$2$"
  store i64 0, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657080 to i8*))
  %ifcond = icmp eq i64* %0, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry_ifend26, %entry_ifend22, %entry_ifend12, %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %1 = call i32 @create_object(i64* %0)
  call void @push_jit_object(i32 %1)
  %2 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657096 to i8*))
  %ifcond3 = icmp eq i64* %2, null
  br i1 %ifcond3, label %then_block, label %entry_ifend2

entry_ifend2:                                     ; preds = %entry_ifend
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value6 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value6, align 8
  store i64 0, i64* %lvar_offset_value6, align 8
  %lvar_offset_value8 = getelementptr i64, i64* %lvar, i64 2
  store i64 0, i64* %lvar_offset_value8, align 8
  store i64 0, i64* %lvar_offset_value8, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %3 = zext i32 %1 to i64
  store i64 %3, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value9 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value9, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  %4 = call i32 @call_invoke_method(i64* %2, i32 0, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond10 = icmp ne i32 %4, 1
  br i1 %ifcond10, label %then_block11, label %entry_ifend12

then_block11:                                     ; preds = %entry_ifend2
  %5 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend12:                                    ; preds = %entry_ifend2
  %stack_offset_value13 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value13, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value14 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value14, i64* %"lvar$1$", align 8
  %stack_offset_address_value15 = getelementptr i64, i64* %stack, i64 2
  %stack_offset_value16 = load i64, i64* %stack_offset_address_value15, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value16, i64* %"lvar$2$", align 8
  %loaded_stack_ptr_address_value17 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value17, i64 -1
  %stack_pointer_offset_value18 = load i64, i64* %stack_pointer_offset_value, align 8
  %6 = trunc i64 %stack_pointer_offset_value18 to i32
  call void @push_jit_object(i32 %6)
  %loaded_stack_ptr_address_value19 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value19, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_pointer_offset_value18, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %7 = call i32 @store_field(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %6, i64 123, i32 0)
  %ifcond23 = icmp eq i32 %7, 0
  br i1 %ifcond23, label %then_block, label %entry_ifend22

entry_ifend22:                                    ; preds = %entry_ifend12
  store i32 0, i32* @gSigInt
  %8 = call %pointer_and_bool_struct* @run_load_field_address(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 0, i32 %6)
  %9 = getelementptr inbounds %pointer_and_bool_struct, %pointer_and_bool_struct* %8, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds %pointer_and_bool_struct, %pointer_and_bool_struct* %8, i32 0, i32 1
  %12 = load i32, i32* %11, align 4
  %ifcond27 = icmp eq i32 %12, 0
  br i1 %ifcond27, label %then_block, label %entry_ifend26

entry_ifend26:                                    ; preds = %entry_ifend22
  store i64 0, i64* %"lvar$2$"
  %13 = ptrtoint i8* %10 to i64
  store i64 %13, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  %14 = inttoptr i64 %13 to i8*
  store i64 %stack_offset_value13, i64* %lvar, align 8
  store i64 %stack_pointer_offset_value18, i64* %lvar_offset_value6, align 8
  store i64 %13, i64* %lvar_offset_value8, align 8
  %15 = bitcast i8* %14 to i32*
  store i32 234, i32* %15, align 4
  %stack_offset_value35 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value35, i64* %"lvar$0$", align 8
  %stack_offset_value37 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value37, i64* %"lvar$1$", align 8
  %stack_offset_value39 = load i64, i64* %stack_offset_address_value15, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value39, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  %16 = trunc i64 %stack_offset_value37 to i32
  %17 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %16, i32 0)
  %18 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %17, i32 0, i32 0
  %19 = load i64, i64* %18, align 4
  %20 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %17, i32 0, i32 1
  %21 = load i32, i32* %20, align 4
  %ifcond43 = icmp eq i32 %21, 0
  br i1 %ifcond43, label %then_block, label %entry_ifend42

entry_ifend42:                                    ; preds = %entry_ifend26
  %22 = trunc i64 %19 to i32
  %23 = zext i32 %22 to i64
  store i64 %23, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run72_6()$$85"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$2$" = alloca i64
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i64 0, i64* %"lvar$2$"
  store i64 0, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$1$"
  store i64 123, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %gepaddtmp = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %"lvar$2$"
  %0 = ptrtoint i64* %gepaddtmp to i64
  store i64 %0, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  %1 = inttoptr i64 %0 to i8*
  store i64 %stack_offset_value, i64* %lvar, align 8
  store i64 123, i64* %gepaddtmp, align 8
  %lvar_offset_value6 = getelementptr i64, i64* %lvar, i64 2
  store i64 %0, i64* %lvar_offset_value6, align 8
  %2 = bitcast i8* %1 to i32*
  %llvm_value = load i32, i32* %2, align 4
  %3 = zext i32 %llvm_value to i64
  store i64 %3, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run72_7()$$86"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$2$" = alloca i64
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i64 0, i64* %"lvar$2$"
  store i64 0, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$1$"
  store i64 4638362809345140326, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %gepaddtmp = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %"lvar$2$"
  %0 = ptrtoint i64* %gepaddtmp to i64
  store i64 %0, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  %1 = inttoptr i64 %0 to i8*
  store i64 %stack_offset_value, i64* %lvar, align 8
  store i64 4638362809345140326, i64* %gepaddtmp, align 8
  %lvar_offset_value6 = getelementptr i64, i64* %lvar, i64 2
  store i64 %0, i64* %lvar_offset_value6, align 8
  %2 = bitcast i8* %1 to double*
  %llvm_value = load double, double* %2, align 8
  %3 = bitcast double %llvm_value to i64
  store i64 %3, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run72_8()$$87"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$2$" = alloca i64
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i64 0, i64* %"lvar$2$"
  store i64 0, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$1$"
  store i64 1123431219, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %gepaddtmp = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %"lvar$2$"
  %0 = ptrtoint i64* %gepaddtmp to i64
  store i64 %0, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  %1 = inttoptr i64 %0 to i8*
  store i64 %stack_offset_value, i64* %lvar, align 8
  store i64 1123431219, i64* %gepaddtmp, align 8
  %lvar_offset_value6 = getelementptr i64, i64* %lvar, i64 2
  store i64 %0, i64* %lvar_offset_value6, align 8
  %2 = bitcast i8* %1 to float*
  %llvm_value = load float, float* %2, align 4
  %3 = fpext float %llvm_value to double
  %4 = bitcast double %3 to i64
  store i64 %4, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run72_9()$$88"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$2$" = alloca i64
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i64 0, i64* %"lvar$2$"
  store i64 0, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$1$"
  store i64 123, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %gepaddtmp = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %"lvar$2$"
  %0 = ptrtoint i64* %gepaddtmp to i64
  store i64 %0, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  %1 = inttoptr i64 %0 to i8*
  store i64 %stack_offset_value, i64* %lvar, align 8
  store i64 123, i64* %gepaddtmp, align 8
  %lvar_offset_value6 = getelementptr i64, i64* %lvar, i64 2
  store i64 %0, i64* %lvar_offset_value6, align 8
  %2 = bitcast i8* %1 to i64*
  %llvm_value = load i64, i64* %2, align 8
  store i64 %llvm_value, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run72_a()$$89"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$2$" = alloca i64
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i64 0, i64* %"lvar$2$"
  store i64 0, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$1$"
  store i64 123, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %gepaddtmp = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %"lvar$2$"
  %0 = ptrtoint i64* %gepaddtmp to i64
  store i64 %0, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  %1 = inttoptr i64 %0 to i8*
  store i64 %stack_offset_value, i64* %lvar, align 8
  store i64 123, i64* %gepaddtmp, align 8
  %lvar_offset_value6 = getelementptr i64, i64* %lvar, i64 2
  store i64 %0, i64* %lvar_offset_value6, align 8
  %llvm_value = load i8, i8* %1, align 1
  %2 = zext i8 %llvm_value to i64
  store i64 %2, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run73()$$90"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_integer(i32 12)
  call void @push_jit_object(i32 %0)
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run74()$$91"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_integer(i32 123)
  call void @push_jit_object(i32 %0)
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run75()$$92"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_integer(i32 123)
  call void @push_jit_object(i32 %0)
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run76()$$93"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_integer(i32 123)
  call void @push_jit_object(i32 %0)
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run77()$$94"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_integer(i32 65)
  call void @push_jit_object(i32 %0)
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run78()$$95"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_integer(i32 1)
  call void @push_jit_object(i32 %0)
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run78_1()$$96"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_uinteger(i32 123)
  call void @push_jit_object(i32 %0)
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run78_2()$$97"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_uinteger(i32 123)
  call void @push_jit_object(i32 %0)
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run78_3()$$98"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_integer(i32 -123)
  call void @push_jit_object(i32 %0)
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run79()$$99"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_byte(i8 123)
  call void @push_jit_object(i32 %0)
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run80()$$100"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_byte(i8 123)
  call void @push_jit_object(i32 %0)
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run80_1()$$101"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_byte(i8 -123)
  call void @push_jit_object(i32 %0)
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run81()$$102"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_ubyte(i8 123)
  call void @push_jit_object(i32 %0)
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run82()$$103"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_ubyte(i8 123)
  call void @push_jit_object(i32 %0)
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run82_1()$$104"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_short(i16 123)
  call void @push_jit_object(i32 %0)
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run82_2()$$105"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_short(i16 123)
  call void @push_jit_object(i32 %0)
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run82_3()$$106"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_ushort(i16 123)
  call void @push_jit_object(i32 %0)
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run82_4()$$107"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_ushort(i16 123)
  call void @push_jit_object(i32 %0)
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run82_5()$$108"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_short(i16 -123)
  call void @push_jit_object(i32 %0)
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run83()$$109"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_ulong(i64 123)
  call void @push_jit_object(i32 %0)
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run84()$$110"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_long(i64 123456)
  call void @push_jit_object(i32 %0)
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run85()$$111"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_float(float 1.230000e+02)
  call void @push_jit_object(i32 %0)
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run86()$$112"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_float(float 0x405EC66660000000)
  call void @push_jit_object(i32 %0)
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run87()$$113"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_float(float 0x405EC66660000000)
  call void @push_jit_object(i32 %0)
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run87_1()$$114"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_float(float 1.230000e+02)
  call void @push_jit_object(i32 %0)
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run87_2()$$115"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_float(float -1.230000e+02)
  call void @push_jit_object(i32 %0)
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run88()$$116"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_double(double 1.230000e+02)
  call void @push_jit_object(i32 %0)
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run89()$$117"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_double(double 0x405EC66660000000)
  call void @push_jit_object(i32 %0)
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run90()$$118"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_double(double 1.231000e+02)
  call void @push_jit_object(i32 %0)
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run90_1()$$119"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_double(double 1.230000e+02)
  call void @push_jit_object(i32 %0)
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run90_2()$$120"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_double(double -1.230000e+02)
  call void @push_jit_object(i32 %0)
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run91(pointer)$$121"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value1 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value1, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %0 = inttoptr i64 %stack_offset_value1 to i8*
  %1 = call i32 @create_pointer(i8* %0)
  call void @push_jit_object(i32 %1)
  %2 = zext i32 %1 to i64
  store i64 %2, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run92()$$122"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_bool(i32 1)
  call void @push_jit_object(i32 %0)
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run92_1()$$123"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_char(i32 65)
  call void @push_jit_object(i32 %0)
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run92_2()$$124"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_char(i32 65)
  call void @push_jit_object(i32 %0)
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run93_1()$$125"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @run_int_to_string_cast(i32 123)
  call void @push_jit_object(i32 %0)
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run93_2()$$126"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @run_long_to_string_cast(i64 123)
  call void @push_jit_object(i32 %0)
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run93_3()$$127"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @run_int_to_string_cast(i32 123)
  call void @push_jit_object(i32 %0)
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run93_4()$$128"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @run_ulong_to_string_cast(i64 123)
  call void @push_jit_object(i32 %0)
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run93_5()$$129"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @run_uint_to_string_cast(i32 123)
  call void @push_jit_object(i32 %0)
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run93_6()$$130"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @run_int_to_string_cast(i32 -123)
  call void @push_jit_object(i32 %0)
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run93_7()$$131"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @run_double_to_string_cast(double 1.231000e+02)
  call void @push_jit_object(i32 %0)
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run93_8()$$132"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @run_float_to_string_cast(float 0x405EC66660000000)
  call void @push_jit_object(i32 %0)
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run93()$$133"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @run_double_to_string_cast(double 1.100000e+00)
  call void @push_jit_object(i32 %0)
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run94()$$134"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @run_int_to_string_cast(i32 123)
  call void @push_jit_object(i32 %0)
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run95()$$135"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @run_char_to_string_cast(i32 97)
  call void @push_jit_object(i32 %0)
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run95_1()$$136"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_regex_object(i8* inttoptr (i64 52657112 to i8*), i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0)
  call void @push_jit_object(i32 %0)
  %1 = call i32 @run_regex_to_string_cast(i32 %0)
  call void @push_jit_object(i32 %1)
  %2 = zext i32 %1 to i64
  store i64 %2, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run95_2()$$137"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @run_bool_to_string_cast(i32 1)
  call void @push_jit_object(i32 %0)
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run95_3()$$138"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @run_bool_to_string_cast(i32 0)
  call void @push_jit_object(i32 %0)
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run95_4(pointer)$$139"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value1 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value1, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %0 = inttoptr i64 %stack_offset_value1 to i8*
  %1 = call i32 @run_pointer_to_string_cast(i8* %0)
  call void @push_jit_object(i32 %1)
  %2 = zext i32 %1 to i64
  store i64 %2, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run95_5()$$140"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  store i64 123, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run95_6()$$141"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  store i64 123, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run95_7()$$142"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  store i64 123, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run95_8()$$143"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  store i64 123, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run95_9()$$144"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  store i64 123, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run95_10()$$145"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  store i64 123, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run95_11()$$146"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  store i64 123, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run95_12()$$147"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  store i64 123, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run95_13()$$148"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  store i64 123, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run95_14()$$149"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  store i64 4638355772470722560, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run95_15()$$150"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  store i64 4638355772470722560, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run95_16()$$151"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  store i64 4638362809237766144, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run95_17()$$152"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  store i64 4638355772470722560, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run95_18()$$153"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  store i64 4638355772470722560, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run95_19()$$154"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  store i64 4638362809237766144, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run95_20()$$155"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  store i64 4638355772470722560, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run96()$$156"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657116 to i8*))
  %ifcond = icmp eq i64* %0, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %1 = call i32 @create_object(i64* %0)
  call void @push_jit_object(i32 %1)
  %2 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657124 to i8*))
  %ifcond3 = icmp eq i64* %2, null
  br i1 %ifcond3, label %then_block, label %entry_ifend2

entry_ifend2:                                     ; preds = %entry_ifend
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value6 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value6, align 8
  store i64 0, i64* %lvar_offset_value6, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %3 = zext i32 %1 to i64
  store i64 %3, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value7 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value7, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  store i64 123, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value9 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value10 = getelementptr i64, i64* %loaded_stack_ptr_address_value9, i64 1
  store i64* %inc_ptr_value10, i64** %stack_ptr_address
  %4 = call i32 @call_invoke_method(i64* %2, i32 14, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond11 = icmp ne i32 %4, 1
  br i1 %ifcond11, label %then_block12, label %entry_ifend13

then_block12:                                     ; preds = %entry_ifend2
  %5 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend13:                                    ; preds = %entry_ifend2
  %stack_offset_value14 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value14, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value15 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value15, i64* %"lvar$1$", align 8
  %loaded_stack_ptr_address_value16 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value16, i64 -1
  %stack_pointer_offset_value17 = load i64, i64* %stack_pointer_offset_value, align 8
  %6 = trunc i64 %stack_pointer_offset_value17 to i32
  call void @push_jit_object(i32 %6)
  %loaded_stack_ptr_address_value18 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value18, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_pointer_offset_value17, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %7 = call i32 @run_integer_to_int_cast(i32 %6)
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run96_1()$$157"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657132 to i8*))
  %ifcond = icmp eq i64* %0, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %1 = call i32 @create_object(i64* %0)
  call void @push_jit_object(i32 %1)
  %2 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657140 to i8*))
  %ifcond3 = icmp eq i64* %2, null
  br i1 %ifcond3, label %then_block, label %entry_ifend2

entry_ifend2:                                     ; preds = %entry_ifend
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value6 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value6, align 8
  store i64 0, i64* %lvar_offset_value6, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %3 = zext i32 %1 to i64
  store i64 %3, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value7 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value7, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  store i64 123, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value9 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value10 = getelementptr i64, i64* %loaded_stack_ptr_address_value9, i64 1
  store i64* %inc_ptr_value10, i64** %stack_ptr_address
  %4 = call i32 @call_invoke_method(i64* %2, i32 14, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond11 = icmp ne i32 %4, 1
  br i1 %ifcond11, label %then_block12, label %entry_ifend13

then_block12:                                     ; preds = %entry_ifend2
  %5 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend13:                                    ; preds = %entry_ifend2
  %stack_offset_value14 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value14, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value15 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value15, i64* %"lvar$1$", align 8
  %loaded_stack_ptr_address_value16 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value16, i64 -1
  %stack_pointer_offset_value17 = load i64, i64* %stack_pointer_offset_value, align 8
  %6 = trunc i64 %stack_pointer_offset_value17 to i32
  call void @push_jit_object(i32 %6)
  %loaded_stack_ptr_address_value18 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value18, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_pointer_offset_value17, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %7 = call i32 @run_integer_to_int_cast(i32 %6)
  %value2 = trunc i32 %7 to i8
  %8 = zext i8 %value2 to i64
  store i64 %8, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run96_2()$$158"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657148 to i8*))
  %ifcond = icmp eq i64* %0, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %1 = call i32 @create_object(i64* %0)
  call void @push_jit_object(i32 %1)
  %2 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657156 to i8*))
  %ifcond3 = icmp eq i64* %2, null
  br i1 %ifcond3, label %then_block, label %entry_ifend2

entry_ifend2:                                     ; preds = %entry_ifend
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value6 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value6, align 8
  store i64 0, i64* %lvar_offset_value6, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %3 = zext i32 %1 to i64
  store i64 %3, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value7 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value7, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  store i64 123, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value9 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value10 = getelementptr i64, i64* %loaded_stack_ptr_address_value9, i64 1
  store i64* %inc_ptr_value10, i64** %stack_ptr_address
  %4 = call i32 @call_invoke_method(i64* %2, i32 14, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond11 = icmp ne i32 %4, 1
  br i1 %ifcond11, label %then_block12, label %entry_ifend13

then_block12:                                     ; preds = %entry_ifend2
  %5 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend13:                                    ; preds = %entry_ifend2
  %stack_offset_value14 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value14, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value15 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value15, i64* %"lvar$1$", align 8
  %loaded_stack_ptr_address_value16 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value16, i64 -1
  %stack_pointer_offset_value17 = load i64, i64* %stack_pointer_offset_value, align 8
  %6 = trunc i64 %stack_pointer_offset_value17 to i32
  call void @push_jit_object(i32 %6)
  %loaded_stack_ptr_address_value18 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value18, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_pointer_offset_value17, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %7 = call i32 @run_integer_to_int_cast(i32 %6)
  %8 = sitofp i32 %7 to float
  %9 = fpext float %8 to double
  %10 = bitcast double %9 to i64
  store i64 %10, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run96_3()$$159"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657164 to i8*))
  %ifcond = icmp eq i64* %0, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %1 = call i32 @create_object(i64* %0)
  call void @push_jit_object(i32 %1)
  %2 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657172 to i8*))
  %ifcond3 = icmp eq i64* %2, null
  br i1 %ifcond3, label %then_block, label %entry_ifend2

entry_ifend2:                                     ; preds = %entry_ifend
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value6 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value6, align 8
  store i64 0, i64* %lvar_offset_value6, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %3 = zext i32 %1 to i64
  store i64 %3, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value7 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value7, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  store i64 123, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value9 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value10 = getelementptr i64, i64* %loaded_stack_ptr_address_value9, i64 1
  store i64* %inc_ptr_value10, i64** %stack_ptr_address
  %4 = call i32 @call_invoke_method(i64* %2, i32 14, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond11 = icmp ne i32 %4, 1
  br i1 %ifcond11, label %then_block12, label %entry_ifend13

then_block12:                                     ; preds = %entry_ifend2
  %5 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend13:                                    ; preds = %entry_ifend2
  %stack_offset_value14 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value14, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value15 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value15, i64* %"lvar$1$", align 8
  %loaded_stack_ptr_address_value16 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value16, i64 -1
  %stack_pointer_offset_value17 = load i64, i64* %stack_pointer_offset_value, align 8
  %6 = trunc i64 %stack_pointer_offset_value17 to i32
  call void @push_jit_object(i32 %6)
  %loaded_stack_ptr_address_value18 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value18, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_pointer_offset_value17, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %7 = call i32 @run_integer_to_int_cast(i32 %6)
  %8 = sitofp i32 %7 to double
  %9 = bitcast double %8 to i64
  store i64 %9, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run96_4()$$160"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657180 to i8*))
  %ifcond = icmp eq i64* %0, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %1 = call i32 @create_object(i64* %0)
  call void @push_jit_object(i32 %1)
  %2 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657188 to i8*))
  %ifcond3 = icmp eq i64* %2, null
  br i1 %ifcond3, label %then_block, label %entry_ifend2

entry_ifend2:                                     ; preds = %entry_ifend
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value6 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value6, align 8
  store i64 0, i64* %lvar_offset_value6, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %3 = zext i32 %1 to i64
  store i64 %3, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value7 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value7, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  store i64 4294967173, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value9 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value10 = getelementptr i64, i64* %loaded_stack_ptr_address_value9, i64 1
  store i64* %inc_ptr_value10, i64** %stack_ptr_address
  %4 = call i32 @call_invoke_method(i64* %2, i32 14, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond11 = icmp ne i32 %4, 1
  br i1 %ifcond11, label %then_block12, label %entry_ifend13

then_block12:                                     ; preds = %entry_ifend2
  %5 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend13:                                    ; preds = %entry_ifend2
  %stack_offset_value14 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value14, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value15 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value15, i64* %"lvar$1$", align 8
  %loaded_stack_ptr_address_value16 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value16, i64 -1
  %stack_pointer_offset_value17 = load i64, i64* %stack_pointer_offset_value, align 8
  %6 = trunc i64 %stack_pointer_offset_value17 to i32
  call void @push_jit_object(i32 %6)
  %loaded_stack_ptr_address_value18 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value18, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_pointer_offset_value17, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %7 = call i32 @run_integer_to_int_cast(i32 %6)
  %value2 = trunc i32 %7 to i8
  %8 = zext i8 %value2 to i64
  store i64 %8, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run96_5()$$161"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657196 to i8*))
  %ifcond = icmp eq i64* %0, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %1 = call i32 @create_object(i64* %0)
  call void @push_jit_object(i32 %1)
  %2 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657204 to i8*))
  %ifcond3 = icmp eq i64* %2, null
  br i1 %ifcond3, label %then_block, label %entry_ifend2

entry_ifend2:                                     ; preds = %entry_ifend
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value6 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value6, align 8
  store i64 0, i64* %lvar_offset_value6, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %3 = zext i32 %1 to i64
  store i64 %3, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value7 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value7, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  store i64 4294967173, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value9 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value10 = getelementptr i64, i64* %loaded_stack_ptr_address_value9, i64 1
  store i64* %inc_ptr_value10, i64** %stack_ptr_address
  %4 = call i32 @call_invoke_method(i64* %2, i32 14, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond11 = icmp ne i32 %4, 1
  br i1 %ifcond11, label %then_block12, label %entry_ifend13

then_block12:                                     ; preds = %entry_ifend2
  %5 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend13:                                    ; preds = %entry_ifend2
  %stack_offset_value14 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value14, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value15 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value15, i64* %"lvar$1$", align 8
  %loaded_stack_ptr_address_value16 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value16, i64 -1
  %stack_pointer_offset_value17 = load i64, i64* %stack_pointer_offset_value, align 8
  %6 = trunc i64 %stack_pointer_offset_value17 to i32
  call void @push_jit_object(i32 %6)
  %loaded_stack_ptr_address_value18 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value18, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_pointer_offset_value17, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %7 = call i32 @run_integer_to_int_cast(i32 %6)
  %8 = sitofp i32 %7 to double
  %9 = bitcast double %8 to i64
  store i64 %9, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run96_6()$$162"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657212 to i8*))
  %ifcond = icmp eq i64* %0, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %1 = call i32 @create_object(i64* %0)
  call void @push_jit_object(i32 %1)
  %2 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657224 to i8*))
  %ifcond3 = icmp eq i64* %2, null
  br i1 %ifcond3, label %then_block, label %entry_ifend2

entry_ifend2:                                     ; preds = %entry_ifend
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value6 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value6, align 8
  store i64 0, i64* %lvar_offset_value6, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %3 = zext i32 %1 to i64
  store i64 %3, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value7 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value7, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  store i64 123, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value9 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value10 = getelementptr i64, i64* %loaded_stack_ptr_address_value9, i64 1
  store i64* %inc_ptr_value10, i64** %stack_ptr_address
  %4 = call i32 @call_invoke_method(i64* %2, i32 15, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond11 = icmp ne i32 %4, 1
  br i1 %ifcond11, label %then_block12, label %entry_ifend13

then_block12:                                     ; preds = %entry_ifend2
  %5 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend13:                                    ; preds = %entry_ifend2
  %stack_offset_value14 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value14, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value15 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value15, i64* %"lvar$1$", align 8
  %loaded_stack_ptr_address_value16 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value16, i64 -1
  %stack_pointer_offset_value17 = load i64, i64* %stack_pointer_offset_value, align 8
  %6 = trunc i64 %stack_pointer_offset_value17 to i32
  call void @push_jit_object(i32 %6)
  %loaded_stack_ptr_address_value18 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value18, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_pointer_offset_value17, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %7 = call i32 @run_uinteger_to_uint_cast(i32 %6)
  %8 = uitofp i32 %7 to double
  %9 = bitcast double %8 to i64
  store i64 %9, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run96_7()$$163"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657236 to i8*))
  %ifcond = icmp eq i64* %0, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %1 = call i32 @create_object(i64* %0)
  call void @push_jit_object(i32 %1)
  %2 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657248 to i8*))
  %ifcond3 = icmp eq i64* %2, null
  br i1 %ifcond3, label %then_block, label %entry_ifend2

entry_ifend2:                                     ; preds = %entry_ifend
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value6 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value6, align 8
  store i64 0, i64* %lvar_offset_value6, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %3 = zext i32 %1 to i64
  store i64 %3, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value7 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value7, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  store i64 123, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value9 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value10 = getelementptr i64, i64* %loaded_stack_ptr_address_value9, i64 1
  store i64* %inc_ptr_value10, i64** %stack_ptr_address
  %4 = call i32 @call_invoke_method(i64* %2, i32 15, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond11 = icmp ne i32 %4, 1
  br i1 %ifcond11, label %then_block12, label %entry_ifend13

then_block12:                                     ; preds = %entry_ifend2
  %5 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend13:                                    ; preds = %entry_ifend2
  %stack_offset_value14 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value14, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value15 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value15, i64* %"lvar$1$", align 8
  %loaded_stack_ptr_address_value16 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value16, i64 -1
  %stack_pointer_offset_value17 = load i64, i64* %stack_pointer_offset_value, align 8
  %6 = trunc i64 %stack_pointer_offset_value17 to i32
  call void @push_jit_object(i32 %6)
  %loaded_stack_ptr_address_value18 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value18, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_pointer_offset_value17, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %7 = call i32 @run_uinteger_to_uint_cast(i32 %6)
  %value2 = trunc i32 %7 to i8
  %8 = zext i8 %value2 to i64
  store i64 %8, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run97()$$164"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657260 to i8*))
  %ifcond = icmp eq i64* %0, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %1 = call i32 @create_object(i64* %0)
  call void @push_jit_object(i32 %1)
  %2 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657268 to i8*))
  %ifcond3 = icmp eq i64* %2, null
  br i1 %ifcond3, label %then_block, label %entry_ifend2

entry_ifend2:                                     ; preds = %entry_ifend
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value6 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value6, align 8
  store i64 0, i64* %lvar_offset_value6, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %3 = zext i32 %1 to i64
  store i64 %3, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value7 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value7, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  store i64 123, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value9 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value10 = getelementptr i64, i64* %loaded_stack_ptr_address_value9, i64 1
  store i64* %inc_ptr_value10, i64** %stack_ptr_address
  %4 = call i32 @call_invoke_method(i64* %2, i32 14, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond11 = icmp ne i32 %4, 1
  br i1 %ifcond11, label %then_block12, label %entry_ifend13

then_block12:                                     ; preds = %entry_ifend2
  %5 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend13:                                    ; preds = %entry_ifend2
  %stack_offset_value14 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value14, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value15 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value15, i64* %"lvar$1$", align 8
  %loaded_stack_ptr_address_value16 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value16, i64 -1
  %stack_pointer_offset_value17 = load i64, i64* %stack_pointer_offset_value, align 8
  %6 = trunc i64 %stack_pointer_offset_value17 to i32
  call void @push_jit_object(i32 %6)
  %loaded_stack_ptr_address_value18 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value18, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_pointer_offset_value17, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %7 = call i32 @run_integer_to_int_cast(i32 %6)
  %value2 = sext i32 %7 to i64
  store i64 %value2, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run98()$$165"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657276 to i8*))
  %ifcond = icmp eq i64* %0, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %1 = call i32 @create_object(i64* %0)
  call void @push_jit_object(i32 %1)
  %2 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657284 to i8*))
  %ifcond3 = icmp eq i64* %2, null
  br i1 %ifcond3, label %then_block, label %entry_ifend2

entry_ifend2:                                     ; preds = %entry_ifend
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value6 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value6, align 8
  store i64 0, i64* %lvar_offset_value6, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %3 = zext i32 %1 to i64
  store i64 %3, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value7 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value7, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  store i64 123, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value9 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value10 = getelementptr i64, i64* %loaded_stack_ptr_address_value9, i64 1
  store i64* %inc_ptr_value10, i64** %stack_ptr_address
  %4 = call i32 @call_invoke_method(i64* %2, i32 14, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond11 = icmp ne i32 %4, 1
  br i1 %ifcond11, label %then_block12, label %entry_ifend13

then_block12:                                     ; preds = %entry_ifend2
  %5 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend13:                                    ; preds = %entry_ifend2
  %stack_offset_value14 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value14, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value15 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value15, i64* %"lvar$1$", align 8
  %loaded_stack_ptr_address_value16 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value16, i64 -1
  %stack_pointer_offset_value17 = load i64, i64* %stack_pointer_offset_value, align 8
  %6 = trunc i64 %stack_pointer_offset_value17 to i32
  call void @push_jit_object(i32 %6)
  %loaded_stack_ptr_address_value18 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value18, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_pointer_offset_value17, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %7 = call i32 @run_integer_to_int_cast(i32 %6)
  %8 = sitofp i32 %7 to float
  %9 = fpext float %8 to double
  %10 = bitcast double %9 to i64
  store i64 %10, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run98_1()$$166"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657292 to i8*))
  %ifcond = icmp eq i64* %0, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %1 = call i32 @create_object(i64* %0)
  call void @push_jit_object(i32 %1)
  %2 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657300 to i8*))
  %ifcond3 = icmp eq i64* %2, null
  br i1 %ifcond3, label %then_block, label %entry_ifend2

entry_ifend2:                                     ; preds = %entry_ifend
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value6 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value6, align 8
  store i64 0, i64* %lvar_offset_value6, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %3 = zext i32 %1 to i64
  store i64 %3, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value7 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value7, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  store i64 123, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value9 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value10 = getelementptr i64, i64* %loaded_stack_ptr_address_value9, i64 1
  store i64* %inc_ptr_value10, i64** %stack_ptr_address
  %4 = call i32 @call_invoke_method(i64* %2, i32 15, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond11 = icmp ne i32 %4, 1
  br i1 %ifcond11, label %then_block12, label %entry_ifend13

then_block12:                                     ; preds = %entry_ifend2
  %5 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend13:                                    ; preds = %entry_ifend2
  %stack_offset_value14 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value14, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value15 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value15, i64* %"lvar$1$", align 8
  %loaded_stack_ptr_address_value16 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value16, i64 -1
  %stack_pointer_offset_value17 = load i64, i64* %stack_pointer_offset_value, align 8
  %6 = trunc i64 %stack_pointer_offset_value17 to i32
  call void @push_jit_object(i32 %6)
  %loaded_stack_ptr_address_value18 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value18, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_pointer_offset_value17, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %7 = call i8 @run_cbyte_to_byte_cast(i32 %6)
  %8 = zext i8 %7 to i64
  store i64 %8, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run98_2()$$167"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657308 to i8*))
  %ifcond = icmp eq i64* %0, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %1 = call i32 @create_object(i64* %0)
  call void @push_jit_object(i32 %1)
  %2 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657316 to i8*))
  %ifcond3 = icmp eq i64* %2, null
  br i1 %ifcond3, label %then_block, label %entry_ifend2

entry_ifend2:                                     ; preds = %entry_ifend
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value6 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value6, align 8
  store i64 0, i64* %lvar_offset_value6, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %3 = zext i32 %1 to i64
  store i64 %3, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value7 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value7, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  store i64 123, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value9 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value10 = getelementptr i64, i64* %loaded_stack_ptr_address_value9, i64 1
  store i64* %inc_ptr_value10, i64** %stack_ptr_address
  %4 = call i32 @call_invoke_method(i64* %2, i32 15, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond11 = icmp ne i32 %4, 1
  br i1 %ifcond11, label %then_block12, label %entry_ifend13

then_block12:                                     ; preds = %entry_ifend2
  %5 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend13:                                    ; preds = %entry_ifend2
  %stack_offset_value14 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value14, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value15 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value15, i64* %"lvar$1$", align 8
  %loaded_stack_ptr_address_value16 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value16, i64 -1
  %stack_pointer_offset_value17 = load i64, i64* %stack_pointer_offset_value, align 8
  %6 = trunc i64 %stack_pointer_offset_value17 to i32
  call void @push_jit_object(i32 %6)
  %loaded_stack_ptr_address_value18 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value18, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_pointer_offset_value17, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %7 = call i8 @run_cbyte_to_byte_cast(i32 %6)
  %value2 = sext i8 %7 to i32
  %8 = zext i32 %value2 to i64
  store i64 %8, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run98_3()$$168"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657324 to i8*))
  %ifcond = icmp eq i64* %0, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %1 = call i32 @create_object(i64* %0)
  call void @push_jit_object(i32 %1)
  %2 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657332 to i8*))
  %ifcond3 = icmp eq i64* %2, null
  br i1 %ifcond3, label %then_block, label %entry_ifend2

entry_ifend2:                                     ; preds = %entry_ifend
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value6 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value6, align 8
  store i64 0, i64* %lvar_offset_value6, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %3 = zext i32 %1 to i64
  store i64 %3, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value7 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value7, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  store i64 123, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value9 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value10 = getelementptr i64, i64* %loaded_stack_ptr_address_value9, i64 1
  store i64* %inc_ptr_value10, i64** %stack_ptr_address
  %4 = call i32 @call_invoke_method(i64* %2, i32 15, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond11 = icmp ne i32 %4, 1
  br i1 %ifcond11, label %then_block12, label %entry_ifend13

then_block12:                                     ; preds = %entry_ifend2
  %5 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend13:                                    ; preds = %entry_ifend2
  %stack_offset_value14 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value14, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value15 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value15, i64* %"lvar$1$", align 8
  %loaded_stack_ptr_address_value16 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value16, i64 -1
  %stack_pointer_offset_value17 = load i64, i64* %stack_pointer_offset_value, align 8
  %6 = trunc i64 %stack_pointer_offset_value17 to i32
  call void @push_jit_object(i32 %6)
  %loaded_stack_ptr_address_value18 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value18, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_pointer_offset_value17, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %7 = call i8 @run_cbyte_to_byte_cast(i32 %6)
  %8 = sitofp i8 %7 to float
  %9 = fpext float %8 to double
  %10 = bitcast double %9 to i64
  store i64 %10, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run98_4()$$169"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657340 to i8*))
  %ifcond = icmp eq i64* %0, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %1 = call i32 @create_object(i64* %0)
  call void @push_jit_object(i32 %1)
  %2 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657348 to i8*))
  %ifcond3 = icmp eq i64* %2, null
  br i1 %ifcond3, label %then_block, label %entry_ifend2

entry_ifend2:                                     ; preds = %entry_ifend
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value6 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value6, align 8
  store i64 0, i64* %lvar_offset_value6, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %3 = zext i32 %1 to i64
  store i64 %3, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value7 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value7, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  store i64 123, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value9 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value10 = getelementptr i64, i64* %loaded_stack_ptr_address_value9, i64 1
  store i64* %inc_ptr_value10, i64** %stack_ptr_address
  %4 = call i32 @call_invoke_method(i64* %2, i32 15, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond11 = icmp ne i32 %4, 1
  br i1 %ifcond11, label %then_block12, label %entry_ifend13

then_block12:                                     ; preds = %entry_ifend2
  %5 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend13:                                    ; preds = %entry_ifend2
  %stack_offset_value14 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value14, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value15 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value15, i64* %"lvar$1$", align 8
  %loaded_stack_ptr_address_value16 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value16, i64 -1
  %stack_pointer_offset_value17 = load i64, i64* %stack_pointer_offset_value, align 8
  %6 = trunc i64 %stack_pointer_offset_value17 to i32
  call void @push_jit_object(i32 %6)
  %loaded_stack_ptr_address_value18 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value18, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_pointer_offset_value17, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %7 = call i8 @run_cbyte_to_byte_cast(i32 %6)
  %value2 = sext i8 %7 to i64
  store i64 %value2, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run98_5()$$170"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657356 to i8*))
  %ifcond = icmp eq i64* %0, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %1 = call i32 @create_object(i64* %0)
  call void @push_jit_object(i32 %1)
  %2 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657364 to i8*))
  %ifcond3 = icmp eq i64* %2, null
  br i1 %ifcond3, label %then_block, label %entry_ifend2

entry_ifend2:                                     ; preds = %entry_ifend
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value6 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value6, align 8
  store i64 0, i64* %lvar_offset_value6, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %3 = zext i32 %1 to i64
  store i64 %3, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value7 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value7, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  store i64 123, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value9 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value10 = getelementptr i64, i64* %loaded_stack_ptr_address_value9, i64 1
  store i64* %inc_ptr_value10, i64** %stack_ptr_address
  %4 = call i32 @call_invoke_method(i64* %2, i32 15, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond11 = icmp ne i32 %4, 1
  br i1 %ifcond11, label %then_block12, label %entry_ifend13

then_block12:                                     ; preds = %entry_ifend2
  %5 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend13:                                    ; preds = %entry_ifend2
  %stack_offset_value14 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value14, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value15 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value15, i64* %"lvar$1$", align 8
  %loaded_stack_ptr_address_value16 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value16, i64 -1
  %stack_pointer_offset_value17 = load i64, i64* %stack_pointer_offset_value, align 8
  %6 = trunc i64 %stack_pointer_offset_value17 to i32
  call void @push_jit_object(i32 %6)
  %loaded_stack_ptr_address_value18 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value18, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_pointer_offset_value17, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %7 = call i8 @run_cubyte_to_ubyte_cast(i32 %6)
  %value2 = zext i8 %7 to i64
  store i64 %value2, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run98_6()$$171"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657372 to i8*))
  %ifcond = icmp eq i64* %0, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %1 = call i32 @create_object(i64* %0)
  call void @push_jit_object(i32 %1)
  %2 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657380 to i8*))
  %ifcond3 = icmp eq i64* %2, null
  br i1 %ifcond3, label %then_block, label %entry_ifend2

entry_ifend2:                                     ; preds = %entry_ifend
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value6 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value6, align 8
  store i64 0, i64* %lvar_offset_value6, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %3 = zext i32 %1 to i64
  store i64 %3, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value7 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value7, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  store i64 4294967295, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value9 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value10 = getelementptr i64, i64* %loaded_stack_ptr_address_value9, i64 1
  store i64* %inc_ptr_value10, i64** %stack_ptr_address
  %4 = call i32 @call_invoke_method(i64* %2, i32 15, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond11 = icmp ne i32 %4, 1
  br i1 %ifcond11, label %then_block12, label %entry_ifend13

then_block12:                                     ; preds = %entry_ifend2
  %5 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend13:                                    ; preds = %entry_ifend2
  %stack_offset_value14 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value14, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value15 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value15, i64* %"lvar$1$", align 8
  %loaded_stack_ptr_address_value16 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value16, i64 -1
  %stack_pointer_offset_value17 = load i64, i64* %stack_pointer_offset_value, align 8
  %6 = trunc i64 %stack_pointer_offset_value17 to i32
  call void @push_jit_object(i32 %6)
  %loaded_stack_ptr_address_value18 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value18, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_pointer_offset_value17, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %7 = call i8 @run_cbyte_to_byte_cast(i32 %6)
  %value2 = sext i8 %7 to i64
  store i64 %value2, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run98_7()$$172"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657388 to i8*))
  %ifcond = icmp eq i64* %0, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %1 = call i32 @create_object(i64* %0)
  call void @push_jit_object(i32 %1)
  %2 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657396 to i8*))
  %ifcond3 = icmp eq i64* %2, null
  br i1 %ifcond3, label %then_block, label %entry_ifend2

entry_ifend2:                                     ; preds = %entry_ifend
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value6 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value6, align 8
  store i64 0, i64* %lvar_offset_value6, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %3 = zext i32 %1 to i64
  store i64 %3, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value7 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value7, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  store i64 123, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value9 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value10 = getelementptr i64, i64* %loaded_stack_ptr_address_value9, i64 1
  store i64* %inc_ptr_value10, i64** %stack_ptr_address
  %4 = call i32 @call_invoke_method(i64* %2, i32 15, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond11 = icmp ne i32 %4, 1
  br i1 %ifcond11, label %then_block12, label %entry_ifend13

then_block12:                                     ; preds = %entry_ifend2
  %5 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend13:                                    ; preds = %entry_ifend2
  %stack_offset_value14 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value14, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value15 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value15, i64* %"lvar$1$", align 8
  %loaded_stack_ptr_address_value16 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value16, i64 -1
  %stack_pointer_offset_value17 = load i64, i64* %stack_pointer_offset_value, align 8
  %6 = trunc i64 %stack_pointer_offset_value17 to i32
  call void @push_jit_object(i32 %6)
  %loaded_stack_ptr_address_value18 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value18, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_pointer_offset_value17, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %7 = call i8 @run_cubyte_to_ubyte_cast(i32 %6)
  %8 = uitofp i8 %7 to double
  %9 = bitcast double %8 to i64
  store i64 %9, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run98_8()$$173"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657404 to i8*))
  %ifcond = icmp eq i64* %0, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %1 = call i32 @create_object(i64* %0)
  call void @push_jit_object(i32 %1)
  %2 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657412 to i8*))
  %ifcond3 = icmp eq i64* %2, null
  br i1 %ifcond3, label %then_block, label %entry_ifend2

entry_ifend2:                                     ; preds = %entry_ifend
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value6 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value6, align 8
  store i64 0, i64* %lvar_offset_value6, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %3 = zext i32 %1 to i64
  store i64 %3, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value7 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value7, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  store i64 123, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value9 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value10 = getelementptr i64, i64* %loaded_stack_ptr_address_value9, i64 1
  store i64* %inc_ptr_value10, i64** %stack_ptr_address
  %4 = call i32 @call_invoke_method(i64* %2, i32 15, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond11 = icmp ne i32 %4, 1
  br i1 %ifcond11, label %then_block12, label %entry_ifend13

then_block12:                                     ; preds = %entry_ifend2
  %5 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend13:                                    ; preds = %entry_ifend2
  %stack_offset_value14 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value14, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value15 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value15, i64* %"lvar$1$", align 8
  %loaded_stack_ptr_address_value16 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value16, i64 -1
  %stack_pointer_offset_value17 = load i64, i64* %stack_pointer_offset_value, align 8
  %6 = trunc i64 %stack_pointer_offset_value17 to i32
  call void @push_jit_object(i32 %6)
  %loaded_stack_ptr_address_value18 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value18, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_pointer_offset_value17, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %7 = call i16 @run_cshort_to_short_cast(i32 %6)
  %8 = sitofp i16 %7 to double
  %9 = bitcast double %8 to i64
  store i64 %9, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run98_9()$$174"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657420 to i8*))
  %ifcond = icmp eq i64* %0, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %1 = call i32 @create_object(i64* %0)
  call void @push_jit_object(i32 %1)
  %2 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657428 to i8*))
  %ifcond3 = icmp eq i64* %2, null
  br i1 %ifcond3, label %then_block, label %entry_ifend2

entry_ifend2:                                     ; preds = %entry_ifend
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value6 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value6, align 8
  store i64 0, i64* %lvar_offset_value6, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %3 = zext i32 %1 to i64
  store i64 %3, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value7 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value7, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  store i64 123, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value9 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value10 = getelementptr i64, i64* %loaded_stack_ptr_address_value9, i64 1
  store i64* %inc_ptr_value10, i64** %stack_ptr_address
  %4 = call i32 @call_invoke_method(i64* %2, i32 15, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond11 = icmp ne i32 %4, 1
  br i1 %ifcond11, label %then_block12, label %entry_ifend13

then_block12:                                     ; preds = %entry_ifend2
  %5 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend13:                                    ; preds = %entry_ifend2
  %stack_offset_value14 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value14, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value15 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value15, i64* %"lvar$1$", align 8
  %loaded_stack_ptr_address_value16 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value16, i64 -1
  %stack_pointer_offset_value17 = load i64, i64* %stack_pointer_offset_value, align 8
  %6 = trunc i64 %stack_pointer_offset_value17 to i32
  call void @push_jit_object(i32 %6)
  %loaded_stack_ptr_address_value18 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value18, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_pointer_offset_value17, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %7 = call i16 @run_cshort_to_short_cast(i32 %6)
  %value2 = trunc i16 %7 to i8
  %8 = zext i8 %value2 to i64
  store i64 %8, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run98_10()$$175"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657436 to i8*))
  %ifcond = icmp eq i64* %0, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %1 = call i32 @create_object(i64* %0)
  call void @push_jit_object(i32 %1)
  %2 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657444 to i8*))
  %ifcond3 = icmp eq i64* %2, null
  br i1 %ifcond3, label %then_block, label %entry_ifend2

entry_ifend2:                                     ; preds = %entry_ifend
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value6 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value6, align 8
  store i64 0, i64* %lvar_offset_value6, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %3 = zext i32 %1 to i64
  store i64 %3, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value7 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value7, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  store i64 123, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value9 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value10 = getelementptr i64, i64* %loaded_stack_ptr_address_value9, i64 1
  store i64* %inc_ptr_value10, i64** %stack_ptr_address
  %4 = call i32 @call_invoke_method(i64* %2, i32 15, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond11 = icmp ne i32 %4, 1
  br i1 %ifcond11, label %then_block12, label %entry_ifend13

then_block12:                                     ; preds = %entry_ifend2
  %5 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend13:                                    ; preds = %entry_ifend2
  %stack_offset_value14 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value14, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value15 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value15, i64* %"lvar$1$", align 8
  %loaded_stack_ptr_address_value16 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value16, i64 -1
  %stack_pointer_offset_value17 = load i64, i64* %stack_pointer_offset_value, align 8
  %6 = trunc i64 %stack_pointer_offset_value17 to i32
  call void @push_jit_object(i32 %6)
  %loaded_stack_ptr_address_value18 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value18, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_pointer_offset_value17, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %7 = call i16 @run_cshort_to_short_cast(i32 %6)
  %value2 = sext i16 %7 to i32
  %8 = zext i32 %value2 to i64
  store i64 %8, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run98_11()$$176"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657452 to i8*))
  %ifcond = icmp eq i64* %0, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %1 = call i32 @create_object(i64* %0)
  call void @push_jit_object(i32 %1)
  %2 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657460 to i8*))
  %ifcond3 = icmp eq i64* %2, null
  br i1 %ifcond3, label %then_block, label %entry_ifend2

entry_ifend2:                                     ; preds = %entry_ifend
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value6 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value6, align 8
  store i64 0, i64* %lvar_offset_value6, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %3 = zext i32 %1 to i64
  store i64 %3, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value7 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value7, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  store i64 4294967295, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value9 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value10 = getelementptr i64, i64* %loaded_stack_ptr_address_value9, i64 1
  store i64* %inc_ptr_value10, i64** %stack_ptr_address
  %4 = call i32 @call_invoke_method(i64* %2, i32 15, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond11 = icmp ne i32 %4, 1
  br i1 %ifcond11, label %then_block12, label %entry_ifend13

then_block12:                                     ; preds = %entry_ifend2
  %5 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend13:                                    ; preds = %entry_ifend2
  %stack_offset_value14 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value14, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value15 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value15, i64* %"lvar$1$", align 8
  %loaded_stack_ptr_address_value16 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value16, i64 -1
  %stack_pointer_offset_value17 = load i64, i64* %stack_pointer_offset_value, align 8
  %6 = trunc i64 %stack_pointer_offset_value17 to i32
  call void @push_jit_object(i32 %6)
  %loaded_stack_ptr_address_value18 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value18, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_pointer_offset_value17, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %7 = call i16 @run_cshort_to_short_cast(i32 %6)
  %8 = zext i16 %7 to i64
  store i64 %8, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run98_12()$$177"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657468 to i8*))
  %ifcond = icmp eq i64* %0, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %1 = call i32 @create_object(i64* %0)
  call void @push_jit_object(i32 %1)
  %2 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657476 to i8*))
  %ifcond3 = icmp eq i64* %2, null
  br i1 %ifcond3, label %then_block, label %entry_ifend2

entry_ifend2:                                     ; preds = %entry_ifend
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value6 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value6, align 8
  store i64 0, i64* %lvar_offset_value6, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %3 = zext i32 %1 to i64
  store i64 %3, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value7 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value7, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  store i64 4294967295, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value9 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value10 = getelementptr i64, i64* %loaded_stack_ptr_address_value9, i64 1
  store i64* %inc_ptr_value10, i64** %stack_ptr_address
  %4 = call i32 @call_invoke_method(i64* %2, i32 15, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond11 = icmp ne i32 %4, 1
  br i1 %ifcond11, label %then_block12, label %entry_ifend13

then_block12:                                     ; preds = %entry_ifend2
  %5 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend13:                                    ; preds = %entry_ifend2
  %stack_offset_value14 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value14, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value15 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value15, i64* %"lvar$1$", align 8
  %loaded_stack_ptr_address_value16 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value16, i64 -1
  %stack_pointer_offset_value17 = load i64, i64* %stack_pointer_offset_value, align 8
  %6 = trunc i64 %stack_pointer_offset_value17 to i32
  call void @push_jit_object(i32 %6)
  %loaded_stack_ptr_address_value18 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value18, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_pointer_offset_value17, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %7 = call i16 @run_cshort_to_short_cast(i32 %6)
  %value2 = trunc i16 %7 to i8
  %8 = zext i8 %value2 to i64
  store i64 %8, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run98_13()$$178"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657484 to i8*))
  %ifcond = icmp eq i64* %0, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %1 = call i32 @create_object(i64* %0)
  call void @push_jit_object(i32 %1)
  %2 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657492 to i8*))
  %ifcond3 = icmp eq i64* %2, null
  br i1 %ifcond3, label %then_block, label %entry_ifend2

entry_ifend2:                                     ; preds = %entry_ifend
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value6 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value6, align 8
  store i64 0, i64* %lvar_offset_value6, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %3 = zext i32 %1 to i64
  store i64 %3, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value7 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value7, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  store i64 123, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value9 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value10 = getelementptr i64, i64* %loaded_stack_ptr_address_value9, i64 1
  store i64* %inc_ptr_value10, i64** %stack_ptr_address
  %4 = call i32 @call_invoke_method(i64* %2, i32 14, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond11 = icmp ne i32 %4, 1
  br i1 %ifcond11, label %then_block12, label %entry_ifend13

then_block12:                                     ; preds = %entry_ifend2
  %5 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend13:                                    ; preds = %entry_ifend2
  %stack_offset_value14 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value14, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value15 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value15, i64* %"lvar$1$", align 8
  %loaded_stack_ptr_address_value16 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value16, i64 -1
  %stack_pointer_offset_value17 = load i64, i64* %stack_pointer_offset_value, align 8
  %6 = trunc i64 %stack_pointer_offset_value17 to i32
  call void @push_jit_object(i32 %6)
  %loaded_stack_ptr_address_value18 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value18, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_pointer_offset_value17, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %7 = call i64 @run_clong_to_long_cast(i32 %6)
  store i64 %7, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run98_14()$$179"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657500 to i8*))
  %ifcond = icmp eq i64* %0, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %1 = call i32 @create_object(i64* %0)
  call void @push_jit_object(i32 %1)
  %2 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657508 to i8*))
  %ifcond3 = icmp eq i64* %2, null
  br i1 %ifcond3, label %then_block, label %entry_ifend2

entry_ifend2:                                     ; preds = %entry_ifend
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value6 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value6, align 8
  store i64 0, i64* %lvar_offset_value6, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %3 = zext i32 %1 to i64
  store i64 %3, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value7 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value7, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  store i64 123, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value9 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value10 = getelementptr i64, i64* %loaded_stack_ptr_address_value9, i64 1
  store i64* %inc_ptr_value10, i64** %stack_ptr_address
  %4 = call i32 @call_invoke_method(i64* %2, i32 14, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond11 = icmp ne i32 %4, 1
  br i1 %ifcond11, label %then_block12, label %entry_ifend13

then_block12:                                     ; preds = %entry_ifend2
  %5 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend13:                                    ; preds = %entry_ifend2
  %stack_offset_value14 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value14, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value15 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value15, i64* %"lvar$1$", align 8
  %loaded_stack_ptr_address_value16 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value16, i64 -1
  %stack_pointer_offset_value17 = load i64, i64* %stack_pointer_offset_value, align 8
  %6 = trunc i64 %stack_pointer_offset_value17 to i32
  call void @push_jit_object(i32 %6)
  %loaded_stack_ptr_address_value18 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value18, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_pointer_offset_value17, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %7 = call i64 @run_clong_to_long_cast(i32 %6)
  %value2 = trunc i64 %7 to i8
  %8 = zext i8 %value2 to i64
  store i64 %8, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run98_15()$$180"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657516 to i8*))
  %ifcond = icmp eq i64* %0, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %1 = call i32 @create_object(i64* %0)
  call void @push_jit_object(i32 %1)
  %2 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657524 to i8*))
  %ifcond3 = icmp eq i64* %2, null
  br i1 %ifcond3, label %then_block, label %entry_ifend2

entry_ifend2:                                     ; preds = %entry_ifend
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value6 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value6, align 8
  store i64 0, i64* %lvar_offset_value6, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %3 = zext i32 %1 to i64
  store i64 %3, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value7 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value7, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  store i64 123, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value9 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value10 = getelementptr i64, i64* %loaded_stack_ptr_address_value9, i64 1
  store i64* %inc_ptr_value10, i64** %stack_ptr_address
  %4 = call i32 @call_invoke_method(i64* %2, i32 14, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond11 = icmp ne i32 %4, 1
  br i1 %ifcond11, label %then_block12, label %entry_ifend13

then_block12:                                     ; preds = %entry_ifend2
  %5 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend13:                                    ; preds = %entry_ifend2
  %stack_offset_value14 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value14, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value15 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value15, i64* %"lvar$1$", align 8
  %loaded_stack_ptr_address_value16 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value16, i64 -1
  %stack_pointer_offset_value17 = load i64, i64* %stack_pointer_offset_value, align 8
  %6 = trunc i64 %stack_pointer_offset_value17 to i32
  call void @push_jit_object(i32 %6)
  %loaded_stack_ptr_address_value18 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value18, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_pointer_offset_value17, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %7 = call i64 @run_clong_to_long_cast(i32 %6)
  %8 = sitofp i64 %7 to double
  %9 = bitcast double %8 to i64
  store i64 %9, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run98_16()$$181"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657532 to i8*))
  %ifcond = icmp eq i64* %0, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %1 = call i32 @create_object(i64* %0)
  call void @push_jit_object(i32 %1)
  %2 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657540 to i8*))
  %ifcond3 = icmp eq i64* %2, null
  br i1 %ifcond3, label %then_block, label %entry_ifend2

entry_ifend2:                                     ; preds = %entry_ifend
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value6 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value6, align 8
  store i64 0, i64* %lvar_offset_value6, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %3 = zext i32 %1 to i64
  store i64 %3, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value7 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value7, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  store i64 4294967173, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value9 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value10 = getelementptr i64, i64* %loaded_stack_ptr_address_value9, i64 1
  store i64* %inc_ptr_value10, i64** %stack_ptr_address
  %4 = call i32 @call_invoke_method(i64* %2, i32 14, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond11 = icmp ne i32 %4, 1
  br i1 %ifcond11, label %then_block12, label %entry_ifend13

then_block12:                                     ; preds = %entry_ifend2
  %5 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend13:                                    ; preds = %entry_ifend2
  %stack_offset_value14 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value14, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value15 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value15, i64* %"lvar$1$", align 8
  %loaded_stack_ptr_address_value16 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value16, i64 -1
  %stack_pointer_offset_value17 = load i64, i64* %stack_pointer_offset_value, align 8
  %6 = trunc i64 %stack_pointer_offset_value17 to i32
  call void @push_jit_object(i32 %6)
  %loaded_stack_ptr_address_value18 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value18, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_pointer_offset_value17, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %7 = call i64 @run_clong_to_long_cast(i32 %6)
  %8 = sitofp i64 %7 to double
  %9 = bitcast double %8 to i64
  store i64 %9, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run98_17()$$182"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657548 to i8*))
  %ifcond = icmp eq i64* %0, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %1 = call i32 @create_object(i64* %0)
  call void @push_jit_object(i32 %1)
  %2 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657556 to i8*))
  %ifcond3 = icmp eq i64* %2, null
  br i1 %ifcond3, label %then_block, label %entry_ifend2

entry_ifend2:                                     ; preds = %entry_ifend
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value6 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value6, align 8
  store i64 0, i64* %lvar_offset_value6, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %3 = zext i32 %1 to i64
  store i64 %3, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value7 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value7, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  store i64 4294967173, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value9 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value10 = getelementptr i64, i64* %loaded_stack_ptr_address_value9, i64 1
  store i64* %inc_ptr_value10, i64** %stack_ptr_address
  %4 = call i32 @call_invoke_method(i64* %2, i32 14, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond11 = icmp ne i32 %4, 1
  br i1 %ifcond11, label %then_block12, label %entry_ifend13

then_block12:                                     ; preds = %entry_ifend2
  %5 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend13:                                    ; preds = %entry_ifend2
  %stack_offset_value14 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value14, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value15 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value15, i64* %"lvar$1$", align 8
  %loaded_stack_ptr_address_value16 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value16, i64 -1
  %stack_pointer_offset_value17 = load i64, i64* %stack_pointer_offset_value, align 8
  %6 = trunc i64 %stack_pointer_offset_value17 to i32
  call void @push_jit_object(i32 %6)
  %loaded_stack_ptr_address_value18 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value18, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_pointer_offset_value17, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %7 = call i64 @run_clong_to_long_cast(i32 %6)
  %value2 = trunc i64 %7 to i8
  %8 = zext i8 %value2 to i64
  store i64 %8, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run98_18()$$183"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657564 to i8*))
  %ifcond = icmp eq i64* %0, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %1 = call i32 @create_object(i64* %0)
  call void @push_jit_object(i32 %1)
  %2 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657572 to i8*))
  %ifcond3 = icmp eq i64* %2, null
  br i1 %ifcond3, label %then_block, label %entry_ifend2

entry_ifend2:                                     ; preds = %entry_ifend
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value6 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value6, align 8
  store i64 0, i64* %lvar_offset_value6, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %3 = zext i32 %1 to i64
  store i64 %3, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value7 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value7, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  store i64 65, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value9 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value10 = getelementptr i64, i64* %loaded_stack_ptr_address_value9, i64 1
  store i64* %inc_ptr_value10, i64** %stack_ptr_address
  %4 = call i32 @call_invoke_method(i64* %2, i32 14, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond11 = icmp ne i32 %4, 1
  br i1 %ifcond11, label %then_block12, label %entry_ifend13

then_block12:                                     ; preds = %entry_ifend2
  %5 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend13:                                    ; preds = %entry_ifend2
  %stack_offset_value14 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value14, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value15 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value15, i64* %"lvar$1$", align 8
  %loaded_stack_ptr_address_value16 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value16, i64 -1
  %stack_pointer_offset_value17 = load i64, i64* %stack_pointer_offset_value, align 8
  %6 = trunc i64 %stack_pointer_offset_value17 to i32
  call void @push_jit_object(i32 %6)
  %loaded_stack_ptr_address_value18 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value18, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_pointer_offset_value17, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %7 = call i32 @run_uinteger_to_uint_cast(i32 %6)
  %value2 = trunc i32 %7 to i8
  %8 = zext i8 %value2 to i64
  store i64 %8, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run98_19()$$184"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657580 to i8*))
  %ifcond = icmp eq i64* %0, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %1 = call i32 @create_object(i64* %0)
  call void @push_jit_object(i32 %1)
  %2 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657588 to i8*))
  %ifcond3 = icmp eq i64* %2, null
  br i1 %ifcond3, label %then_block, label %entry_ifend2

entry_ifend2:                                     ; preds = %entry_ifend
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value6 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value6, align 8
  store i64 0, i64* %lvar_offset_value6, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %3 = zext i32 %1 to i64
  store i64 %3, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value7 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value7, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  store i64 65, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value9 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value10 = getelementptr i64, i64* %loaded_stack_ptr_address_value9, i64 1
  store i64* %inc_ptr_value10, i64** %stack_ptr_address
  %4 = call i32 @call_invoke_method(i64* %2, i32 14, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond11 = icmp ne i32 %4, 1
  br i1 %ifcond11, label %then_block12, label %entry_ifend13

then_block12:                                     ; preds = %entry_ifend2
  %5 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend13:                                    ; preds = %entry_ifend2
  %stack_offset_value14 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value14, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value15 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value15, i64* %"lvar$1$", align 8
  %loaded_stack_ptr_address_value16 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value16, i64 -1
  %stack_pointer_offset_value17 = load i64, i64* %stack_pointer_offset_value, align 8
  %6 = trunc i64 %stack_pointer_offset_value17 to i32
  call void @push_jit_object(i32 %6)
  %loaded_stack_ptr_address_value18 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value18, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_pointer_offset_value17, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %7 = call i32 @run_uinteger_to_uint_cast(i32 %6)
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run99()$$185"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  store i64 2, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run99_1()$$186"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657596 to i8*))
  %ifcond = icmp eq i64* %0, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %1 = call i32 @create_object(i64* %0)
  call void @push_jit_object(i32 %1)
  %2 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657604 to i8*))
  %ifcond3 = icmp eq i64* %2, null
  br i1 %ifcond3, label %then_block, label %entry_ifend2

entry_ifend2:                                     ; preds = %entry_ifend
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value6 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value6, align 8
  store i64 0, i64* %lvar_offset_value6, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %3 = zext i32 %1 to i64
  store i64 %3, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value7 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value7, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  store i64 1074161254, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value9 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value10 = getelementptr i64, i64* %loaded_stack_ptr_address_value9, i64 1
  store i64* %inc_ptr_value10, i64** %stack_ptr_address
  %4 = call i32 @call_invoke_method(i64* %2, i32 14, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond11 = icmp ne i32 %4, 1
  br i1 %ifcond11, label %then_block12, label %entry_ifend13

then_block12:                                     ; preds = %entry_ifend2
  %5 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend13:                                    ; preds = %entry_ifend2
  %stack_offset_value14 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value14, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value15 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value15, i64* %"lvar$1$", align 8
  %loaded_stack_ptr_address_value16 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value16, i64 -1
  %stack_pointer_offset_value17 = load i64, i64* %stack_pointer_offset_value, align 8
  %6 = trunc i64 %stack_pointer_offset_value17 to i32
  call void @push_jit_object(i32 %6)
  %loaded_stack_ptr_address_value18 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value18, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_pointer_offset_value17, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %7 = call i32 @run_cfloat_to_int_cast(i32 %6)
  %value2 = sext i32 %7 to i64
  store i64 %value2, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run99_2()$$187"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657612 to i8*))
  %ifcond = icmp eq i64* %0, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %1 = call i32 @create_object(i64* %0)
  call void @push_jit_object(i32 %1)
  %2 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657620 to i8*))
  %ifcond3 = icmp eq i64* %2, null
  br i1 %ifcond3, label %then_block, label %entry_ifend2

entry_ifend2:                                     ; preds = %entry_ifend
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value6 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value6, align 8
  store i64 0, i64* %lvar_offset_value6, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %3 = zext i32 %1 to i64
  store i64 %3, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value7 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value7, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  store i64 1074161254, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value9 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value10 = getelementptr i64, i64* %loaded_stack_ptr_address_value9, i64 1
  store i64* %inc_ptr_value10, i64** %stack_ptr_address
  %4 = call i32 @call_invoke_method(i64* %2, i32 14, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond11 = icmp ne i32 %4, 1
  br i1 %ifcond11, label %then_block12, label %entry_ifend13

then_block12:                                     ; preds = %entry_ifend2
  %5 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend13:                                    ; preds = %entry_ifend2
  %stack_offset_value14 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value14, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value15 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value15, i64* %"lvar$1$", align 8
  %loaded_stack_ptr_address_value16 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value16, i64 -1
  %stack_pointer_offset_value17 = load i64, i64* %stack_pointer_offset_value, align 8
  %6 = trunc i64 %stack_pointer_offset_value17 to i32
  call void @push_jit_object(i32 %6)
  %loaded_stack_ptr_address_value18 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value18, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_pointer_offset_value17, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %7 = call float @run_cfloat_to_float_cast(i32 %6)
  %8 = fpext float %7 to double
  %9 = bitcast double %8 to i64
  store i64 %9, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run99_3()$$188"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657628 to i8*))
  %ifcond = icmp eq i64* %0, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %1 = call i32 @create_object(i64* %0)
  call void @push_jit_object(i32 %1)
  %2 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657636 to i8*))
  %ifcond3 = icmp eq i64* %2, null
  br i1 %ifcond3, label %then_block, label %entry_ifend2

entry_ifend2:                                     ; preds = %entry_ifend
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value6 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value6, align 8
  store i64 0, i64* %lvar_offset_value6, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %3 = zext i32 %1 to i64
  store i64 %3, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value7 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value7, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  store i64 1074161254, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value9 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value10 = getelementptr i64, i64* %loaded_stack_ptr_address_value9, i64 1
  store i64* %inc_ptr_value10, i64** %stack_ptr_address
  %4 = call i32 @call_invoke_method(i64* %2, i32 14, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond11 = icmp ne i32 %4, 1
  br i1 %ifcond11, label %then_block12, label %entry_ifend13

then_block12:                                     ; preds = %entry_ifend2
  %5 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend13:                                    ; preds = %entry_ifend2
  %stack_offset_value14 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value14, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value15 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value15, i64* %"lvar$1$", align 8
  %loaded_stack_ptr_address_value16 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value16, i64 -1
  %stack_pointer_offset_value17 = load i64, i64* %stack_pointer_offset_value, align 8
  %6 = trunc i64 %stack_pointer_offset_value17 to i32
  call void @push_jit_object(i32 %6)
  %loaded_stack_ptr_address_value18 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value18, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_pointer_offset_value17, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %7 = call i32 @run_cfloat_to_int_cast(i32 %6)
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run99_4()$$189"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657644 to i8*))
  %ifcond = icmp eq i64* %0, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %1 = call i32 @create_object(i64* %0)
  call void @push_jit_object(i32 %1)
  %2 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657652 to i8*))
  %ifcond3 = icmp eq i64* %2, null
  br i1 %ifcond3, label %then_block, label %entry_ifend2

entry_ifend2:                                     ; preds = %entry_ifend
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value6 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value6, align 8
  store i64 0, i64* %lvar_offset_value6, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %3 = zext i32 %1 to i64
  store i64 %3, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value7 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value7, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  store i64 4611911198408756429, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value9 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value10 = getelementptr i64, i64* %loaded_stack_ptr_address_value9, i64 1
  store i64* %inc_ptr_value10, i64** %stack_ptr_address
  %4 = call i32 @call_invoke_method(i64* %2, i32 14, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond11 = icmp ne i32 %4, 1
  br i1 %ifcond11, label %then_block12, label %entry_ifend13

then_block12:                                     ; preds = %entry_ifend2
  %5 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend13:                                    ; preds = %entry_ifend2
  %stack_offset_value14 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value14, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value15 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value15, i64* %"lvar$1$", align 8
  %loaded_stack_ptr_address_value16 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value16, i64 -1
  %stack_pointer_offset_value17 = load i64, i64* %stack_pointer_offset_value, align 8
  %6 = trunc i64 %stack_pointer_offset_value17 to i32
  call void @push_jit_object(i32 %6)
  %loaded_stack_ptr_address_value18 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value18, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_pointer_offset_value17, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %7 = call double @run_cdouble_to_double_cast(i32 %6)
  %8 = bitcast double %7 to i64
  store i64 %8, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run99_5()$$190"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657660 to i8*))
  %ifcond = icmp eq i64* %0, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %1 = call i32 @create_object(i64* %0)
  call void @push_jit_object(i32 %1)
  %2 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52657668 to i8*))
  %ifcond3 = icmp eq i64* %2, null
  br i1 %ifcond3, label %then_block, label %entry_ifend2

entry_ifend2:                                     ; preds = %entry_ifend
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value6 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value6, align 8
  store i64 0, i64* %lvar_offset_value6, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %3 = zext i32 %1 to i64
  store i64 %3, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value7 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value7, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  store i64 4611911198408756429, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value9 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value10 = getelementptr i64, i64* %loaded_stack_ptr_address_value9, i64 1
  store i64* %inc_ptr_value10, i64** %stack_ptr_address
  %4 = call i32 @call_invoke_method(i64* %2, i32 14, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond11 = icmp ne i32 %4, 1
  br i1 %ifcond11, label %then_block12, label %entry_ifend13

then_block12:                                     ; preds = %entry_ifend2
  %5 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend13:                                    ; preds = %entry_ifend2
  %stack_offset_value14 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value14, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value15 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value15, i64* %"lvar$1$", align 8
  %loaded_stack_ptr_address_value16 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value16, i64 -1
  %stack_pointer_offset_value17 = load i64, i64* %stack_pointer_offset_value, align 8
  %6 = trunc i64 %stack_pointer_offset_value17 to i32
  call void @push_jit_object(i32 %6)
  %loaded_stack_ptr_address_value18 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value18, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_pointer_offset_value17, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %7 = call i32 @run_cdouble_to_int_cast(i32 %6)
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run100()$$191"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  store i64 4611686018427387904, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run101()$$192"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  store i64 2, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run102()$$193"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  store i64 2, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run103()$$194"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  store i32 0, i32* @gSigInt
  store i32 0, i32* @gSigInt
  store i64 1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run104(lambda)$$195"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$2$" = alloca i64
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value1 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value1, i64* %"lvar$1$", align 8
  store i64 0, i64* %"lvar$2$"
  store i64 0, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$2$"
  store i64 0, i64* %"lvar$2$", align 8
  br label %for_start_pointk

for_start_pointk:                                 ; preds = %entry_ifend, %entry
  %lvar11 = phi i64 [ %5, %entry_ifend ], [ 0, %entry ]
  %0 = trunc i64 %lvar11 to i32
  %letmp = icmp slt i32 %0, 3
  br i1 %letmp, label %entry_condend, label %label_for_endk

entry_condend:                                    ; preds = %for_start_pointk
  store i32 0, i32* @gSigInt
  %1 = trunc i64 %stack_offset_value1 to i32
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %2 = zext i32 %1 to i64
  store i64 %2, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value4 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value4, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  store i64 123, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value6 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value7 = getelementptr i64, i64* %loaded_stack_ptr_address_value6, i64 1
  store i64* %inc_ptr_value7, i64** %stack_ptr_address
  %3 = call i32 @invoke_block_in_jit(i32 1, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond = icmp eq i32 %3, 0
  br i1 %ifcond, label %then_block, label %entry_ifend

label_for_endk:                                   ; preds = %for_start_pointk
  store i64 0, i64* %stack, align 8
  ret i32 1

then_block:                                       ; preds = %entry_condend
  ret i32 0

entry_ifend:                                      ; preds = %entry_condend
  %loaded_stack_ptr_address_value8 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value8, i64 -1
  %stack_pointer_offset_value9 = load i64, i64* %stack_pointer_offset_value, align 8
  %4 = trunc i64 %stack_pointer_offset_value9 to i32
  call void @push_jit_object(i32 %4)
  %loaded_stack_ptr_address_value10 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value10, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  %addtmp = add nuw i32 %0, 1
  store i64 0, i64* %"lvar$2$"
  %5 = zext i32 %addtmp to i64
  store i64 %5, i64* %"lvar$2$", align 8
  br label %for_start_pointk
}

define i32 @"JITTest.run105()$$196"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_integer(i32 1)
  call void @push_jit_object(i32 %0)
  %1 = call i32 @create_integer(i32 2)
  call void @push_jit_object(i32 %1)
  %2 = call i32 @create_integer(i32 3)
  call void @push_jit_object(i32 %2)
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %3 = zext i32 %0 to i64
  store i64 %3, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value1 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value1, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  %4 = zext i32 %1 to i64
  store i64 %4, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value3 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value4 = getelementptr i64, i64* %loaded_stack_ptr_address_value3, i64 1
  store i64* %inc_ptr_value4, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value4, align 8
  %5 = zext i32 %2 to i64
  store i64 %5, i64* %inc_ptr_value4, align 8
  %loaded_stack_ptr_address_value6 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value7 = getelementptr i64, i64* %loaded_stack_ptr_address_value6, i64 1
  store i64* %inc_ptr_value7, i64** %stack_ptr_address
  %6 = call %clvalue_and_bool_struct* @run_create_carray(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 3, i32 13916, i64* %constant)
  %7 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %6, i32 0, i32 0
  %8 = load i64, i64* %7, align 4
  %9 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %6, i32 0, i32 1
  %10 = load i32, i32* %9, align 4
  %ifcond = icmp eq i32 %10, 0
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %11 = trunc i64 %8 to i32
  call void @push_jit_object(i32 %11)
  store i64 0, i64* %"lvar$1$"
  store i64 %8, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %12 = call i32 @run_create_block_object(i64** %stack_ptr_address, i64* %stack, i64* %constant, i32 13924, i32 44, i32 13968, i32 15, i32 1, i32 0, i32 1, i64* %info)
  call void @push_jit_object(i32 %12)
  %13 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52658224 to i8*))
  %ifcond11 = icmp eq i64* %13, null
  br i1 %ifcond11, label %then_block, label %entry_ifend10

entry_ifend10:                                    ; preds = %entry_ifend
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value14 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value14, align 8
  store i64 %8, i64* %lvar_offset_value14, align 8
  %loaded_stack_ptr_address_value15 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value15, align 8
  %14 = zext i32 %11 to i64
  store i64 %14, i64* %loaded_stack_ptr_address_value15, align 8
  %loaded_stack_ptr_address_value16 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value17 = getelementptr i64, i64* %loaded_stack_ptr_address_value16, i64 1
  store i64* %inc_ptr_value17, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value17, align 8
  %15 = zext i32 %12 to i64
  store i64 %15, i64* %inc_ptr_value17, align 8
  %loaded_stack_ptr_address_value19 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value20 = getelementptr i64, i64* %loaded_stack_ptr_address_value19, i64 1
  store i64* %inc_ptr_value20, i64** %stack_ptr_address
  %16 = call i32 @call_invoke_method(i64* %13, i32 4, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond21 = icmp ne i32 %16, 1
  br i1 %ifcond21, label %then_block22, label %entry_ifend23

then_block22:                                     ; preds = %entry_ifend10
  %17 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend23:                                    ; preds = %entry_ifend10
  %stack_offset_value24 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value24, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value25 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value25, i64* %"lvar$1$", align 8
  %loaded_stack_ptr_address_value26 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value26, i64 -1
  %stack_pointer_offset_value27 = load i64, i64* %stack_pointer_offset_value, align 8
  %18 = trunc i64 %stack_pointer_offset_value27 to i32
  call void @push_jit_object(i32 %18)
  %loaded_stack_ptr_address_value28 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value28, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run106()$$197"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %VALUE_FOR_ANDAND_OROR = alloca i64
  %"lvar$3$" = alloca i64
  %"lvar$2$" = alloca i64
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i64 0, i64* %"lvar$2$"
  store i64 0, i64* %"lvar$2$", align 8
  store i64 0, i64* %"lvar$3$"
  store i64 0, i64* %"lvar$3$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$2$"
  store i64 123, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$3$"
  store i64 123, i64* %"lvar$3$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %VALUE_FOR_ANDAND_OROR, align 8
  store i64 0, i64* %VALUE_FOR_ANDAND_OROR, align 8
  store i64 1, i64* %VALUE_FOR_ANDAND_OROR, align 8
  %0 = trunc i64 1 to i1
  store i32 0, i32* @gSigInt
  br i1 %0, label %entry_condend, label %label_elsel

entry_condend:                                    ; preds = %entry
  store i64 123, i64* %stack, align 8
  ret i32 1

label_elsel:                                      ; preds = %entry
  store i64 245, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.callingMethod(String,Array,int,int)$$198"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %VALUE_FOR_ANDAND_OROR104 = alloca i64
  %VALUE_FOR_ANDAND_OROR = alloca i64
  %"lvar$7$" = alloca i64
  %"lvar$6$" = alloca i64
  %"lvar$5$" = alloca i64
  %"lvar$4$" = alloca i64
  %"lvar$3$" = alloca i64
  %"lvar$2$" = alloca i64
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value1 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value1, i64* %"lvar$1$", align 8
  %stack_offset_address_value2 = getelementptr i64, i64* %stack, i64 2
  %stack_offset_value3 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value3, i64* %"lvar$2$", align 8
  %stack_offset_address_value4 = getelementptr i64, i64* %stack, i64 3
  %stack_offset_value5 = load i64, i64* %stack_offset_address_value4, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value5, i64* %"lvar$3$", align 8
  store i64 0, i64* %"lvar$4$"
  store i64 0, i64* %"lvar$4$", align 8
  store i64 0, i64* %"lvar$5$"
  store i64 0, i64* %"lvar$5$", align 8
  store i64 0, i64* %"lvar$6$"
  store i64 0, i64* %"lvar$6$", align 8
  store i64 0, i64* %"lvar$7$"
  store i64 0, i64* %"lvar$7$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52658344 to i8*))
  %ifcond = icmp eq i64* %0, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %then_block299, %then_block241, %then_block191, %then_block138, %then_block73, %entry_ifend268, %label_if_endv, %label_if_elifv0a, %entry_condend165, %entry_ifend109, %entry_condend106, %entry_ifend27, %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %1 = call i32 @create_object(i64* %0)
  call void @push_jit_object(i32 %1)
  %2 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52658352 to i8*))
  %ifcond8 = icmp eq i64* %2, null
  br i1 %ifcond8, label %then_block, label %entry_ifend7

entry_ifend7:                                     ; preds = %entry_ifend
  %lvar9 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar9, i64* %lvar, align 8
  %lvar10 = load i64, i64* %"lvar$1$"
  %lvar_offset_value11 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar10, i64* %lvar_offset_value11, align 8
  %lvar12 = load i64, i64* %"lvar$2$"
  %lvar_offset_value13 = getelementptr i64, i64* %lvar, i64 2
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar12, i64* %lvar_offset_value13, align 8
  %lvar14 = load i64, i64* %"lvar$3$"
  %lvar_offset_value15 = getelementptr i64, i64* %lvar, i64 3
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar14, i64* %lvar_offset_value15, align 8
  %lvar16 = load i64, i64* %"lvar$4$"
  %lvar_offset_value17 = getelementptr i64, i64* %lvar, i64 4
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar16, i64* %lvar_offset_value17, align 8
  %lvar18 = load i64, i64* %"lvar$5$"
  %lvar_offset_value19 = getelementptr i64, i64* %lvar, i64 5
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar18, i64* %lvar_offset_value19, align 8
  %lvar20 = load i64, i64* %"lvar$6$"
  %lvar_offset_value21 = getelementptr i64, i64* %lvar, i64 6
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar20, i64* %lvar_offset_value21, align 8
  %lvar22 = load i64, i64* %"lvar$7$"
  %lvar_offset_value23 = getelementptr i64, i64* %lvar, i64 7
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar22, i64* %lvar_offset_value23, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %3 = zext i32 %1 to i64
  store i64 %3, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value24 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value24, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  %4 = call i32 @call_invoke_method(i64* %2, i32 0, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond25 = icmp ne i32 %4, 1
  br i1 %ifcond25, label %then_block26, label %entry_ifend27

then_block26:                                     ; preds = %entry_ifend7
  %5 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend27:                                    ; preds = %entry_ifend7
  %stack_offset_value28 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value28, i64* %"lvar$0$", align 8
  %stack_offset_value30 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value30, i64* %"lvar$1$", align 8
  %stack_offset_value32 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value32, i64* %"lvar$2$", align 8
  %stack_offset_value34 = load i64, i64* %stack_offset_address_value4, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value34, i64* %"lvar$3$", align 8
  %stack_offset_address_value35 = getelementptr i64, i64* %stack, i64 4
  %stack_offset_value36 = load i64, i64* %stack_offset_address_value35, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value36, i64* %"lvar$4$", align 8
  %stack_offset_address_value37 = getelementptr i64, i64* %stack, i64 5
  %stack_offset_value38 = load i64, i64* %stack_offset_address_value37, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value38, i64* %"lvar$5$", align 8
  %stack_offset_address_value39 = getelementptr i64, i64* %stack, i64 6
  %stack_offset_value40 = load i64, i64* %stack_offset_address_value39, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value40, i64* %"lvar$6$", align 8
  %stack_offset_address_value41 = getelementptr i64, i64* %stack, i64 7
  %stack_offset_value42 = load i64, i64* %stack_offset_address_value41, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value42, i64* %"lvar$7$", align 8
  %loaded_stack_ptr_address_value43 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value43, i64 -1
  %stack_pointer_offset_value44 = load i64, i64* %stack_pointer_offset_value, align 8
  %6 = trunc i64 %stack_pointer_offset_value44 to i32
  call void @push_jit_object(i32 %6)
  %loaded_stack_ptr_address_value45 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value45, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_pointer_offset_value44, i64* %"lvar$4$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$5$"
  store i64 0, i64* %"lvar$5$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$6$"
  store i64 0, i64* %"lvar$6$", align 8
  store i32 0, i32* @gSigInt
  %lvar46 = load i64, i64* %"lvar$1$"
  %7 = trunc i64 %lvar46 to i32
  %8 = call i32 @run_create_block_object(i64** %stack_ptr_address, i64* %stack, i64* %constant, i32 14120, i32 1408, i32 15528, i32 2062, i32 2, i32 7, i32 0, i64* %info)
  call void @push_jit_object(i32 %8)
  %9 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52661832 to i8*))
  %ifcond49 = icmp eq i64* %9, null
  br i1 %ifcond49, label %then_block, label %entry_ifend48

entry_ifend48:                                    ; preds = %entry_ifend27
  %lvar50 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar50, i64* %lvar, align 8
  %lvar52 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar52, i64* %lvar_offset_value11, align 8
  %lvar54 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar54, i64* %lvar_offset_value13, align 8
  %lvar56 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar56, i64* %lvar_offset_value15, align 8
  %lvar58 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar58, i64* %lvar_offset_value17, align 8
  %lvar60 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar60, i64* %lvar_offset_value19, align 8
  %lvar62 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar62, i64* %lvar_offset_value21, align 8
  %lvar64 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar64, i64* %lvar_offset_value23, align 8
  %loaded_stack_ptr_address_value66 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value66, align 8
  %10 = zext i32 %7 to i64
  store i64 %10, i64* %loaded_stack_ptr_address_value66, align 8
  %loaded_stack_ptr_address_value67 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value68 = getelementptr i64, i64* %loaded_stack_ptr_address_value67, i64 1
  store i64* %inc_ptr_value68, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value68, align 8
  %11 = zext i32 %8 to i64
  store i64 %11, i64* %inc_ptr_value68, align 8
  %loaded_stack_ptr_address_value70 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value71 = getelementptr i64, i64* %loaded_stack_ptr_address_value70, i64 1
  store i64* %inc_ptr_value71, i64** %stack_ptr_address
  %12 = call i32 @call_invoke_method(i64* %9, i32 4, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond72 = icmp ne i32 %12, 1
  br i1 %ifcond72, label %then_block73, label %entry_ifend74

then_block73:                                     ; preds = %entry_ifend48
  %13 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend74:                                    ; preds = %entry_ifend48
  %stack_offset_value78 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value78, i64* %"lvar$0$", align 8
  %stack_offset_value80 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value80, i64* %"lvar$1$", align 8
  %stack_offset_value82 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value82, i64* %"lvar$2$", align 8
  %stack_offset_value84 = load i64, i64* %stack_offset_address_value4, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value84, i64* %"lvar$3$", align 8
  %stack_offset_value86 = load i64, i64* %stack_offset_address_value35, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value86, i64* %"lvar$4$", align 8
  %stack_offset_value88 = load i64, i64* %stack_offset_address_value37, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value88, i64* %"lvar$5$", align 8
  %stack_offset_value90 = load i64, i64* %stack_offset_address_value39, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value90, i64* %"lvar$6$", align 8
  %stack_offset_value92 = load i64, i64* %stack_offset_address_value41, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value92, i64* %"lvar$7$", align 8
  %loaded_stack_ptr_address_value93 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value94 = getelementptr i64, i64* %loaded_stack_ptr_address_value93, i64 -1
  %stack_pointer_offset_value95 = load i64, i64* %stack_pointer_offset_value94, align 8
  %14 = trunc i64 %stack_pointer_offset_value95 to i32
  call void @push_jit_object(i32 %14)
  %loaded_stack_ptr_address_value96 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value97 = getelementptr i64, i64* %loaded_stack_ptr_address_value96, i64 1
  store i64* %dec_ptr_value97, i64** %stack_ptr_address
  store i32 0, i32* @gSigInt
  %lvar98 = load i64, i64* %"lvar$6$"
  %15 = trunc i64 %lvar98 to i32
  %16 = trunc i32 %15 to i1
  br i1 %16, label %entry_condend, label %label_elifv1a

entry_condend:                                    ; preds = %entry_ifend74
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$7$"
  store i64 0, i64* %"lvar$7$", align 8
  br label %label_if_endv

label_elifv1a:                                    ; preds = %entry_ifend74
  %lvar100 = load i64, i64* %"lvar$5$"
  %17 = trunc i64 %lvar100 to i32
  store i64 0, i64* %VALUE_FOR_ANDAND_OROR, align 8
  %18 = zext i32 %17 to i64
  store i64 %18, i64* %VALUE_FOR_ANDAND_OROR, align 8
  %19 = trunc i32 %17 to i1
  br i1 %19, label %label_or_endpointw, label %entry_condnotend

label_if_endv:                                    ; preds = %entry_ifend242, %entry_ifend192, %entry_condend
  store i32 0, i32* @gSigInt
  %20 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52662108 to i8*))
  %ifcond269 = icmp eq i64* %20, null
  br i1 %ifcond269, label %then_block, label %entry_ifend268

entry_condnotend:                                 ; preds = %label_elifv1a
  %lvar102 = load i64, i64* %"lvar$2$"
  %21 = trunc i64 %lvar102 to i32
  %lvar103 = load i64, i64* %"lvar$3$"
  %22 = trunc i64 %lvar103 to i32
  %subtmp = sub nuw i32 %22, 1
  %eqtmpx = icmp eq i32 %21, %subtmp
  store i64 0, i64* %VALUE_FOR_ANDAND_OROR104, align 8
  %23 = zext i1 %eqtmpx to i64
  store i64 %23, i64* %VALUE_FOR_ANDAND_OROR104, align 8
  br i1 %eqtmpx, label %entry_condend106, label %label_and_endpointx

label_or_endpointw:                               ; preds = %label_elifv1a, %label_and_endpointx
  %value_for_andand_oror163 = phi i64 [ %32, %label_and_endpointx ], [ %18, %label_elifv1a ]
  %24 = trunc i64 %value_for_andand_oror163 to i1
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$7$"
  store i64 123, i64* %"lvar$7$", align 8
  store i32 0, i32* @gSigInt
  %25 = call i32 @run_int_to_string_cast(i32 123)
  call void @push_jit_object(i32 %25)
  br i1 %24, label %entry_condend165, label %label_if_elifv0a

entry_condend106:                                 ; preds = %entry_condnotend
  %26 = call %clvalue_and_bool_struct* @load_class_field(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 0, i32 17688, i64* %constant)
  %27 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %26, i32 0, i32 0
  %28 = load i64, i64* %27, align 4
  %29 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %26, i32 0, i32 1
  %30 = load i32, i32* %29, align 4
  %ifcond110 = icmp eq i32 %30, 0
  br i1 %ifcond110, label %then_block, label %entry_ifend109

label_and_endpointx:                              ; preds = %entry_condnotend, %entry_ifend139
  %value_for_andand_oror = phi i64 [ %41, %entry_ifend139 ], [ %23, %entry_condnotend ]
  %31 = trunc i64 %value_for_andand_oror to i1
  %32 = zext i1 %31 to i64
  store i64 %32, i64* %VALUE_FOR_ANDAND_OROR, align 8
  br label %label_or_endpointw

entry_ifend109:                                   ; preds = %entry_condend106
  %33 = trunc i64 %28 to i32
  %lvar111 = load i64, i64* %"lvar$0$"
  %34 = trunc i64 %lvar111 to i32
  %35 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52661936 to i8*))
  %ifcond114 = icmp eq i64* %35, null
  br i1 %ifcond114, label %then_block, label %entry_ifend113

entry_ifend113:                                   ; preds = %entry_ifend109
  %lvar115 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar115, i64* %lvar, align 8
  %lvar117 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar117, i64* %lvar_offset_value11, align 8
  %lvar119 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar119, i64* %lvar_offset_value13, align 8
  %lvar121 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar121, i64* %lvar_offset_value15, align 8
  %lvar123 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar123, i64* %lvar_offset_value17, align 8
  %lvar125 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar125, i64* %lvar_offset_value19, align 8
  %lvar127 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar127, i64* %lvar_offset_value21, align 8
  %lvar129 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar129, i64* %lvar_offset_value23, align 8
  %loaded_stack_ptr_address_value131 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value131, align 8
  %36 = zext i32 %33 to i64
  store i64 %36, i64* %loaded_stack_ptr_address_value131, align 8
  %loaded_stack_ptr_address_value132 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value133 = getelementptr i64, i64* %loaded_stack_ptr_address_value132, i64 1
  store i64* %inc_ptr_value133, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value133, align 8
  %37 = zext i32 %34 to i64
  store i64 %37, i64* %inc_ptr_value133, align 8
  %loaded_stack_ptr_address_value135 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value136 = getelementptr i64, i64* %loaded_stack_ptr_address_value135, i64 1
  store i64* %inc_ptr_value136, i64** %stack_ptr_address
  %38 = call i32 @call_invoke_method(i64* %35, i32 35, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond137 = icmp ne i32 %38, 1
  br i1 %ifcond137, label %then_block138, label %entry_ifend139

then_block138:                                    ; preds = %entry_ifend113
  %39 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend139:                                   ; preds = %entry_ifend113
  %stack_offset_value143 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value143, i64* %"lvar$0$", align 8
  %stack_offset_value145 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value145, i64* %"lvar$1$", align 8
  %stack_offset_value147 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value147, i64* %"lvar$2$", align 8
  %stack_offset_value149 = load i64, i64* %stack_offset_address_value4, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value149, i64* %"lvar$3$", align 8
  %stack_offset_value151 = load i64, i64* %stack_offset_address_value35, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value151, i64* %"lvar$4$", align 8
  %stack_offset_value153 = load i64, i64* %stack_offset_address_value37, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value153, i64* %"lvar$5$", align 8
  %stack_offset_value155 = load i64, i64* %stack_offset_address_value39, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value155, i64* %"lvar$6$", align 8
  %stack_offset_value157 = load i64, i64* %stack_offset_address_value41, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value157, i64* %"lvar$7$", align 8
  %loaded_stack_ptr_address_value158 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value159 = getelementptr i64, i64* %loaded_stack_ptr_address_value158, i64 -1
  %stack_pointer_offset_value160 = load i64, i64* %stack_pointer_offset_value159, align 8
  %40 = trunc i64 %stack_pointer_offset_value160 to i32
  call void @push_jit_object(i32 %40)
  %loaded_stack_ptr_address_value161 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value162 = getelementptr i64, i64* %loaded_stack_ptr_address_value161, i64 1
  store i64* %dec_ptr_value162, i64** %stack_ptr_address
  %noteqtmp = icmp ne i32 %40, -1
  %41 = zext i1 %noteqtmp to i64
  store i64 %41, i64* %VALUE_FOR_ANDAND_OROR104, align 8
  br label %label_and_endpointx

entry_condend165:                                 ; preds = %label_or_endpointw
  %42 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52662012 to i8*))
  %ifcond170 = icmp eq i64* %42, null
  br i1 %ifcond170, label %then_block, label %entry_ifend169

label_if_elifv0a:                                 ; preds = %label_or_endpointw
  %43 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52662068 to i8*))
  %ifcond220 = icmp eq i64* %43, null
  br i1 %ifcond220, label %then_block, label %entry_ifend219

entry_ifend169:                                   ; preds = %entry_condend165
  %lvar171 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar171, i64* %lvar, align 8
  %lvar173 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar173, i64* %lvar_offset_value11, align 8
  %lvar175 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar175, i64* %lvar_offset_value13, align 8
  %lvar177 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar177, i64* %lvar_offset_value15, align 8
  %lvar179 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar179, i64* %lvar_offset_value17, align 8
  %lvar181 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar181, i64* %lvar_offset_value19, align 8
  %lvar183 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar183, i64* %lvar_offset_value21, align 8
  %lvar185 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar185, i64* %lvar_offset_value23, align 8
  %loaded_stack_ptr_address_value187 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value187, align 8
  %44 = zext i32 %25 to i64
  store i64 %44, i64* %loaded_stack_ptr_address_value187, align 8
  %loaded_stack_ptr_address_value188 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value189 = getelementptr i64, i64* %loaded_stack_ptr_address_value188, i64 1
  store i64* %inc_ptr_value189, i64** %stack_ptr_address
  %45 = call i32 @call_invoke_method(i64* %42, i32 19, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond190 = icmp ne i32 %45, 1
  br i1 %ifcond190, label %then_block191, label %entry_ifend192

then_block191:                                    ; preds = %entry_ifend169
  %46 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend192:                                   ; preds = %entry_ifend169
  %stack_offset_value196 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value196, i64* %"lvar$0$", align 8
  %stack_offset_value198 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value198, i64* %"lvar$1$", align 8
  %stack_offset_value200 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value200, i64* %"lvar$2$", align 8
  %stack_offset_value202 = load i64, i64* %stack_offset_address_value4, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value202, i64* %"lvar$3$", align 8
  %stack_offset_value204 = load i64, i64* %stack_offset_address_value35, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value204, i64* %"lvar$4$", align 8
  %stack_offset_value206 = load i64, i64* %stack_offset_address_value37, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value206, i64* %"lvar$5$", align 8
  %stack_offset_value208 = load i64, i64* %stack_offset_address_value39, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value208, i64* %"lvar$6$", align 8
  %stack_offset_value210 = load i64, i64* %stack_offset_address_value41, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value210, i64* %"lvar$7$", align 8
  %loaded_stack_ptr_address_value211 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value212 = getelementptr i64, i64* %loaded_stack_ptr_address_value211, i64 -1
  %stack_pointer_offset_value213 = load i64, i64* %stack_pointer_offset_value212, align 8
  %47 = trunc i64 %stack_pointer_offset_value213 to i32
  call void @push_jit_object(i32 %47)
  %loaded_stack_ptr_address_value214 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value215 = getelementptr i64, i64* %loaded_stack_ptr_address_value214, i64 1
  store i64* %dec_ptr_value215, i64** %stack_ptr_address
  br label %label_if_endv

entry_ifend219:                                   ; preds = %label_if_elifv0a
  %lvar221 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar221, i64* %lvar, align 8
  %lvar223 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar223, i64* %lvar_offset_value11, align 8
  %lvar225 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar225, i64* %lvar_offset_value13, align 8
  %lvar227 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar227, i64* %lvar_offset_value15, align 8
  %lvar229 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar229, i64* %lvar_offset_value17, align 8
  %lvar231 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar231, i64* %lvar_offset_value19, align 8
  %lvar233 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar233, i64* %lvar_offset_value21, align 8
  %lvar235 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar235, i64* %lvar_offset_value23, align 8
  %loaded_stack_ptr_address_value237 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value237, align 8
  %48 = zext i32 %25 to i64
  store i64 %48, i64* %loaded_stack_ptr_address_value237, align 8
  %loaded_stack_ptr_address_value238 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value239 = getelementptr i64, i64* %loaded_stack_ptr_address_value238, i64 1
  store i64* %inc_ptr_value239, i64** %stack_ptr_address
  %49 = call i32 @call_invoke_method(i64* %43, i32 19, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond240 = icmp ne i32 %49, 1
  br i1 %ifcond240, label %then_block241, label %entry_ifend242

then_block241:                                    ; preds = %entry_ifend219
  %50 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend242:                                   ; preds = %entry_ifend219
  %stack_offset_value246 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value246, i64* %"lvar$0$", align 8
  %stack_offset_value248 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value248, i64* %"lvar$1$", align 8
  %stack_offset_value250 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value250, i64* %"lvar$2$", align 8
  %stack_offset_value252 = load i64, i64* %stack_offset_address_value4, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value252, i64* %"lvar$3$", align 8
  %stack_offset_value254 = load i64, i64* %stack_offset_address_value35, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value254, i64* %"lvar$4$", align 8
  %stack_offset_value256 = load i64, i64* %stack_offset_address_value37, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value256, i64* %"lvar$5$", align 8
  %stack_offset_value258 = load i64, i64* %stack_offset_address_value39, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value258, i64* %"lvar$6$", align 8
  %stack_offset_value260 = load i64, i64* %stack_offset_address_value41, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value260, i64* %"lvar$7$", align 8
  %loaded_stack_ptr_address_value261 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value262 = getelementptr i64, i64* %loaded_stack_ptr_address_value261, i64 -1
  %stack_pointer_offset_value263 = load i64, i64* %stack_pointer_offset_value262, align 8
  %51 = trunc i64 %stack_pointer_offset_value263 to i32
  call void @push_jit_object(i32 %51)
  %loaded_stack_ptr_address_value264 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value265 = getelementptr i64, i64* %loaded_stack_ptr_address_value264, i64 1
  store i64* %dec_ptr_value265, i64** %stack_ptr_address
  br label %label_if_endv

entry_ifend268:                                   ; preds = %label_if_endv
  %52 = call i32 @create_object(i64* %20)
  call void @push_jit_object(i32 %52)
  %53 = call i32 @create_string_object(i8* inttoptr (i64 52662116 to i8*))
  call void @push_jit_object(i32 %53)
  %54 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52662120 to i8*))
  %ifcond272 = icmp eq i64* %54, null
  br i1 %ifcond272, label %then_block, label %entry_ifend271

entry_ifend271:                                   ; preds = %entry_ifend268
  %lvar273 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar273, i64* %lvar, align 8
  %lvar275 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar275, i64* %lvar_offset_value11, align 8
  %lvar277 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar277, i64* %lvar_offset_value13, align 8
  %lvar279 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar279, i64* %lvar_offset_value15, align 8
  %lvar281 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar281, i64* %lvar_offset_value17, align 8
  %lvar283 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar283, i64* %lvar_offset_value19, align 8
  %lvar285 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar285, i64* %lvar_offset_value21, align 8
  %lvar287 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar287, i64* %lvar_offset_value23, align 8
  %loaded_stack_ptr_address_value289 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value289, align 8
  %55 = zext i32 %52 to i64
  store i64 %55, i64* %loaded_stack_ptr_address_value289, align 8
  %loaded_stack_ptr_address_value290 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value291 = getelementptr i64, i64* %loaded_stack_ptr_address_value290, i64 1
  store i64* %inc_ptr_value291, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value291, align 8
  %56 = zext i32 %53 to i64
  store i64 %56, i64* %inc_ptr_value291, align 8
  %loaded_stack_ptr_address_value293 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value294 = getelementptr i64, i64* %loaded_stack_ptr_address_value293, i64 1
  store i64* %inc_ptr_value294, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value294, align 8
  store i64 0, i64* %inc_ptr_value294, align 8
  %loaded_stack_ptr_address_value296 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value297 = getelementptr i64, i64* %loaded_stack_ptr_address_value296, i64 1
  store i64* %inc_ptr_value297, i64** %stack_ptr_address
  %57 = call i32 @call_invoke_method(i64* %54, i32 3, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond298 = icmp ne i32 %57, 1
  br i1 %ifcond298, label %then_block299, label %entry_ifend300

then_block299:                                    ; preds = %entry_ifend271
  %58 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend300:                                   ; preds = %entry_ifend271
  %stack_offset_value304 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value304, i64* %"lvar$0$", align 8
  %stack_offset_value306 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value306, i64* %"lvar$1$", align 8
  %stack_offset_value308 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value308, i64* %"lvar$2$", align 8
  %stack_offset_value310 = load i64, i64* %stack_offset_address_value4, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value310, i64* %"lvar$3$", align 8
  %stack_offset_value312 = load i64, i64* %stack_offset_address_value35, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value312, i64* %"lvar$4$", align 8
  %stack_offset_value314 = load i64, i64* %stack_offset_address_value37, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value314, i64* %"lvar$5$", align 8
  %stack_offset_value316 = load i64, i64* %stack_offset_address_value39, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value316, i64* %"lvar$6$", align 8
  %stack_offset_value318 = load i64, i64* %stack_offset_address_value41, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value318, i64* %"lvar$7$", align 8
  %loaded_stack_ptr_address_value319 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value320 = getelementptr i64, i64* %loaded_stack_ptr_address_value319, i64 -1
  %stack_pointer_offset_value321 = load i64, i64* %stack_pointer_offset_value320, align 8
  %59 = trunc i64 %stack_pointer_offset_value321 to i32
  call void @push_jit_object(i32 %59)
  %loaded_stack_ptr_address_value322 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value323 = getelementptr i64, i64* %loaded_stack_ptr_address_value322, i64 1
  store i64* %dec_ptr_value323, i64** %stack_ptr_address
  store i64 %stack_pointer_offset_value321, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run108()$$199"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$3$" = alloca i64
  %"lvar$2$" = alloca i64
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i64 0, i64* %"lvar$2$"
  store i64 0, i64* %"lvar$2$", align 8
  store i64 0, i64* %"lvar$3$"
  store i64 0, i64* %"lvar$3$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_string_object(i8* inttoptr (i64 52662128 to i8*))
  call void @push_jit_object(i32 %0)
  store i64 0, i64* %"lvar$1$"
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %2 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52662132 to i8*))
  %ifcond = icmp eq i64* %2, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry_ifend47, %entry_ifend42, %entry_ifend38, %entry_ifend33, %entry_ifend21, %entry_ifend3, %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %3 = call i32 @create_object(i64* %2)
  call void @push_jit_object(i32 %3)
  %4 = trunc i64 %1 to i32
  %5 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %4, i32 1)
  %6 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %5, i32 0, i32 0
  %7 = load i64, i64* %6, align 4
  %8 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %5, i32 0, i32 1
  %9 = load i32, i32* %8, align 4
  %ifcond4 = icmp eq i32 %9, 0
  br i1 %ifcond4, label %then_block, label %entry_ifend3

entry_ifend3:                                     ; preds = %entry_ifend
  %10 = trunc i64 %7 to i32
  %11 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52662140 to i8*))
  %ifcond7 = icmp eq i64* %11, null
  br i1 %ifcond7, label %then_block, label %entry_ifend6

entry_ifend6:                                     ; preds = %entry_ifend3
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value10 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value10, align 8
  store i64 %1, i64* %lvar_offset_value10, align 8
  %lvar_offset_value12 = getelementptr i64, i64* %lvar, i64 2
  store i64 0, i64* %lvar_offset_value12, align 8
  store i64 0, i64* %lvar_offset_value12, align 8
  %lvar_offset_value14 = getelementptr i64, i64* %lvar, i64 3
  store i64 0, i64* %lvar_offset_value14, align 8
  store i64 0, i64* %lvar_offset_value14, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %12 = zext i32 %3 to i64
  store i64 %12, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value15 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value15, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  %13 = zext i32 %10 to i64
  store i64 %13, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value17 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value18 = getelementptr i64, i64* %loaded_stack_ptr_address_value17, i64 1
  store i64* %inc_ptr_value18, i64** %stack_ptr_address
  %14 = call i32 @call_invoke_method(i64* %11, i32 1, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond19 = icmp ne i32 %14, 1
  br i1 %ifcond19, label %then_block20, label %entry_ifend21

then_block20:                                     ; preds = %entry_ifend6
  %15 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend21:                                    ; preds = %entry_ifend6
  %stack_offset_value22 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value22, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value23 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value23, i64* %"lvar$1$", align 8
  %stack_offset_address_value24 = getelementptr i64, i64* %stack, i64 2
  %stack_offset_value25 = load i64, i64* %stack_offset_address_value24, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value25, i64* %"lvar$2$", align 8
  %stack_offset_address_value26 = getelementptr i64, i64* %stack, i64 3
  %stack_offset_value27 = load i64, i64* %stack_offset_address_value26, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value27, i64* %"lvar$3$", align 8
  %loaded_stack_ptr_address_value28 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value28, i64 -1
  %stack_pointer_offset_value29 = load i64, i64* %stack_pointer_offset_value, align 8
  %16 = trunc i64 %stack_pointer_offset_value29 to i32
  call void @push_jit_object(i32 %16)
  %loaded_stack_ptr_address_value30 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value30, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_pointer_offset_value29, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$3$"
  store i64 1, i64* %"lvar$3$", align 8
  store i32 0, i32* @gSigInt
  %17 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %16, i32 0)
  %18 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %17, i32 0, i32 0
  %19 = load i64, i64* %18, align 4
  %20 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %17, i32 0, i32 1
  %21 = load i32, i32* %20, align 4
  %ifcond34 = icmp eq i32 %21, 0
  br i1 %ifcond34, label %then_block, label %entry_ifend33

entry_ifend33:                                    ; preds = %entry_ifend21
  %22 = trunc i64 %19 to i32
  %23 = trunc i64 %stack_offset_value23 to i32
  %24 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %23, i32 0)
  %25 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %24, i32 0, i32 0
  %26 = load i64, i64* %25, align 4
  %27 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %24, i32 0, i32 1
  %28 = load i32, i32* %27, align 4
  %ifcond39 = icmp eq i32 %28, 0
  br i1 %ifcond39, label %then_block, label %entry_ifend38

entry_ifend38:                                    ; preds = %entry_ifend33
  %29 = trunc i64 %26 to i32
  %30 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %23, i32 2)
  %31 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %30, i32 0, i32 0
  %32 = load i64, i64* %31, align 4
  %33 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %30, i32 0, i32 1
  %34 = load i32, i32* %33, align 4
  %ifcond43 = icmp eq i32 %34, 0
  br i1 %ifcond43, label %then_block, label %entry_ifend42

entry_ifend42:                                    ; preds = %entry_ifend38
  %35 = trunc i64 %32 to i32
  %subtmp = add i32 %35, -1
  %subtmp45 = add i32 %subtmp, -1
  %36 = call %clvalue_and_bool_struct* @load_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %29, i32 %subtmp45)
  %37 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %36, i32 0, i32 0
  %38 = load i64, i64* %37, align 4
  %39 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %36, i32 0, i32 1
  %40 = load i32, i32* %39, align 4
  %ifcond48 = icmp eq i32 %40, 0
  br i1 %ifcond48, label %then_block, label %entry_ifend47

entry_ifend47:                                    ; preds = %entry_ifend42
  %41 = trunc i64 %38 to i32
  %42 = zext i32 %41 to i64
  %43 = call i32 @run_store_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %22, i32 1, i64 %42)
  %ifcond51 = icmp eq i32 %43, 0
  br i1 %ifcond51, label %then_block, label %entry_ifend50

entry_ifend50:                                    ; preds = %entry_ifend47
  store i32 0, i32* @gSigInt
  store i64 1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run108_1()$$200"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$3$" = alloca i64
  %"lvar$2$" = alloca i64
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i64 0, i64* %"lvar$2$"
  store i64 0, i64* %"lvar$2$", align 8
  store i64 0, i64* %"lvar$3$"
  store i64 0, i64* %"lvar$3$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_string_object(i8* inttoptr (i64 52662148 to i8*))
  call void @push_jit_object(i32 %0)
  store i64 0, i64* %"lvar$1$"
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %2 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52662152 to i8*))
  %ifcond = icmp eq i64* %2, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry_ifend71, %entry_ifend66, %entry_ifend62, %label_for_endy, %entry_ifend52, %entry_ifend47, %entry_ifend43, %entry_ifend38, %entry_condend, %for_start_pointy, %entry_ifend3, %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %3 = call i32 @create_object(i64* %2)
  call void @push_jit_object(i32 %3)
  %4 = trunc i64 %1 to i32
  %5 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %4, i32 1)
  %6 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %5, i32 0, i32 0
  %7 = load i64, i64* %6, align 4
  %8 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %5, i32 0, i32 1
  %9 = load i32, i32* %8, align 4
  %ifcond4 = icmp eq i32 %9, 0
  br i1 %ifcond4, label %then_block, label %entry_ifend3

entry_ifend3:                                     ; preds = %entry_ifend
  %10 = trunc i64 %7 to i32
  %11 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52662160 to i8*))
  %ifcond7 = icmp eq i64* %11, null
  br i1 %ifcond7, label %then_block, label %entry_ifend6

entry_ifend6:                                     ; preds = %entry_ifend3
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value10 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value10, align 8
  store i64 %1, i64* %lvar_offset_value10, align 8
  %lvar_offset_value12 = getelementptr i64, i64* %lvar, i64 2
  store i64 0, i64* %lvar_offset_value12, align 8
  store i64 0, i64* %lvar_offset_value12, align 8
  %lvar_offset_value14 = getelementptr i64, i64* %lvar, i64 3
  store i64 0, i64* %lvar_offset_value14, align 8
  store i64 0, i64* %lvar_offset_value14, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %12 = zext i32 %3 to i64
  store i64 %12, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value15 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value15, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  %13 = zext i32 %10 to i64
  store i64 %13, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value17 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value18 = getelementptr i64, i64* %loaded_stack_ptr_address_value17, i64 1
  store i64* %inc_ptr_value18, i64** %stack_ptr_address
  %14 = call i32 @call_invoke_method(i64* %11, i32 1, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond19 = icmp ne i32 %14, 1
  br i1 %ifcond19, label %then_block20, label %entry_ifend21

then_block20:                                     ; preds = %entry_ifend6
  %15 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend21:                                    ; preds = %entry_ifend6
  %stack_offset_value22 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value22, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value23 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value23, i64* %"lvar$1$", align 8
  %stack_offset_address_value24 = getelementptr i64, i64* %stack, i64 2
  %stack_offset_value25 = load i64, i64* %stack_offset_address_value24, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value25, i64* %"lvar$2$", align 8
  %stack_offset_address_value26 = getelementptr i64, i64* %stack, i64 3
  %stack_offset_value27 = load i64, i64* %stack_offset_address_value26, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value27, i64* %"lvar$3$", align 8
  %loaded_stack_ptr_address_value28 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value28, i64 -1
  %stack_pointer_offset_value29 = load i64, i64* %stack_pointer_offset_value, align 8
  %16 = trunc i64 %stack_pointer_offset_value29 to i32
  call void @push_jit_object(i32 %16)
  %loaded_stack_ptr_address_value30 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value30, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_pointer_offset_value29, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$3$"
  store i64 0, i64* %"lvar$3$", align 8
  br label %for_start_pointy

for_start_pointy:                                 ; preds = %entry_ifend55, %entry_ifend21
  %lvar57 = phi i64 [ %51, %entry_ifend55 ], [ 0, %entry_ifend21 ]
  %17 = trunc i64 %lvar57 to i32
  %18 = trunc i64 %stack_offset_value23 to i32
  %19 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %18, i32 2)
  %20 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %19, i32 0, i32 0
  %21 = load i64, i64* %20, align 4
  %22 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %19, i32 0, i32 1
  %23 = load i32, i32* %22, align 4
  %ifcond35 = icmp eq i32 %23, 0
  br i1 %ifcond35, label %then_block, label %entry_ifend34

entry_ifend34:                                    ; preds = %for_start_pointy
  %24 = trunc i64 %21 to i32
  %letmp = icmp slt i32 %17, %24
  store i32 0, i32* @gSigInt
  %25 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %16, i32 0)
  %26 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %25, i32 0, i32 0
  %27 = load i64, i64* %26, align 4
  %28 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %25, i32 0, i32 1
  %29 = load i32, i32* %28, align 4
  %ifcond39 = icmp eq i32 %29, 0
  br i1 %letmp, label %entry_condend, label %label_for_endy

entry_condend:                                    ; preds = %entry_ifend34
  br i1 %ifcond39, label %then_block, label %entry_ifend38

label_for_endy:                                   ; preds = %entry_ifend34
  br i1 %ifcond39, label %then_block, label %entry_ifend62

entry_ifend38:                                    ; preds = %entry_condend
  %30 = trunc i64 %27 to i32
  %31 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %18, i32 0)
  %32 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %31, i32 0, i32 0
  %33 = load i64, i64* %32, align 4
  %34 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %31, i32 0, i32 1
  %35 = load i32, i32* %34, align 4
  %ifcond44 = icmp eq i32 %35, 0
  br i1 %ifcond44, label %then_block, label %entry_ifend43

entry_ifend43:                                    ; preds = %entry_ifend38
  %36 = trunc i64 %33 to i32
  %37 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %18, i32 2)
  %38 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %37, i32 0, i32 0
  %39 = load i64, i64* %38, align 4
  %40 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %37, i32 0, i32 1
  %41 = load i32, i32* %40, align 4
  %ifcond48 = icmp eq i32 %41, 0
  br i1 %ifcond48, label %then_block, label %entry_ifend47

entry_ifend47:                                    ; preds = %entry_ifend43
  %42 = trunc i64 %39 to i32
  %.neg = sub i32 0, %17
  %subtmp = add i32 %42, -1
  %subtmp50 = add i32 %subtmp, %.neg
  %43 = call %clvalue_and_bool_struct* @load_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %36, i32 %subtmp50)
  %44 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %43, i32 0, i32 0
  %45 = load i64, i64* %44, align 4
  %46 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %43, i32 0, i32 1
  %47 = load i32, i32* %46, align 4
  %ifcond53 = icmp eq i32 %47, 0
  br i1 %ifcond53, label %then_block, label %entry_ifend52

entry_ifend52:                                    ; preds = %entry_ifend47
  %48 = trunc i64 %45 to i32
  %49 = zext i32 %48 to i64
  %50 = call i32 @run_store_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %30, i32 %17, i64 %49)
  %ifcond56 = icmp eq i32 %50, 0
  br i1 %ifcond56, label %then_block, label %entry_ifend55

entry_ifend55:                                    ; preds = %entry_ifend52
  %addtmp = add nuw i32 %17, 1
  store i64 0, i64* %"lvar$3$"
  %51 = zext i32 %addtmp to i64
  store i64 %51, i64* %"lvar$3$", align 8
  br label %for_start_pointy

entry_ifend62:                                    ; preds = %label_for_endy
  %52 = trunc i64 %27 to i32
  %53 = call i32 @run_store_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %52, i32 %17, i64 0)
  %ifcond67 = icmp eq i32 %53, 0
  br i1 %ifcond67, label %then_block, label %entry_ifend66

entry_ifend66:                                    ; preds = %entry_ifend62
  store i32 0, i32* @gSigInt
  %54 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %18, i32 2)
  %55 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %54, i32 0, i32 0
  %56 = load i64, i64* %55, align 4
  %57 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %54, i32 0, i32 1
  %58 = load i32, i32* %57, align 4
  %ifcond72 = icmp eq i32 %58, 0
  br i1 %ifcond72, label %then_block, label %entry_ifend71

entry_ifend71:                                    ; preds = %entry_ifend66
  %59 = trunc i64 %56 to i32
  %60 = zext i32 %59 to i64
  %61 = call i32 @store_field(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %16, i64 %60, i32 2)
  %ifcond75 = icmp eq i32 %61, 0
  br i1 %ifcond75, label %then_block, label %entry_ifend74

entry_ifend74:                                    ; preds = %entry_ifend71
  store i32 0, i32* @gSigInt
  %62 = zext i32 %16 to i64
  store i64 %62, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run109(int,String)$$201"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$7$" = alloca i64
  %"lvar$6$" = alloca i64
  %"lvar$5$" = alloca i64
  %"lvar$4$" = alloca i64
  %"lvar$3$" = alloca i64
  %"lvar$2$" = alloca i64
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value1 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value1, i64* %"lvar$1$", align 8
  %stack_offset_address_value2 = getelementptr i64, i64* %stack, i64 2
  %stack_offset_value3 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value3, i64* %"lvar$2$", align 8
  store i64 0, i64* %"lvar$3$"
  store i64 0, i64* %"lvar$3$", align 8
  store i64 0, i64* %"lvar$4$"
  store i64 0, i64* %"lvar$4$", align 8
  store i64 0, i64* %"lvar$5$"
  store i64 0, i64* %"lvar$5$", align 8
  store i64 0, i64* %"lvar$6$"
  store i64 0, i64* %"lvar$6$", align 8
  store i64 0, i64* %"lvar$7$"
  store i64 0, i64* %"lvar$7$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_string_object(i8* inttoptr (i64 52662240 to i8*))
  call void @push_jit_object(i32 %0)
  store i64 0, i64* %"lvar$3$"
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %"lvar$3$", align 8
  store i32 0, i32* @gSigInt
  %2 = trunc i64 %stack_offset_value3 to i32
  %3 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52662244 to i8*))
  %ifcond = icmp eq i64* %3, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry_ifend145, %entry_ifend140, %entry_ifend135, %entry_ifend130, %label_for_endzc, %entry_ifend116, %entry_ifend112, %entry_condend104, %for_start_pointzc, %entry_ifend87, %entry_ifend83, %entry_condend75, %entry_ifend63, %entry_ifend59, %entry_condend, %entry_ifend44, %entry_ifend23, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value7 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value7, align 8
  store i64 %stack_offset_value1, i64* %lvar_offset_value7, align 8
  %lvar_offset_value9 = getelementptr i64, i64* %lvar, i64 2
  store i64 0, i64* %lvar_offset_value9, align 8
  store i64 %stack_offset_value3, i64* %lvar_offset_value9, align 8
  %lvar_offset_value11 = getelementptr i64, i64* %lvar, i64 3
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %1, i64* %lvar_offset_value11, align 8
  %lvar_offset_value13 = getelementptr i64, i64* %lvar, i64 4
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 0, i64* %lvar_offset_value13, align 8
  %lvar_offset_value15 = getelementptr i64, i64* %lvar, i64 5
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 0, i64* %lvar_offset_value15, align 8
  %lvar_offset_value17 = getelementptr i64, i64* %lvar, i64 6
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 0, i64* %lvar_offset_value17, align 8
  %lvar18 = load i64, i64* %"lvar$7$"
  %lvar_offset_value19 = getelementptr i64, i64* %lvar, i64 7
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar18, i64* %lvar_offset_value19, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %4 = zext i32 %2 to i64
  store i64 %4, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value20 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value20, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  %5 = call i32 @call_invoke_method(i64* %3, i32 7, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond21 = icmp ne i32 %5, 1
  br i1 %ifcond21, label %then_block22, label %entry_ifend23

then_block22:                                     ; preds = %entry_ifend
  %6 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend23:                                    ; preds = %entry_ifend
  %stack_offset_value24 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value24, i64* %"lvar$0$", align 8
  %stack_offset_value26 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value26, i64* %"lvar$1$", align 8
  %stack_offset_value28 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value28, i64* %"lvar$2$", align 8
  %stack_offset_address_value29 = getelementptr i64, i64* %stack, i64 3
  %stack_offset_value30 = load i64, i64* %stack_offset_address_value29, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value30, i64* %"lvar$3$", align 8
  %stack_offset_address_value31 = getelementptr i64, i64* %stack, i64 4
  %stack_offset_value32 = load i64, i64* %stack_offset_address_value31, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value32, i64* %"lvar$4$", align 8
  %stack_offset_address_value33 = getelementptr i64, i64* %stack, i64 5
  %stack_offset_value34 = load i64, i64* %stack_offset_address_value33, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value34, i64* %"lvar$5$", align 8
  %stack_offset_address_value35 = getelementptr i64, i64* %stack, i64 6
  %stack_offset_value36 = load i64, i64* %stack_offset_address_value35, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value36, i64* %"lvar$6$", align 8
  %stack_offset_address_value37 = getelementptr i64, i64* %stack, i64 7
  %stack_offset_value38 = load i64, i64* %stack_offset_address_value37, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value38, i64* %"lvar$7$", align 8
  %loaded_stack_ptr_address_value39 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value39, i64 -1
  %stack_pointer_offset_value40 = load i64, i64* %stack_pointer_offset_value, align 8
  %7 = trunc i64 %stack_pointer_offset_value40 to i32
  call void @push_jit_object(i32 %7)
  %loaded_stack_ptr_address_value41 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value41, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_pointer_offset_value40, i64* %"lvar$4$", align 8
  store i32 0, i32* @gSigInt
  %8 = trunc i64 %stack_offset_value30 to i32
  %9 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %8, i32 2)
  %10 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %9, i32 0, i32 0
  %11 = load i64, i64* %10, align 4
  %12 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %9, i32 0, i32 1
  %13 = load i32, i32* %12, align 4
  %ifcond45 = icmp eq i32 %13, 0
  br i1 %ifcond45, label %then_block, label %entry_ifend44

entry_ifend44:                                    ; preds = %entry_ifend23
  %14 = trunc i64 %11 to i32
  %addtmp = add i32 %14, 1
  %addtmp47 = add i32 %addtmp, %7
  %multmp = mul nuw i32 %addtmp47, 2
  %addtmp48 = add nuw i32 %multmp, 1
  store i64 0, i64* %"lvar$5$"
  %15 = zext i32 %addtmp48 to i64
  store i64 %15, i64* %"lvar$5$", align 8
  store i32 0, i32* @gSigInt
  %16 = trunc i64 %15 to i32
  %17 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52662252 to i8*))
  %ifcond52 = icmp eq i64* %17, null
  br i1 %ifcond52, label %then_block, label %entry_ifend51

entry_ifend51:                                    ; preds = %entry_ifend44
  %18 = call i32 @create_array_object(i64* %17, i32 %16)
  call void @push_jit_object(i32 %18)
  store i64 0, i64* %"lvar$6$"
  %19 = zext i32 %18 to i64
  store i64 %19, i64* %"lvar$6$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$7$"
  store i64 0, i64* %"lvar$7$", align 8
  br label %for_start_pointz

for_start_pointz:                                 ; preds = %entry_ifend66, %entry_ifend51
  %lvar56 = phi i64 [ %39, %entry_ifend66 ], [ 0, %entry_ifend51 ]
  %20 = trunc i64 %lvar56 to i32
  %21 = trunc i64 %stack_offset_value26 to i32
  %letmp = icmp slt i32 %20, %21
  store i32 0, i32* @gSigInt
  br i1 %letmp, label %entry_condend, label %label_for_endz

entry_condend:                                    ; preds = %for_start_pointz
  %22 = trunc i64 %19 to i32
  %23 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %8, i32 0)
  %24 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %23, i32 0, i32 0
  %25 = load i64, i64* %24, align 4
  %26 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %23, i32 0, i32 1
  %27 = load i32, i32* %26, align 4
  %ifcond60 = icmp eq i32 %27, 0
  br i1 %ifcond60, label %then_block, label %entry_ifend59

label_for_endz:                                   ; preds = %for_start_pointz
  store i64 0, i64* %"lvar$7$"
  store i64 0, i64* %"lvar$7$", align 8
  br label %for_start_pointzb

entry_ifend59:                                    ; preds = %entry_condend
  %28 = trunc i64 %25 to i32
  %lvar61 = load i64, i64* %"lvar$7$"
  %29 = trunc i64 %lvar61 to i32
  %30 = call %clvalue_and_bool_struct* @load_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %28, i32 %29)
  %31 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %30, i32 0, i32 0
  %32 = load i64, i64* %31, align 4
  %33 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %30, i32 0, i32 1
  %34 = load i32, i32* %33, align 4
  %ifcond64 = icmp eq i32 %34, 0
  br i1 %ifcond64, label %then_block, label %entry_ifend63

entry_ifend63:                                    ; preds = %entry_ifend59
  %35 = trunc i64 %32 to i32
  %36 = zext i32 %35 to i64
  %37 = call i32 @run_store_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %22, i32 %20, i64 %36)
  %ifcond67 = icmp eq i32 %37, 0
  br i1 %ifcond67, label %then_block, label %entry_ifend66

entry_ifend66:                                    ; preds = %entry_ifend63
  %lvar68 = load i64, i64* %"lvar$7$"
  %38 = trunc i64 %lvar68 to i32
  %addtmp69 = add nuw i32 %38, 1
  store i64 0, i64* %"lvar$7$"
  %39 = zext i32 %addtmp69 to i64
  store i64 %39, i64* %"lvar$7$", align 8
  br label %for_start_pointz

for_start_pointzb:                                ; preds = %entry_ifend90, %label_for_endz
  %lvar78 = phi i64 [ %60, %entry_ifend90 ], [ 0, %label_for_endz ]
  %40 = trunc i64 %lvar78 to i32
  %letmp73 = icmp slt i32 %40, %7
  store i32 0, i32* @gSigInt
  br i1 %letmp73, label %entry_condend75, label %label_for_endzb

entry_condend75:                                  ; preds = %for_start_pointzb
  %41 = trunc i64 %19 to i32
  %addtmp80 = add nuw i32 %21, %40
  %42 = trunc i64 %stack_offset_value28 to i32
  %43 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %42, i32 0)
  %44 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %43, i32 0, i32 0
  %45 = load i64, i64* %44, align 4
  %46 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %43, i32 0, i32 1
  %47 = load i32, i32* %46, align 4
  %ifcond84 = icmp eq i32 %47, 0
  br i1 %ifcond84, label %then_block, label %entry_ifend83

label_for_endzb:                                  ; preds = %for_start_pointzb
  store i64 0, i64* %"lvar$7$"
  %48 = zext i32 %21 to i64
  store i64 %48, i64* %"lvar$7$", align 8
  br label %for_start_pointzc

entry_ifend83:                                    ; preds = %entry_condend75
  %49 = trunc i64 %45 to i32
  %lvar85 = load i64, i64* %"lvar$7$"
  %50 = trunc i64 %lvar85 to i32
  %51 = call %clvalue_and_bool_struct* @load_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %49, i32 %50)
  %52 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %51, i32 0, i32 0
  %53 = load i64, i64* %52, align 4
  %54 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %51, i32 0, i32 1
  %55 = load i32, i32* %54, align 4
  %ifcond88 = icmp eq i32 %55, 0
  br i1 %ifcond88, label %then_block, label %entry_ifend87

entry_ifend87:                                    ; preds = %entry_ifend83
  %56 = trunc i64 %53 to i32
  %57 = zext i32 %56 to i64
  %58 = call i32 @run_store_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %41, i32 %addtmp80, i64 %57)
  %ifcond91 = icmp eq i32 %58, 0
  br i1 %ifcond91, label %then_block, label %entry_ifend90

entry_ifend90:                                    ; preds = %entry_ifend87
  %lvar92 = load i64, i64* %"lvar$7$"
  %59 = trunc i64 %lvar92 to i32
  %addtmp93 = add nuw i32 %59, 1
  store i64 0, i64* %"lvar$7$"
  %60 = zext i32 %addtmp93 to i64
  store i64 %60, i64* %"lvar$7$", align 8
  br label %for_start_pointzb

for_start_pointzc:                                ; preds = %entry_ifend119, %label_for_endzb
  %lvar97 = phi i64 [ %87, %entry_ifend119 ], [ %48, %label_for_endzb ]
  %61 = trunc i64 %lvar97 to i32
  %62 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %8, i32 2)
  %63 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %62, i32 0, i32 0
  %64 = load i64, i64* %63, align 4
  %65 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %62, i32 0, i32 1
  %66 = load i32, i32* %65, align 4
  %ifcond101 = icmp eq i32 %66, 0
  br i1 %ifcond101, label %then_block, label %entry_ifend100

entry_ifend100:                                   ; preds = %for_start_pointzc
  %67 = trunc i64 %64 to i32
  %letmp102 = icmp slt i32 %61, %67
  store i32 0, i32* @gSigInt
  %68 = trunc i64 %19 to i32
  %lvar107 = load i64, i64* %"lvar$7$"
  %69 = trunc i64 %lvar107 to i32
  %addtmp109 = add nuw i32 %7, %69
  br i1 %letmp102, label %entry_condend104, label %label_for_endzc

entry_condend104:                                 ; preds = %entry_ifend100
  %70 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %8, i32 0)
  %71 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %70, i32 0, i32 0
  %72 = load i64, i64* %71, align 4
  %73 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %70, i32 0, i32 1
  %74 = load i32, i32* %73, align 4
  %ifcond113 = icmp eq i32 %74, 0
  br i1 %ifcond113, label %then_block, label %entry_ifend112

label_for_endzc:                                  ; preds = %entry_ifend100
  %75 = call i32 @run_store_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %68, i32 %addtmp109, i64 0)
  %ifcond131 = icmp eq i32 %75, 0
  br i1 %ifcond131, label %then_block, label %entry_ifend130

entry_ifend112:                                   ; preds = %entry_condend104
  %76 = trunc i64 %72 to i32
  %lvar114 = load i64, i64* %"lvar$7$"
  %77 = trunc i64 %lvar114 to i32
  %78 = call %clvalue_and_bool_struct* @load_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %76, i32 %77)
  %79 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %78, i32 0, i32 0
  %80 = load i64, i64* %79, align 4
  %81 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %78, i32 0, i32 1
  %82 = load i32, i32* %81, align 4
  %ifcond117 = icmp eq i32 %82, 0
  br i1 %ifcond117, label %then_block, label %entry_ifend116

entry_ifend116:                                   ; preds = %entry_ifend112
  %83 = trunc i64 %80 to i32
  %84 = zext i32 %83 to i64
  %85 = call i32 @run_store_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %68, i32 %addtmp109, i64 %84)
  %ifcond120 = icmp eq i32 %85, 0
  br i1 %ifcond120, label %then_block, label %entry_ifend119

entry_ifend119:                                   ; preds = %entry_ifend116
  %lvar121 = load i64, i64* %"lvar$7$"
  %86 = trunc i64 %lvar121 to i32
  %addtmp122 = add nuw i32 %86, 1
  store i64 0, i64* %"lvar$7$"
  %87 = zext i32 %addtmp122 to i64
  store i64 %87, i64* %"lvar$7$", align 8
  br label %for_start_pointzc

entry_ifend130:                                   ; preds = %label_for_endzc
  store i32 0, i32* @gSigInt
  %88 = zext i32 %68 to i64
  %89 = call i32 @store_field(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %8, i64 %88, i32 0)
  %ifcond136 = icmp eq i32 %89, 0
  br i1 %ifcond136, label %then_block, label %entry_ifend135

entry_ifend135:                                   ; preds = %entry_ifend130
  store i32 0, i32* @gSigInt
  %90 = zext i32 %16 to i64
  %91 = call i32 @store_field(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %8, i64 %90, i32 1)
  %ifcond141 = icmp eq i32 %91, 0
  br i1 %ifcond141, label %then_block, label %entry_ifend140

entry_ifend140:                                   ; preds = %entry_ifend135
  store i32 0, i32* @gSigInt
  %92 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %8, i32 2)
  %93 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %92, i32 0, i32 0
  %94 = load i64, i64* %93, align 4
  %95 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %92, i32 0, i32 1
  %96 = load i32, i32* %95, align 4
  %ifcond146 = icmp eq i32 %96, 0
  br i1 %ifcond146, label %then_block, label %entry_ifend145

entry_ifend145:                                   ; preds = %entry_ifend140
  %97 = trunc i64 %94 to i32
  %addtmp148 = add nuw i32 %7, %97
  %98 = zext i32 %addtmp148 to i64
  %99 = call i32 @store_field(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %8, i64 %98, i32 2)
  %ifcond151 = icmp eq i32 %99, 0
  br i1 %ifcond151, label %then_block, label %entry_ifend150

entry_ifend150:                                   ; preds = %entry_ifend145
  store i32 0, i32* @gSigInt
  %100 = zext i32 %8 to i64
  store i64 %100, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run110()$$202"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$2$" = alloca i64
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i64 0, i64* %"lvar$2$"
  store i64 0, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$1$"
  store i64 66, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %gepaddtmp = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %"lvar$2$"
  %0 = ptrtoint i64* %gepaddtmp to i64
  store i64 %0, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  %1 = inttoptr i64 %0 to i8*
  store i64 %stack_offset_value, i64* %lvar, align 8
  store i64 66, i64* %gepaddtmp, align 8
  %lvar_offset_value6 = getelementptr i64, i64* %lvar, i64 2
  store i64 %0, i64* %lvar_offset_value6, align 8
  %2 = bitcast i8* %1 to i32*
  %llvm_value = load i32, i32* %2, align 4
  %3 = zext i32 %llvm_value to i64
  store i64 %3, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run111()$$203"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$2$" = alloca i64
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i64 0, i64* %"lvar$2$"
  store i64 0, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$1$"
  store i64 65, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %gepaddtmp = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %"lvar$2$"
  %0 = ptrtoint i64* %gepaddtmp to i64
  store i64 %0, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  %1 = inttoptr i64 %0 to i8*
  store i64 %stack_offset_value, i64* %lvar, align 8
  store i64 65, i64* %gepaddtmp, align 8
  %lvar_offset_value6 = getelementptr i64, i64* %lvar, i64 2
  store i64 %0, i64* %lvar_offset_value6, align 8
  %2 = bitcast i8* %1 to i32*
  store i32 66, i32* %2, align 4
  %stack_offset_value7 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value7, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value8 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value8, i64* %"lvar$1$", align 8
  %stack_offset_address_value9 = getelementptr i64, i64* %stack, i64 2
  %stack_offset_value10 = load i64, i64* %stack_offset_address_value9, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value10, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  %3 = trunc i64 %stack_offset_value8 to i32
  %4 = zext i32 %3 to i64
  store i64 %4, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run112()$$204"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_string_object(i8* inttoptr (i64 52662476 to i8*))
  call void @push_jit_object(i32 %0)
  %1 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52662504 to i8*))
  %ifcond = icmp eq i64* %1, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %2 = zext i32 %0 to i64
  store i64 %2, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value2 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value2, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  %3 = call i32 @call_invoke_method(i64* %1, i32 3, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond3 = icmp ne i32 %3, 1
  br i1 %ifcond3, label %then_block4, label %entry_ifend5

then_block4:                                      ; preds = %entry_ifend
  %4 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend5:                                     ; preds = %entry_ifend
  %stack_offset_value6 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value6, i64* %"lvar$0$", align 8
  %loaded_stack_ptr_address_value7 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value7, i64 -1
  %stack_pointer_offset_value8 = load i64, i64* %stack_pointer_offset_value, align 8
  %5 = trunc i64 %stack_pointer_offset_value8 to i32
  call void @push_jit_object(i32 %5)
  %loaded_stack_ptr_address_value9 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value9, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i32 0, i32* @gSigInt
  store i64 100, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run112()$$205"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = trunc i64 %stack_offset_value to i32
  %1 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52662512 to i8*))
  %ifcond = icmp eq i64* %1, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %2 = zext i32 %0 to i64
  store i64 %2, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value3 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value3, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  %3 = call i32 @call_invoke_method(i64* %1, i32 204, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond4 = icmp ne i32 %3, 1
  br i1 %ifcond4, label %then_block5, label %entry_ifend6

then_block5:                                      ; preds = %entry_ifend
  %4 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend6:                                     ; preds = %entry_ifend
  %stack_offset_value7 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value7, i64* %"lvar$0$", align 8
  %loaded_stack_ptr_address_value8 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value8, i64 -1
  %stack_pointer_offset_value9 = load i64, i64* %stack_pointer_offset_value, align 8
  %5 = trunc i64 %stack_pointer_offset_value9 to i32
  call void @push_jit_object(i32 %5)
  %loaded_stack_ptr_address_value10 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value10, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i32 0, i32* @gSigInt
  store i64 101, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run113()$$206"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %VALUE_FOR_ANDAND_OROR1 = alloca i64
  %VALUE_FOR_ANDAND_OROR = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %VALUE_FOR_ANDAND_OROR, align 8
  store i64 0, i64* %VALUE_FOR_ANDAND_OROR, align 8
  store i64 0, i64* %VALUE_FOR_ANDAND_OROR1, align 8
  store i64 0, i64* %VALUE_FOR_ANDAND_OROR1, align 8
  store i64 0, i64* %VALUE_FOR_ANDAND_OROR, align 8
  store i32 0, i32* @gSigInt
  store i64 1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run114()$$207"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %VALUE_FOR_ANDAND_OROR4 = alloca i64
  %VALUE_FOR_ANDAND_OROR = alloca i64
  %"lvar$2$" = alloca i64
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i64 0, i64* %"lvar$2$"
  store i64 0, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$1$"
  store i64 1, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$2$"
  store i64 0, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %VALUE_FOR_ANDAND_OROR, align 8
  store i64 1, i64* %VALUE_FOR_ANDAND_OROR, align 8
  store i32 0, i32* @gSigInt
  store i64 1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run115()$$208"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %VALUE_FOR_ANDAND_OROR23 = alloca i64
  %VALUE_FOR_ANDAND_OROR = alloca i64
  %"lvar$2$" = alloca i64
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i64 0, i64* %"lvar$2$"
  store i64 0, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$1$"
  store i64 1, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52662856 to i8*))
  %ifcond = icmp eq i64* %0, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %1 = call i32 @create_object(i64* %0)
  call void @push_jit_object(i32 %1)
  %2 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52662864 to i8*))
  %ifcond3 = icmp eq i64* %2, null
  br i1 %ifcond3, label %then_block, label %entry_ifend2

entry_ifend2:                                     ; preds = %entry_ifend
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value6 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value6, align 8
  store i64 1, i64* %lvar_offset_value6, align 8
  %lvar_offset_value8 = getelementptr i64, i64* %lvar, i64 2
  store i64 0, i64* %lvar_offset_value8, align 8
  store i64 0, i64* %lvar_offset_value8, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %3 = zext i32 %1 to i64
  store i64 %3, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value9 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value9, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  %4 = call i32 @call_invoke_method(i64* %2, i32 0, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond10 = icmp ne i32 %4, 1
  br i1 %ifcond10, label %then_block11, label %entry_ifend12

then_block11:                                     ; preds = %entry_ifend2
  %5 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend12:                                    ; preds = %entry_ifend2
  %stack_offset_value13 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value13, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value14 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value14, i64* %"lvar$1$", align 8
  %stack_offset_address_value15 = getelementptr i64, i64* %stack, i64 2
  %stack_offset_value16 = load i64, i64* %stack_offset_address_value15, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value16, i64* %"lvar$2$", align 8
  %loaded_stack_ptr_address_value17 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value17, i64 -1
  %stack_pointer_offset_value18 = load i64, i64* %stack_pointer_offset_value, align 8
  %6 = trunc i64 %stack_pointer_offset_value18 to i32
  call void @push_jit_object(i32 %6)
  %loaded_stack_ptr_address_value19 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value19, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_pointer_offset_value18, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  %7 = trunc i64 %stack_offset_value14 to i32
  %eqtmpx = icmp eq i32 %7, 1
  store i64 0, i64* %VALUE_FOR_ANDAND_OROR, align 8
  %8 = zext i1 %eqtmpx to i64
  store i64 %8, i64* %VALUE_FOR_ANDAND_OROR, align 8
  br i1 %eqtmpx, label %label_or_endpointzk, label %entry_condnotend

entry_condnotend:                                 ; preds = %entry_ifend12
  %eqtmpx22 = icmp eq i32 %6, 0
  store i64 0, i64* %VALUE_FOR_ANDAND_OROR23, align 8
  %9 = zext i1 %eqtmpx22 to i64
  store i64 %9, i64* %VALUE_FOR_ANDAND_OROR23, align 8
  br i1 %eqtmpx22, label %entry_condend, label %label_and_endpointzl

label_or_endpointzk:                              ; preds = %entry_ifend12, %label_and_endpointzl
  %value_for_andand_oror26 = phi i64 [ %13, %label_and_endpointzl ], [ %8, %entry_ifend12 ]
  %10 = trunc i64 %value_for_andand_oror26 to i1
  store i32 0, i32* @gSigInt
  br i1 %10, label %entry_condend28, label %label_elsezj

entry_condend:                                    ; preds = %entry_condnotend
  %gttmp = icmp sgt i32 %7, 0
  %11 = zext i1 %gttmp to i64
  store i64 %11, i64* %VALUE_FOR_ANDAND_OROR23, align 8
  br label %label_and_endpointzl

label_and_endpointzl:                             ; preds = %entry_condnotend, %entry_condend
  %value_for_andand_oror = phi i64 [ %11, %entry_condend ], [ %9, %entry_condnotend ]
  %12 = trunc i64 %value_for_andand_oror to i1
  %13 = zext i1 %12 to i64
  store i64 %13, i64* %VALUE_FOR_ANDAND_OROR, align 8
  br label %label_or_endpointzk

entry_condend28:                                  ; preds = %label_or_endpointzk
  store i64 1, i64* %stack, align 8
  ret i32 1

label_elsezj:                                     ; preds = %label_or_endpointzk
  store i64 0, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run116()$$209"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %VALUE_FOR_ANDAND_OROR4 = alloca i64
  %VALUE_FOR_ANDAND_OROR = alloca i64
  %"lvar$2$" = alloca i64
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i64 0, i64* %"lvar$2$"
  store i64 0, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$1$"
  store i64 2, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$2$"
  store i64 0, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %VALUE_FOR_ANDAND_OROR, align 8
  store i64 0, i64* %VALUE_FOR_ANDAND_OROR, align 8
  store i64 0, i64* %VALUE_FOR_ANDAND_OROR4, align 8
  store i64 1, i64* %VALUE_FOR_ANDAND_OROR4, align 8
  store i64 1, i64* %VALUE_FOR_ANDAND_OROR4, align 8
  store i64 1, i64* %VALUE_FOR_ANDAND_OROR, align 8
  %0 = trunc i64 1 to i1
  store i32 0, i32* @gSigInt
  br i1 %0, label %entry_condend9, label %label_elsezm

entry_condend9:                                   ; preds = %entry
  store i64 1, i64* %stack, align 8
  ret i32 1

label_elsezm:                                     ; preds = %entry
  store i64 0, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run116_5()$$210"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %VALUE_FOR_ANDAND_OROR1 = alloca i64
  %VALUE_FOR_ANDAND_OROR = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %VALUE_FOR_ANDAND_OROR, align 8
  store i64 0, i64* %VALUE_FOR_ANDAND_OROR, align 8
  store i64 0, i64* %VALUE_FOR_ANDAND_OROR1, align 8
  store i64 0, i64* %VALUE_FOR_ANDAND_OROR1, align 8
  store i64 0, i64* %VALUE_FOR_ANDAND_OROR, align 8
  store i32 0, i32* @gSigInt
  store i64 1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run116_6()$$211"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %VALUE_FOR_ANDAND_OROR2 = alloca i64
  %VALUE_FOR_ANDAND_OROR = alloca i64
  %"lvar$2$" = alloca i64
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i64 0, i64* %"lvar$2$"
  store i64 0, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$2$"
  store i64 0, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$1$"
  store i64 1, i64* %"lvar$1$", align 8
  store i64 0, i64* %VALUE_FOR_ANDAND_OROR, align 8
  store i64 1, i64* %VALUE_FOR_ANDAND_OROR, align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %VALUE_FOR_ANDAND_OROR2, align 8
  store i64 1, i64* %VALUE_FOR_ANDAND_OROR2, align 8
  store i64 1, i64* %VALUE_FOR_ANDAND_OROR2, align 8
  store i64 1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run116_7()$$212"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %VALUE_FOR_ANDAND_OROR5 = alloca i64
  %VALUE_FOR_ANDAND_OROR1 = alloca i64
  %VALUE_FOR_ANDAND_OROR = alloca i64
  %"lvar$3$" = alloca i64
  %"lvar$2$" = alloca i64
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i64 0, i64* %"lvar$2$"
  store i64 0, i64* %"lvar$2$", align 8
  store i64 0, i64* %"lvar$3$"
  store i64 0, i64* %"lvar$3$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$2$"
  store i64 0, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$3$"
  store i64 0, i64* %"lvar$3$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i64 0, i64* %VALUE_FOR_ANDAND_OROR, align 8
  store i64 0, i64* %VALUE_FOR_ANDAND_OROR, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 2, i64* %"lvar$2$", align 8
  store i64 0, i64* %VALUE_FOR_ANDAND_OROR1, align 8
  store i64 2, i64* %VALUE_FOR_ANDAND_OROR1, align 8
  store i64 0, i64* %VALUE_FOR_ANDAND_OROR, align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %VALUE_FOR_ANDAND_OROR5, align 8
  store i64 1, i64* %VALUE_FOR_ANDAND_OROR5, align 8
  %0 = trunc i64 2 to i32
  %eqtmpx10 = icmp eq i32 %0, 0
  %1 = zext i1 %eqtmpx10 to i64
  store i64 %1, i64* %VALUE_FOR_ANDAND_OROR5, align 8
  store i64 %1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run116_8()$$213"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run116_9()$$214"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %VALUE_FOR_ANDAND_OROR17 = alloca i64
  %VALUE_FOR_ANDAND_OROR = alloca i64
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52663600 to i8*))
  %ifcond = icmp eq i64* %0, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %1 = call i32 @create_object(i64* %0)
  call void @push_jit_object(i32 %1)
  %2 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52663608 to i8*))
  %ifcond3 = icmp eq i64* %2, null
  br i1 %ifcond3, label %then_block, label %entry_ifend2

entry_ifend2:                                     ; preds = %entry_ifend
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value6 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value6, align 8
  store i64 0, i64* %lvar_offset_value6, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %3 = zext i32 %1 to i64
  store i64 %3, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value7 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value7, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  %4 = call i32 @call_invoke_method(i64* %2, i32 0, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond8 = icmp ne i32 %4, 1
  br i1 %ifcond8, label %then_block9, label %entry_ifend10

then_block9:                                      ; preds = %entry_ifend2
  %5 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend10:                                    ; preds = %entry_ifend2
  %stack_offset_value11 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value11, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value12 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value12, i64* %"lvar$1$", align 8
  %loaded_stack_ptr_address_value13 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value13, i64 -1
  %stack_pointer_offset_value14 = load i64, i64* %stack_pointer_offset_value, align 8
  %6 = trunc i64 %stack_pointer_offset_value14 to i32
  call void @push_jit_object(i32 %6)
  %loaded_stack_ptr_address_value15 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value15, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_pointer_offset_value14, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %VALUE_FOR_ANDAND_OROR, align 8
  store i64 0, i64* %VALUE_FOR_ANDAND_OROR, align 8
  %eqtmpx = icmp eq i32 %6, 0
  store i64 0, i64* %VALUE_FOR_ANDAND_OROR17, align 8
  %7 = zext i1 %eqtmpx to i64
  store i64 %7, i64* %VALUE_FOR_ANDAND_OROR17, align 8
  %. = select i1 %eqtmpx, i64 1, i64 %7
  store i64 %., i64* %VALUE_FOR_ANDAND_OROR17, align 8
  %.22 = select i1 %eqtmpx, i64 1, i64 %7
  %8 = trunc i64 %.22 to i1
  %9 = zext i1 %8 to i64
  store i64 %9, i64* %VALUE_FOR_ANDAND_OROR, align 8
  store i64 %9, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run117()$$215"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %VALUE_FOR_ANDAND_OROR23 = alloca i64
  %VALUE_FOR_ANDAND_OROR = alloca i64
  %"lvar$2$" = alloca i64
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i64 0, i64* %"lvar$2$"
  store i64 0, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$1$"
  store i64 3, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52663704 to i8*))
  %ifcond = icmp eq i64* %0, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %1 = call i32 @create_object(i64* %0)
  call void @push_jit_object(i32 %1)
  %2 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52663712 to i8*))
  %ifcond3 = icmp eq i64* %2, null
  br i1 %ifcond3, label %then_block, label %entry_ifend2

entry_ifend2:                                     ; preds = %entry_ifend
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value6 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value6, align 8
  store i64 3, i64* %lvar_offset_value6, align 8
  %lvar_offset_value8 = getelementptr i64, i64* %lvar, i64 2
  store i64 0, i64* %lvar_offset_value8, align 8
  store i64 0, i64* %lvar_offset_value8, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %3 = zext i32 %1 to i64
  store i64 %3, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value9 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value9, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  %4 = call i32 @call_invoke_method(i64* %2, i32 0, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond10 = icmp ne i32 %4, 1
  br i1 %ifcond10, label %then_block11, label %entry_ifend12

then_block11:                                     ; preds = %entry_ifend2
  %5 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend12:                                    ; preds = %entry_ifend2
  %stack_offset_value13 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value13, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value14 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value14, i64* %"lvar$1$", align 8
  %stack_offset_address_value15 = getelementptr i64, i64* %stack, i64 2
  %stack_offset_value16 = load i64, i64* %stack_offset_address_value15, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value16, i64* %"lvar$2$", align 8
  %loaded_stack_ptr_address_value17 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value17, i64 -1
  %stack_pointer_offset_value18 = load i64, i64* %stack_pointer_offset_value, align 8
  %6 = trunc i64 %stack_pointer_offset_value18 to i32
  call void @push_jit_object(i32 %6)
  %loaded_stack_ptr_address_value19 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value19, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_pointer_offset_value18, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  %7 = trunc i64 %stack_offset_value14 to i32
  %eqtmpx = icmp eq i32 %7, 1
  store i64 0, i64* %VALUE_FOR_ANDAND_OROR, align 8
  %8 = zext i1 %eqtmpx to i64
  store i64 %8, i64* %VALUE_FOR_ANDAND_OROR, align 8
  br i1 %eqtmpx, label %label_or_endpointzzb, label %entry_condnotend

entry_condnotend:                                 ; preds = %entry_ifend12
  %eqtmpx22 = icmp eq i32 %6, 0
  store i64 0, i64* %VALUE_FOR_ANDAND_OROR23, align 8
  %9 = zext i1 %eqtmpx22 to i64
  store i64 %9, i64* %VALUE_FOR_ANDAND_OROR23, align 8
  br i1 %eqtmpx22, label %entry_condend, label %label_and_endpointzzc

label_or_endpointzzb:                             ; preds = %entry_ifend12, %label_and_endpointzzc
  %value_for_andand_oror26 = phi i64 [ %13, %label_and_endpointzzc ], [ %8, %entry_ifend12 ]
  %10 = trunc i64 %value_for_andand_oror26 to i1
  store i32 0, i32* @gSigInt
  br i1 %10, label %entry_condend28, label %label_elsezz

entry_condend:                                    ; preds = %entry_condnotend
  %gttmp = icmp sgt i32 %7, 0
  %11 = zext i1 %gttmp to i64
  store i64 %11, i64* %VALUE_FOR_ANDAND_OROR23, align 8
  br label %label_and_endpointzzc

label_and_endpointzzc:                            ; preds = %entry_condnotend, %entry_condend
  %value_for_andand_oror = phi i64 [ %11, %entry_condend ], [ %9, %entry_condnotend ]
  %12 = trunc i64 %value_for_andand_oror to i1
  %13 = zext i1 %12 to i64
  store i64 %13, i64* %VALUE_FOR_ANDAND_OROR, align 8
  br label %label_or_endpointzzb

entry_condend28:                                  ; preds = %label_or_endpointzzb
  store i64 0, i64* %stack, align 8
  ret i32 1

label_elsezz:                                     ; preds = %label_or_endpointzzb
  store i64 1, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.reverse()$$216"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$3$" = alloca i64
  %"lvar$2$" = alloca i64
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i64 0, i64* %"lvar$2$"
  store i64 0, i64* %"lvar$2$", align 8
  store i64 0, i64* %"lvar$3$"
  store i64 0, i64* %"lvar$3$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_string_object(i8* inttoptr (i64 52663896 to i8*))
  call void @push_jit_object(i32 %0)
  store i64 0, i64* %"lvar$1$"
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %2 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52663900 to i8*))
  %ifcond = icmp eq i64* %2, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %entry_ifend71, %entry_ifend66, %entry_ifend62, %label_for_endzzd, %entry_ifend52, %entry_ifend47, %entry_ifend43, %entry_ifend38, %entry_condend, %for_start_pointzzd, %entry_ifend3, %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %3 = call i32 @create_object(i64* %2)
  call void @push_jit_object(i32 %3)
  %4 = trunc i64 %1 to i32
  %5 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %4, i32 1)
  %6 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %5, i32 0, i32 0
  %7 = load i64, i64* %6, align 4
  %8 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %5, i32 0, i32 1
  %9 = load i32, i32* %8, align 4
  %ifcond4 = icmp eq i32 %9, 0
  br i1 %ifcond4, label %then_block, label %entry_ifend3

entry_ifend3:                                     ; preds = %entry_ifend
  %10 = trunc i64 %7 to i32
  %11 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52663908 to i8*))
  %ifcond7 = icmp eq i64* %11, null
  br i1 %ifcond7, label %then_block, label %entry_ifend6

entry_ifend6:                                     ; preds = %entry_ifend3
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value10 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value10, align 8
  store i64 %1, i64* %lvar_offset_value10, align 8
  %lvar_offset_value12 = getelementptr i64, i64* %lvar, i64 2
  store i64 0, i64* %lvar_offset_value12, align 8
  store i64 0, i64* %lvar_offset_value12, align 8
  %lvar_offset_value14 = getelementptr i64, i64* %lvar, i64 3
  store i64 0, i64* %lvar_offset_value14, align 8
  store i64 0, i64* %lvar_offset_value14, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %12 = zext i32 %3 to i64
  store i64 %12, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value15 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value15, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  %13 = zext i32 %10 to i64
  store i64 %13, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value17 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value18 = getelementptr i64, i64* %loaded_stack_ptr_address_value17, i64 1
  store i64* %inc_ptr_value18, i64** %stack_ptr_address
  %14 = call i32 @call_invoke_method(i64* %11, i32 1, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond19 = icmp ne i32 %14, 1
  br i1 %ifcond19, label %then_block20, label %entry_ifend21

then_block20:                                     ; preds = %entry_ifend6
  %15 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend21:                                    ; preds = %entry_ifend6
  %stack_offset_value22 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value22, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value23 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value23, i64* %"lvar$1$", align 8
  %stack_offset_address_value24 = getelementptr i64, i64* %stack, i64 2
  %stack_offset_value25 = load i64, i64* %stack_offset_address_value24, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value25, i64* %"lvar$2$", align 8
  %stack_offset_address_value26 = getelementptr i64, i64* %stack, i64 3
  %stack_offset_value27 = load i64, i64* %stack_offset_address_value26, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value27, i64* %"lvar$3$", align 8
  %loaded_stack_ptr_address_value28 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value28, i64 -1
  %stack_pointer_offset_value29 = load i64, i64* %stack_pointer_offset_value, align 8
  %16 = trunc i64 %stack_pointer_offset_value29 to i32
  call void @push_jit_object(i32 %16)
  %loaded_stack_ptr_address_value30 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value30, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_pointer_offset_value29, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$3$"
  store i64 0, i64* %"lvar$3$", align 8
  br label %for_start_pointzzd

for_start_pointzzd:                               ; preds = %entry_ifend55, %entry_ifend21
  %lvar57 = phi i64 [ %51, %entry_ifend55 ], [ 0, %entry_ifend21 ]
  %17 = trunc i64 %lvar57 to i32
  %18 = trunc i64 %stack_offset_value23 to i32
  %19 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %18, i32 2)
  %20 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %19, i32 0, i32 0
  %21 = load i64, i64* %20, align 4
  %22 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %19, i32 0, i32 1
  %23 = load i32, i32* %22, align 4
  %ifcond35 = icmp eq i32 %23, 0
  br i1 %ifcond35, label %then_block, label %entry_ifend34

entry_ifend34:                                    ; preds = %for_start_pointzzd
  %24 = trunc i64 %21 to i32
  %letmp = icmp slt i32 %17, %24
  store i32 0, i32* @gSigInt
  %25 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %16, i32 0)
  %26 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %25, i32 0, i32 0
  %27 = load i64, i64* %26, align 4
  %28 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %25, i32 0, i32 1
  %29 = load i32, i32* %28, align 4
  %ifcond39 = icmp eq i32 %29, 0
  br i1 %letmp, label %entry_condend, label %label_for_endzzd

entry_condend:                                    ; preds = %entry_ifend34
  br i1 %ifcond39, label %then_block, label %entry_ifend38

label_for_endzzd:                                 ; preds = %entry_ifend34
  br i1 %ifcond39, label %then_block, label %entry_ifend62

entry_ifend38:                                    ; preds = %entry_condend
  %30 = trunc i64 %27 to i32
  %31 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %18, i32 0)
  %32 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %31, i32 0, i32 0
  %33 = load i64, i64* %32, align 4
  %34 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %31, i32 0, i32 1
  %35 = load i32, i32* %34, align 4
  %ifcond44 = icmp eq i32 %35, 0
  br i1 %ifcond44, label %then_block, label %entry_ifend43

entry_ifend43:                                    ; preds = %entry_ifend38
  %36 = trunc i64 %33 to i32
  %37 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %18, i32 2)
  %38 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %37, i32 0, i32 0
  %39 = load i64, i64* %38, align 4
  %40 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %37, i32 0, i32 1
  %41 = load i32, i32* %40, align 4
  %ifcond48 = icmp eq i32 %41, 0
  br i1 %ifcond48, label %then_block, label %entry_ifend47

entry_ifend47:                                    ; preds = %entry_ifend43
  %42 = trunc i64 %39 to i32
  %.neg = sub i32 0, %17
  %subtmp = add i32 %42, -1
  %subtmp50 = add i32 %subtmp, %.neg
  %43 = call %clvalue_and_bool_struct* @load_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %36, i32 %subtmp50)
  %44 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %43, i32 0, i32 0
  %45 = load i64, i64* %44, align 4
  %46 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %43, i32 0, i32 1
  %47 = load i32, i32* %46, align 4
  %ifcond53 = icmp eq i32 %47, 0
  br i1 %ifcond53, label %then_block, label %entry_ifend52

entry_ifend52:                                    ; preds = %entry_ifend47
  %48 = trunc i64 %45 to i32
  %49 = zext i32 %48 to i64
  %50 = call i32 @run_store_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %30, i32 %17, i64 %49)
  %ifcond56 = icmp eq i32 %50, 0
  br i1 %ifcond56, label %then_block, label %entry_ifend55

entry_ifend55:                                    ; preds = %entry_ifend52
  %addtmp = add nuw i32 %17, 1
  store i64 0, i64* %"lvar$3$"
  %51 = zext i32 %addtmp to i64
  store i64 %51, i64* %"lvar$3$", align 8
  br label %for_start_pointzzd

entry_ifend62:                                    ; preds = %label_for_endzzd
  %52 = trunc i64 %27 to i32
  %53 = call i32 @run_store_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %52, i32 %17, i64 0)
  %ifcond67 = icmp eq i32 %53, 0
  br i1 %ifcond67, label %then_block, label %entry_ifend66

entry_ifend66:                                    ; preds = %entry_ifend62
  store i32 0, i32* @gSigInt
  %54 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %18, i32 2)
  %55 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %54, i32 0, i32 0
  %56 = load i64, i64* %55, align 4
  %57 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %54, i32 0, i32 1
  %58 = load i32, i32* %57, align 4
  %ifcond72 = icmp eq i32 %58, 0
  br i1 %ifcond72, label %then_block, label %entry_ifend71

entry_ifend71:                                    ; preds = %entry_ifend66
  %59 = trunc i64 %56 to i32
  %60 = zext i32 %59 to i64
  %61 = call i32 @store_field(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %16, i64 %60, i32 2)
  %ifcond75 = icmp eq i32 %61, 0
  br i1 %ifcond75, label %then_block, label %entry_ifend74

entry_ifend74:                                    ; preds = %entry_ifend71
  store i32 0, i32* @gSigInt
  %62 = zext i32 %16 to i64
  store i64 %62, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.insert(int,String)$$217"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$7$" = alloca i64
  %"lvar$6$" = alloca i64
  %"lvar$5$" = alloca i64
  %"lvar$4$" = alloca i64
  %"lvar$3$" = alloca i64
  %"lvar$2$" = alloca i64
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value1 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value1, i64* %"lvar$1$", align 8
  %stack_offset_address_value2 = getelementptr i64, i64* %stack, i64 2
  %stack_offset_value3 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value3, i64* %"lvar$2$", align 8
  store i64 0, i64* %"lvar$3$"
  store i64 0, i64* %"lvar$3$", align 8
  store i64 0, i64* %"lvar$4$"
  store i64 0, i64* %"lvar$4$", align 8
  store i64 0, i64* %"lvar$5$"
  store i64 0, i64* %"lvar$5$", align 8
  store i64 0, i64* %"lvar$6$"
  store i64 0, i64* %"lvar$6$", align 8
  store i64 0, i64* %"lvar$7$"
  store i64 0, i64* %"lvar$7$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_string_object(i8* inttoptr (i64 52663996 to i8*))
  call void @push_jit_object(i32 %0)
  store i64 0, i64* %"lvar$3$"
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %"lvar$3$", align 8
  store i32 0, i32* @gSigInt
  %2 = trunc i64 %stack_offset_value1 to i32
  %letmp = icmp slt i32 %2, 0
  br i1 %letmp, label %entry_condend, label %label_if_endzze

entry_condend:                                    ; preds = %entry
  store i32 0, i32* @gSigInt
  %3 = trunc i64 %1 to i32
  %4 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %3, i32 2)
  %5 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %4, i32 0, i32 0
  %6 = load i64, i64* %5, align 4
  %7 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %4, i32 0, i32 1
  %8 = load i32, i32* %7, align 4
  %ifcond = icmp eq i32 %8, 0
  br i1 %ifcond, label %then_block, label %entry_ifend

label_if_endzze:                                  ; preds = %entry, %entry_ifend
  %lvar9 = phi i64 [ %11, %entry_ifend ], [ %stack_offset_value1, %entry ]
  store i32 0, i32* @gSigInt
  %9 = trunc i64 %lvar9 to i32
  %letmp10 = icmp slt i32 %9, 0
  br i1 %letmp10, label %entry_condend12, label %label_if_endzzf

then_block:                                       ; preds = %entry_ifend271, %entry_ifend266, %entry_ifend261, %entry_ifend256, %label_for_endzzm, %entry_ifend242, %entry_ifend238, %entry_condend230, %for_start_pointzzm, %entry_ifend213, %entry_ifend209, %entry_condend201, %entry_ifend188, %entry_ifend184, %entry_condend178, %entry_ifend164, %label_elsezzh, %entry_ifend154, %label_for_endzzj, %entry_ifend142, %entry_ifend138, %entry_ifend131, %entry_condend127, %entry_ifend117, %label_for_endzzi, %entry_ifend107, %entry_ifend103, %entry_ifend96, %entry_condend92, %for_start_pointzzi, %entry_ifend71, %entry_ifend50, %label_if_endzzg, %entry_condend21, %label_if_endzzf, %entry_condend
  ret i32 0

entry_ifend:                                      ; preds = %entry_condend
  %10 = trunc i64 %6 to i32
  %addtmp = add i32 %2, 1
  %addtmp7 = add i32 %addtmp, %10
  store i64 0, i64* %"lvar$1$"
  %11 = zext i32 %addtmp7 to i64
  store i64 %11, i64* %"lvar$1$", align 8
  br label %label_if_endzze

entry_condend12:                                  ; preds = %label_if_endzze
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  br label %label_if_endzzf

label_if_endzzf:                                  ; preds = %label_if_endzze, %entry_condend12
  %lvar15 = phi i64 [ 0, %entry_condend12 ], [ %lvar9, %label_if_endzze ]
  store i32 0, i32* @gSigInt
  %12 = trunc i64 %lvar15 to i32
  %lvar16 = load i64, i64* %"lvar$3$"
  %13 = trunc i64 %lvar16 to i32
  %14 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %13, i32 2)
  %15 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %14, i32 0, i32 0
  %16 = load i64, i64* %15, align 4
  %17 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %14, i32 0, i32 1
  %18 = load i32, i32* %17, align 4
  %ifcond19 = icmp eq i32 %18, 0
  br i1 %ifcond19, label %then_block, label %entry_ifend18

entry_ifend18:                                    ; preds = %label_if_endzzf
  %19 = trunc i64 %16 to i32
  %gttmp = icmp sgt i32 %12, %19
  br i1 %gttmp, label %entry_condend21, label %label_if_endzzg

entry_condend21:                                  ; preds = %entry_ifend18
  store i32 0, i32* @gSigInt
  %lvar23 = load i64, i64* %"lvar$3$"
  %20 = trunc i64 %lvar23 to i32
  %21 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %20, i32 2)
  %22 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %21, i32 0, i32 0
  %23 = load i64, i64* %22, align 4
  %24 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %21, i32 0, i32 1
  %25 = load i32, i32* %24, align 4
  %ifcond26 = icmp eq i32 %25, 0
  br i1 %ifcond26, label %then_block, label %entry_ifend25

label_if_endzzg:                                  ; preds = %entry_ifend18, %entry_ifend25
  %lvar33 = phi i64 [ %29, %entry_ifend25 ], [ %lvar15, %entry_ifend18 ]
  store i32 0, i32* @gSigInt
  %26 = trunc i64 %stack_offset_value3 to i32
  %27 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52664144 to i8*))
  %ifcond31 = icmp eq i64* %27, null
  br i1 %ifcond31, label %then_block, label %entry_ifend30

entry_ifend25:                                    ; preds = %entry_condend21
  %28 = trunc i64 %23 to i32
  store i64 0, i64* %"lvar$1$"
  %29 = zext i32 %28 to i64
  store i64 %29, i64* %"lvar$1$", align 8
  br label %label_if_endzzg

entry_ifend30:                                    ; preds = %label_if_endzzg
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value34 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value34, align 8
  store i64 %lvar33, i64* %lvar_offset_value34, align 8
  %lvar_offset_value36 = getelementptr i64, i64* %lvar, i64 2
  store i64 0, i64* %lvar_offset_value36, align 8
  store i64 %stack_offset_value3, i64* %lvar_offset_value36, align 8
  %lvar37 = load i64, i64* %"lvar$3$"
  %lvar_offset_value38 = getelementptr i64, i64* %lvar, i64 3
  store i64 0, i64* %lvar_offset_value38, align 8
  store i64 %lvar37, i64* %lvar_offset_value38, align 8
  %lvar_offset_value40 = getelementptr i64, i64* %lvar, i64 4
  store i64 0, i64* %lvar_offset_value40, align 8
  store i64 0, i64* %lvar_offset_value40, align 8
  %lvar41 = load i64, i64* %"lvar$5$"
  %lvar_offset_value42 = getelementptr i64, i64* %lvar, i64 5
  store i64 0, i64* %lvar_offset_value42, align 8
  store i64 %lvar41, i64* %lvar_offset_value42, align 8
  %lvar_offset_value44 = getelementptr i64, i64* %lvar, i64 6
  store i64 0, i64* %lvar_offset_value44, align 8
  store i64 0, i64* %lvar_offset_value44, align 8
  %lvar45 = load i64, i64* %"lvar$7$"
  %lvar_offset_value46 = getelementptr i64, i64* %lvar, i64 7
  store i64 0, i64* %lvar_offset_value46, align 8
  store i64 %lvar45, i64* %lvar_offset_value46, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %30 = zext i32 %26 to i64
  store i64 %30, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value47 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value47, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  %31 = call i32 @call_invoke_method(i64* %27, i32 7, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond48 = icmp ne i32 %31, 1
  br i1 %ifcond48, label %then_block49, label %entry_ifend50

then_block49:                                     ; preds = %entry_ifend30
  %32 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend50:                                    ; preds = %entry_ifend30
  %stack_offset_value51 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value51, i64* %"lvar$0$", align 8
  %stack_offset_value53 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value53, i64* %"lvar$1$", align 8
  %stack_offset_value55 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value55, i64* %"lvar$2$", align 8
  %stack_offset_address_value56 = getelementptr i64, i64* %stack, i64 3
  %stack_offset_value57 = load i64, i64* %stack_offset_address_value56, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value57, i64* %"lvar$3$", align 8
  %stack_offset_address_value58 = getelementptr i64, i64* %stack, i64 4
  %stack_offset_value59 = load i64, i64* %stack_offset_address_value58, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value59, i64* %"lvar$4$", align 8
  %stack_offset_address_value60 = getelementptr i64, i64* %stack, i64 5
  %stack_offset_value61 = load i64, i64* %stack_offset_address_value60, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value61, i64* %"lvar$5$", align 8
  %stack_offset_address_value62 = getelementptr i64, i64* %stack, i64 6
  %stack_offset_value63 = load i64, i64* %stack_offset_address_value62, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value63, i64* %"lvar$6$", align 8
  %stack_offset_address_value64 = getelementptr i64, i64* %stack, i64 7
  %stack_offset_value65 = load i64, i64* %stack_offset_address_value64, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value65, i64* %"lvar$7$", align 8
  %loaded_stack_ptr_address_value66 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value66, i64 -1
  %stack_pointer_offset_value67 = load i64, i64* %stack_pointer_offset_value, align 8
  %33 = trunc i64 %stack_pointer_offset_value67 to i32
  call void @push_jit_object(i32 %33)
  %loaded_stack_ptr_address_value68 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value68, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_pointer_offset_value67, i64* %"lvar$4$", align 8
  store i32 0, i32* @gSigInt
  %lvar69 = load i64, i64* %"lvar$3$"
  %34 = trunc i64 %lvar69 to i32
  %35 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %34, i32 2)
  %36 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %35, i32 0, i32 0
  %37 = load i64, i64* %36, align 4
  %38 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %35, i32 0, i32 1
  %39 = load i32, i32* %38, align 4
  %ifcond72 = icmp eq i32 %39, 0
  br i1 %ifcond72, label %then_block, label %entry_ifend71

entry_ifend71:                                    ; preds = %entry_ifend50
  %40 = trunc i64 %37 to i32
  %addtmp74 = add i32 %40, 1
  %addtmp75 = add i32 %addtmp74, %33
  %lvar76 = load i64, i64* %"lvar$3$"
  %41 = trunc i64 %lvar76 to i32
  %42 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %41, i32 1)
  %43 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %42, i32 0, i32 0
  %44 = load i64, i64* %43, align 4
  %45 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %42, i32 0, i32 1
  %46 = load i32, i32* %45, align 4
  %ifcond79 = icmp eq i32 %46, 0
  br i1 %ifcond79, label %then_block, label %entry_ifend78

entry_ifend78:                                    ; preds = %entry_ifend71
  %47 = trunc i64 %44 to i32
  %letmp80 = icmp slt i32 %addtmp75, %47
  store i32 0, i32* @gSigInt
  br i1 %letmp80, label %entry_condend82, label %label_elsezzh

entry_condend82:                                  ; preds = %entry_ifend78
  %48 = trunc i64 %stack_offset_value53 to i32
  store i64 0, i64* %"lvar$5$"
  %49 = zext i32 %48 to i64
  store i64 %49, i64* %"lvar$5$", align 8
  br label %for_start_pointzzi

label_elsezzh:                                    ; preds = %entry_ifend78
  %lvar162 = load i64, i64* %"lvar$3$"
  %50 = trunc i64 %lvar162 to i32
  %51 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %50, i32 2)
  %52 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %51, i32 0, i32 0
  %53 = load i64, i64* %52, align 4
  %54 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %51, i32 0, i32 1
  %55 = load i32, i32* %54, align 4
  %ifcond165 = icmp eq i32 %55, 0
  br i1 %ifcond165, label %then_block, label %entry_ifend164

for_start_pointzzi:                               ; preds = %entry_ifend110, %entry_condend82
  %lvar85 = phi i64 [ %89, %entry_ifend110 ], [ %49, %entry_condend82 ]
  %56 = trunc i64 %lvar85 to i32
  %lvar86 = load i64, i64* %"lvar$3$"
  %57 = trunc i64 %lvar86 to i32
  %58 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %57, i32 2)
  %59 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %58, i32 0, i32 0
  %60 = load i64, i64* %59, align 4
  %61 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %58, i32 0, i32 1
  %62 = load i32, i32* %61, align 4
  %ifcond89 = icmp eq i32 %62, 0
  br i1 %ifcond89, label %then_block, label %entry_ifend88

entry_ifend88:                                    ; preds = %for_start_pointzzi
  %63 = trunc i64 %60 to i32
  %letmp90 = icmp slt i32 %56, %63
  store i32 0, i32* @gSigInt
  %lvar94 = load i64, i64* %"lvar$3$"
  %64 = trunc i64 %lvar94 to i32
  %65 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %64, i32 0)
  %66 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %65, i32 0, i32 0
  %67 = load i64, i64* %66, align 4
  %68 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %65, i32 0, i32 1
  %69 = load i32, i32* %68, align 4
  %ifcond97 = icmp eq i32 %69, 0
  br i1 %letmp90, label %entry_condend92, label %label_for_endzzi

entry_condend92:                                  ; preds = %entry_ifend88
  br i1 %ifcond97, label %then_block, label %entry_ifend96

label_for_endzzi:                                 ; preds = %entry_ifend88
  br i1 %ifcond97, label %then_block, label %entry_ifend117

entry_ifend96:                                    ; preds = %entry_condend92
  %70 = trunc i64 %67 to i32
  %lvar98 = load i64, i64* %"lvar$5$"
  %71 = trunc i64 %lvar98 to i32
  %addtmp100 = add nuw i32 %33, %71
  %lvar101 = load i64, i64* %"lvar$3$"
  %72 = trunc i64 %lvar101 to i32
  %73 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %72, i32 0)
  %74 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %73, i32 0, i32 0
  %75 = load i64, i64* %74, align 4
  %76 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %73, i32 0, i32 1
  %77 = load i32, i32* %76, align 4
  %ifcond104 = icmp eq i32 %77, 0
  br i1 %ifcond104, label %then_block, label %entry_ifend103

entry_ifend103:                                   ; preds = %entry_ifend96
  %78 = trunc i64 %75 to i32
  %lvar105 = load i64, i64* %"lvar$5$"
  %79 = trunc i64 %lvar105 to i32
  %80 = call %clvalue_and_bool_struct* @load_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %78, i32 %79)
  %81 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %80, i32 0, i32 0
  %82 = load i64, i64* %81, align 4
  %83 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %80, i32 0, i32 1
  %84 = load i32, i32* %83, align 4
  %ifcond108 = icmp eq i32 %84, 0
  br i1 %ifcond108, label %then_block, label %entry_ifend107

entry_ifend107:                                   ; preds = %entry_ifend103
  %85 = trunc i64 %82 to i32
  %86 = zext i32 %85 to i64
  %87 = call i32 @run_store_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %70, i32 %addtmp100, i64 %86)
  %ifcond111 = icmp eq i32 %87, 0
  br i1 %ifcond111, label %then_block, label %entry_ifend110

entry_ifend110:                                   ; preds = %entry_ifend107
  %lvar112 = load i64, i64* %"lvar$5$"
  %88 = trunc i64 %lvar112 to i32
  %addtmp113 = add nuw i32 %88, 1
  store i64 0, i64* %"lvar$5$"
  %89 = zext i32 %addtmp113 to i64
  store i64 %89, i64* %"lvar$5$", align 8
  br label %for_start_pointzzi

entry_ifend117:                                   ; preds = %label_for_endzzi
  %90 = trunc i64 %67 to i32
  %lvar119 = load i64, i64* %"lvar$5$"
  %91 = trunc i64 %lvar119 to i32
  %92 = call i32 @run_store_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %90, i32 %91, i64 0)
  %ifcond122 = icmp eq i32 %92, 0
  br i1 %ifcond122, label %then_block, label %entry_ifend121

entry_ifend121:                                   ; preds = %entry_ifend117
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$5$"
  store i64 0, i64* %"lvar$5$", align 8
  br label %for_start_pointzzj

for_start_pointzzj:                               ; preds = %entry_ifend145, %entry_ifend121
  %lvar123 = phi i64 [ %124, %entry_ifend145 ], [ 0, %entry_ifend121 ]
  %93 = trunc i64 %lvar123 to i32
  %letmp125 = icmp slt i32 %93, %33
  store i32 0, i32* @gSigInt
  %lvar129 = load i64, i64* %"lvar$3$"
  %94 = trunc i64 %lvar129 to i32
  br i1 %letmp125, label %entry_condend127, label %label_for_endzzj

entry_condend127:                                 ; preds = %for_start_pointzzj
  %95 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %94, i32 0)
  %96 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %95, i32 0, i32 0
  %97 = load i64, i64* %96, align 4
  %98 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %95, i32 0, i32 1
  %99 = load i32, i32* %98, align 4
  %ifcond132 = icmp eq i32 %99, 0
  br i1 %ifcond132, label %then_block, label %entry_ifend131

label_for_endzzj:                                 ; preds = %for_start_pointzzj
  %100 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %94, i32 2)
  %101 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %100, i32 0, i32 0
  %102 = load i64, i64* %101, align 4
  %103 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %100, i32 0, i32 1
  %104 = load i32, i32* %103, align 4
  %ifcond155 = icmp eq i32 %104, 0
  br i1 %ifcond155, label %then_block, label %entry_ifend154

entry_ifend131:                                   ; preds = %entry_condend127
  %105 = trunc i64 %97 to i32
  %lvar134 = load i64, i64* %"lvar$5$"
  %106 = trunc i64 %lvar134 to i32
  %addtmp135 = add nuw i32 %106, %48
  %107 = trunc i64 %stack_offset_value55 to i32
  %108 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %107, i32 0)
  %109 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %108, i32 0, i32 0
  %110 = load i64, i64* %109, align 4
  %111 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %108, i32 0, i32 1
  %112 = load i32, i32* %111, align 4
  %ifcond139 = icmp eq i32 %112, 0
  br i1 %ifcond139, label %then_block, label %entry_ifend138

entry_ifend138:                                   ; preds = %entry_ifend131
  %113 = trunc i64 %110 to i32
  %lvar140 = load i64, i64* %"lvar$5$"
  %114 = trunc i64 %lvar140 to i32
  %115 = call %clvalue_and_bool_struct* @load_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %113, i32 %114)
  %116 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %115, i32 0, i32 0
  %117 = load i64, i64* %116, align 4
  %118 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %115, i32 0, i32 1
  %119 = load i32, i32* %118, align 4
  %ifcond143 = icmp eq i32 %119, 0
  br i1 %ifcond143, label %then_block, label %entry_ifend142

entry_ifend142:                                   ; preds = %entry_ifend138
  %120 = trunc i64 %117 to i32
  %121 = zext i32 %120 to i64
  %122 = call i32 @run_store_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %105, i32 %addtmp135, i64 %121)
  %ifcond146 = icmp eq i32 %122, 0
  br i1 %ifcond146, label %then_block, label %entry_ifend145

entry_ifend145:                                   ; preds = %entry_ifend142
  %lvar147 = load i64, i64* %"lvar$5$"
  %123 = trunc i64 %lvar147 to i32
  %addtmp148 = add nuw i32 %123, 1
  store i64 0, i64* %"lvar$5$"
  %124 = zext i32 %addtmp148 to i64
  store i64 %124, i64* %"lvar$5$", align 8
  br label %for_start_pointzzj

entry_ifend154:                                   ; preds = %label_for_endzzj
  %125 = trunc i64 %102 to i32
  %addtmp157 = add nuw i32 %33, %125
  %126 = zext i32 %addtmp157 to i64
  %127 = call i32 @store_field(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %94, i64 %126, i32 2)
  %ifcond160 = icmp eq i32 %127, 0
  br i1 %ifcond160, label %then_block, label %label_if_endzzh

label_if_endzzh:                                  ; preds = %entry_ifend271, %entry_ifend154
  store i32 0, i32* @gSigInt
  %lvar279 = load i64, i64* %"lvar$3$"
  %128 = trunc i64 %lvar279 to i32
  %129 = zext i32 %128 to i64
  store i64 %129, i64* %stack, align 8
  ret i32 1

entry_ifend164:                                   ; preds = %label_elsezzh
  %130 = trunc i64 %53 to i32
  %addtmp167 = add i32 %130, 1
  %addtmp168 = add i32 %addtmp167, %33
  %multmp = mul nuw i32 %addtmp168, 2
  %addtmp169 = add nuw i32 %multmp, 1
  store i64 0, i64* %"lvar$5$"
  %131 = zext i32 %addtmp169 to i64
  store i64 %131, i64* %"lvar$5$", align 8
  store i32 0, i32* @gSigInt
  %132 = trunc i64 %131 to i32
  %133 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52664360 to i8*))
  %ifcond173 = icmp eq i64* %133, null
  br i1 %ifcond173, label %then_block, label %entry_ifend172

entry_ifend172:                                   ; preds = %entry_ifend164
  %134 = call i32 @create_array_object(i64* %133, i32 %132)
  call void @push_jit_object(i32 %134)
  store i64 0, i64* %"lvar$6$"
  %135 = zext i32 %134 to i64
  store i64 %135, i64* %"lvar$6$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$7$"
  store i64 0, i64* %"lvar$7$", align 8
  br label %for_start_pointzzk

for_start_pointzzk:                               ; preds = %entry_ifend191, %entry_ifend172
  %lvar181 = phi i64 [ %156, %entry_ifend191 ], [ 0, %entry_ifend172 ]
  %136 = trunc i64 %lvar181 to i32
  %137 = trunc i64 %stack_offset_value53 to i32
  %letmp176 = icmp slt i32 %136, %137
  store i32 0, i32* @gSigInt
  br i1 %letmp176, label %entry_condend178, label %label_for_endzzk

entry_condend178:                                 ; preds = %for_start_pointzzk
  %138 = trunc i64 %135 to i32
  %lvar182 = load i64, i64* %"lvar$3$"
  %139 = trunc i64 %lvar182 to i32
  %140 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %139, i32 0)
  %141 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %140, i32 0, i32 0
  %142 = load i64, i64* %141, align 4
  %143 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %140, i32 0, i32 1
  %144 = load i32, i32* %143, align 4
  %ifcond185 = icmp eq i32 %144, 0
  br i1 %ifcond185, label %then_block, label %entry_ifend184

label_for_endzzk:                                 ; preds = %for_start_pointzzk
  store i64 0, i64* %"lvar$7$"
  store i64 0, i64* %"lvar$7$", align 8
  br label %for_start_pointzzl

entry_ifend184:                                   ; preds = %entry_condend178
  %145 = trunc i64 %142 to i32
  %lvar186 = load i64, i64* %"lvar$7$"
  %146 = trunc i64 %lvar186 to i32
  %147 = call %clvalue_and_bool_struct* @load_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %145, i32 %146)
  %148 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %147, i32 0, i32 0
  %149 = load i64, i64* %148, align 4
  %150 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %147, i32 0, i32 1
  %151 = load i32, i32* %150, align 4
  %ifcond189 = icmp eq i32 %151, 0
  br i1 %ifcond189, label %then_block, label %entry_ifend188

entry_ifend188:                                   ; preds = %entry_ifend184
  %152 = trunc i64 %149 to i32
  %153 = zext i32 %152 to i64
  %154 = call i32 @run_store_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %138, i32 %136, i64 %153)
  %ifcond192 = icmp eq i32 %154, 0
  br i1 %ifcond192, label %then_block, label %entry_ifend191

entry_ifend191:                                   ; preds = %entry_ifend188
  %lvar193 = load i64, i64* %"lvar$7$"
  %155 = trunc i64 %lvar193 to i32
  %addtmp194 = add nuw i32 %155, 1
  store i64 0, i64* %"lvar$7$"
  %156 = zext i32 %addtmp194 to i64
  store i64 %156, i64* %"lvar$7$", align 8
  br label %for_start_pointzzk

for_start_pointzzl:                               ; preds = %entry_ifend216, %label_for_endzzk
  %lvar204 = phi i64 [ %177, %entry_ifend216 ], [ 0, %label_for_endzzk ]
  %157 = trunc i64 %lvar204 to i32
  %letmp199 = icmp slt i32 %157, %33
  store i32 0, i32* @gSigInt
  br i1 %letmp199, label %entry_condend201, label %label_for_endzzl

entry_condend201:                                 ; preds = %for_start_pointzzl
  %158 = trunc i64 %135 to i32
  %addtmp206 = add nuw i32 %137, %157
  %159 = trunc i64 %stack_offset_value55 to i32
  %160 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %159, i32 0)
  %161 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %160, i32 0, i32 0
  %162 = load i64, i64* %161, align 4
  %163 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %160, i32 0, i32 1
  %164 = load i32, i32* %163, align 4
  %ifcond210 = icmp eq i32 %164, 0
  br i1 %ifcond210, label %then_block, label %entry_ifend209

label_for_endzzl:                                 ; preds = %for_start_pointzzl
  store i64 0, i64* %"lvar$7$"
  %165 = zext i32 %137 to i64
  store i64 %165, i64* %"lvar$7$", align 8
  br label %for_start_pointzzm

entry_ifend209:                                   ; preds = %entry_condend201
  %166 = trunc i64 %162 to i32
  %lvar211 = load i64, i64* %"lvar$7$"
  %167 = trunc i64 %lvar211 to i32
  %168 = call %clvalue_and_bool_struct* @load_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %166, i32 %167)
  %169 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %168, i32 0, i32 0
  %170 = load i64, i64* %169, align 4
  %171 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %168, i32 0, i32 1
  %172 = load i32, i32* %171, align 4
  %ifcond214 = icmp eq i32 %172, 0
  br i1 %ifcond214, label %then_block, label %entry_ifend213

entry_ifend213:                                   ; preds = %entry_ifend209
  %173 = trunc i64 %170 to i32
  %174 = zext i32 %173 to i64
  %175 = call i32 @run_store_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %158, i32 %addtmp206, i64 %174)
  %ifcond217 = icmp eq i32 %175, 0
  br i1 %ifcond217, label %then_block, label %entry_ifend216

entry_ifend216:                                   ; preds = %entry_ifend213
  %lvar218 = load i64, i64* %"lvar$7$"
  %176 = trunc i64 %lvar218 to i32
  %addtmp219 = add nuw i32 %176, 1
  store i64 0, i64* %"lvar$7$"
  %177 = zext i32 %addtmp219 to i64
  store i64 %177, i64* %"lvar$7$", align 8
  br label %for_start_pointzzl

for_start_pointzzm:                               ; preds = %entry_ifend245, %label_for_endzzl
  %lvar223 = phi i64 [ %206, %entry_ifend245 ], [ %165, %label_for_endzzl ]
  %178 = trunc i64 %lvar223 to i32
  %lvar224 = load i64, i64* %"lvar$3$"
  %179 = trunc i64 %lvar224 to i32
  %180 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %179, i32 2)
  %181 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %180, i32 0, i32 0
  %182 = load i64, i64* %181, align 4
  %183 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %180, i32 0, i32 1
  %184 = load i32, i32* %183, align 4
  %ifcond227 = icmp eq i32 %184, 0
  br i1 %ifcond227, label %then_block, label %entry_ifend226

entry_ifend226:                                   ; preds = %for_start_pointzzm
  %185 = trunc i64 %182 to i32
  %letmp228 = icmp slt i32 %178, %185
  store i32 0, i32* @gSigInt
  %186 = trunc i64 %135 to i32
  %lvar233 = load i64, i64* %"lvar$7$"
  %187 = trunc i64 %lvar233 to i32
  %addtmp235 = add nuw i32 %33, %187
  br i1 %letmp228, label %entry_condend230, label %label_for_endzzm

entry_condend230:                                 ; preds = %entry_ifend226
  %lvar236 = load i64, i64* %"lvar$3$"
  %188 = trunc i64 %lvar236 to i32
  %189 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %188, i32 0)
  %190 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %189, i32 0, i32 0
  %191 = load i64, i64* %190, align 4
  %192 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %189, i32 0, i32 1
  %193 = load i32, i32* %192, align 4
  %ifcond239 = icmp eq i32 %193, 0
  br i1 %ifcond239, label %then_block, label %entry_ifend238

label_for_endzzm:                                 ; preds = %entry_ifend226
  %194 = call i32 @run_store_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %186, i32 %addtmp235, i64 0)
  %ifcond257 = icmp eq i32 %194, 0
  br i1 %ifcond257, label %then_block, label %entry_ifend256

entry_ifend238:                                   ; preds = %entry_condend230
  %195 = trunc i64 %191 to i32
  %lvar240 = load i64, i64* %"lvar$7$"
  %196 = trunc i64 %lvar240 to i32
  %197 = call %clvalue_and_bool_struct* @load_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %195, i32 %196)
  %198 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %197, i32 0, i32 0
  %199 = load i64, i64* %198, align 4
  %200 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %197, i32 0, i32 1
  %201 = load i32, i32* %200, align 4
  %ifcond243 = icmp eq i32 %201, 0
  br i1 %ifcond243, label %then_block, label %entry_ifend242

entry_ifend242:                                   ; preds = %entry_ifend238
  %202 = trunc i64 %199 to i32
  %203 = zext i32 %202 to i64
  %204 = call i32 @run_store_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %186, i32 %addtmp235, i64 %203)
  %ifcond246 = icmp eq i32 %204, 0
  br i1 %ifcond246, label %then_block, label %entry_ifend245

entry_ifend245:                                   ; preds = %entry_ifend242
  %lvar247 = load i64, i64* %"lvar$7$"
  %205 = trunc i64 %lvar247 to i32
  %addtmp248 = add nuw i32 %205, 1
  store i64 0, i64* %"lvar$7$"
  %206 = zext i32 %addtmp248 to i64
  store i64 %206, i64* %"lvar$7$", align 8
  br label %for_start_pointzzm

entry_ifend256:                                   ; preds = %label_for_endzzm
  store i32 0, i32* @gSigInt
  %lvar258 = load i64, i64* %"lvar$3$"
  %207 = trunc i64 %lvar258 to i32
  %208 = zext i32 %186 to i64
  %209 = call i32 @store_field(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %207, i64 %208, i32 0)
  %ifcond262 = icmp eq i32 %209, 0
  br i1 %ifcond262, label %then_block, label %entry_ifend261

entry_ifend261:                                   ; preds = %entry_ifend256
  store i32 0, i32* @gSigInt
  %lvar263 = load i64, i64* %"lvar$3$"
  %210 = trunc i64 %lvar263 to i32
  %lvar264 = load i64, i64* %"lvar$5$"
  %211 = trunc i64 %lvar264 to i32
  %212 = zext i32 %211 to i64
  %213 = call i32 @store_field(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %210, i64 %212, i32 1)
  %ifcond267 = icmp eq i32 %213, 0
  br i1 %ifcond267, label %then_block, label %entry_ifend266

entry_ifend266:                                   ; preds = %entry_ifend261
  store i32 0, i32* @gSigInt
  %lvar268 = load i64, i64* %"lvar$3$"
  %214 = trunc i64 %lvar268 to i32
  %215 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %214, i32 2)
  %216 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %215, i32 0, i32 0
  %217 = load i64, i64* %216, align 4
  %218 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %215, i32 0, i32 1
  %219 = load i32, i32* %218, align 4
  %ifcond272 = icmp eq i32 %219, 0
  br i1 %ifcond272, label %then_block, label %entry_ifend271

entry_ifend271:                                   ; preds = %entry_ifend266
  %220 = trunc i64 %217 to i32
  %addtmp274 = add nuw i32 %33, %220
  %221 = zext i32 %addtmp274 to i64
  %222 = call i32 @store_field(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %214, i64 %221, i32 2)
  %ifcond277 = icmp eq i32 %222, 0
  br i1 %ifcond277, label %then_block, label %label_if_endzzh
}

define i32 @"JITTest.toBuffer()$$218"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$4$" = alloca i64
  %"lvar$3$" = alloca i64
  %"lvar$2$" = alloca i64
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i64 0, i64* %"lvar$2$"
  store i64 0, i64* %"lvar$2$", align 8
  store i64 0, i64* %"lvar$3$"
  store i64 0, i64* %"lvar$3$", align 8
  store i64 0, i64* %"lvar$4$"
  store i64 0, i64* %"lvar$4$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_string_object(i8* inttoptr (i64 52664640 to i8*))
  call void @push_jit_object(i32 %0)
  store i64 0, i64* %"lvar$1$"
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$2$"
  store i64 0, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  %gepaddtmp = getelementptr i64, i64* %lvar, i64 2
  %2 = trunc i64 %1 to i32
  %3 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %2, i32 0)
  %4 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %3, i32 0, i32 0
  %5 = load i64, i64* %4, align 4
  %6 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %3, i32 0, i32 1
  %7 = load i32, i32* %6, align 4
  %ifcond = icmp eq i32 %7, 0
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %then_block105, %then_block58, %entry_ifend83, %entry_condend, %entry_ifend35, %entry_ifend20, %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %8 = trunc i64 %5 to i32
  %9 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52664644 to i8*))
  %ifcond4 = icmp eq i64* %9, null
  br i1 %ifcond4, label %then_block, label %entry_ifend3

entry_ifend3:                                     ; preds = %entry_ifend
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value7 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value7, align 8
  store i64 %1, i64* %lvar_offset_value7, align 8
  store i64 0, i64* %gepaddtmp, align 8
  store i64 0, i64* %gepaddtmp, align 8
  %lvar_offset_value11 = getelementptr i64, i64* %lvar, i64 3
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 0, i64* %lvar_offset_value11, align 8
  %lvar_offset_value13 = getelementptr i64, i64* %lvar, i64 4
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 0, i64* %lvar_offset_value13, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %10 = ptrtoint i64* %gepaddtmp to i64
  store i64 %10, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value14 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value14, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  %11 = zext i32 %8 to i64
  store i64 %11, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value16 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value17 = getelementptr i64, i64* %loaded_stack_ptr_address_value16, i64 1
  store i64* %inc_ptr_value17, i64** %stack_ptr_address
  %12 = call i32 @call_invoke_method(i64* %9, i32 34, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond18 = icmp ne i32 %12, 1
  br i1 %ifcond18, label %then_block19, label %entry_ifend20

then_block19:                                     ; preds = %entry_ifend3
  %13 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend20:                                    ; preds = %entry_ifend3
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 2
  %stack_offset_value21 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value21, i64* %"lvar$2$", align 8
  %stack_offset_value22 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value22, i64* %"lvar$0$", align 8
  %stack_offset_address_value23 = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value24 = load i64, i64* %stack_offset_address_value23, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value24, i64* %"lvar$1$", align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value21, i64* %"lvar$2$", align 8
  %stack_offset_address_value27 = getelementptr i64, i64* %stack, i64 3
  %stack_offset_value28 = load i64, i64* %stack_offset_address_value27, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value28, i64* %"lvar$3$", align 8
  %stack_offset_address_value29 = getelementptr i64, i64* %stack, i64 4
  %stack_offset_value30 = load i64, i64* %stack_offset_address_value29, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value30, i64* %"lvar$4$", align 8
  %loaded_stack_ptr_address_value31 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value31, i64 -1
  %stack_pointer_offset_value32 = load i64, i64* %stack_pointer_offset_value, align 8
  %14 = trunc i64 %stack_pointer_offset_value32 to i32
  call void @push_jit_object(i32 %14)
  %loaded_stack_ptr_address_value33 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value33, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i32 0, i32* @gSigInt
  %15 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52664652 to i8*))
  %ifcond36 = icmp eq i64* %15, null
  br i1 %ifcond36, label %then_block, label %entry_ifend35

entry_ifend35:                                    ; preds = %entry_ifend20
  %16 = call i32 @create_object(i64* %15)
  call void @push_jit_object(i32 %16)
  %17 = trunc i64 %stack_offset_value21 to i32
  %18 = call i32 @get_array_length(i32 %17)
  %value2 = zext i32 %18 to i64
  %19 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52664660 to i8*))
  %ifcond40 = icmp eq i64* %19, null
  br i1 %ifcond40, label %then_block, label %entry_ifend39

entry_ifend39:                                    ; preds = %entry_ifend35
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value22, i64* %lvar, align 8
  store i64 0, i64* %lvar_offset_value7, align 8
  store i64 %stack_offset_value24, i64* %lvar_offset_value7, align 8
  store i64 0, i64* %gepaddtmp, align 8
  store i64 %stack_offset_value21, i64* %gepaddtmp, align 8
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %stack_offset_value28, i64* %lvar_offset_value11, align 8
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %stack_offset_value30, i64* %lvar_offset_value13, align 8
  %loaded_stack_ptr_address_value51 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value51, align 8
  %20 = zext i32 %16 to i64
  store i64 %20, i64* %loaded_stack_ptr_address_value51, align 8
  %loaded_stack_ptr_address_value52 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value53 = getelementptr i64, i64* %loaded_stack_ptr_address_value52, i64 1
  store i64* %inc_ptr_value53, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value53, align 8
  store i64 %value2, i64* %inc_ptr_value53, align 8
  %loaded_stack_ptr_address_value55 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value56 = getelementptr i64, i64* %loaded_stack_ptr_address_value55, i64 1
  store i64* %inc_ptr_value56, i64** %stack_ptr_address
  %21 = call i32 @call_invoke_method(i64* %19, i32 2, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond57 = icmp ne i32 %21, 1
  br i1 %ifcond57, label %then_block58, label %entry_ifend59

then_block58:                                     ; preds = %entry_ifend39
  %22 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend59:                                    ; preds = %entry_ifend39
  %stack_offset_value63 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value63, i64* %"lvar$0$", align 8
  %stack_offset_value65 = load i64, i64* %stack_offset_address_value23, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value65, i64* %"lvar$1$", align 8
  %stack_offset_value67 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value67, i64* %"lvar$2$", align 8
  %stack_offset_value69 = load i64, i64* %stack_offset_address_value27, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value69, i64* %"lvar$3$", align 8
  %stack_offset_value71 = load i64, i64* %stack_offset_address_value29, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value71, i64* %"lvar$4$", align 8
  %loaded_stack_ptr_address_value72 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value73 = getelementptr i64, i64* %loaded_stack_ptr_address_value72, i64 -1
  %stack_pointer_offset_value74 = load i64, i64* %stack_pointer_offset_value73, align 8
  %23 = trunc i64 %stack_pointer_offset_value74 to i32
  call void @push_jit_object(i32 %23)
  %loaded_stack_ptr_address_value75 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value76 = getelementptr i64, i64* %loaded_stack_ptr_address_value75, i64 1
  store i64* %dec_ptr_value76, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_pointer_offset_value74, i64* %"lvar$3$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$4$"
  store i64 0, i64* %"lvar$4$", align 8
  br label %for_start_pointzzn

for_start_pointzzn:                               ; preds = %entry_ifend106, %entry_ifend59
  %lvar90 = phi i64 [ %stack_offset_value112, %entry_ifend106 ], [ %stack_offset_value65, %entry_ifend59 ]
  %lvar88 = phi i64 [ %stack_offset_value110, %entry_ifend106 ], [ %stack_offset_value63, %entry_ifend59 ]
  %lvar94 = phi i64 [ %stack_offset_value116, %entry_ifend106 ], [ %stack_pointer_offset_value74, %entry_ifend59 ]
  %lvar92 = phi i64 [ %stack_offset_value114, %entry_ifend106 ], [ %stack_offset_value67, %entry_ifend59 ]
  %lvar96 = phi i64 [ %42, %entry_ifend106 ], [ 0, %entry_ifend59 ]
  %24 = trunc i64 %lvar96 to i32
  %25 = trunc i64 %lvar92 to i32
  %26 = call i32 @get_array_length(i32 %25)
  %subtmp = sub nuw i32 %26, 1
  %letmp = icmp slt i32 %24, %subtmp
  store i32 0, i32* @gSigInt
  %27 = trunc i64 %lvar94 to i32
  br i1 %letmp, label %entry_condend, label %label_for_endzzn

entry_condend:                                    ; preds = %for_start_pointzzn
  %28 = call %clvalue_and_bool_struct* @load_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %25, i32 %24)
  %29 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %28, i32 0, i32 0
  %30 = load i64, i64* %29, align 4
  %31 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %28, i32 0, i32 1
  %32 = load i32, i32* %31, align 4
  %ifcond84 = icmp eq i32 %32, 0
  br i1 %ifcond84, label %then_block, label %entry_ifend83

label_for_endzzn:                                 ; preds = %for_start_pointzzn
  %33 = zext i32 %27 to i64
  store i64 %33, i64* %stack, align 8
  ret i32 1

entry_ifend83:                                    ; preds = %entry_condend
  %34 = trunc i64 %30 to i8
  %35 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52664708 to i8*))
  %ifcond87 = icmp eq i64* %35, null
  br i1 %ifcond87, label %then_block, label %entry_ifend86

entry_ifend86:                                    ; preds = %entry_ifend83
  store i64 0, i64* %lvar, align 8
  store i64 %lvar88, i64* %lvar, align 8
  store i64 0, i64* %lvar_offset_value7, align 8
  store i64 %lvar90, i64* %lvar_offset_value7, align 8
  store i64 0, i64* %gepaddtmp, align 8
  store i64 %lvar92, i64* %gepaddtmp, align 8
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar94, i64* %lvar_offset_value11, align 8
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar96, i64* %lvar_offset_value13, align 8
  %loaded_stack_ptr_address_value98 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value98, align 8
  %36 = zext i32 %27 to i64
  store i64 %36, i64* %loaded_stack_ptr_address_value98, align 8
  %loaded_stack_ptr_address_value99 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value100 = getelementptr i64, i64* %loaded_stack_ptr_address_value99, i64 1
  store i64* %inc_ptr_value100, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value100, align 8
  %37 = zext i8 %34 to i64
  store i64 %37, i64* %inc_ptr_value100, align 8
  %loaded_stack_ptr_address_value102 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value103 = getelementptr i64, i64* %loaded_stack_ptr_address_value102, i64 1
  store i64* %inc_ptr_value103, i64** %stack_ptr_address
  %38 = call i32 @call_invoke_method(i64* %35, i32 5, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond104 = icmp ne i32 %38, 1
  br i1 %ifcond104, label %then_block105, label %entry_ifend106

then_block105:                                    ; preds = %entry_ifend86
  %39 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend106:                                   ; preds = %entry_ifend86
  %stack_offset_value110 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value110, i64* %"lvar$0$", align 8
  %stack_offset_value112 = load i64, i64* %stack_offset_address_value23, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value112, i64* %"lvar$1$", align 8
  %stack_offset_value114 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value114, i64* %"lvar$2$", align 8
  %stack_offset_value116 = load i64, i64* %stack_offset_address_value27, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value116, i64* %"lvar$3$", align 8
  %stack_offset_value118 = load i64, i64* %stack_offset_address_value29, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value118, i64* %"lvar$4$", align 8
  %loaded_stack_ptr_address_value119 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value120 = getelementptr i64, i64* %loaded_stack_ptr_address_value119, i64 -1
  %stack_pointer_offset_value121 = load i64, i64* %stack_pointer_offset_value120, align 8
  %40 = trunc i64 %stack_pointer_offset_value121 to i32
  call void @push_jit_object(i32 %40)
  %loaded_stack_ptr_address_value122 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value123 = getelementptr i64, i64* %loaded_stack_ptr_address_value122, i64 1
  store i64* %dec_ptr_value123, i64** %stack_ptr_address
  %41 = trunc i64 %stack_offset_value118 to i32
  %addtmp = add nuw i32 %41, 1
  store i64 0, i64* %"lvar$4$"
  %42 = zext i32 %addtmp to i64
  store i64 %42, i64* %"lvar$4$", align 8
  br label %for_start_pointzzn
}

define i32 @"JITTest.indexOf(regex,int)$$219"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$15$" = alloca i64
  %"lvar$14$" = alloca i64
  %"lvar$13$" = alloca i64
  %"lvar$12$" = alloca i64
  %"lvar$11$" = alloca i64
  %"lvar$10$" = alloca i64
  %"lvar$9$" = alloca i64
  %"lvar$8$" = alloca i64
  %"lvar$7$" = alloca i64
  %"lvar$6$" = alloca i64
  %"lvar$5$" = alloca i64
  %"lvar$4$" = alloca i64
  %"lvar$3$" = alloca i64
  %"lvar$2$" = alloca i64
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value1 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value1, i64* %"lvar$1$", align 8
  %stack_offset_address_value2 = getelementptr i64, i64* %stack, i64 2
  %stack_offset_value3 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value3, i64* %"lvar$2$", align 8
  store i64 0, i64* %"lvar$3$"
  store i64 0, i64* %"lvar$3$", align 8
  store i64 0, i64* %"lvar$4$"
  store i64 0, i64* %"lvar$4$", align 8
  store i64 0, i64* %"lvar$5$"
  store i64 0, i64* %"lvar$5$", align 8
  store i64 0, i64* %"lvar$6$"
  store i64 0, i64* %"lvar$6$", align 8
  store i64 0, i64* %"lvar$7$"
  store i64 0, i64* %"lvar$7$", align 8
  store i64 0, i64* %"lvar$8$"
  store i64 0, i64* %"lvar$8$", align 8
  store i64 0, i64* %"lvar$9$"
  store i64 0, i64* %"lvar$9$", align 8
  store i64 0, i64* %"lvar$10$"
  store i64 0, i64* %"lvar$10$", align 8
  store i64 0, i64* %"lvar$11$"
  store i64 0, i64* %"lvar$11$", align 8
  store i64 0, i64* %"lvar$12$"
  store i64 0, i64* %"lvar$12$", align 8
  store i64 0, i64* %"lvar$13$"
  store i64 0, i64* %"lvar$13$", align 8
  store i64 0, i64* %"lvar$14$"
  store i64 0, i64* %"lvar$14$", align 8
  store i64 0, i64* %"lvar$15$"
  store i64 0, i64* %"lvar$15$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$3$"
  store i64 4294967295, i64* %"lvar$3$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$4$"
  store i64 0, i64* %"lvar$4$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$5$"
  store i64 0, i64* %"lvar$5$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_string_object(i8* inttoptr (i64 52664756 to i8*))
  call void @push_jit_object(i32 %0)
  store i64 0, i64* %"lvar$6$"
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %"lvar$6$", align 8
  store i32 0, i32* @gSigInt
  %2 = trunc i64 %1 to i32
  %3 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52664760 to i8*))
  %ifcond = icmp eq i64* %3, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %then_block398, %then_block217, %then_block120, %entry_ifend496, %label_elsezzw, %entry_ifend481, %label_if_endzzq, %label_if_endzzt, %entry_ifend354, %entry_condend351, %entry_condend330, %while_start_pointzzs, %label_elsezzr, %entry_ifend270, %entry_condend266, %entry_condend, %entry_ifend75, %entry_ifend39, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value7 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value7, align 8
  store i64 %stack_offset_value1, i64* %lvar_offset_value7, align 8
  %lvar_offset_value9 = getelementptr i64, i64* %lvar, i64 2
  store i64 0, i64* %lvar_offset_value9, align 8
  store i64 %stack_offset_value3, i64* %lvar_offset_value9, align 8
  %lvar10 = load i64, i64* %"lvar$3$"
  %lvar_offset_value11 = getelementptr i64, i64* %lvar, i64 3
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar10, i64* %lvar_offset_value11, align 8
  %lvar12 = load i64, i64* %"lvar$4$"
  %lvar_offset_value13 = getelementptr i64, i64* %lvar, i64 4
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar12, i64* %lvar_offset_value13, align 8
  %lvar14 = load i64, i64* %"lvar$5$"
  %lvar_offset_value15 = getelementptr i64, i64* %lvar, i64 5
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar14, i64* %lvar_offset_value15, align 8
  %lvar_offset_value17 = getelementptr i64, i64* %lvar, i64 6
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %1, i64* %lvar_offset_value17, align 8
  %lvar18 = load i64, i64* %"lvar$7$"
  %lvar_offset_value19 = getelementptr i64, i64* %lvar, i64 7
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar18, i64* %lvar_offset_value19, align 8
  %lvar_offset_value21 = getelementptr i64, i64* %lvar, i64 8
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 0, i64* %lvar_offset_value21, align 8
  %lvar22 = load i64, i64* %"lvar$9$"
  %lvar_offset_value23 = getelementptr i64, i64* %lvar, i64 9
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar22, i64* %lvar_offset_value23, align 8
  %lvar_offset_value25 = getelementptr i64, i64* %lvar, i64 10
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 0, i64* %lvar_offset_value25, align 8
  %lvar_offset_value27 = getelementptr i64, i64* %lvar, i64 11
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 0, i64* %lvar_offset_value27, align 8
  %lvar28 = load i64, i64* %"lvar$12$"
  %lvar_offset_value29 = getelementptr i64, i64* %lvar, i64 12
  store i64 0, i64* %lvar_offset_value29, align 8
  store i64 %lvar28, i64* %lvar_offset_value29, align 8
  %lvar30 = load i64, i64* %"lvar$13$"
  %lvar_offset_value31 = getelementptr i64, i64* %lvar, i64 13
  store i64 0, i64* %lvar_offset_value31, align 8
  store i64 %lvar30, i64* %lvar_offset_value31, align 8
  %lvar32 = load i64, i64* %"lvar$14$"
  %lvar_offset_value33 = getelementptr i64, i64* %lvar, i64 14
  store i64 0, i64* %lvar_offset_value33, align 8
  store i64 %lvar32, i64* %lvar_offset_value33, align 8
  %lvar_offset_value35 = getelementptr i64, i64* %lvar, i64 15
  store i64 0, i64* %lvar_offset_value35, align 8
  store i64 0, i64* %lvar_offset_value35, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %4 = zext i32 %2 to i64
  store i64 %4, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value36 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value36, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  %5 = call i32 @call_invoke_method(i64* %3, i32 48, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond37 = icmp ne i32 %5, 1
  br i1 %ifcond37, label %then_block38, label %entry_ifend39

then_block38:                                     ; preds = %entry_ifend
  %6 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend39:                                    ; preds = %entry_ifend
  %stack_offset_value40 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value40, i64* %"lvar$0$", align 8
  %stack_offset_value42 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value42, i64* %"lvar$1$", align 8
  %stack_offset_value44 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value44, i64* %"lvar$2$", align 8
  %stack_offset_address_value45 = getelementptr i64, i64* %stack, i64 3
  %stack_offset_value46 = load i64, i64* %stack_offset_address_value45, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value46, i64* %"lvar$3$", align 8
  %stack_offset_address_value47 = getelementptr i64, i64* %stack, i64 4
  %stack_offset_value48 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value48, i64* %"lvar$4$", align 8
  %stack_offset_address_value49 = getelementptr i64, i64* %stack, i64 5
  %stack_offset_value50 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value50, i64* %"lvar$5$", align 8
  %stack_offset_address_value51 = getelementptr i64, i64* %stack, i64 6
  %stack_offset_value52 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value52, i64* %"lvar$6$", align 8
  %stack_offset_address_value53 = getelementptr i64, i64* %stack, i64 7
  %stack_offset_value54 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value54, i64* %"lvar$7$", align 8
  %stack_offset_address_value55 = getelementptr i64, i64* %stack, i64 8
  %stack_offset_value56 = load i64, i64* %stack_offset_address_value55, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value56, i64* %"lvar$8$", align 8
  %stack_offset_address_value57 = getelementptr i64, i64* %stack, i64 9
  %stack_offset_value58 = load i64, i64* %stack_offset_address_value57, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value58, i64* %"lvar$9$", align 8
  %stack_offset_address_value59 = getelementptr i64, i64* %stack, i64 10
  %stack_offset_value60 = load i64, i64* %stack_offset_address_value59, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value60, i64* %"lvar$10$", align 8
  %stack_offset_address_value61 = getelementptr i64, i64* %stack, i64 11
  %stack_offset_value62 = load i64, i64* %stack_offset_address_value61, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value62, i64* %"lvar$11$", align 8
  %stack_offset_address_value63 = getelementptr i64, i64* %stack, i64 12
  %stack_offset_value64 = load i64, i64* %stack_offset_address_value63, align 8
  store i64 0, i64* %"lvar$12$"
  store i64 %stack_offset_value64, i64* %"lvar$12$", align 8
  %stack_offset_address_value65 = getelementptr i64, i64* %stack, i64 13
  %stack_offset_value66 = load i64, i64* %stack_offset_address_value65, align 8
  store i64 0, i64* %"lvar$13$"
  store i64 %stack_offset_value66, i64* %"lvar$13$", align 8
  %stack_offset_address_value67 = getelementptr i64, i64* %stack, i64 14
  %stack_offset_value68 = load i64, i64* %stack_offset_address_value67, align 8
  store i64 0, i64* %"lvar$14$"
  store i64 %stack_offset_value68, i64* %"lvar$14$", align 8
  %stack_offset_address_value69 = getelementptr i64, i64* %stack, i64 15
  %stack_offset_value70 = load i64, i64* %stack_offset_address_value69, align 8
  store i64 0, i64* %"lvar$15$"
  store i64 %stack_offset_value70, i64* %"lvar$15$", align 8
  %loaded_stack_ptr_address_value71 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value71, i64 -1
  %stack_pointer_offset_value72 = load i64, i64* %stack_pointer_offset_value, align 8
  %7 = trunc i64 %stack_pointer_offset_value72 to i32
  call void @push_jit_object(i32 %7)
  %loaded_stack_ptr_address_value73 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value73, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_pointer_offset_value72, i64* %"lvar$7$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$8$"
  store i64 16, i64* %"lvar$8$", align 8
  store i32 0, i32* @gSigInt
  %8 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52664768 to i8*))
  %ifcond76 = icmp eq i64* %8, null
  br i1 %ifcond76, label %then_block, label %entry_ifend75

entry_ifend75:                                    ; preds = %entry_ifend39
  %9 = call i32 @create_object(i64* %8)
  call void @push_jit_object(i32 %9)
  %10 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52664780 to i8*))
  %ifcond80 = icmp eq i64* %10, null
  br i1 %ifcond80, label %then_block, label %entry_ifend79

entry_ifend79:                                    ; preds = %entry_ifend75
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value40, i64* %lvar, align 8
  store i64 0, i64* %lvar_offset_value7, align 8
  store i64 %stack_offset_value42, i64* %lvar_offset_value7, align 8
  store i64 0, i64* %lvar_offset_value9, align 8
  store i64 %stack_offset_value44, i64* %lvar_offset_value9, align 8
  %lvar87 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar87, i64* %lvar_offset_value11, align 8
  %lvar89 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar89, i64* %lvar_offset_value13, align 8
  %lvar91 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar91, i64* %lvar_offset_value15, align 8
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %stack_offset_value52, i64* %lvar_offset_value17, align 8
  %lvar95 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar95, i64* %lvar_offset_value19, align 8
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 16, i64* %lvar_offset_value21, align 8
  %lvar99 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar99, i64* %lvar_offset_value23, align 8
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %stack_offset_value60, i64* %lvar_offset_value25, align 8
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %stack_offset_value62, i64* %lvar_offset_value27, align 8
  %lvar105 = load i64, i64* %"lvar$12$"
  store i64 0, i64* %lvar_offset_value29, align 8
  store i64 %lvar105, i64* %lvar_offset_value29, align 8
  %lvar107 = load i64, i64* %"lvar$13$"
  store i64 0, i64* %lvar_offset_value31, align 8
  store i64 %lvar107, i64* %lvar_offset_value31, align 8
  %lvar109 = load i64, i64* %"lvar$14$"
  store i64 0, i64* %lvar_offset_value33, align 8
  store i64 %lvar109, i64* %lvar_offset_value33, align 8
  store i64 0, i64* %lvar_offset_value35, align 8
  store i64 %stack_offset_value70, i64* %lvar_offset_value35, align 8
  %loaded_stack_ptr_address_value113 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value113, align 8
  %11 = zext i32 %9 to i64
  store i64 %11, i64* %loaded_stack_ptr_address_value113, align 8
  %loaded_stack_ptr_address_value114 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value115 = getelementptr i64, i64* %loaded_stack_ptr_address_value114, i64 1
  store i64* %inc_ptr_value115, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value115, align 8
  store i64 16, i64* %inc_ptr_value115, align 8
  %loaded_stack_ptr_address_value117 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value118 = getelementptr i64, i64* %loaded_stack_ptr_address_value117, i64 1
  store i64* %inc_ptr_value118, i64** %stack_ptr_address
  %12 = call i32 @call_invoke_method(i64* %10, i32 0, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond119 = icmp ne i32 %12, 1
  br i1 %ifcond119, label %then_block120, label %entry_ifend121

then_block120:                                    ; preds = %entry_ifend79
  %13 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend121:                                   ; preds = %entry_ifend79
  %stack_offset_value125 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value125, i64* %"lvar$0$", align 8
  %stack_offset_value127 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value127, i64* %"lvar$1$", align 8
  %stack_offset_value129 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value129, i64* %"lvar$2$", align 8
  %stack_offset_value131 = load i64, i64* %stack_offset_address_value45, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value131, i64* %"lvar$3$", align 8
  %stack_offset_value133 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value133, i64* %"lvar$4$", align 8
  %stack_offset_value135 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value135, i64* %"lvar$5$", align 8
  %stack_offset_value137 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value137, i64* %"lvar$6$", align 8
  %stack_offset_value139 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value139, i64* %"lvar$7$", align 8
  %stack_offset_value141 = load i64, i64* %stack_offset_address_value55, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value141, i64* %"lvar$8$", align 8
  %stack_offset_value143 = load i64, i64* %stack_offset_address_value57, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value143, i64* %"lvar$9$", align 8
  %stack_offset_value145 = load i64, i64* %stack_offset_address_value59, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value145, i64* %"lvar$10$", align 8
  %stack_offset_value147 = load i64, i64* %stack_offset_address_value61, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value147, i64* %"lvar$11$", align 8
  %stack_offset_value149 = load i64, i64* %stack_offset_address_value63, align 8
  store i64 0, i64* %"lvar$12$"
  store i64 %stack_offset_value149, i64* %"lvar$12$", align 8
  %stack_offset_value151 = load i64, i64* %stack_offset_address_value65, align 8
  store i64 0, i64* %"lvar$13$"
  store i64 %stack_offset_value151, i64* %"lvar$13$", align 8
  %stack_offset_value153 = load i64, i64* %stack_offset_address_value67, align 8
  store i64 0, i64* %"lvar$14$"
  store i64 %stack_offset_value153, i64* %"lvar$14$", align 8
  %stack_offset_value155 = load i64, i64* %stack_offset_address_value69, align 8
  store i64 0, i64* %"lvar$15$"
  store i64 %stack_offset_value155, i64* %"lvar$15$", align 8
  %loaded_stack_ptr_address_value156 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value157 = getelementptr i64, i64* %loaded_stack_ptr_address_value156, i64 -1
  %stack_pointer_offset_value158 = load i64, i64* %stack_pointer_offset_value157, align 8
  %14 = trunc i64 %stack_pointer_offset_value158 to i32
  call void @push_jit_object(i32 %14)
  %loaded_stack_ptr_address_value159 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value160 = getelementptr i64, i64* %loaded_stack_ptr_address_value159, i64 1
  store i64* %dec_ptr_value160, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_pointer_offset_value158, i64* %"lvar$9$", align 8
  store i32 0, i32* @gSigInt
  br label %entry_condend

entry_condend:                                    ; preds = %entry_ifend499, %entry_condend488, %entry_ifend121
  %lvar199 = phi i64 [ %stack_offset_value155, %entry_ifend121 ], [ %stack_offset_value252, %entry_condend488 ], [ %stack_offset_value252, %entry_ifend499 ]
  %lvar191 = phi i64 [ %stack_offset_value147, %entry_ifend121 ], [ %stack_offset_value244, %entry_condend488 ], [ %stack_offset_value244, %entry_ifend499 ]
  %lvar189 = phi i64 [ %stack_offset_value145, %entry_ifend121 ], [ %stack_pointer_offset_value255, %entry_condend488 ], [ %stack_pointer_offset_value255, %entry_ifend499 ]
  %lvar181 = phi i64 [ %stack_offset_value137, %entry_ifend121 ], [ %stack_offset_value234, %entry_condend488 ], [ %stack_offset_value234, %entry_ifend499 ]
  %lvar173 = phi i64 [ %stack_offset_value129, %entry_ifend121 ], [ %stack_offset_value226, %entry_condend488 ], [ %stack_offset_value226, %entry_ifend499 ]
  %lvar169 = phi i64 [ %stack_offset_value125, %entry_ifend121 ], [ %stack_offset_value222, %entry_condend488 ], [ %stack_offset_value222, %entry_ifend499 ]
  %lvar185 = phi i64 [ %stack_offset_value141, %entry_ifend121 ], [ %stack_offset_value238, %entry_condend488 ], [ %stack_offset_value238, %entry_ifend499 ]
  %lvar171 = phi i64 [ %stack_offset_value127, %entry_ifend121 ], [ %stack_offset_value224, %entry_condend488 ], [ %stack_offset_value224, %entry_ifend499 ]
  store i32 0, i32* @gSigInt
  %15 = trunc i64 %lvar171 to i32
  %lvar162 = load i64, i64* %"lvar$7$"
  %16 = trunc i64 %lvar162 to i32
  %lvar163 = load i64, i64* %"lvar$4$"
  %17 = trunc i64 %lvar163 to i32
  %18 = trunc i64 %lvar185 to i32
  %lvar165 = load i64, i64* %"lvar$9$"
  %19 = trunc i64 %lvar165 to i32
  %20 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52664832 to i8*))
  %ifcond168 = icmp eq i64* %20, null
  br i1 %ifcond168, label %then_block, label %entry_ifend167

label_whilezzo:                                   ; preds = %entry_ifend218, %label_if_endzzr
  store i32 0, i32* @gSigInt
  %lvar506 = load i64, i64* %"lvar$3$"
  %21 = trunc i64 %lvar506 to i32
  %22 = zext i32 %21 to i64
  store i64 %22, i64* %stack, align 8
  ret i32 1

entry_ifend167:                                   ; preds = %entry_condend
  store i64 0, i64* %lvar, align 8
  store i64 %lvar169, i64* %lvar, align 8
  store i64 0, i64* %lvar_offset_value7, align 8
  store i64 %lvar171, i64* %lvar_offset_value7, align 8
  store i64 0, i64* %lvar_offset_value9, align 8
  store i64 %lvar173, i64* %lvar_offset_value9, align 8
  %lvar175 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar175, i64* %lvar_offset_value11, align 8
  %lvar177 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar177, i64* %lvar_offset_value13, align 8
  %lvar179 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar179, i64* %lvar_offset_value15, align 8
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar181, i64* %lvar_offset_value17, align 8
  %lvar183 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar183, i64* %lvar_offset_value19, align 8
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar185, i64* %lvar_offset_value21, align 8
  %lvar187 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar187, i64* %lvar_offset_value23, align 8
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar189, i64* %lvar_offset_value25, align 8
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar191, i64* %lvar_offset_value27, align 8
  %lvar193 = load i64, i64* %"lvar$12$"
  store i64 0, i64* %lvar_offset_value29, align 8
  store i64 %lvar193, i64* %lvar_offset_value29, align 8
  %lvar195 = load i64, i64* %"lvar$13$"
  store i64 0, i64* %lvar_offset_value31, align 8
  store i64 %lvar195, i64* %lvar_offset_value31, align 8
  %lvar197 = load i64, i64* %"lvar$14$"
  store i64 0, i64* %lvar_offset_value33, align 8
  store i64 %lvar197, i64* %lvar_offset_value33, align 8
  store i64 0, i64* %lvar_offset_value35, align 8
  store i64 %lvar199, i64* %lvar_offset_value35, align 8
  %loaded_stack_ptr_address_value201 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value201, align 8
  %23 = zext i32 %15 to i64
  store i64 %23, i64* %loaded_stack_ptr_address_value201, align 8
  %loaded_stack_ptr_address_value202 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value203 = getelementptr i64, i64* %loaded_stack_ptr_address_value202, i64 1
  store i64* %inc_ptr_value203, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value203, align 8
  %24 = zext i32 %16 to i64
  store i64 %24, i64* %inc_ptr_value203, align 8
  %loaded_stack_ptr_address_value205 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value206 = getelementptr i64, i64* %loaded_stack_ptr_address_value205, i64 1
  store i64* %inc_ptr_value206, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value206, align 8
  %25 = zext i32 %17 to i64
  store i64 %25, i64* %inc_ptr_value206, align 8
  %loaded_stack_ptr_address_value208 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value209 = getelementptr i64, i64* %loaded_stack_ptr_address_value208, i64 1
  store i64* %inc_ptr_value209, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value209, align 8
  %26 = zext i32 %18 to i64
  store i64 %26, i64* %inc_ptr_value209, align 8
  %loaded_stack_ptr_address_value211 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value212 = getelementptr i64, i64* %loaded_stack_ptr_address_value211, i64 1
  store i64* %inc_ptr_value212, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value212, align 8
  %27 = zext i32 %19 to i64
  store i64 %27, i64* %inc_ptr_value212, align 8
  %loaded_stack_ptr_address_value214 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value215 = getelementptr i64, i64* %loaded_stack_ptr_address_value214, i64 1
  store i64* %inc_ptr_value215, i64** %stack_ptr_address
  %28 = call i32 @call_invoke_method(i64* %20, i32 25, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond216 = icmp ne i32 %28, 1
  br i1 %ifcond216, label %then_block217, label %entry_ifend218

then_block217:                                    ; preds = %entry_ifend167
  %29 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend218:                                   ; preds = %entry_ifend167
  %stack_offset_value222 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value222, i64* %"lvar$0$", align 8
  %stack_offset_value224 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value224, i64* %"lvar$1$", align 8
  %stack_offset_value226 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value226, i64* %"lvar$2$", align 8
  %stack_offset_value228 = load i64, i64* %stack_offset_address_value45, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value228, i64* %"lvar$3$", align 8
  %stack_offset_value230 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value230, i64* %"lvar$4$", align 8
  %stack_offset_value232 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value232, i64* %"lvar$5$", align 8
  %stack_offset_value234 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value234, i64* %"lvar$6$", align 8
  %stack_offset_value236 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value236, i64* %"lvar$7$", align 8
  %stack_offset_value238 = load i64, i64* %stack_offset_address_value55, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value238, i64* %"lvar$8$", align 8
  %stack_offset_value240 = load i64, i64* %stack_offset_address_value57, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value240, i64* %"lvar$9$", align 8
  %stack_offset_value242 = load i64, i64* %stack_offset_address_value59, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value242, i64* %"lvar$10$", align 8
  %stack_offset_value244 = load i64, i64* %stack_offset_address_value61, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value244, i64* %"lvar$11$", align 8
  %stack_offset_value246 = load i64, i64* %stack_offset_address_value63, align 8
  store i64 0, i64* %"lvar$12$"
  store i64 %stack_offset_value246, i64* %"lvar$12$", align 8
  %stack_offset_value248 = load i64, i64* %stack_offset_address_value65, align 8
  store i64 0, i64* %"lvar$13$"
  store i64 %stack_offset_value248, i64* %"lvar$13$", align 8
  %stack_offset_value250 = load i64, i64* %stack_offset_address_value67, align 8
  store i64 0, i64* %"lvar$14$"
  store i64 %stack_offset_value250, i64* %"lvar$14$", align 8
  %stack_offset_value252 = load i64, i64* %stack_offset_address_value69, align 8
  store i64 0, i64* %"lvar$15$"
  store i64 %stack_offset_value252, i64* %"lvar$15$", align 8
  %loaded_stack_ptr_address_value253 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value254 = getelementptr i64, i64* %loaded_stack_ptr_address_value253, i64 -1
  %stack_pointer_offset_value255 = load i64, i64* %stack_pointer_offset_value254, align 8
  %30 = trunc i64 %stack_pointer_offset_value255 to i32
  call void @push_jit_object(i32 %30)
  %loaded_stack_ptr_address_value256 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value257 = getelementptr i64, i64* %loaded_stack_ptr_address_value256, i64 1
  store i64* %dec_ptr_value257, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_pointer_offset_value255, i64* %"lvar$10$", align 8
  store i32 0, i32* @gSigInt
  %gttmp = icmp sgt i32 %30, 0
  store i32 0, i32* @gSigInt
  br i1 %gttmp, label %entry_condend260, label %label_whilezzo

entry_condend260:                                 ; preds = %entry_ifend218
  %lvar262 = load i64, i64* %"lvar$5$"
  %31 = trunc i64 %lvar262 to i32
  %addtmp = add nuw i32 %31, 1
  store i64 0, i64* %"lvar$5$"
  %32 = zext i32 %addtmp to i64
  store i64 %32, i64* %"lvar$5$", align 8
  store i32 0, i32* @gSigInt
  %33 = trunc i64 %32 to i32
  %34 = trunc i64 %stack_offset_value226 to i32
  %eqtmpx = icmp eq i32 %33, %34
  store i32 0, i32* @gSigInt
  br i1 %eqtmpx, label %entry_condend266, label %label_if_endzzq

entry_condend266:                                 ; preds = %entry_condend260
  %lvar268 = load i64, i64* %"lvar$9$"
  %35 = trunc i64 %lvar268 to i32
  %36 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %35, i32 0)
  %37 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %36, i32 0, i32 0
  %38 = load i64, i64* %37, align 4
  %39 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %36, i32 0, i32 1
  %40 = load i32, i32* %39, align 4
  %ifcond271 = icmp eq i32 %40, 0
  br i1 %ifcond271, label %then_block, label %entry_ifend270

label_if_endzzq:                                  ; preds = %entry_condend260
  %lvar478 = load i64, i64* %"lvar$4$"
  %41 = trunc i64 %lvar478 to i32
  %lvar479 = load i64, i64* %"lvar$9$"
  %42 = trunc i64 %lvar479 to i32
  %43 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %42, i32 1)
  %44 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %43, i32 0, i32 0
  %45 = load i64, i64* %44, align 4
  %46 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %43, i32 0, i32 1
  %47 = load i32, i32* %46, align 4
  %ifcond482 = icmp eq i32 %47, 0
  br i1 %ifcond482, label %then_block, label %entry_ifend481

entry_ifend270:                                   ; preds = %entry_condend266
  %48 = trunc i64 %38 to i32
  %49 = call %clvalue_and_bool_struct* @load_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %48, i32 0)
  %50 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %49, i32 0, i32 0
  %51 = load i64, i64* %50, align 4
  %52 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %49, i32 0, i32 1
  %53 = load i32, i32* %52, align 4
  %ifcond274 = icmp eq i32 %53, 0
  br i1 %ifcond274, label %then_block, label %entry_ifend273

entry_ifend273:                                   ; preds = %entry_ifend270
  %54 = trunc i64 %51 to i32
  store i64 0, i64* %"lvar$11$"
  %55 = zext i32 %54 to i64
  store i64 %55, i64* %"lvar$11$", align 8
  store i32 0, i32* @gSigInt
  %56 = trunc i64 %55 to i32
  %eqtmpx276 = icmp eq i32 %56, 0
  store i32 0, i32* @gSigInt
  br i1 %eqtmpx276, label %entry_condend278, label %label_elsezzr

entry_condend278:                                 ; preds = %entry_ifend273
  store i64 0, i64* %"lvar$3$"
  store i64 0, i64* %"lvar$3$", align 8
  br label %label_if_endzzr

label_elsezzr:                                    ; preds = %entry_ifend273
  store i64 0, i64* %"lvar$12$"
  store i64 0, i64* %"lvar$12$", align 8
  store i32 0, i32* @gSigInt
  %lvar281 = load i64, i64* %"lvar$7$"
  %57 = trunc i64 %lvar281 to i32
  %58 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %57, i32 0)
  %59 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %58, i32 0, i32 0
  %60 = load i64, i64* %59, align 4
  %61 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %58, i32 0, i32 1
  %62 = load i32, i32* %61, align 4
  %ifcond284 = icmp eq i32 %62, 0
  br i1 %ifcond284, label %then_block, label %entry_ifend283

label_if_endzzr:                                  ; preds = %label_whilezzs, %entry_condend278
  store i32 0, i32* @gSigInt
  br label %label_whilezzo

entry_ifend283:                                   ; preds = %label_elsezzr
  %63 = inttoptr i64 %60 to i8*
  store i64 0, i64* %"lvar$13$"
  %64 = ptrtoint i8* %63 to i64
  store i64 %64, i64* %"lvar$13$", align 8
  store i32 0, i32* @gSigInt
  br label %while_start_pointzzs

while_start_pointzzs:                             ; preds = %label_if_endzzv, %entry_ifend283
  %lvar326 = phi i64 [ %lvar326603, %label_if_endzzv ], [ %stack_offset_value252, %entry_ifend283 ]
  %lvar286 = phi i64 [ %lvar285.pre, %label_if_endzzv ], [ %64, %entry_ifend283 ]
  %65 = inttoptr i64 %lvar286 to i8*
  %lvar287 = load i64, i64* %"lvar$7$"
  %66 = trunc i64 %lvar287 to i32
  %67 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %66, i32 1)
  %68 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %67, i32 0, i32 0
  %69 = load i64, i64* %68, align 4
  %70 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %67, i32 0, i32 1
  %71 = load i32, i32* %70, align 4
  %ifcond290 = icmp eq i32 %71, 0
  br i1 %ifcond290, label %then_block, label %entry_ifend289

entry_ifend289:                                   ; preds = %while_start_pointzzs
  %addtmp291 = getelementptr i8, i8* %65, i64 %69
  %uletmp = icmp ult i8* %65, %addtmp291
  br i1 %uletmp, label %entry_condend293, label %label_whilezzs

entry_condend293:                                 ; preds = %entry_ifend289
  store i32 0, i32* @gSigInt
  %lvar295 = load i64, i64* %"lvar$13$"
  %72 = inttoptr i64 %lvar295 to i8*
  store i64 %stack_offset_value222, i64* %lvar, align 8
  store i64 %stack_offset_value224, i64* %lvar_offset_value7, align 8
  store i64 %stack_offset_value226, i64* %lvar_offset_value9, align 8
  %lvar302 = load i64, i64* %"lvar$3$"
  store i64 %lvar302, i64* %lvar_offset_value11, align 8
  %lvar304 = load i64, i64* %"lvar$4$"
  store i64 %lvar304, i64* %lvar_offset_value13, align 8
  store i64 %32, i64* %lvar_offset_value15, align 8
  store i64 %stack_offset_value234, i64* %lvar_offset_value17, align 8
  %lvar310 = load i64, i64* %"lvar$7$"
  store i64 %lvar310, i64* %lvar_offset_value19, align 8
  store i64 %stack_offset_value238, i64* %lvar_offset_value21, align 8
  %lvar314 = load i64, i64* %"lvar$9$"
  store i64 %lvar314, i64* %lvar_offset_value23, align 8
  store i64 %stack_pointer_offset_value255, i64* %lvar_offset_value25, align 8
  store i64 %55, i64* %lvar_offset_value27, align 8
  %lvar320 = load i64, i64* %"lvar$12$"
  store i64 %lvar320, i64* %lvar_offset_value29, align 8
  store i64 %lvar295, i64* %lvar_offset_value31, align 8
  %lvar324 = load i64, i64* %"lvar$14$"
  store i64 %lvar324, i64* %lvar_offset_value33, align 8
  store i64 %lvar326, i64* %lvar_offset_value35, align 8
  %llvm_value = load i8, i8* %72, align 1
  store i64 0, i64* %"lvar$14$"
  %73 = zext i8 %llvm_value to i64
  store i64 %73, i64* %"lvar$14$", align 8
  store i32 0, i32* @gSigInt
  %74 = trunc i64 %73 to i8
  %ugttmp = icmp ugt i8 %74, 127
  store i32 0, i32* @gSigInt
  br i1 %ugttmp, label %entry_condend330, label %label_elsezzt

label_whilezzs:                                   ; preds = %entry_ifend289, %entry_condend469
  store i32 0, i32* @gSigInt
  %lvar474 = load i64, i64* %"lvar$12$"
  %75 = trunc i64 %lvar474 to i32
  store i64 0, i64* %"lvar$3$"
  %76 = zext i32 %75 to i64
  store i64 %76, i64* %"lvar$3$", align 8
  br label %label_if_endzzr

entry_condend330:                                 ; preds = %entry_condend293
  %andtmp = and i8 %74, -128
  %rshifttmp = lshr i8 %andtmp, 7
  %andtmp334 = and i8 %74, 64
  %rshifttmp335 = lshr i8 %andtmp334, 6
  %addtmp336 = add nsw i8 %rshifttmp335, %rshifttmp
  %andtmp338 = and i8 %74, 32
  %rshifttmp339 = lshr i8 %andtmp338, 5
  %addtmp340 = add nsw i8 %addtmp336, %rshifttmp339
  %andtmp342 = and i8 %74, 16
  %rshifttmp343 = lshr i8 %andtmp342, 4
  %addtmp344 = add nsw i8 %addtmp340, %rshifttmp343
  %value2 = zext i8 %addtmp344 to i32
  store i64 0, i64* %"lvar$15$"
  %77 = zext i32 %value2 to i64
  store i64 %77, i64* %"lvar$15$", align 8
  store i32 0, i32* @gSigInt
  %78 = trunc i64 %77 to i32
  %79 = call %clvalue_and_bool_struct* @load_class_field(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 0, i32 20736, i64* %constant)
  %80 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %79, i32 0, i32 0
  %81 = load i64, i64* %80, align 4
  %82 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %79, i32 0, i32 1
  %83 = load i32, i32* %82, align 4
  %ifcond348 = icmp eq i32 %83, 0
  br i1 %ifcond348, label %then_block, label %entry_ifend347

label_elsezzt:                                    ; preds = %entry_condend293
  %addtmp450 = getelementptr i8, i8* %72, i64 1
  store i64 0, i64* %"lvar$13$"
  %84 = ptrtoint i8* %addtmp450 to i64
  store i64 %84, i64* %"lvar$13$", align 8
  store i32 0, i32* @gSigInt
  %85 = trunc i64 %lvar320 to i32
  %addtmp454 = add nuw i32 %85, 1
  store i64 0, i64* %"lvar$12$"
  %86 = zext i32 %addtmp454 to i64
  store i64 %86, i64* %"lvar$12$", align 8
  br label %label_if_endzzt

entry_ifend347:                                   ; preds = %entry_condend330
  %87 = trunc i64 %81 to i32
  %gttmp349 = icmp sgt i32 %78, %87
  store i32 0, i32* @gSigInt
  br i1 %gttmp349, label %entry_condend351, label %label_elsezzu

entry_condend351:                                 ; preds = %entry_ifend347
  %88 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52665000 to i8*))
  %ifcond355 = icmp eq i64* %88, null
  br i1 %ifcond355, label %then_block, label %entry_ifend354

label_elsezzu:                                    ; preds = %entry_ifend347
  %lvar440 = load i64, i64* %"lvar$13$"
  %89 = inttoptr i64 %lvar440 to i8*
  %value2442 = zext i32 %78 to i64
  %addtmp443 = getelementptr i8, i8* %89, i64 %value2442
  store i64 0, i64* %"lvar$13$"
  %90 = ptrtoint i8* %addtmp443 to i64
  store i64 %90, i64* %"lvar$13$", align 8
  store i32 0, i32* @gSigInt
  %lvar445 = load i64, i64* %"lvar$12$"
  %91 = trunc i64 %lvar445 to i32
  %addtmp446 = add nuw i32 %91, 1
  store i64 0, i64* %"lvar$12$"
  %92 = zext i32 %addtmp446 to i64
  store i64 %92, i64* %"lvar$12$", align 8
  br label %label_if_endzzt

entry_ifend354:                                   ; preds = %entry_condend351
  %93 = call i32 @create_object(i64* %88)
  call void @push_jit_object(i32 %93)
  %94 = call i32 @create_string_object(i8* inttoptr (i64 52665012 to i8*))
  call void @push_jit_object(i32 %94)
  %95 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52665048 to i8*))
  %ifcond358 = icmp eq i64* %95, null
  br i1 %ifcond358, label %then_block, label %entry_ifend357

entry_ifend357:                                   ; preds = %entry_ifend354
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value222, i64* %lvar, align 8
  store i64 0, i64* %lvar_offset_value7, align 8
  store i64 %stack_offset_value224, i64* %lvar_offset_value7, align 8
  store i64 0, i64* %lvar_offset_value9, align 8
  store i64 %stack_offset_value226, i64* %lvar_offset_value9, align 8
  %lvar365 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar365, i64* %lvar_offset_value11, align 8
  %lvar367 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar367, i64* %lvar_offset_value13, align 8
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %32, i64* %lvar_offset_value15, align 8
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %stack_offset_value234, i64* %lvar_offset_value17, align 8
  %lvar373 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar373, i64* %lvar_offset_value19, align 8
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %stack_offset_value238, i64* %lvar_offset_value21, align 8
  %lvar377 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar377, i64* %lvar_offset_value23, align 8
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %stack_pointer_offset_value255, i64* %lvar_offset_value25, align 8
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %55, i64* %lvar_offset_value27, align 8
  %lvar383 = load i64, i64* %"lvar$12$"
  store i64 0, i64* %lvar_offset_value29, align 8
  store i64 %lvar383, i64* %lvar_offset_value29, align 8
  %lvar385 = load i64, i64* %"lvar$13$"
  store i64 0, i64* %lvar_offset_value31, align 8
  store i64 %lvar385, i64* %lvar_offset_value31, align 8
  store i64 0, i64* %lvar_offset_value33, align 8
  store i64 %73, i64* %lvar_offset_value33, align 8
  store i64 0, i64* %lvar_offset_value35, align 8
  store i64 %77, i64* %lvar_offset_value35, align 8
  %loaded_stack_ptr_address_value391 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value391, align 8
  %96 = zext i32 %93 to i64
  store i64 %96, i64* %loaded_stack_ptr_address_value391, align 8
  %loaded_stack_ptr_address_value392 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value393 = getelementptr i64, i64* %loaded_stack_ptr_address_value392, i64 1
  store i64* %inc_ptr_value393, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value393, align 8
  %97 = zext i32 %94 to i64
  store i64 %97, i64* %inc_ptr_value393, align 8
  %loaded_stack_ptr_address_value395 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value396 = getelementptr i64, i64* %loaded_stack_ptr_address_value395, i64 1
  store i64* %inc_ptr_value396, i64** %stack_ptr_address
  %98 = call i32 @call_invoke_method(i64* %95, i32 0, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond397 = icmp ne i32 %98, 1
  br i1 %ifcond397, label %then_block398, label %entry_ifend399

then_block398:                                    ; preds = %entry_ifend357
  %99 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend399:                                   ; preds = %entry_ifend357
  %stack_offset_value403 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value403, i64* %"lvar$0$", align 8
  %stack_offset_value405 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value405, i64* %"lvar$1$", align 8
  %stack_offset_value407 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value407, i64* %"lvar$2$", align 8
  %stack_offset_value409 = load i64, i64* %stack_offset_address_value45, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value409, i64* %"lvar$3$", align 8
  %stack_offset_value411 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value411, i64* %"lvar$4$", align 8
  %stack_offset_value413 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value413, i64* %"lvar$5$", align 8
  %stack_offset_value415 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value415, i64* %"lvar$6$", align 8
  %stack_offset_value417 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value417, i64* %"lvar$7$", align 8
  %stack_offset_value419 = load i64, i64* %stack_offset_address_value55, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value419, i64* %"lvar$8$", align 8
  %stack_offset_value421 = load i64, i64* %stack_offset_address_value57, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value421, i64* %"lvar$9$", align 8
  %stack_offset_value423 = load i64, i64* %stack_offset_address_value59, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value423, i64* %"lvar$10$", align 8
  %stack_offset_value425 = load i64, i64* %stack_offset_address_value61, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value425, i64* %"lvar$11$", align 8
  %stack_offset_value427 = load i64, i64* %stack_offset_address_value63, align 8
  store i64 0, i64* %"lvar$12$"
  store i64 %stack_offset_value427, i64* %"lvar$12$", align 8
  %stack_offset_value429 = load i64, i64* %stack_offset_address_value65, align 8
  store i64 0, i64* %"lvar$13$"
  store i64 %stack_offset_value429, i64* %"lvar$13$", align 8
  %stack_offset_value431 = load i64, i64* %stack_offset_address_value67, align 8
  store i64 0, i64* %"lvar$14$"
  store i64 %stack_offset_value431, i64* %"lvar$14$", align 8
  %stack_offset_value433 = load i64, i64* %stack_offset_address_value69, align 8
  store i64 0, i64* %"lvar$15$"
  store i64 %stack_offset_value433, i64* %"lvar$15$", align 8
  %loaded_stack_ptr_address_value434 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value435 = getelementptr i64, i64* %loaded_stack_ptr_address_value434, i64 -1
  %stack_pointer_offset_value436 = load i64, i64* %stack_pointer_offset_value435, align 8
  %100 = trunc i64 %stack_pointer_offset_value436 to i32
  call void @push_jit_object(i32 %100)
  %loaded_stack_ptr_address_value437 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value438 = getelementptr i64, i64* %loaded_stack_ptr_address_value437, i64 1
  store i64* %dec_ptr_value438, i64** %stack_ptr_address
  store i64 %stack_pointer_offset_value436, i64* %stack, align 8
  call void @entry_exception_object(i32 %100, i64* %info)
  ret i32 0

label_if_endzzt:                                  ; preds = %label_elsezzt, %label_elsezzu
  %lvar457 = phi i64 [ %84, %label_elsezzt ], [ %90, %label_elsezzu ]
  %lvar326603 = phi i64 [ %lvar326, %label_elsezzt ], [ %77, %label_elsezzu ]
  store i32 0, i32* @gSigInt
  %101 = inttoptr i64 %lvar457 to i8*
  %lvar458 = load i64, i64* %"lvar$7$"
  %102 = trunc i64 %lvar458 to i32
  %103 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %102, i32 0)
  %104 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %103, i32 0, i32 0
  %105 = load i64, i64* %104, align 4
  %106 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %103, i32 0, i32 1
  %107 = load i32, i32* %106, align 4
  %ifcond461 = icmp eq i32 %107, 0
  br i1 %ifcond461, label %then_block, label %entry_ifend460

entry_ifend460:                                   ; preds = %label_if_endzzt
  %108 = inttoptr i64 %105 to i8*
  %value2462 = ptrtoint i8* %101 to i64
  %value2463 = ptrtoint i8* %108 to i64
  %subtmp464 = sub i64 %value2462, %value2463
  %value2466 = zext i32 %56 to i64
  %eqtmpx467 = icmp eq i64 %subtmp464, %value2466
  br i1 %eqtmpx467, label %entry_condend469, label %label_if_endzzv

entry_condend469:                                 ; preds = %entry_ifend460
  store i32 0, i32* @gSigInt
  br label %label_whilezzs

label_if_endzzv:                                  ; preds = %entry_ifend460
  %lvar285.pre = load i64, i64* %"lvar$13$"
  br label %while_start_pointzzs

entry_ifend481:                                   ; preds = %label_if_endzzq
  %109 = trunc i64 %45 to i32
  %110 = call %clvalue_and_bool_struct* @load_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %109, i32 0)
  %111 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %110, i32 0, i32 0
  %112 = load i64, i64* %111, align 4
  %113 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %110, i32 0, i32 1
  %114 = load i32, i32* %113, align 4
  %ifcond485 = icmp eq i32 %114, 0
  br i1 %ifcond485, label %then_block, label %entry_ifend484

entry_ifend484:                                   ; preds = %entry_ifend481
  %115 = trunc i64 %112 to i32
  %eqtmpx486 = icmp eq i32 %41, %115
  store i32 0, i32* @gSigInt
  br i1 %eqtmpx486, label %entry_condend488, label %label_elsezzw

entry_condend488:                                 ; preds = %entry_ifend484
  %lvar490 = load i64, i64* %"lvar$4$"
  %116 = trunc i64 %lvar490 to i32
  %addtmp491 = add nuw i32 %116, 1
  store i64 0, i64* %"lvar$4$"
  %117 = zext i32 %addtmp491 to i64
  store i64 %117, i64* %"lvar$4$", align 8
  br label %entry_condend

label_elsezzw:                                    ; preds = %entry_ifend484
  %lvar494 = load i64, i64* %"lvar$9$"
  %118 = trunc i64 %lvar494 to i32
  %119 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %118, i32 1)
  %120 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %119, i32 0, i32 0
  %121 = load i64, i64* %120, align 4
  %122 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %119, i32 0, i32 1
  %123 = load i32, i32* %122, align 4
  %ifcond497 = icmp eq i32 %123, 0
  br i1 %ifcond497, label %then_block, label %entry_ifend496

entry_ifend496:                                   ; preds = %label_elsezzw
  %124 = trunc i64 %121 to i32
  %125 = call %clvalue_and_bool_struct* @load_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %124, i32 0)
  %126 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %125, i32 0, i32 0
  %127 = load i64, i64* %126, align 4
  %128 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %125, i32 0, i32 1
  %129 = load i32, i32* %128, align 4
  %ifcond500 = icmp eq i32 %129, 0
  br i1 %ifcond500, label %then_block, label %entry_ifend499

entry_ifend499:                                   ; preds = %entry_ifend496
  %130 = trunc i64 %127 to i32
  store i64 0, i64* %"lvar$4$"
  %131 = zext i32 %130 to i64
  store i64 %131, i64* %"lvar$4$", align 8
  br label %entry_condend
}

define i32 @"JITTest.insert2(int,Integer)$$220"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %VALUE_FOR_ANDAND_OROR = alloca i64
  %"lvar$6$" = alloca i64
  %"lvar$5$" = alloca i64
  %"lvar$4$" = alloca i64
  %"lvar$3$" = alloca i64
  %"lvar$2$" = alloca i64
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value1 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value1, i64* %"lvar$1$", align 8
  %stack_offset_address_value2 = getelementptr i64, i64* %stack, i64 2
  %stack_offset_value3 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value3, i64* %"lvar$2$", align 8
  store i64 0, i64* %"lvar$3$"
  store i64 0, i64* %"lvar$3$", align 8
  store i64 0, i64* %"lvar$4$"
  store i64 0, i64* %"lvar$4$", align 8
  store i64 0, i64* %"lvar$5$"
  store i64 0, i64* %"lvar$5$", align 8
  store i64 0, i64* %"lvar$6$"
  store i64 0, i64* %"lvar$6$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_integer(i32 1)
  call void @push_jit_object(i32 %0)
  %1 = call i32 @create_integer(i32 2)
  call void @push_jit_object(i32 %1)
  %2 = call i32 @create_integer(i32 3)
  call void @push_jit_object(i32 %2)
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %3 = zext i32 %0 to i64
  store i64 %3, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value4 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value4, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  %4 = zext i32 %1 to i64
  store i64 %4, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value6 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value7 = getelementptr i64, i64* %loaded_stack_ptr_address_value6, i64 1
  store i64* %inc_ptr_value7, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value7, align 8
  %5 = zext i32 %2 to i64
  store i64 %5, i64* %inc_ptr_value7, align 8
  %loaded_stack_ptr_address_value9 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value10 = getelementptr i64, i64* %loaded_stack_ptr_address_value9, i64 1
  store i64* %inc_ptr_value10, i64** %stack_ptr_address
  %6 = call %clvalue_and_bool_struct* @run_create_equalable_list(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 3, i32 21332, i64* %constant)
  %7 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %6, i32 0, i32 0
  %8 = load i64, i64* %7, align 4
  %9 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %6, i32 0, i32 1
  %10 = load i32, i32* %9, align 4
  %ifcond = icmp eq i32 %10, 0
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %then_block241, %then_block140, %label_if_endzzzf, %entry_ifend289, %entry_ifend285, %label_if_endzzzg, %entry_ifend275, %entry_condend271, %entry_ifend242, %entry_ifend209, %entry_ifend203, %entry_condend200, %label_elsezzzd, %entry_ifend178, %entry_ifend174, %entry_ifend169, %entry_ifend165, %entry_ifend141, %entry_ifend108, %entry_ifend103, %entry_condend100, %entry_condend50, %entry_condnotend, %label_if_endzzz, %entry_condend31, %label_if_endzzy, %entry_condend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %11 = trunc i64 %8 to i32
  call void @push_jit_object(i32 %11)
  store i64 0, i64* %"lvar$3$"
  store i64 %8, i64* %"lvar$3$", align 8
  store i32 0, i32* @gSigInt
  %lvar11 = load i64, i64* %"lvar$1$"
  %12 = trunc i64 %lvar11 to i32
  %letmp = icmp slt i32 %12, 0
  br i1 %letmp, label %entry_condend, label %label_if_endzzx

entry_condend:                                    ; preds = %entry_ifend
  store i32 0, i32* @gSigInt
  %13 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %11, i32 2)
  %14 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %13, i32 0, i32 0
  %15 = load i64, i64* %14, align 4
  %16 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %13, i32 0, i32 1
  %17 = load i32, i32* %16, align 4
  %ifcond16 = icmp eq i32 %17, 0
  br i1 %ifcond16, label %then_block, label %entry_ifend15

label_if_endzzx:                                  ; preds = %entry_ifend, %entry_ifend15
  %lvar19 = phi i64 [ %20, %entry_ifend15 ], [ %lvar11, %entry_ifend ]
  store i32 0, i32* @gSigInt
  %18 = trunc i64 %lvar19 to i32
  %letmp20 = icmp slt i32 %18, 0
  br i1 %letmp20, label %entry_condend22, label %label_if_endzzy

entry_ifend15:                                    ; preds = %entry_condend
  %19 = trunc i64 %15 to i32
  %addtmp = add i32 %12, 1
  %addtmp17 = add i32 %addtmp, %19
  store i64 0, i64* %"lvar$1$"
  %20 = zext i32 %addtmp17 to i64
  store i64 %20, i64* %"lvar$1$", align 8
  br label %label_if_endzzx

entry_condend22:                                  ; preds = %label_if_endzzx
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  br label %label_if_endzzy

label_if_endzzy:                                  ; preds = %label_if_endzzx, %entry_condend22
  %lvar25 = phi i64 [ 0, %entry_condend22 ], [ %lvar19, %label_if_endzzx ]
  store i32 0, i32* @gSigInt
  %21 = trunc i64 %lvar25 to i32
  %lvar26 = load i64, i64* %"lvar$3$"
  %22 = trunc i64 %lvar26 to i32
  %23 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %22, i32 2)
  %24 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %23, i32 0, i32 0
  %25 = load i64, i64* %24, align 4
  %26 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %23, i32 0, i32 1
  %27 = load i32, i32* %26, align 4
  %ifcond29 = icmp eq i32 %27, 0
  br i1 %ifcond29, label %then_block, label %entry_ifend28

entry_ifend28:                                    ; preds = %label_if_endzzy
  %28 = trunc i64 %25 to i32
  %gttmp = icmp sgt i32 %21, %28
  br i1 %gttmp, label %entry_condend31, label %label_if_endzzz

entry_condend31:                                  ; preds = %entry_ifend28
  store i32 0, i32* @gSigInt
  %lvar33 = load i64, i64* %"lvar$3$"
  %29 = trunc i64 %lvar33 to i32
  %30 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %29, i32 2)
  %31 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %30, i32 0, i32 0
  %32 = load i64, i64* %31, align 4
  %33 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %30, i32 0, i32 1
  %34 = load i32, i32* %33, align 4
  %ifcond36 = icmp eq i32 %34, 0
  br i1 %ifcond36, label %then_block, label %entry_ifend35

label_if_endzzz:                                  ; preds = %entry_ifend28, %entry_ifend35
  store i32 0, i32* @gSigInt
  %lvar38 = load i64, i64* %"lvar$3$"
  %35 = trunc i64 %lvar38 to i32
  %36 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %35, i32 2)
  %37 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %36, i32 0, i32 0
  %38 = load i64, i64* %37, align 4
  %39 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %36, i32 0, i32 1
  %40 = load i32, i32* %39, align 4
  %ifcond41 = icmp eq i32 %40, 0
  br i1 %ifcond41, label %then_block, label %entry_ifend40

entry_ifend35:                                    ; preds = %entry_condend31
  %41 = trunc i64 %32 to i32
  store i64 0, i64* %"lvar$1$"
  %42 = zext i32 %41 to i64
  store i64 %42, i64* %"lvar$1$", align 8
  br label %label_if_endzzz

entry_ifend40:                                    ; preds = %label_if_endzzz
  %43 = trunc i64 %38 to i32
  %eqtmpx = icmp eq i32 %43, 0
  store i64 0, i64* %VALUE_FOR_ANDAND_OROR, align 8
  %44 = zext i1 %eqtmpx to i64
  store i64 %44, i64* %VALUE_FOR_ANDAND_OROR, align 8
  br i1 %eqtmpx, label %label_or_endpointzzzc, label %entry_condnotend

entry_condnotend:                                 ; preds = %entry_ifend40
  %lvar43 = load i64, i64* %"lvar$1$"
  %45 = trunc i64 %lvar43 to i32
  %lvar44 = load i64, i64* %"lvar$3$"
  %46 = trunc i64 %lvar44 to i32
  %47 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %46, i32 2)
  %48 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %47, i32 0, i32 0
  %49 = load i64, i64* %48, align 4
  %50 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %47, i32 0, i32 1
  %51 = load i32, i32* %50, align 4
  %ifcond47 = icmp eq i32 %51, 0
  br i1 %ifcond47, label %then_block, label %entry_ifend46

label_or_endpointzzzc:                            ; preds = %entry_ifend40, %entry_ifend46
  %value_for_andand_oror = phi i64 [ %54, %entry_ifend46 ], [ %44, %entry_ifend40 ]
  %52 = trunc i64 %value_for_andand_oror to i1
  store i32 0, i32* @gSigInt
  br i1 %52, label %entry_condend50, label %label_if_endzzzb

entry_ifend46:                                    ; preds = %entry_condnotend
  %53 = trunc i64 %49 to i32
  %eqtmpx48 = icmp eq i32 %45, %53
  %54 = zext i1 %eqtmpx48 to i64
  store i64 %54, i64* %VALUE_FOR_ANDAND_OROR, align 8
  br label %label_or_endpointzzzc

entry_condend50:                                  ; preds = %label_or_endpointzzzc
  %lvar52 = load i64, i64* %"lvar$3$"
  %55 = trunc i64 %lvar52 to i32
  %56 = trunc i64 %stack_offset_value3 to i32
  %57 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52665792 to i8*))
  %ifcond56 = icmp eq i64* %57, null
  br i1 %ifcond56, label %then_block, label %entry_ifend55

label_if_endzzzb:                                 ; preds = %label_or_endpointzzzc
  %lvar97 = load i64, i64* %"lvar$1$"
  %58 = trunc i64 %lvar97 to i32
  %eqtmpx98 = icmp eq i32 %58, 0
  store i32 0, i32* @gSigInt
  br i1 %eqtmpx98, label %entry_condend100, label %label_elsezzzd

entry_ifend55:                                    ; preds = %entry_condend50
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar58 = load i64, i64* %"lvar$1$"
  %lvar_offset_value59 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value59, align 8
  store i64 %lvar58, i64* %lvar_offset_value59, align 8
  %lvar_offset_value61 = getelementptr i64, i64* %lvar, i64 2
  store i64 0, i64* %lvar_offset_value61, align 8
  store i64 %stack_offset_value3, i64* %lvar_offset_value61, align 8
  %lvar62 = load i64, i64* %"lvar$3$"
  %lvar_offset_value63 = getelementptr i64, i64* %lvar, i64 3
  store i64 0, i64* %lvar_offset_value63, align 8
  store i64 %lvar62, i64* %lvar_offset_value63, align 8
  %lvar64 = load i64, i64* %"lvar$4$"
  %lvar_offset_value65 = getelementptr i64, i64* %lvar, i64 4
  store i64 0, i64* %lvar_offset_value65, align 8
  store i64 %lvar64, i64* %lvar_offset_value65, align 8
  %lvar_offset_value67 = getelementptr i64, i64* %lvar, i64 5
  store i64 0, i64* %lvar_offset_value67, align 8
  store i64 0, i64* %lvar_offset_value67, align 8
  %lvar_offset_value69 = getelementptr i64, i64* %lvar, i64 6
  store i64 0, i64* %lvar_offset_value69, align 8
  store i64 0, i64* %lvar_offset_value69, align 8
  %loaded_stack_ptr_address_value70 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value70, align 8
  %59 = zext i32 %55 to i64
  store i64 %59, i64* %loaded_stack_ptr_address_value70, align 8
  %loaded_stack_ptr_address_value71 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value72 = getelementptr i64, i64* %loaded_stack_ptr_address_value71, i64 1
  store i64* %inc_ptr_value72, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value72, align 8
  %60 = zext i32 %56 to i64
  store i64 %60, i64* %inc_ptr_value72, align 8
  %loaded_stack_ptr_address_value74 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value75 = getelementptr i64, i64* %loaded_stack_ptr_address_value74, i64 1
  store i64* %inc_ptr_value75, i64** %stack_ptr_address
  %61 = call i32 @call_invoke_method(i64* %57, i32 7, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond76 = icmp ne i32 %61, 1
  br i1 %ifcond76, label %then_block77, label %entry_ifend78

then_block77:                                     ; preds = %entry_ifend55
  %62 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend78:                                    ; preds = %entry_ifend55
  %stack_offset_value79 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value79, i64* %"lvar$0$", align 8
  %stack_offset_value81 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value81, i64* %"lvar$1$", align 8
  %stack_offset_value83 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value83, i64* %"lvar$2$", align 8
  %stack_offset_address_value84 = getelementptr i64, i64* %stack, i64 3
  %stack_offset_value85 = load i64, i64* %stack_offset_address_value84, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value85, i64* %"lvar$3$", align 8
  %stack_offset_address_value86 = getelementptr i64, i64* %stack, i64 4
  %stack_offset_value87 = load i64, i64* %stack_offset_address_value86, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value87, i64* %"lvar$4$", align 8
  %stack_offset_address_value88 = getelementptr i64, i64* %stack, i64 5
  %stack_offset_value89 = load i64, i64* %stack_offset_address_value88, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value89, i64* %"lvar$5$", align 8
  %stack_offset_address_value90 = getelementptr i64, i64* %stack, i64 6
  %stack_offset_value91 = load i64, i64* %stack_offset_address_value90, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value91, i64* %"lvar$6$", align 8
  %loaded_stack_ptr_address_value92 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value92, i64 -1
  %stack_pointer_offset_value93 = load i64, i64* %stack_pointer_offset_value, align 8
  %63 = trunc i64 %stack_pointer_offset_value93 to i32
  call void @push_jit_object(i32 %63)
  %loaded_stack_ptr_address_value94 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value94, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i32 0, i32* @gSigInt
  %lvar95 = load i64, i64* %"lvar$3$"
  %64 = trunc i64 %lvar95 to i32
  %65 = zext i32 %64 to i64
  store i64 %65, i64* %stack, align 8
  ret i32 1

entry_condend100:                                 ; preds = %label_if_endzzzb
  %66 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52665864 to i8*))
  %ifcond104 = icmp eq i64* %66, null
  br i1 %ifcond104, label %then_block, label %entry_ifend103

label_elsezzzd:                                   ; preds = %label_if_endzzzb
  %lvar186 = load i64, i64* %"lvar$3$"
  %67 = trunc i64 %lvar186 to i32
  %68 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %67, i32 0)
  %69 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %68, i32 0, i32 0
  %70 = load i64, i64* %69, align 4
  %71 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %68, i32 0, i32 1
  %72 = load i32, i32* %71, align 4
  %ifcond189 = icmp eq i32 %72, 0
  br i1 %ifcond189, label %then_block, label %entry_ifend188

entry_ifend103:                                   ; preds = %entry_condend100
  %73 = call i32 @create_object(i64* %66)
  call void @push_jit_object(i32 %73)
  %74 = trunc i64 %stack_offset_value3 to i32
  %lvar106 = load i64, i64* %"lvar$3$"
  %75 = trunc i64 %lvar106 to i32
  %76 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %75, i32 0)
  %77 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %76, i32 0, i32 0
  %78 = load i64, i64* %77, align 4
  %79 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %76, i32 0, i32 1
  %80 = load i32, i32* %79, align 4
  %ifcond109 = icmp eq i32 %80, 0
  br i1 %ifcond109, label %then_block, label %entry_ifend108

entry_ifend108:                                   ; preds = %entry_ifend103
  %81 = trunc i64 %78 to i32
  %82 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52665876 to i8*))
  %ifcond112 = icmp eq i64* %82, null
  br i1 %ifcond112, label %then_block, label %entry_ifend111

entry_ifend111:                                   ; preds = %entry_ifend108
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar115 = load i64, i64* %"lvar$1$"
  %lvar_offset_value116 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value116, align 8
  store i64 %lvar115, i64* %lvar_offset_value116, align 8
  %lvar_offset_value118 = getelementptr i64, i64* %lvar, i64 2
  store i64 0, i64* %lvar_offset_value118, align 8
  store i64 %stack_offset_value3, i64* %lvar_offset_value118, align 8
  %lvar119 = load i64, i64* %"lvar$3$"
  %lvar_offset_value120 = getelementptr i64, i64* %lvar, i64 3
  store i64 0, i64* %lvar_offset_value120, align 8
  store i64 %lvar119, i64* %lvar_offset_value120, align 8
  %lvar121 = load i64, i64* %"lvar$4$"
  %lvar_offset_value122 = getelementptr i64, i64* %lvar, i64 4
  store i64 0, i64* %lvar_offset_value122, align 8
  store i64 %lvar121, i64* %lvar_offset_value122, align 8
  %lvar_offset_value124 = getelementptr i64, i64* %lvar, i64 5
  store i64 0, i64* %lvar_offset_value124, align 8
  store i64 0, i64* %lvar_offset_value124, align 8
  %lvar_offset_value126 = getelementptr i64, i64* %lvar, i64 6
  store i64 0, i64* %lvar_offset_value126, align 8
  store i64 0, i64* %lvar_offset_value126, align 8
  %loaded_stack_ptr_address_value127 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value127, align 8
  %83 = zext i32 %73 to i64
  store i64 %83, i64* %loaded_stack_ptr_address_value127, align 8
  %loaded_stack_ptr_address_value128 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value129 = getelementptr i64, i64* %loaded_stack_ptr_address_value128, i64 1
  store i64* %inc_ptr_value129, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value129, align 8
  %84 = zext i32 %74 to i64
  store i64 %84, i64* %inc_ptr_value129, align 8
  %loaded_stack_ptr_address_value131 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value132 = getelementptr i64, i64* %loaded_stack_ptr_address_value131, i64 1
  store i64* %inc_ptr_value132, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value132, align 8
  store i64 0, i64* %inc_ptr_value132, align 8
  %loaded_stack_ptr_address_value134 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value135 = getelementptr i64, i64* %loaded_stack_ptr_address_value134, i64 1
  store i64* %inc_ptr_value135, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value135, align 8
  %85 = zext i32 %81 to i64
  store i64 %85, i64* %inc_ptr_value135, align 8
  %loaded_stack_ptr_address_value137 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value138 = getelementptr i64, i64* %loaded_stack_ptr_address_value137, i64 1
  store i64* %inc_ptr_value138, i64** %stack_ptr_address
  %86 = call i32 @call_invoke_method(i64* %82, i32 1, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond139 = icmp ne i32 %86, 1
  br i1 %ifcond139, label %then_block140, label %entry_ifend141

then_block140:                                    ; preds = %entry_ifend111
  %87 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend141:                                   ; preds = %entry_ifend111
  %stack_offset_value145 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value145, i64* %"lvar$0$", align 8
  %stack_offset_value147 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value147, i64* %"lvar$1$", align 8
  %stack_offset_value149 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value149, i64* %"lvar$2$", align 8
  %stack_offset_address_value150 = getelementptr i64, i64* %stack, i64 3
  %stack_offset_value151 = load i64, i64* %stack_offset_address_value150, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value151, i64* %"lvar$3$", align 8
  %stack_offset_address_value152 = getelementptr i64, i64* %stack, i64 4
  %stack_offset_value153 = load i64, i64* %stack_offset_address_value152, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value153, i64* %"lvar$4$", align 8
  %stack_offset_address_value154 = getelementptr i64, i64* %stack, i64 5
  %stack_offset_value155 = load i64, i64* %stack_offset_address_value154, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value155, i64* %"lvar$5$", align 8
  %stack_offset_address_value156 = getelementptr i64, i64* %stack, i64 6
  %stack_offset_value157 = load i64, i64* %stack_offset_address_value156, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value157, i64* %"lvar$6$", align 8
  %loaded_stack_ptr_address_value158 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value159 = getelementptr i64, i64* %loaded_stack_ptr_address_value158, i64 -1
  %stack_pointer_offset_value160 = load i64, i64* %stack_pointer_offset_value159, align 8
  %88 = trunc i64 %stack_pointer_offset_value160 to i32
  call void @push_jit_object(i32 %88)
  %loaded_stack_ptr_address_value161 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value162 = getelementptr i64, i64* %loaded_stack_ptr_address_value161, i64 1
  store i64* %dec_ptr_value162, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_pointer_offset_value160, i64* %"lvar$4$", align 8
  store i32 0, i32* @gSigInt
  %lvar163 = load i64, i64* %"lvar$3$"
  %89 = trunc i64 %lvar163 to i32
  %90 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %89, i32 0)
  %91 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %90, i32 0, i32 0
  %92 = load i64, i64* %91, align 4
  %93 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %90, i32 0, i32 1
  %94 = load i32, i32* %93, align 4
  %ifcond166 = icmp eq i32 %94, 0
  br i1 %ifcond166, label %then_block, label %entry_ifend165

entry_ifend165:                                   ; preds = %entry_ifend141
  %95 = trunc i64 %92 to i32
  %lvar167 = load i64, i64* %"lvar$4$"
  %96 = trunc i64 %lvar167 to i32
  %97 = zext i32 %96 to i64
  %98 = call i32 @store_field(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %95, i64 %97, i32 2)
  %ifcond170 = icmp eq i32 %98, 0
  br i1 %ifcond170, label %then_block, label %entry_ifend169

entry_ifend169:                                   ; preds = %entry_ifend165
  store i32 0, i32* @gSigInt
  %lvar171 = load i64, i64* %"lvar$3$"
  %99 = trunc i64 %lvar171 to i32
  %lvar172 = load i64, i64* %"lvar$4$"
  %100 = trunc i64 %lvar172 to i32
  %101 = zext i32 %100 to i64
  %102 = call i32 @store_field(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %99, i64 %101, i32 0)
  %ifcond175 = icmp eq i32 %102, 0
  br i1 %ifcond175, label %then_block, label %entry_ifend174

entry_ifend174:                                   ; preds = %entry_ifend169
  store i32 0, i32* @gSigInt
  %lvar176 = load i64, i64* %"lvar$3$"
  %103 = trunc i64 %lvar176 to i32
  %104 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %103, i32 2)
  %105 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %104, i32 0, i32 0
  %106 = load i64, i64* %105, align 4
  %107 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %104, i32 0, i32 1
  %108 = load i32, i32* %107, align 4
  %ifcond179 = icmp eq i32 %108, 0
  br i1 %ifcond179, label %then_block, label %entry_ifend178

entry_ifend178:                                   ; preds = %entry_ifend174
  %109 = trunc i64 %106 to i32
  %addtmp180 = add nuw i32 %109, 1
  %lvar181 = load i64, i64* %"lvar$3$"
  %110 = trunc i64 %lvar181 to i32
  %111 = zext i32 %addtmp180 to i64
  %112 = call i32 @store_field(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %110, i64 %111, i32 2)
  %ifcond184 = icmp eq i32 %112, 0
  br i1 %ifcond184, label %then_block, label %label_if_endzzzd

label_if_endzzzd:                                 ; preds = %entry_ifend294, %while_start_pointzzze, %entry_ifend178
  store i32 0, i32* @gSigInt
  %lvar308 = load i64, i64* %"lvar$3$"
  %113 = trunc i64 %lvar308 to i32
  %114 = zext i32 %113 to i64
  store i64 %114, i64* %stack, align 8
  ret i32 1

entry_ifend188:                                   ; preds = %label_elsezzzd
  %115 = trunc i64 %70 to i32
  store i64 0, i64* %"lvar$4$"
  %116 = zext i32 %115 to i64
  store i64 %116, i64* %"lvar$4$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$5$"
  store i64 0, i64* %"lvar$5$", align 8
  store i32 0, i32* @gSigInt
  br label %while_start_pointzzze

while_start_pointzzze:                            ; preds = %entry_ifend301, %entry_ifend188
  %lvar224 = phi i64 [ %176, %entry_ifend301 ], [ 0, %entry_ifend188 ]
  %lvar190 = phi i64 [ %175, %entry_ifend301 ], [ %116, %entry_ifend188 ]
  %117 = trunc i64 %lvar190 to i32
  %eqtmpx191 = icmp eq i32 %117, 0
  %118 = zext i1 %eqtmpx191 to i32
  %LOGICAL_DIANEAL = icmp eq i32 %118, 0
  br i1 %LOGICAL_DIANEAL, label %entry_condend193, label %label_if_endzzzd

entry_condend193:                                 ; preds = %while_start_pointzzze
  store i32 0, i32* @gSigInt
  %119 = trunc i64 %lvar224 to i32
  %lvar196 = load i64, i64* %"lvar$1$"
  %120 = trunc i64 %lvar196 to i32
  %subtmp197 = sub nuw i32 %120, 1
  %eqtmpx198 = icmp eq i32 %119, %subtmp197
  store i32 0, i32* @gSigInt
  br i1 %eqtmpx198, label %entry_condend200, label %label_if_endzzzf

entry_condend200:                                 ; preds = %entry_condend193
  %121 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52665984 to i8*))
  %ifcond204 = icmp eq i64* %121, null
  br i1 %ifcond204, label %then_block, label %entry_ifend203

label_if_endzzzf:                                 ; preds = %entry_condend193
  %122 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %117, i32 1)
  %123 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %122, i32 0, i32 0
  %124 = load i64, i64* %123, align 4
  %125 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %122, i32 0, i32 1
  %126 = load i32, i32* %125, align 4
  %ifcond302 = icmp eq i32 %126, 0
  br i1 %ifcond302, label %then_block, label %entry_ifend301

entry_ifend203:                                   ; preds = %entry_condend200
  %127 = call i32 @create_object(i64* %121)
  call void @push_jit_object(i32 %127)
  %128 = trunc i64 %stack_offset_value3 to i32
  %lvar206 = load i64, i64* %"lvar$4$"
  %129 = trunc i64 %lvar206 to i32
  %130 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %129, i32 1)
  %131 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %130, i32 0, i32 0
  %132 = load i64, i64* %131, align 4
  %133 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %130, i32 0, i32 1
  %134 = load i32, i32* %133, align 4
  %ifcond210 = icmp eq i32 %134, 0
  br i1 %ifcond210, label %then_block, label %entry_ifend209

entry_ifend209:                                   ; preds = %entry_ifend203
  %135 = trunc i64 %132 to i32
  %136 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52665996 to i8*))
  %ifcond213 = icmp eq i64* %136, null
  br i1 %ifcond213, label %then_block, label %entry_ifend212

entry_ifend212:                                   ; preds = %entry_ifend209
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar216 = load i64, i64* %"lvar$1$"
  %lvar_offset_value217 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value217, align 8
  store i64 %lvar216, i64* %lvar_offset_value217, align 8
  %lvar_offset_value219 = getelementptr i64, i64* %lvar, i64 2
  store i64 0, i64* %lvar_offset_value219, align 8
  store i64 %stack_offset_value3, i64* %lvar_offset_value219, align 8
  %lvar220 = load i64, i64* %"lvar$3$"
  %lvar_offset_value221 = getelementptr i64, i64* %lvar, i64 3
  store i64 0, i64* %lvar_offset_value221, align 8
  store i64 %lvar220, i64* %lvar_offset_value221, align 8
  %lvar222 = load i64, i64* %"lvar$4$"
  %lvar_offset_value223 = getelementptr i64, i64* %lvar, i64 4
  store i64 0, i64* %lvar_offset_value223, align 8
  store i64 %lvar222, i64* %lvar_offset_value223, align 8
  %lvar_offset_value225 = getelementptr i64, i64* %lvar, i64 5
  store i64 0, i64* %lvar_offset_value225, align 8
  store i64 %lvar224, i64* %lvar_offset_value225, align 8
  %lvar_offset_value227 = getelementptr i64, i64* %lvar, i64 6
  store i64 0, i64* %lvar_offset_value227, align 8
  store i64 0, i64* %lvar_offset_value227, align 8
  %loaded_stack_ptr_address_value228 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value228, align 8
  %137 = zext i32 %127 to i64
  store i64 %137, i64* %loaded_stack_ptr_address_value228, align 8
  %loaded_stack_ptr_address_value229 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value230 = getelementptr i64, i64* %loaded_stack_ptr_address_value229, i64 1
  store i64* %inc_ptr_value230, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value230, align 8
  %138 = zext i32 %128 to i64
  store i64 %138, i64* %inc_ptr_value230, align 8
  %loaded_stack_ptr_address_value232 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value233 = getelementptr i64, i64* %loaded_stack_ptr_address_value232, i64 1
  store i64* %inc_ptr_value233, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value233, align 8
  %139 = zext i32 %129 to i64
  store i64 %139, i64* %inc_ptr_value233, align 8
  %loaded_stack_ptr_address_value235 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value236 = getelementptr i64, i64* %loaded_stack_ptr_address_value235, i64 1
  store i64* %inc_ptr_value236, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value236, align 8
  %140 = zext i32 %135 to i64
  store i64 %140, i64* %inc_ptr_value236, align 8
  %loaded_stack_ptr_address_value238 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value239 = getelementptr i64, i64* %loaded_stack_ptr_address_value238, i64 1
  store i64* %inc_ptr_value239, i64** %stack_ptr_address
  %141 = call i32 @call_invoke_method(i64* %136, i32 1, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond240 = icmp ne i32 %141, 1
  br i1 %ifcond240, label %then_block241, label %entry_ifend242

then_block241:                                    ; preds = %entry_ifend212
  %142 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend242:                                   ; preds = %entry_ifend212
  %stack_offset_value246 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value246, i64* %"lvar$0$", align 8
  %stack_offset_value248 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value248, i64* %"lvar$1$", align 8
  %stack_offset_value250 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value250, i64* %"lvar$2$", align 8
  %stack_offset_address_value251 = getelementptr i64, i64* %stack, i64 3
  %stack_offset_value252 = load i64, i64* %stack_offset_address_value251, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value252, i64* %"lvar$3$", align 8
  %stack_offset_address_value253 = getelementptr i64, i64* %stack, i64 4
  %stack_offset_value254 = load i64, i64* %stack_offset_address_value253, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value254, i64* %"lvar$4$", align 8
  %stack_offset_address_value255 = getelementptr i64, i64* %stack, i64 5
  %stack_offset_value256 = load i64, i64* %stack_offset_address_value255, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value256, i64* %"lvar$5$", align 8
  %stack_offset_address_value257 = getelementptr i64, i64* %stack, i64 6
  %stack_offset_value258 = load i64, i64* %stack_offset_address_value257, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value258, i64* %"lvar$6$", align 8
  %loaded_stack_ptr_address_value259 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value260 = getelementptr i64, i64* %loaded_stack_ptr_address_value259, i64 -1
  %stack_pointer_offset_value261 = load i64, i64* %stack_pointer_offset_value260, align 8
  %143 = trunc i64 %stack_pointer_offset_value261 to i32
  call void @push_jit_object(i32 %143)
  %loaded_stack_ptr_address_value262 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value263 = getelementptr i64, i64* %loaded_stack_ptr_address_value262, i64 1
  store i64* %dec_ptr_value263, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_pointer_offset_value261, i64* %"lvar$6$", align 8
  store i32 0, i32* @gSigInt
  %lvar264 = load i64, i64* %"lvar$4$"
  %144 = trunc i64 %lvar264 to i32
  %145 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %144, i32 1)
  %146 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %145, i32 0, i32 0
  %147 = load i64, i64* %146, align 4
  %148 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %145, i32 0, i32 1
  %149 = load i32, i32* %148, align 4
  %ifcond267 = icmp eq i32 %149, 0
  br i1 %ifcond267, label %then_block, label %entry_ifend266

entry_ifend266:                                   ; preds = %entry_ifend242
  %150 = trunc i64 %147 to i32
  %eqtmpx268 = icmp eq i32 %150, 0
  %151 = zext i1 %eqtmpx268 to i32
  %LOGICAL_DIANEAL269 = icmp eq i32 %151, 0
  br i1 %LOGICAL_DIANEAL269, label %entry_condend271, label %label_if_endzzzg

entry_condend271:                                 ; preds = %entry_ifend266
  store i32 0, i32* @gSigInt
  %lvar273 = load i64, i64* %"lvar$4$"
  %152 = trunc i64 %lvar273 to i32
  %153 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %152, i32 1)
  %154 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %153, i32 0, i32 0
  %155 = load i64, i64* %154, align 4
  %156 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %153, i32 0, i32 1
  %157 = load i32, i32* %156, align 4
  %ifcond276 = icmp eq i32 %157, 0
  br i1 %ifcond276, label %then_block, label %entry_ifend275

label_if_endzzzg:                                 ; preds = %entry_ifend275, %entry_ifend266
  store i32 0, i32* @gSigInt
  %lvar282 = load i64, i64* %"lvar$4$"
  %158 = trunc i64 %lvar282 to i32
  %159 = zext i32 %143 to i64
  %160 = call i32 @store_field(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %158, i64 %159, i32 1)
  %ifcond286 = icmp eq i32 %160, 0
  br i1 %ifcond286, label %then_block, label %entry_ifend285

entry_ifend275:                                   ; preds = %entry_condend271
  %161 = trunc i64 %155 to i32
  %162 = zext i32 %143 to i64
  %163 = call i32 @store_field(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %161, i64 %162, i32 2)
  %ifcond280 = icmp eq i32 %163, 0
  br i1 %ifcond280, label %then_block, label %label_if_endzzzg

entry_ifend285:                                   ; preds = %label_if_endzzzg
  store i32 0, i32* @gSigInt
  %lvar287 = load i64, i64* %"lvar$3$"
  %164 = trunc i64 %lvar287 to i32
  %165 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %164, i32 2)
  %166 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %165, i32 0, i32 0
  %167 = load i64, i64* %166, align 4
  %168 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %165, i32 0, i32 1
  %169 = load i32, i32* %168, align 4
  %ifcond290 = icmp eq i32 %169, 0
  br i1 %ifcond290, label %then_block, label %entry_ifend289

entry_ifend289:                                   ; preds = %entry_ifend285
  %170 = trunc i64 %167 to i32
  %addtmp291 = add nuw i32 %170, 1
  %lvar292 = load i64, i64* %"lvar$3$"
  %171 = trunc i64 %lvar292 to i32
  %172 = zext i32 %addtmp291 to i64
  %173 = call i32 @store_field(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %171, i64 %172, i32 2)
  %ifcond295 = icmp eq i32 %173, 0
  br i1 %ifcond295, label %then_block, label %entry_ifend294

entry_ifend294:                                   ; preds = %entry_ifend289
  store i32 0, i32* @gSigInt
  br label %label_if_endzzzd

entry_ifend301:                                   ; preds = %label_if_endzzzf
  %174 = trunc i64 %124 to i32
  store i64 0, i64* %"lvar$4$"
  %175 = zext i32 %174 to i64
  store i64 %175, i64* %"lvar$4$", align 8
  store i32 0, i32* @gSigInt
  %addtmp304 = add nuw i32 %119, 1
  store i64 0, i64* %"lvar$5$"
  %176 = zext i32 %addtmp304 to i64
  store i64 %176, i64* %"lvar$5$", align 8
  br label %while_start_pointzzze
}

define i32 @"JITTest.add(Integer)$$221"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$3$" = alloca i64
  %"lvar$2$" = alloca i64
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value1 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value1, i64* %"lvar$1$", align 8
  store i64 0, i64* %"lvar$2$"
  store i64 0, i64* %"lvar$2$", align 8
  store i64 0, i64* %"lvar$3$"
  store i64 0, i64* %"lvar$3$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_integer(i32 1)
  call void @push_jit_object(i32 %0)
  %1 = call i32 @create_integer(i32 2)
  call void @push_jit_object(i32 %1)
  %2 = call i32 @create_integer(i32 3)
  call void @push_jit_object(i32 %2)
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %3 = zext i32 %0 to i64
  store i64 %3, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value2 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value2, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  %4 = zext i32 %1 to i64
  store i64 %4, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value4 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value5 = getelementptr i64, i64* %loaded_stack_ptr_address_value4, i64 1
  store i64* %inc_ptr_value5, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value5, align 8
  %5 = zext i32 %2 to i64
  store i64 %5, i64* %inc_ptr_value5, align 8
  %loaded_stack_ptr_address_value7 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value8 = getelementptr i64, i64* %loaded_stack_ptr_address_value7, i64 1
  store i64* %inc_ptr_value8, i64** %stack_ptr_address
  %6 = call %clvalue_and_bool_struct* @run_create_equalable_list(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 3, i32 21964, i64* %constant)
  %7 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %6, i32 0, i32 0
  %8 = load i64, i64* %7, align 4
  %9 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %6, i32 0, i32 1
  %10 = load i32, i32* %9, align 4
  %ifcond = icmp eq i32 %10, 0
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %then_block97, %entry_ifend130, %label_if_endzzzh, %entry_ifend120, %entry_ifend116, %entry_ifend98, %entry_ifend71, %entry_ifend66, %label_elsezzzh, %entry_ifend59, %entry_ifend54, %entry_ifend42, %entry_ifend15, %entry_condend, %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %11 = trunc i64 %8 to i32
  call void @push_jit_object(i32 %11)
  store i64 0, i64* %"lvar$2$"
  store i64 %8, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  %12 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %11, i32 0)
  %13 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %12, i32 0, i32 0
  %14 = load i64, i64* %13, align 4
  %15 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %12, i32 0, i32 1
  %16 = load i32, i32* %15, align 4
  %ifcond12 = icmp eq i32 %16, 0
  br i1 %ifcond12, label %then_block, label %entry_ifend11

entry_ifend11:                                    ; preds = %entry_ifend
  %17 = trunc i64 %14 to i32
  %eqtmpx = icmp eq i32 %17, 0
  store i32 0, i32* @gSigInt
  br i1 %eqtmpx, label %entry_condend, label %label_elsezzzh

entry_condend:                                    ; preds = %entry_ifend11
  %18 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52666228 to i8*))
  %ifcond16 = icmp eq i64* %18, null
  br i1 %ifcond16, label %then_block, label %entry_ifend15

label_elsezzzh:                                   ; preds = %entry_ifend11
  %19 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52666288 to i8*))
  %ifcond67 = icmp eq i64* %19, null
  br i1 %ifcond67, label %then_block, label %entry_ifend66

entry_ifend15:                                    ; preds = %entry_condend
  %20 = call i32 @create_object(i64* %18)
  call void @push_jit_object(i32 %20)
  %21 = trunc i64 %stack_offset_value1 to i32
  %22 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52666240 to i8*))
  %ifcond20 = icmp eq i64* %22, null
  br i1 %ifcond20, label %then_block, label %entry_ifend19

entry_ifend19:                                    ; preds = %entry_ifend15
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value23 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %stack_offset_value1, i64* %lvar_offset_value23, align 8
  %lvar_offset_value25 = getelementptr i64, i64* %lvar, i64 2
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %8, i64* %lvar_offset_value25, align 8
  %lvar_offset_value27 = getelementptr i64, i64* %lvar, i64 3
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 0, i64* %lvar_offset_value27, align 8
  %loaded_stack_ptr_address_value28 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value28, align 8
  %23 = zext i32 %20 to i64
  store i64 %23, i64* %loaded_stack_ptr_address_value28, align 8
  %loaded_stack_ptr_address_value29 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value30 = getelementptr i64, i64* %loaded_stack_ptr_address_value29, i64 1
  store i64* %inc_ptr_value30, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value30, align 8
  %24 = zext i32 %21 to i64
  store i64 %24, i64* %inc_ptr_value30, align 8
  %loaded_stack_ptr_address_value32 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value33 = getelementptr i64, i64* %loaded_stack_ptr_address_value32, i64 1
  store i64* %inc_ptr_value33, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value33, align 8
  store i64 0, i64* %inc_ptr_value33, align 8
  %loaded_stack_ptr_address_value35 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value36 = getelementptr i64, i64* %loaded_stack_ptr_address_value35, i64 1
  store i64* %inc_ptr_value36, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value36, align 8
  store i64 0, i64* %inc_ptr_value36, align 8
  %loaded_stack_ptr_address_value38 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value39 = getelementptr i64, i64* %loaded_stack_ptr_address_value38, i64 1
  store i64* %inc_ptr_value39, i64** %stack_ptr_address
  %25 = call i32 @call_invoke_method(i64* %22, i32 1, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond40 = icmp ne i32 %25, 1
  br i1 %ifcond40, label %then_block41, label %entry_ifend42

then_block41:                                     ; preds = %entry_ifend19
  %26 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend42:                                    ; preds = %entry_ifend19
  %stack_offset_value43 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value43, i64* %"lvar$0$", align 8
  %stack_offset_value45 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value45, i64* %"lvar$1$", align 8
  %stack_offset_address_value46 = getelementptr i64, i64* %stack, i64 2
  %stack_offset_value47 = load i64, i64* %stack_offset_address_value46, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value47, i64* %"lvar$2$", align 8
  %stack_offset_address_value48 = getelementptr i64, i64* %stack, i64 3
  %stack_offset_value49 = load i64, i64* %stack_offset_address_value48, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value49, i64* %"lvar$3$", align 8
  %loaded_stack_ptr_address_value50 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value50, i64 -1
  %stack_pointer_offset_value51 = load i64, i64* %stack_pointer_offset_value, align 8
  %27 = trunc i64 %stack_pointer_offset_value51 to i32
  call void @push_jit_object(i32 %27)
  %loaded_stack_ptr_address_value52 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value52, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  %28 = call i32 @store_field(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %11, i64 %stack_pointer_offset_value51, i32 0)
  %ifcond55 = icmp eq i32 %28, 0
  br i1 %ifcond55, label %then_block, label %entry_ifend54

entry_ifend54:                                    ; preds = %entry_ifend42
  store i32 0, i32* @gSigInt
  %29 = trunc i64 %stack_offset_value47 to i32
  %30 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %29, i32 0)
  %31 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %30, i32 0, i32 0
  %32 = load i64, i64* %31, align 4
  %33 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %30, i32 0, i32 1
  %34 = load i32, i32* %33, align 4
  %ifcond60 = icmp eq i32 %34, 0
  br i1 %ifcond60, label %then_block, label %entry_ifend59

entry_ifend59:                                    ; preds = %entry_ifend54
  %35 = trunc i64 %32 to i32
  %36 = zext i32 %35 to i64
  %37 = call i32 @store_field(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %29, i64 %36, i32 1)
  %ifcond63 = icmp eq i32 %37, 0
  br i1 %ifcond63, label %then_block, label %label_if_endzzzh

label_if_endzzzh:                                 ; preds = %entry_ifend120, %entry_ifend59
  %lvar136 = phi i64 [ %stack_offset_value47, %entry_ifend59 ], [ %stack_offset_value106, %entry_ifend120 ]
  store i32 0, i32* @gSigInt
  %38 = trunc i64 %lvar136 to i32
  %39 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %38, i32 2)
  %40 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %39, i32 0, i32 0
  %41 = load i64, i64* %40, align 4
  %42 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %39, i32 0, i32 1
  %43 = load i32, i32* %42, align 4
  %ifcond131 = icmp eq i32 %43, 0
  br i1 %ifcond131, label %then_block, label %entry_ifend130

entry_ifend66:                                    ; preds = %label_elsezzzh
  %44 = call i32 @create_object(i64* %19)
  call void @push_jit_object(i32 %44)
  %45 = trunc i64 %stack_offset_value1 to i32
  %46 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %11, i32 1)
  %47 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %46, i32 0, i32 0
  %48 = load i64, i64* %47, align 4
  %49 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %46, i32 0, i32 1
  %50 = load i32, i32* %49, align 4
  %ifcond72 = icmp eq i32 %50, 0
  br i1 %ifcond72, label %then_block, label %entry_ifend71

entry_ifend71:                                    ; preds = %entry_ifend66
  %51 = trunc i64 %48 to i32
  %52 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52666300 to i8*))
  %ifcond75 = icmp eq i64* %52, null
  br i1 %ifcond75, label %then_block, label %entry_ifend74

entry_ifend74:                                    ; preds = %entry_ifend71
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value79 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value79, align 8
  store i64 %stack_offset_value1, i64* %lvar_offset_value79, align 8
  %lvar_offset_value81 = getelementptr i64, i64* %lvar, i64 2
  store i64 0, i64* %lvar_offset_value81, align 8
  store i64 %8, i64* %lvar_offset_value81, align 8
  %lvar_offset_value83 = getelementptr i64, i64* %lvar, i64 3
  store i64 0, i64* %lvar_offset_value83, align 8
  store i64 0, i64* %lvar_offset_value83, align 8
  %loaded_stack_ptr_address_value84 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value84, align 8
  %53 = zext i32 %44 to i64
  store i64 %53, i64* %loaded_stack_ptr_address_value84, align 8
  %loaded_stack_ptr_address_value85 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value86 = getelementptr i64, i64* %loaded_stack_ptr_address_value85, i64 1
  store i64* %inc_ptr_value86, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value86, align 8
  %54 = zext i32 %45 to i64
  store i64 %54, i64* %inc_ptr_value86, align 8
  %loaded_stack_ptr_address_value88 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value89 = getelementptr i64, i64* %loaded_stack_ptr_address_value88, i64 1
  store i64* %inc_ptr_value89, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value89, align 8
  %55 = zext i32 %51 to i64
  store i64 %55, i64* %inc_ptr_value89, align 8
  %loaded_stack_ptr_address_value91 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value92 = getelementptr i64, i64* %loaded_stack_ptr_address_value91, i64 1
  store i64* %inc_ptr_value92, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value92, align 8
  store i64 0, i64* %inc_ptr_value92, align 8
  %loaded_stack_ptr_address_value94 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value95 = getelementptr i64, i64* %loaded_stack_ptr_address_value94, i64 1
  store i64* %inc_ptr_value95, i64** %stack_ptr_address
  %56 = call i32 @call_invoke_method(i64* %52, i32 1, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond96 = icmp ne i32 %56, 1
  br i1 %ifcond96, label %then_block97, label %entry_ifend98

then_block97:                                     ; preds = %entry_ifend74
  %57 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend98:                                    ; preds = %entry_ifend74
  %stack_offset_value102 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value102, i64* %"lvar$0$", align 8
  %stack_offset_value104 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value104, i64* %"lvar$1$", align 8
  %stack_offset_address_value105 = getelementptr i64, i64* %stack, i64 2
  %stack_offset_value106 = load i64, i64* %stack_offset_address_value105, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value106, i64* %"lvar$2$", align 8
  %stack_offset_address_value107 = getelementptr i64, i64* %stack, i64 3
  %stack_offset_value108 = load i64, i64* %stack_offset_address_value107, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value108, i64* %"lvar$3$", align 8
  %loaded_stack_ptr_address_value109 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value110 = getelementptr i64, i64* %loaded_stack_ptr_address_value109, i64 -1
  %stack_pointer_offset_value111 = load i64, i64* %stack_pointer_offset_value110, align 8
  %58 = trunc i64 %stack_pointer_offset_value111 to i32
  call void @push_jit_object(i32 %58)
  %loaded_stack_ptr_address_value112 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value113 = getelementptr i64, i64* %loaded_stack_ptr_address_value112, i64 1
  store i64* %dec_ptr_value113, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_pointer_offset_value111, i64* %"lvar$3$", align 8
  store i32 0, i32* @gSigInt
  %59 = trunc i64 %stack_offset_value106 to i32
  %60 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %59, i32 1)
  %61 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %60, i32 0, i32 0
  %62 = load i64, i64* %61, align 4
  %63 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %60, i32 0, i32 1
  %64 = load i32, i32* %63, align 4
  %ifcond117 = icmp eq i32 %64, 0
  br i1 %ifcond117, label %then_block, label %entry_ifend116

entry_ifend116:                                   ; preds = %entry_ifend98
  %65 = trunc i64 %62 to i32
  %66 = zext i32 %58 to i64
  %67 = call i32 @store_field(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %65, i64 %66, i32 1)
  %ifcond121 = icmp eq i32 %67, 0
  br i1 %ifcond121, label %then_block, label %entry_ifend120

entry_ifend120:                                   ; preds = %entry_ifend116
  store i32 0, i32* @gSigInt
  %68 = call i32 @store_field(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %59, i64 %66, i32 1)
  %ifcond126 = icmp eq i32 %68, 0
  br i1 %ifcond126, label %then_block, label %label_if_endzzzh

entry_ifend130:                                   ; preds = %label_if_endzzzh
  %69 = trunc i64 %41 to i32
  %addtmp = add nuw i32 %69, 1
  %70 = zext i32 %addtmp to i64
  %71 = call i32 @store_field(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %38, i64 %70, i32 2)
  %ifcond135 = icmp eq i32 %71, 0
  br i1 %ifcond135, label %then_block, label %entry_ifend134

entry_ifend134:                                   ; preds = %entry_ifend130
  store i32 0, i32* @gSigInt
  %72 = zext i32 %38 to i64
  store i64 %72, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.subBuffer(int,int)$$222"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %VALUE_FOR_ANDAND_OROR53 = alloca i64
  %VALUE_FOR_ANDAND_OROR = alloca i64
  %"lvar$4$" = alloca i64
  %"lvar$3$" = alloca i64
  %"lvar$2$" = alloca i64
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value1 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value1, i64* %"lvar$1$", align 8
  %stack_offset_address_value2 = getelementptr i64, i64* %stack, i64 2
  %stack_offset_value3 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value3, i64* %"lvar$2$", align 8
  store i64 0, i64* %"lvar$3$"
  store i64 0, i64* %"lvar$3$", align 8
  store i64 0, i64* %"lvar$4$"
  store i64 0, i64* %"lvar$4$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_buffer_object(i8* inttoptr (i64 52666352 to i8*), i32 3)
  call void @push_jit_object(i32 %0)
  store i64 0, i64* %"lvar$3$"
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %"lvar$3$", align 8
  store i32 0, i32* @gSigInt
  %lvar4 = load i64, i64* %"lvar$1$"
  %2 = trunc i64 %lvar4 to i32
  %letmp = icmp slt i32 %2, 0
  br i1 %letmp, label %entry_condend, label %label_if_endzzzi

entry_condend:                                    ; preds = %entry
  store i32 0, i32* @gSigInt
  %3 = trunc i64 %1 to i32
  %4 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %3, i32 1)
  %5 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %4, i32 0, i32 0
  %6 = load i64, i64* %5, align 4
  %7 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %4, i32 0, i32 1
  %8 = load i32, i32* %7, align 4
  %ifcond = icmp eq i32 %8, 0
  br i1 %ifcond, label %then_block, label %entry_ifend

label_if_endzzzi:                                 ; preds = %entry, %entry_ifend
  store i32 0, i32* @gSigInt
  %lvar8 = load i64, i64* %"lvar$2$"
  %9 = trunc i64 %lvar8 to i32
  %letmp9 = icmp slt i32 %9, 0
  br i1 %letmp9, label %entry_condend11, label %label_if_endzzzj

then_block:                                       ; preds = %then_block141, %entry_ifend166, %entry_ifend142, %entry_ifend109, %entry_ifend105, %entry_ifend90, %entry_ifend66, %label_if_endzzzm, %entry_condnotend, %entry_condend35, %label_if_endzzzk, %entry_condend11, %entry_condend
  ret i32 0

entry_ifend:                                      ; preds = %entry_condend
  %value2 = trunc i64 %6 to i32
  %addtmp = add nuw i32 %value2, %2
  store i64 0, i64* %"lvar$1$"
  %10 = zext i32 %addtmp to i64
  store i64 %10, i64* %"lvar$1$", align 8
  br label %label_if_endzzzi

entry_condend11:                                  ; preds = %label_if_endzzzi
  store i32 0, i32* @gSigInt
  %11 = trunc i64 %1 to i32
  %12 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %11, i32 1)
  %13 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %12, i32 0, i32 0
  %14 = load i64, i64* %13, align 4
  %15 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %12, i32 0, i32 1
  %16 = load i32, i32* %15, align 4
  %ifcond17 = icmp eq i32 %16, 0
  br i1 %ifcond17, label %then_block, label %entry_ifend16

label_if_endzzzj:                                 ; preds = %label_if_endzzzi, %entry_ifend16
  %lvar28179 = phi i64 [ %18, %entry_ifend16 ], [ %lvar8, %label_if_endzzzi ]
  store i32 0, i32* @gSigInt
  %lvar22 = load i64, i64* %"lvar$1$"
  %17 = trunc i64 %lvar22 to i32
  %letmp23 = icmp slt i32 %17, 0
  br i1 %letmp23, label %entry_condend25, label %label_if_endzzzk

entry_ifend16:                                    ; preds = %entry_condend11
  %value218 = trunc i64 %14 to i32
  %addtmp19 = add i32 %9, 1
  %addtmp20 = add i32 %addtmp19, %value218
  store i64 0, i64* %"lvar$2$"
  %18 = zext i32 %addtmp20 to i64
  store i64 %18, i64* %"lvar$2$", align 8
  br label %label_if_endzzzj

entry_condend25:                                  ; preds = %label_if_endzzzj
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  br label %label_if_endzzzk

label_if_endzzzk:                                 ; preds = %label_if_endzzzj, %entry_condend25
  store i32 0, i32* @gSigInt
  %19 = trunc i64 %lvar28179 to i32
  %20 = trunc i64 %1 to i32
  %21 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %20, i32 1)
  %22 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %21, i32 0, i32 0
  %23 = load i64, i64* %22, align 4
  %24 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %21, i32 0, i32 1
  %25 = load i32, i32* %24, align 4
  %ifcond32 = icmp eq i32 %25, 0
  br i1 %ifcond32, label %then_block, label %entry_ifend31

entry_ifend31:                                    ; preds = %label_if_endzzzk
  %value233 = trunc i64 %23 to i32
  %gttmp = icmp sgt i32 %19, %value233
  br i1 %gttmp, label %entry_condend35, label %label_if_endzzzl

entry_condend35:                                  ; preds = %entry_ifend31
  store i32 0, i32* @gSigInt
  %26 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %20, i32 1)
  %27 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %26, i32 0, i32 0
  %28 = load i64, i64* %27, align 4
  %29 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %26, i32 0, i32 1
  %30 = load i32, i32* %29, align 4
  %ifcond40 = icmp eq i32 %30, 0
  br i1 %ifcond40, label %then_block, label %entry_ifend39

label_if_endzzzl:                                 ; preds = %entry_ifend31, %entry_ifend39
  %lvar57 = phi i64 [ %34, %entry_ifend39 ], [ %lvar28179, %entry_ifend31 ]
  store i32 0, i32* @gSigInt
  %lvar43 = load i64, i64* %"lvar$1$"
  %31 = trunc i64 %lvar43 to i32
  %32 = trunc i64 %lvar57 to i32
  %gteqtmp = icmp sge i32 %31, %32
  store i64 0, i64* %VALUE_FOR_ANDAND_OROR, align 8
  %33 = zext i1 %gteqtmp to i64
  store i64 %33, i64* %VALUE_FOR_ANDAND_OROR, align 8
  br i1 %gteqtmp, label %label_or_endpointzzzn, label %entry_condnotend

entry_ifend39:                                    ; preds = %entry_condend35
  %value241 = trunc i64 %28 to i32
  store i64 0, i64* %"lvar$2$"
  %34 = zext i32 %value241 to i64
  store i64 %34, i64* %"lvar$2$", align 8
  br label %label_if_endzzzl

entry_condnotend:                                 ; preds = %label_if_endzzzl
  %35 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %20, i32 1)
  %36 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %35, i32 0, i32 0
  %37 = load i64, i64* %36, align 4
  %38 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %35, i32 0, i32 1
  %39 = load i32, i32* %38, align 4
  %ifcond50 = icmp eq i32 %39, 0
  br i1 %ifcond50, label %then_block, label %entry_ifend49

label_or_endpointzzzn:                            ; preds = %label_if_endzzzl, %label_or_endpointzzzo
  %value_for_andand_oror60 = phi i64 [ %44, %label_or_endpointzzzo ], [ %33, %label_if_endzzzl ]
  %40 = trunc i64 %value_for_andand_oror60 to i1
  store i32 0, i32* @gSigInt
  br i1 %40, label %entry_condend62, label %label_if_endzzzm

entry_ifend49:                                    ; preds = %entry_condnotend
  %value251 = trunc i64 %37 to i32
  %gteqtmp52 = icmp sge i32 %31, %value251
  store i64 0, i64* %VALUE_FOR_ANDAND_OROR53, align 8
  %41 = zext i1 %gteqtmp52 to i64
  store i64 %41, i64* %VALUE_FOR_ANDAND_OROR53, align 8
  br i1 %gteqtmp52, label %label_or_endpointzzzo, label %entry_condnotend55

entry_condnotend55:                               ; preds = %entry_ifend49
  %letmp58 = icmp slt i32 %32, 0
  %42 = zext i1 %letmp58 to i64
  store i64 %42, i64* %VALUE_FOR_ANDAND_OROR53, align 8
  br label %label_or_endpointzzzo

label_or_endpointzzzo:                            ; preds = %entry_ifend49, %entry_condnotend55
  %value_for_andand_oror = phi i64 [ %42, %entry_condnotend55 ], [ %41, %entry_ifend49 ]
  %43 = trunc i64 %value_for_andand_oror to i1
  %44 = zext i1 %43 to i64
  store i64 %44, i64* %VALUE_FOR_ANDAND_OROR, align 8
  br label %label_or_endpointzzzn

entry_condend62:                                  ; preds = %label_or_endpointzzzn
  %45 = call i32 @create_buffer_object(i8* inttoptr (i64 52666712 to i8*), i32 0)
  call void @push_jit_object(i32 %45)
  %46 = zext i32 %45 to i64
  store i64 %46, i64* %stack, align 8
  ret i32 1

label_if_endzzzm:                                 ; preds = %label_or_endpointzzzn
  %47 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52666752 to i8*))
  %ifcond67 = icmp eq i64* %47, null
  br i1 %ifcond67, label %then_block, label %entry_ifend66

entry_ifend66:                                    ; preds = %label_if_endzzzm
  %48 = call i32 @create_object(i64* %47)
  call void @push_jit_object(i32 %48)
  %value269 = zext i32 %32 to i64
  %value271 = zext i32 %31 to i64
  %subtmp = sub nsw i64 %value269, %value271
  %49 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52666760 to i8*))
  %ifcond74 = icmp eq i64* %49, null
  br i1 %ifcond74, label %then_block, label %entry_ifend73

entry_ifend73:                                    ; preds = %entry_ifend66
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value77 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value77, align 8
  store i64 %lvar43, i64* %lvar_offset_value77, align 8
  %lvar_offset_value79 = getelementptr i64, i64* %lvar, i64 2
  store i64 0, i64* %lvar_offset_value79, align 8
  store i64 %lvar57, i64* %lvar_offset_value79, align 8
  %lvar_offset_value81 = getelementptr i64, i64* %lvar, i64 3
  store i64 0, i64* %lvar_offset_value81, align 8
  store i64 %1, i64* %lvar_offset_value81, align 8
  %lvar_offset_value83 = getelementptr i64, i64* %lvar, i64 4
  store i64 0, i64* %lvar_offset_value83, align 8
  store i64 0, i64* %lvar_offset_value83, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %50 = zext i32 %48 to i64
  store i64 %50, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value84 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value84, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  store i64 %subtmp, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value86 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value87 = getelementptr i64, i64* %loaded_stack_ptr_address_value86, i64 1
  store i64* %inc_ptr_value87, i64** %stack_ptr_address
  %51 = call i32 @call_invoke_method(i64* %49, i32 2, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond88 = icmp ne i32 %51, 1
  br i1 %ifcond88, label %then_block89, label %entry_ifend90

then_block89:                                     ; preds = %entry_ifend73
  %52 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend90:                                    ; preds = %entry_ifend73
  %stack_offset_value91 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value91, i64* %"lvar$0$", align 8
  %stack_offset_value93 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value93, i64* %"lvar$1$", align 8
  %stack_offset_value95 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value95, i64* %"lvar$2$", align 8
  %stack_offset_address_value96 = getelementptr i64, i64* %stack, i64 3
  %stack_offset_value97 = load i64, i64* %stack_offset_address_value96, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value97, i64* %"lvar$3$", align 8
  %stack_offset_address_value98 = getelementptr i64, i64* %stack, i64 4
  %stack_offset_value99 = load i64, i64* %stack_offset_address_value98, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value99, i64* %"lvar$4$", align 8
  %loaded_stack_ptr_address_value100 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value100, i64 -1
  %stack_pointer_offset_value101 = load i64, i64* %stack_pointer_offset_value, align 8
  %53 = trunc i64 %stack_pointer_offset_value101 to i32
  call void @push_jit_object(i32 %53)
  %loaded_stack_ptr_address_value102 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value102, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_pointer_offset_value101, i64* %"lvar$4$", align 8
  store i32 0, i32* @gSigInt
  %54 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %53, i32 0)
  %55 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %54, i32 0, i32 0
  %56 = load i64, i64* %55, align 4
  %57 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %54, i32 0, i32 1
  %58 = load i32, i32* %57, align 4
  %ifcond106 = icmp eq i32 %58, 0
  br i1 %ifcond106, label %then_block, label %entry_ifend105

entry_ifend105:                                   ; preds = %entry_ifend90
  %59 = inttoptr i64 %56 to i8*
  %60 = trunc i64 %stack_offset_value97 to i32
  %61 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %60, i32 0)
  %62 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %61, i32 0, i32 0
  %63 = load i64, i64* %62, align 4
  %64 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %61, i32 0, i32 1
  %65 = load i32, i32* %64, align 4
  %ifcond110 = icmp eq i32 %65, 0
  br i1 %ifcond110, label %then_block, label %entry_ifend109

entry_ifend109:                                   ; preds = %entry_ifend105
  %66 = inttoptr i64 %63 to i8*
  %67 = trunc i64 %stack_offset_value93 to i32
  %value2112 = zext i32 %67 to i64
  %addtmp113 = getelementptr i8, i8* %66, i64 %value2112
  %68 = trunc i64 %stack_offset_value95 to i32
  %subtmp116 = sub nuw i32 %68, %67
  %value2117 = zext i32 %subtmp116 to i64
  %69 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52666768 to i8*))
  %ifcond120 = icmp eq i64* %69, null
  br i1 %ifcond120, label %then_block, label %entry_ifend119

entry_ifend119:                                   ; preds = %entry_ifend109
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value91, i64* %lvar, align 8
  store i64 0, i64* %lvar_offset_value77, align 8
  store i64 %stack_offset_value93, i64* %lvar_offset_value77, align 8
  store i64 0, i64* %lvar_offset_value79, align 8
  store i64 %stack_offset_value95, i64* %lvar_offset_value79, align 8
  store i64 0, i64* %lvar_offset_value81, align 8
  store i64 %stack_offset_value97, i64* %lvar_offset_value81, align 8
  store i64 0, i64* %lvar_offset_value83, align 8
  store i64 %stack_pointer_offset_value101, i64* %lvar_offset_value83, align 8
  %loaded_stack_ptr_address_value131 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value131, align 8
  %70 = ptrtoint i8* %59 to i64
  store i64 %70, i64* %loaded_stack_ptr_address_value131, align 8
  %loaded_stack_ptr_address_value132 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value133 = getelementptr i64, i64* %loaded_stack_ptr_address_value132, i64 1
  store i64* %inc_ptr_value133, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value133, align 8
  %71 = ptrtoint i8* %addtmp113 to i64
  store i64 %71, i64* %inc_ptr_value133, align 8
  %loaded_stack_ptr_address_value135 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value136 = getelementptr i64, i64* %loaded_stack_ptr_address_value135, i64 1
  store i64* %inc_ptr_value136, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value136, align 8
  store i64 %value2117, i64* %inc_ptr_value136, align 8
  %loaded_stack_ptr_address_value138 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value139 = getelementptr i64, i64* %loaded_stack_ptr_address_value138, i64 1
  store i64* %inc_ptr_value139, i64** %stack_ptr_address
  %72 = call i32 @call_invoke_method(i64* %69, i32 12, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond140 = icmp ne i32 %72, 1
  br i1 %ifcond140, label %then_block141, label %entry_ifend142

then_block141:                                    ; preds = %entry_ifend119
  %73 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend142:                                   ; preds = %entry_ifend119
  %stack_offset_value146 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value146, i64* %"lvar$0$", align 8
  %stack_offset_value148 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value148, i64* %"lvar$1$", align 8
  %stack_offset_value150 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value150, i64* %"lvar$2$", align 8
  %stack_offset_value152 = load i64, i64* %stack_offset_address_value96, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value152, i64* %"lvar$3$", align 8
  %stack_offset_value154 = load i64, i64* %stack_offset_address_value98, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value154, i64* %"lvar$4$", align 8
  %loaded_stack_ptr_address_value155 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value156 = getelementptr i64, i64* %loaded_stack_ptr_address_value155, i64 -1
  %stack_pointer_offset_value157 = load i64, i64* %stack_pointer_offset_value156, align 8
  %74 = trunc i64 %stack_pointer_offset_value157 to i32
  call void @push_jit_object(i32 %74)
  %loaded_stack_ptr_address_value158 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value159 = getelementptr i64, i64* %loaded_stack_ptr_address_value158, i64 1
  store i64* %dec_ptr_value159, i64** %stack_ptr_address
  store i32 0, i32* @gSigInt
  %75 = trunc i64 %stack_offset_value154 to i32
  %76 = trunc i64 %stack_offset_value150 to i32
  %77 = trunc i64 %stack_offset_value148 to i32
  %subtmp163 = sub nuw i32 %76, %77
  %value2164 = zext i32 %subtmp163 to i64
  %78 = call i32 @store_field(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %75, i64 %value2164, i32 1)
  %ifcond167 = icmp eq i32 %78, 0
  br i1 %ifcond167, label %then_block, label %entry_ifend166

entry_ifend166:                                   ; preds = %entry_ifend142
  store i32 0, i32* @gSigInt
  %79 = call i32 @store_field(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %75, i64 %value2164, i32 2)
  %ifcond175 = icmp eq i32 %79, 0
  br i1 %ifcond175, label %then_block, label %entry_ifend174

entry_ifend174:                                   ; preds = %entry_ifend166
  store i32 0, i32* @gSigInt
  %80 = zext i32 %75 to i64
  store i64 %80, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.scan(regex)$$223"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$11$" = alloca i64
  %"lvar$10$" = alloca i64
  %"lvar$9$" = alloca i64
  %"lvar$8$" = alloca i64
  %"lvar$7$" = alloca i64
  %"lvar$6$" = alloca i64
  %"lvar$5$" = alloca i64
  %"lvar$4$" = alloca i64
  %"lvar$3$" = alloca i64
  %"lvar$2$" = alloca i64
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value1 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value1, i64* %"lvar$1$", align 8
  store i64 0, i64* %"lvar$2$"
  store i64 0, i64* %"lvar$2$", align 8
  store i64 0, i64* %"lvar$3$"
  store i64 0, i64* %"lvar$3$", align 8
  store i64 0, i64* %"lvar$4$"
  store i64 0, i64* %"lvar$4$", align 8
  store i64 0, i64* %"lvar$5$"
  store i64 0, i64* %"lvar$5$", align 8
  store i64 0, i64* %"lvar$6$"
  store i64 0, i64* %"lvar$6$", align 8
  store i64 0, i64* %"lvar$7$"
  store i64 0, i64* %"lvar$7$", align 8
  store i64 0, i64* %"lvar$8$"
  store i64 0, i64* %"lvar$8$", align 8
  store i64 0, i64* %"lvar$9$"
  store i64 0, i64* %"lvar$9$", align 8
  store i64 0, i64* %"lvar$10$"
  store i64 0, i64* %"lvar$10$", align 8
  store i64 0, i64* %"lvar$11$"
  store i64 0, i64* %"lvar$11$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_string_object(i8* inttoptr (i64 52666776 to i8*))
  call void @push_jit_object(i32 %0)
  store i64 0, i64* %"lvar$2$"
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  %2 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52666780 to i8*))
  %ifcond = icmp eq i64* %2, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %then_block958, %then_block889, %then_block825, %then_block709, %then_block640, %then_block576, %then_block464, %then_block395, %then_block331, %then_block242, %then_block161, %then_block90, %entry_ifend890, %entry_ifend826, %entry_ifend786, %entry_ifend782, %entry_ifend778, %entry_ifend774, %entry_condend769, %entry_ifend760, %label_elsezzzs, %entry_ifend745, %entry_ifend710, %entry_ifend641, %entry_ifend577, %entry_ifend537, %entry_ifend534, %entry_ifend530, %entry_ifend527, %entry_condend522, %entry_ifend513, %label_elsezzzr, %entry_ifend500, %entry_ifend465, %entry_ifend396, %entry_ifend332, %entry_ifend292, %entry_ifend289, %entry_ifend285, %entry_ifend282, %entry_condend277, %entry_condend, %entry_ifend124, %entry_ifend91, %entry_ifend31, %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %3 = call i32 @create_object(i64* %2)
  call void @push_jit_object(i32 %3)
  %4 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52666796 to i8*))
  %ifcond4 = icmp eq i64* %4, null
  br i1 %ifcond4, label %then_block, label %entry_ifend3

entry_ifend3:                                     ; preds = %entry_ifend
  %lvar5 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar5, i64* %lvar, align 8
  %lvar6 = load i64, i64* %"lvar$1$"
  %lvar_offset_value7 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value7, align 8
  store i64 %lvar6, i64* %lvar_offset_value7, align 8
  %lvar8 = load i64, i64* %"lvar$2$"
  %lvar_offset_value9 = getelementptr i64, i64* %lvar, i64 2
  store i64 0, i64* %lvar_offset_value9, align 8
  store i64 %lvar8, i64* %lvar_offset_value9, align 8
  %lvar10 = load i64, i64* %"lvar$3$"
  %lvar_offset_value11 = getelementptr i64, i64* %lvar, i64 3
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar10, i64* %lvar_offset_value11, align 8
  %lvar12 = load i64, i64* %"lvar$4$"
  %lvar_offset_value13 = getelementptr i64, i64* %lvar, i64 4
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar12, i64* %lvar_offset_value13, align 8
  %lvar14 = load i64, i64* %"lvar$5$"
  %lvar_offset_value15 = getelementptr i64, i64* %lvar, i64 5
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar14, i64* %lvar_offset_value15, align 8
  %lvar16 = load i64, i64* %"lvar$6$"
  %lvar_offset_value17 = getelementptr i64, i64* %lvar, i64 6
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar16, i64* %lvar_offset_value17, align 8
  %lvar18 = load i64, i64* %"lvar$7$"
  %lvar_offset_value19 = getelementptr i64, i64* %lvar, i64 7
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar18, i64* %lvar_offset_value19, align 8
  %lvar20 = load i64, i64* %"lvar$8$"
  %lvar_offset_value21 = getelementptr i64, i64* %lvar, i64 8
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar20, i64* %lvar_offset_value21, align 8
  %lvar22 = load i64, i64* %"lvar$9$"
  %lvar_offset_value23 = getelementptr i64, i64* %lvar, i64 9
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar22, i64* %lvar_offset_value23, align 8
  %lvar24 = load i64, i64* %"lvar$10$"
  %lvar_offset_value25 = getelementptr i64, i64* %lvar, i64 10
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar24, i64* %lvar_offset_value25, align 8
  %lvar26 = load i64, i64* %"lvar$11$"
  %lvar_offset_value27 = getelementptr i64, i64* %lvar, i64 11
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar26, i64* %lvar_offset_value27, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %5 = zext i32 %3 to i64
  store i64 %5, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value28 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value28, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  %6 = call i32 @call_invoke_method(i64* %4, i32 0, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond29 = icmp ne i32 %6, 1
  br i1 %ifcond29, label %then_block30, label %entry_ifend31

then_block30:                                     ; preds = %entry_ifend3
  %7 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend31:                                    ; preds = %entry_ifend3
  %stack_offset_value32 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value32, i64* %"lvar$0$", align 8
  %stack_offset_value34 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value34, i64* %"lvar$1$", align 8
  %stack_offset_address_value35 = getelementptr i64, i64* %stack, i64 2
  %stack_offset_value36 = load i64, i64* %stack_offset_address_value35, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value36, i64* %"lvar$2$", align 8
  %stack_offset_address_value37 = getelementptr i64, i64* %stack, i64 3
  %stack_offset_value38 = load i64, i64* %stack_offset_address_value37, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value38, i64* %"lvar$3$", align 8
  %stack_offset_address_value39 = getelementptr i64, i64* %stack, i64 4
  %stack_offset_value40 = load i64, i64* %stack_offset_address_value39, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value40, i64* %"lvar$4$", align 8
  %stack_offset_address_value41 = getelementptr i64, i64* %stack, i64 5
  %stack_offset_value42 = load i64, i64* %stack_offset_address_value41, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value42, i64* %"lvar$5$", align 8
  %stack_offset_address_value43 = getelementptr i64, i64* %stack, i64 6
  %stack_offset_value44 = load i64, i64* %stack_offset_address_value43, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value44, i64* %"lvar$6$", align 8
  %stack_offset_address_value45 = getelementptr i64, i64* %stack, i64 7
  %stack_offset_value46 = load i64, i64* %stack_offset_address_value45, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value46, i64* %"lvar$7$", align 8
  %stack_offset_address_value47 = getelementptr i64, i64* %stack, i64 8
  %stack_offset_value48 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value48, i64* %"lvar$8$", align 8
  %stack_offset_address_value49 = getelementptr i64, i64* %stack, i64 9
  %stack_offset_value50 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value50, i64* %"lvar$9$", align 8
  %stack_offset_address_value51 = getelementptr i64, i64* %stack, i64 10
  %stack_offset_value52 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value52, i64* %"lvar$10$", align 8
  %stack_offset_address_value53 = getelementptr i64, i64* %stack, i64 11
  %stack_offset_value54 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value54, i64* %"lvar$11$", align 8
  %loaded_stack_ptr_address_value55 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value55, i64 -1
  %stack_pointer_offset_value56 = load i64, i64* %stack_pointer_offset_value, align 8
  %8 = trunc i64 %stack_pointer_offset_value56 to i32
  call void @push_jit_object(i32 %8)
  %loaded_stack_ptr_address_value57 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value57, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_pointer_offset_value56, i64* %"lvar$3$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$4$"
  store i64 0, i64* %"lvar$4$", align 8
  store i32 0, i32* @gSigInt
  %lvar58 = load i64, i64* %"lvar$2$"
  %9 = trunc i64 %lvar58 to i32
  %10 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52666812 to i8*))
  %ifcond61 = icmp eq i64* %10, null
  br i1 %ifcond61, label %then_block, label %entry_ifend60

entry_ifend60:                                    ; preds = %entry_ifend31
  %lvar62 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar62, i64* %lvar, align 8
  %lvar64 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value7, align 8
  store i64 %lvar64, i64* %lvar_offset_value7, align 8
  %lvar66 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value9, align 8
  store i64 %lvar66, i64* %lvar_offset_value9, align 8
  %lvar68 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar68, i64* %lvar_offset_value11, align 8
  %lvar70 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar70, i64* %lvar_offset_value13, align 8
  %lvar72 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar72, i64* %lvar_offset_value15, align 8
  %lvar74 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar74, i64* %lvar_offset_value17, align 8
  %lvar76 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar76, i64* %lvar_offset_value19, align 8
  %lvar78 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar78, i64* %lvar_offset_value21, align 8
  %lvar80 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar80, i64* %lvar_offset_value23, align 8
  %lvar82 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar82, i64* %lvar_offset_value25, align 8
  %lvar84 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar84, i64* %lvar_offset_value27, align 8
  %loaded_stack_ptr_address_value86 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value86, align 8
  %11 = zext i32 %9 to i64
  store i64 %11, i64* %loaded_stack_ptr_address_value86, align 8
  %loaded_stack_ptr_address_value87 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value88 = getelementptr i64, i64* %loaded_stack_ptr_address_value87, i64 1
  store i64* %inc_ptr_value88, i64** %stack_ptr_address
  %12 = call i32 @call_invoke_method(i64* %10, i32 48, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond89 = icmp ne i32 %12, 1
  br i1 %ifcond89, label %then_block90, label %entry_ifend91

then_block90:                                     ; preds = %entry_ifend60
  %13 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend91:                                    ; preds = %entry_ifend60
  %stack_offset_value95 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value95, i64* %"lvar$0$", align 8
  %stack_offset_value97 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value97, i64* %"lvar$1$", align 8
  %stack_offset_value99 = load i64, i64* %stack_offset_address_value35, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value99, i64* %"lvar$2$", align 8
  %stack_offset_value101 = load i64, i64* %stack_offset_address_value37, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value101, i64* %"lvar$3$", align 8
  %stack_offset_value103 = load i64, i64* %stack_offset_address_value39, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value103, i64* %"lvar$4$", align 8
  %stack_offset_value105 = load i64, i64* %stack_offset_address_value41, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value105, i64* %"lvar$5$", align 8
  %stack_offset_value107 = load i64, i64* %stack_offset_address_value43, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value107, i64* %"lvar$6$", align 8
  %stack_offset_value109 = load i64, i64* %stack_offset_address_value45, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value109, i64* %"lvar$7$", align 8
  %stack_offset_value111 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value111, i64* %"lvar$8$", align 8
  %stack_offset_value113 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value113, i64* %"lvar$9$", align 8
  %stack_offset_value115 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value115, i64* %"lvar$10$", align 8
  %stack_offset_value117 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value117, i64* %"lvar$11$", align 8
  %loaded_stack_ptr_address_value118 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value119 = getelementptr i64, i64* %loaded_stack_ptr_address_value118, i64 -1
  %stack_pointer_offset_value120 = load i64, i64* %stack_pointer_offset_value119, align 8
  %14 = trunc i64 %stack_pointer_offset_value120 to i32
  call void @push_jit_object(i32 %14)
  %loaded_stack_ptr_address_value121 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value122 = getelementptr i64, i64* %loaded_stack_ptr_address_value121, i64 1
  store i64* %dec_ptr_value122, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_pointer_offset_value120, i64* %"lvar$5$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$6$"
  store i64 16, i64* %"lvar$6$", align 8
  store i32 0, i32* @gSigInt
  %15 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52666820 to i8*))
  %ifcond125 = icmp eq i64* %15, null
  br i1 %ifcond125, label %then_block, label %entry_ifend124

entry_ifend124:                                   ; preds = %entry_ifend91
  %16 = call i32 @create_object(i64* %15)
  call void @push_jit_object(i32 %16)
  %lvar126 = load i64, i64* %"lvar$6$"
  %17 = trunc i64 %lvar126 to i32
  %18 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52666832 to i8*))
  %ifcond129 = icmp eq i64* %18, null
  br i1 %ifcond129, label %then_block, label %entry_ifend128

entry_ifend128:                                   ; preds = %entry_ifend124
  %lvar130 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar130, i64* %lvar, align 8
  %lvar132 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value7, align 8
  store i64 %lvar132, i64* %lvar_offset_value7, align 8
  %lvar134 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value9, align 8
  store i64 %lvar134, i64* %lvar_offset_value9, align 8
  %lvar136 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar136, i64* %lvar_offset_value11, align 8
  %lvar138 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar138, i64* %lvar_offset_value13, align 8
  %lvar140 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar140, i64* %lvar_offset_value15, align 8
  %lvar142 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar142, i64* %lvar_offset_value17, align 8
  %lvar144 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar144, i64* %lvar_offset_value19, align 8
  %lvar146 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar146, i64* %lvar_offset_value21, align 8
  %lvar148 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar148, i64* %lvar_offset_value23, align 8
  %lvar150 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar150, i64* %lvar_offset_value25, align 8
  %lvar152 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar152, i64* %lvar_offset_value27, align 8
  %loaded_stack_ptr_address_value154 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value154, align 8
  %19 = zext i32 %16 to i64
  store i64 %19, i64* %loaded_stack_ptr_address_value154, align 8
  %loaded_stack_ptr_address_value155 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value156 = getelementptr i64, i64* %loaded_stack_ptr_address_value155, i64 1
  store i64* %inc_ptr_value156, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value156, align 8
  %20 = zext i32 %17 to i64
  store i64 %20, i64* %inc_ptr_value156, align 8
  %loaded_stack_ptr_address_value158 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value159 = getelementptr i64, i64* %loaded_stack_ptr_address_value158, i64 1
  store i64* %inc_ptr_value159, i64** %stack_ptr_address
  %21 = call i32 @call_invoke_method(i64* %18, i32 0, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond160 = icmp ne i32 %21, 1
  br i1 %ifcond160, label %then_block161, label %entry_ifend162

then_block161:                                    ; preds = %entry_ifend128
  %22 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend162:                                   ; preds = %entry_ifend128
  %stack_offset_value166 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value166, i64* %"lvar$0$", align 8
  %stack_offset_value168 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value168, i64* %"lvar$1$", align 8
  %stack_offset_value170 = load i64, i64* %stack_offset_address_value35, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value170, i64* %"lvar$2$", align 8
  %stack_offset_value172 = load i64, i64* %stack_offset_address_value37, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value172, i64* %"lvar$3$", align 8
  %stack_offset_value174 = load i64, i64* %stack_offset_address_value39, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value174, i64* %"lvar$4$", align 8
  %stack_offset_value176 = load i64, i64* %stack_offset_address_value41, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value176, i64* %"lvar$5$", align 8
  %stack_offset_value178 = load i64, i64* %stack_offset_address_value43, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value178, i64* %"lvar$6$", align 8
  %stack_offset_value180 = load i64, i64* %stack_offset_address_value45, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value180, i64* %"lvar$7$", align 8
  %stack_offset_value182 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value182, i64* %"lvar$8$", align 8
  %stack_offset_value184 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value184, i64* %"lvar$9$", align 8
  %stack_offset_value186 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value186, i64* %"lvar$10$", align 8
  %stack_offset_value188 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value188, i64* %"lvar$11$", align 8
  %loaded_stack_ptr_address_value189 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value190 = getelementptr i64, i64* %loaded_stack_ptr_address_value189, i64 -1
  %stack_pointer_offset_value191 = load i64, i64* %stack_pointer_offset_value190, align 8
  %23 = trunc i64 %stack_pointer_offset_value191 to i32
  call void @push_jit_object(i32 %23)
  %loaded_stack_ptr_address_value192 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value193 = getelementptr i64, i64* %loaded_stack_ptr_address_value192, i64 1
  store i64* %dec_ptr_value193, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_pointer_offset_value191, i64* %"lvar$7$", align 8
  store i32 0, i32* @gSigInt
  br label %entry_condend

entry_condend:                                    ; preds = %for_start_pointzzzt, %entry_ifend516, %entry_condend507, %entry_ifend162
  store i32 0, i32* @gSigInt
  %lvar194 = load i64, i64* %"lvar$1$"
  %24 = trunc i64 %lvar194 to i32
  %lvar195 = load i64, i64* %"lvar$5$"
  %25 = trunc i64 %lvar195 to i32
  %lvar196 = load i64, i64* %"lvar$4$"
  %26 = trunc i64 %lvar196 to i32
  %lvar197 = load i64, i64* %"lvar$6$"
  %27 = trunc i64 %lvar197 to i32
  %lvar198 = load i64, i64* %"lvar$7$"
  %28 = trunc i64 %lvar198 to i32
  %29 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52666884 to i8*))
  %ifcond201 = icmp eq i64* %29, null
  br i1 %ifcond201, label %then_block, label %entry_ifend200

entry_ifend200:                                   ; preds = %entry_condend
  %lvar202 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar202, i64* %lvar, align 8
  %lvar204 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value7, align 8
  store i64 %lvar204, i64* %lvar_offset_value7, align 8
  %lvar206 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value9, align 8
  store i64 %lvar206, i64* %lvar_offset_value9, align 8
  %lvar208 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar208, i64* %lvar_offset_value11, align 8
  %lvar210 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar210, i64* %lvar_offset_value13, align 8
  %lvar212 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar212, i64* %lvar_offset_value15, align 8
  %lvar214 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar214, i64* %lvar_offset_value17, align 8
  %lvar216 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar216, i64* %lvar_offset_value19, align 8
  %lvar218 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar218, i64* %lvar_offset_value21, align 8
  %lvar220 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar220, i64* %lvar_offset_value23, align 8
  %lvar222 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar222, i64* %lvar_offset_value25, align 8
  %lvar224 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar224, i64* %lvar_offset_value27, align 8
  %loaded_stack_ptr_address_value226 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value226, align 8
  %30 = zext i32 %24 to i64
  store i64 %30, i64* %loaded_stack_ptr_address_value226, align 8
  %loaded_stack_ptr_address_value227 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value228 = getelementptr i64, i64* %loaded_stack_ptr_address_value227, i64 1
  store i64* %inc_ptr_value228, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value228, align 8
  %31 = zext i32 %25 to i64
  store i64 %31, i64* %inc_ptr_value228, align 8
  %loaded_stack_ptr_address_value230 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value231 = getelementptr i64, i64* %loaded_stack_ptr_address_value230, i64 1
  store i64* %inc_ptr_value231, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value231, align 8
  %32 = zext i32 %26 to i64
  store i64 %32, i64* %inc_ptr_value231, align 8
  %loaded_stack_ptr_address_value233 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value234 = getelementptr i64, i64* %loaded_stack_ptr_address_value233, i64 1
  store i64* %inc_ptr_value234, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value234, align 8
  %33 = zext i32 %27 to i64
  store i64 %33, i64* %inc_ptr_value234, align 8
  %loaded_stack_ptr_address_value236 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value237 = getelementptr i64, i64* %loaded_stack_ptr_address_value236, i64 1
  store i64* %inc_ptr_value237, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value237, align 8
  %34 = zext i32 %28 to i64
  store i64 %34, i64* %inc_ptr_value237, align 8
  %loaded_stack_ptr_address_value239 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value240 = getelementptr i64, i64* %loaded_stack_ptr_address_value239, i64 1
  store i64* %inc_ptr_value240, i64** %stack_ptr_address
  %35 = call i32 @call_invoke_method(i64* %29, i32 25, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond241 = icmp ne i32 %35, 1
  br i1 %ifcond241, label %then_block242, label %entry_ifend243

then_block242:                                    ; preds = %entry_ifend200
  %36 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend243:                                   ; preds = %entry_ifend200
  %stack_offset_value247 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value247, i64* %"lvar$0$", align 8
  %stack_offset_value249 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value249, i64* %"lvar$1$", align 8
  %stack_offset_value251 = load i64, i64* %stack_offset_address_value35, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value251, i64* %"lvar$2$", align 8
  %stack_offset_value253 = load i64, i64* %stack_offset_address_value37, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value253, i64* %"lvar$3$", align 8
  %stack_offset_value255 = load i64, i64* %stack_offset_address_value39, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value255, i64* %"lvar$4$", align 8
  %stack_offset_value257 = load i64, i64* %stack_offset_address_value41, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value257, i64* %"lvar$5$", align 8
  %stack_offset_value259 = load i64, i64* %stack_offset_address_value43, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value259, i64* %"lvar$6$", align 8
  %stack_offset_value261 = load i64, i64* %stack_offset_address_value45, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value261, i64* %"lvar$7$", align 8
  %stack_offset_value263 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value263, i64* %"lvar$8$", align 8
  %stack_offset_value265 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value265, i64* %"lvar$9$", align 8
  %stack_offset_value267 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value267, i64* %"lvar$10$", align 8
  %stack_offset_value269 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value269, i64* %"lvar$11$", align 8
  %loaded_stack_ptr_address_value270 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value271 = getelementptr i64, i64* %loaded_stack_ptr_address_value270, i64 -1
  %stack_pointer_offset_value272 = load i64, i64* %stack_pointer_offset_value271, align 8
  %37 = trunc i64 %stack_pointer_offset_value272 to i32
  call void @push_jit_object(i32 %37)
  %loaded_stack_ptr_address_value273 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value274 = getelementptr i64, i64* %loaded_stack_ptr_address_value273, i64 1
  store i64* %dec_ptr_value274, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_pointer_offset_value272, i64* %"lvar$8$", align 8
  store i32 0, i32* @gSigInt
  %eqtmpx = icmp eq i32 %37, 1
  br i1 %eqtmpx, label %entry_condend277, label %label_elifzzzq1a

entry_condend277:                                 ; preds = %entry_ifend243
  store i32 0, i32* @gSigInt
  %lvar279 = load i64, i64* %"lvar$5$"
  %38 = trunc i64 %lvar279 to i32
  %lvar280 = load i64, i64* %"lvar$7$"
  %39 = trunc i64 %lvar280 to i32
  %40 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %39, i32 0)
  %41 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %40, i32 0, i32 0
  %42 = load i64, i64* %41, align 4
  %43 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %40, i32 0, i32 1
  %44 = load i32, i32* %43, align 4
  %ifcond283 = icmp eq i32 %44, 0
  br i1 %ifcond283, label %then_block, label %entry_ifend282

label_elifzzzq1a:                                 ; preds = %entry_ifend243
  %gttmp = icmp sgt i32 %37, 1
  store i32 0, i32* @gSigInt
  br i1 %gttmp, label %entry_condend522, label %label_if_elifzzzq0a

entry_ifend282:                                   ; preds = %entry_condend277
  %45 = trunc i64 %42 to i32
  %46 = call %clvalue_and_bool_struct* @load_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %45, i32 0)
  %47 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %46, i32 0, i32 0
  %48 = load i64, i64* %47, align 4
  %49 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %46, i32 0, i32 1
  %50 = load i32, i32* %49, align 4
  %ifcond286 = icmp eq i32 %50, 0
  br i1 %ifcond286, label %then_block, label %entry_ifend285

entry_ifend285:                                   ; preds = %entry_ifend282
  %51 = trunc i64 %48 to i32
  %lvar287 = load i64, i64* %"lvar$7$"
  %52 = trunc i64 %lvar287 to i32
  %53 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %52, i32 1)
  %54 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %53, i32 0, i32 0
  %55 = load i64, i64* %54, align 4
  %56 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %53, i32 0, i32 1
  %57 = load i32, i32* %56, align 4
  %ifcond290 = icmp eq i32 %57, 0
  br i1 %ifcond290, label %then_block, label %entry_ifend289

entry_ifend289:                                   ; preds = %entry_ifend285
  %58 = trunc i64 %55 to i32
  %59 = call %clvalue_and_bool_struct* @load_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %58, i32 0)
  %60 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %59, i32 0, i32 0
  %61 = load i64, i64* %60, align 4
  %62 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %59, i32 0, i32 1
  %63 = load i32, i32* %62, align 4
  %ifcond293 = icmp eq i32 %63, 0
  br i1 %ifcond293, label %then_block, label %entry_ifend292

entry_ifend292:                                   ; preds = %entry_ifend289
  %64 = trunc i64 %61 to i32
  %65 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52666912 to i8*))
  %ifcond296 = icmp eq i64* %65, null
  br i1 %ifcond296, label %then_block, label %entry_ifend295

entry_ifend295:                                   ; preds = %entry_ifend292
  %lvar297 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar297, i64* %lvar, align 8
  %lvar299 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value7, align 8
  store i64 %lvar299, i64* %lvar_offset_value7, align 8
  %lvar301 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value9, align 8
  store i64 %lvar301, i64* %lvar_offset_value9, align 8
  %lvar303 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar303, i64* %lvar_offset_value11, align 8
  %lvar305 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar305, i64* %lvar_offset_value13, align 8
  %lvar307 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar307, i64* %lvar_offset_value15, align 8
  %lvar309 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar309, i64* %lvar_offset_value17, align 8
  %lvar311 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar311, i64* %lvar_offset_value19, align 8
  %lvar313 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar313, i64* %lvar_offset_value21, align 8
  %lvar315 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar315, i64* %lvar_offset_value23, align 8
  %lvar317 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar317, i64* %lvar_offset_value25, align 8
  %lvar319 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar319, i64* %lvar_offset_value27, align 8
  %loaded_stack_ptr_address_value321 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value321, align 8
  %66 = zext i32 %38 to i64
  store i64 %66, i64* %loaded_stack_ptr_address_value321, align 8
  %loaded_stack_ptr_address_value322 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value323 = getelementptr i64, i64* %loaded_stack_ptr_address_value322, i64 1
  store i64* %inc_ptr_value323, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value323, align 8
  %67 = zext i32 %51 to i64
  store i64 %67, i64* %inc_ptr_value323, align 8
  %loaded_stack_ptr_address_value325 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value326 = getelementptr i64, i64* %loaded_stack_ptr_address_value325, i64 1
  store i64* %inc_ptr_value326, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value326, align 8
  %68 = zext i32 %64 to i64
  store i64 %68, i64* %inc_ptr_value326, align 8
  %loaded_stack_ptr_address_value328 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value329 = getelementptr i64, i64* %loaded_stack_ptr_address_value328, i64 1
  store i64* %inc_ptr_value329, i64** %stack_ptr_address
  %69 = call i32 @call_invoke_method(i64* %65, i32 11, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond330 = icmp ne i32 %69, 1
  br i1 %ifcond330, label %then_block331, label %entry_ifend332

then_block331:                                    ; preds = %entry_ifend295
  %70 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend332:                                   ; preds = %entry_ifend295
  %stack_offset_value336 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value336, i64* %"lvar$0$", align 8
  %stack_offset_value338 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value338, i64* %"lvar$1$", align 8
  %stack_offset_value340 = load i64, i64* %stack_offset_address_value35, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value340, i64* %"lvar$2$", align 8
  %stack_offset_value342 = load i64, i64* %stack_offset_address_value37, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value342, i64* %"lvar$3$", align 8
  %stack_offset_value344 = load i64, i64* %stack_offset_address_value39, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value344, i64* %"lvar$4$", align 8
  %stack_offset_value346 = load i64, i64* %stack_offset_address_value41, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value346, i64* %"lvar$5$", align 8
  %stack_offset_value348 = load i64, i64* %stack_offset_address_value43, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value348, i64* %"lvar$6$", align 8
  %stack_offset_value350 = load i64, i64* %stack_offset_address_value45, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value350, i64* %"lvar$7$", align 8
  %stack_offset_value352 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value352, i64* %"lvar$8$", align 8
  %stack_offset_value354 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value354, i64* %"lvar$9$", align 8
  %stack_offset_value356 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value356, i64* %"lvar$10$", align 8
  %stack_offset_value358 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value358, i64* %"lvar$11$", align 8
  %loaded_stack_ptr_address_value359 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value360 = getelementptr i64, i64* %loaded_stack_ptr_address_value359, i64 -1
  %stack_pointer_offset_value361 = load i64, i64* %stack_pointer_offset_value360, align 8
  %71 = trunc i64 %stack_pointer_offset_value361 to i32
  call void @push_jit_object(i32 %71)
  %loaded_stack_ptr_address_value362 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value363 = getelementptr i64, i64* %loaded_stack_ptr_address_value362, i64 1
  store i64* %dec_ptr_value363, i64** %stack_ptr_address
  %72 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52666920 to i8*))
  %ifcond366 = icmp eq i64* %72, null
  br i1 %ifcond366, label %then_block, label %entry_ifend365

entry_ifend365:                                   ; preds = %entry_ifend332
  %lvar367 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar367, i64* %lvar, align 8
  %lvar369 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value7, align 8
  store i64 %lvar369, i64* %lvar_offset_value7, align 8
  %lvar371 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value9, align 8
  store i64 %lvar371, i64* %lvar_offset_value9, align 8
  %lvar373 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar373, i64* %lvar_offset_value11, align 8
  %lvar375 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar375, i64* %lvar_offset_value13, align 8
  %lvar377 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar377, i64* %lvar_offset_value15, align 8
  %lvar379 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar379, i64* %lvar_offset_value17, align 8
  %lvar381 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar381, i64* %lvar_offset_value19, align 8
  %lvar383 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar383, i64* %lvar_offset_value21, align 8
  %lvar385 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar385, i64* %lvar_offset_value23, align 8
  %lvar387 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar387, i64* %lvar_offset_value25, align 8
  %lvar389 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar389, i64* %lvar_offset_value27, align 8
  %loaded_stack_ptr_address_value391 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value391, align 8
  store i64 %stack_pointer_offset_value361, i64* %loaded_stack_ptr_address_value391, align 8
  %loaded_stack_ptr_address_value392 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value393 = getelementptr i64, i64* %loaded_stack_ptr_address_value392, i64 1
  store i64* %inc_ptr_value393, i64** %stack_ptr_address
  %73 = call i32 @call_invoke_method(i64* %72, i32 10, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond394 = icmp ne i32 %73, 1
  br i1 %ifcond394, label %then_block395, label %entry_ifend396

then_block395:                                    ; preds = %entry_ifend365
  %74 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend396:                                   ; preds = %entry_ifend365
  %stack_offset_value400 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value400, i64* %"lvar$0$", align 8
  %stack_offset_value402 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value402, i64* %"lvar$1$", align 8
  %stack_offset_value404 = load i64, i64* %stack_offset_address_value35, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value404, i64* %"lvar$2$", align 8
  %stack_offset_value406 = load i64, i64* %stack_offset_address_value37, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value406, i64* %"lvar$3$", align 8
  %stack_offset_value408 = load i64, i64* %stack_offset_address_value39, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value408, i64* %"lvar$4$", align 8
  %stack_offset_value410 = load i64, i64* %stack_offset_address_value41, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value410, i64* %"lvar$5$", align 8
  %stack_offset_value412 = load i64, i64* %stack_offset_address_value43, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value412, i64* %"lvar$6$", align 8
  %stack_offset_value414 = load i64, i64* %stack_offset_address_value45, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value414, i64* %"lvar$7$", align 8
  %stack_offset_value416 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value416, i64* %"lvar$8$", align 8
  %stack_offset_value418 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value418, i64* %"lvar$9$", align 8
  %stack_offset_value420 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value420, i64* %"lvar$10$", align 8
  %stack_offset_value422 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value422, i64* %"lvar$11$", align 8
  %loaded_stack_ptr_address_value423 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value424 = getelementptr i64, i64* %loaded_stack_ptr_address_value423, i64 -1
  %stack_pointer_offset_value425 = load i64, i64* %stack_pointer_offset_value424, align 8
  %75 = trunc i64 %stack_pointer_offset_value425 to i32
  call void @push_jit_object(i32 %75)
  %loaded_stack_ptr_address_value426 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value427 = getelementptr i64, i64* %loaded_stack_ptr_address_value426, i64 1
  store i64* %dec_ptr_value427, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_pointer_offset_value425, i64* %"lvar$9$", align 8
  store i32 0, i32* @gSigInt
  %lvar428 = load i64, i64* %"lvar$3$"
  %76 = trunc i64 %lvar428 to i32
  %77 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52666928 to i8*))
  %ifcond432 = icmp eq i64* %77, null
  br i1 %ifcond432, label %then_block, label %entry_ifend431

entry_ifend431:                                   ; preds = %entry_ifend396
  %lvar433 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar433, i64* %lvar, align 8
  %lvar435 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value7, align 8
  store i64 %lvar435, i64* %lvar_offset_value7, align 8
  %lvar437 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value9, align 8
  store i64 %lvar437, i64* %lvar_offset_value9, align 8
  %lvar439 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar439, i64* %lvar_offset_value11, align 8
  %lvar441 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar441, i64* %lvar_offset_value13, align 8
  %lvar443 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar443, i64* %lvar_offset_value15, align 8
  %lvar445 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar445, i64* %lvar_offset_value17, align 8
  %lvar447 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar447, i64* %lvar_offset_value19, align 8
  %lvar449 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar449, i64* %lvar_offset_value21, align 8
  %lvar451 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar451, i64* %lvar_offset_value23, align 8
  %lvar453 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar453, i64* %lvar_offset_value25, align 8
  %lvar455 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar455, i64* %lvar_offset_value27, align 8
  %loaded_stack_ptr_address_value457 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value457, align 8
  %78 = zext i32 %76 to i64
  store i64 %78, i64* %loaded_stack_ptr_address_value457, align 8
  %loaded_stack_ptr_address_value458 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value459 = getelementptr i64, i64* %loaded_stack_ptr_address_value458, i64 1
  store i64* %inc_ptr_value459, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value459, align 8
  %79 = zext i32 %75 to i64
  store i64 %79, i64* %inc_ptr_value459, align 8
  %loaded_stack_ptr_address_value461 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value462 = getelementptr i64, i64* %loaded_stack_ptr_address_value461, i64 1
  store i64* %inc_ptr_value462, i64** %stack_ptr_address
  %80 = call i32 @call_invoke_method(i64* %77, i32 7, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond463 = icmp ne i32 %80, 1
  br i1 %ifcond463, label %then_block464, label %entry_ifend465

then_block464:                                    ; preds = %entry_ifend431
  %81 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend465:                                   ; preds = %entry_ifend431
  %stack_offset_value469 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value469, i64* %"lvar$0$", align 8
  %stack_offset_value471 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value471, i64* %"lvar$1$", align 8
  %stack_offset_value473 = load i64, i64* %stack_offset_address_value35, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value473, i64* %"lvar$2$", align 8
  %stack_offset_value475 = load i64, i64* %stack_offset_address_value37, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value475, i64* %"lvar$3$", align 8
  %stack_offset_value477 = load i64, i64* %stack_offset_address_value39, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value477, i64* %"lvar$4$", align 8
  %stack_offset_value479 = load i64, i64* %stack_offset_address_value41, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value479, i64* %"lvar$5$", align 8
  %stack_offset_value481 = load i64, i64* %stack_offset_address_value43, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value481, i64* %"lvar$6$", align 8
  %stack_offset_value483 = load i64, i64* %stack_offset_address_value45, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value483, i64* %"lvar$7$", align 8
  %stack_offset_value485 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value485, i64* %"lvar$8$", align 8
  %stack_offset_value487 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value487, i64* %"lvar$9$", align 8
  %stack_offset_value489 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value489, i64* %"lvar$10$", align 8
  %stack_offset_value491 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value491, i64* %"lvar$11$", align 8
  %loaded_stack_ptr_address_value492 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value493 = getelementptr i64, i64* %loaded_stack_ptr_address_value492, i64 -1
  %stack_pointer_offset_value494 = load i64, i64* %stack_pointer_offset_value493, align 8
  %82 = trunc i64 %stack_pointer_offset_value494 to i32
  call void @push_jit_object(i32 %82)
  %loaded_stack_ptr_address_value495 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value496 = getelementptr i64, i64* %loaded_stack_ptr_address_value495, i64 1
  store i64* %dec_ptr_value496, i64** %stack_ptr_address
  store i32 0, i32* @gSigInt
  %lvar497 = load i64, i64* %"lvar$4$"
  %83 = trunc i64 %lvar497 to i32
  %lvar498 = load i64, i64* %"lvar$7$"
  %84 = trunc i64 %lvar498 to i32
  %85 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %84, i32 1)
  %86 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %85, i32 0, i32 0
  %87 = load i64, i64* %86, align 4
  %88 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %85, i32 0, i32 1
  %89 = load i32, i32* %88, align 4
  %ifcond501 = icmp eq i32 %89, 0
  br i1 %ifcond501, label %then_block, label %entry_ifend500

entry_ifend500:                                   ; preds = %entry_ifend465
  %90 = trunc i64 %87 to i32
  %91 = call %clvalue_and_bool_struct* @load_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %90, i32 0)
  %92 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %91, i32 0, i32 0
  %93 = load i64, i64* %92, align 4
  %94 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %91, i32 0, i32 1
  %95 = load i32, i32* %94, align 4
  %ifcond504 = icmp eq i32 %95, 0
  br i1 %ifcond504, label %then_block, label %entry_ifend503

entry_ifend503:                                   ; preds = %entry_ifend500
  %96 = trunc i64 %93 to i32
  %eqtmpx505 = icmp eq i32 %83, %96
  store i32 0, i32* @gSigInt
  br i1 %eqtmpx505, label %entry_condend507, label %label_elsezzzr

entry_condend507:                                 ; preds = %entry_ifend503
  %lvar509 = load i64, i64* %"lvar$4$"
  %97 = trunc i64 %lvar509 to i32
  %addtmp = add nuw i32 %97, 1
  store i64 0, i64* %"lvar$4$"
  %98 = zext i32 %addtmp to i64
  store i64 %98, i64* %"lvar$4$", align 8
  br label %entry_condend

label_elsezzzr:                                   ; preds = %entry_ifend503
  %lvar511 = load i64, i64* %"lvar$7$"
  %99 = trunc i64 %lvar511 to i32
  %100 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %99, i32 1)
  %101 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %100, i32 0, i32 0
  %102 = load i64, i64* %101, align 4
  %103 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %100, i32 0, i32 1
  %104 = load i32, i32* %103, align 4
  %ifcond514 = icmp eq i32 %104, 0
  br i1 %ifcond514, label %then_block, label %entry_ifend513

entry_ifend513:                                   ; preds = %label_elsezzzr
  %105 = trunc i64 %102 to i32
  %106 = call %clvalue_and_bool_struct* @load_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %105, i32 0)
  %107 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %106, i32 0, i32 0
  %108 = load i64, i64* %107, align 4
  %109 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %106, i32 0, i32 1
  %110 = load i32, i32* %109, align 4
  %ifcond517 = icmp eq i32 %110, 0
  br i1 %ifcond517, label %then_block, label %entry_ifend516

entry_ifend516:                                   ; preds = %entry_ifend513
  %111 = trunc i64 %108 to i32
  store i64 0, i64* %"lvar$4$"
  %112 = zext i32 %111 to i64
  store i64 %112, i64* %"lvar$4$", align 8
  br label %entry_condend

entry_condend522:                                 ; preds = %label_elifzzzq1a
  %lvar524 = load i64, i64* %"lvar$5$"
  %113 = trunc i64 %lvar524 to i32
  %lvar525 = load i64, i64* %"lvar$7$"
  %114 = trunc i64 %lvar525 to i32
  %115 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %114, i32 0)
  %116 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %115, i32 0, i32 0
  %117 = load i64, i64* %116, align 4
  %118 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %115, i32 0, i32 1
  %119 = load i32, i32* %118, align 4
  %ifcond528 = icmp eq i32 %119, 0
  br i1 %ifcond528, label %then_block, label %entry_ifend527

label_if_elifzzzq0a:                              ; preds = %label_elifzzzq1a
  store i32 0, i32* @gSigInt
  %lvar999 = load i64, i64* %"lvar$3$"
  %120 = trunc i64 %lvar999 to i32
  %121 = zext i32 %120 to i64
  store i64 %121, i64* %stack, align 8
  ret i32 1

entry_ifend527:                                   ; preds = %entry_condend522
  %122 = trunc i64 %117 to i32
  %123 = call %clvalue_and_bool_struct* @load_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %122, i32 0)
  %124 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %123, i32 0, i32 0
  %125 = load i64, i64* %124, align 4
  %126 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %123, i32 0, i32 1
  %127 = load i32, i32* %126, align 4
  %ifcond531 = icmp eq i32 %127, 0
  br i1 %ifcond531, label %then_block, label %entry_ifend530

entry_ifend530:                                   ; preds = %entry_ifend527
  %128 = trunc i64 %125 to i32
  %lvar532 = load i64, i64* %"lvar$7$"
  %129 = trunc i64 %lvar532 to i32
  %130 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %129, i32 1)
  %131 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %130, i32 0, i32 0
  %132 = load i64, i64* %131, align 4
  %133 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %130, i32 0, i32 1
  %134 = load i32, i32* %133, align 4
  %ifcond535 = icmp eq i32 %134, 0
  br i1 %ifcond535, label %then_block, label %entry_ifend534

entry_ifend534:                                   ; preds = %entry_ifend530
  %135 = trunc i64 %132 to i32
  %136 = call %clvalue_and_bool_struct* @load_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %135, i32 0)
  %137 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %136, i32 0, i32 0
  %138 = load i64, i64* %137, align 4
  %139 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %136, i32 0, i32 1
  %140 = load i32, i32* %139, align 4
  %ifcond538 = icmp eq i32 %140, 0
  br i1 %ifcond538, label %then_block, label %entry_ifend537

entry_ifend537:                                   ; preds = %entry_ifend534
  %141 = trunc i64 %138 to i32
  %142 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52667096 to i8*))
  %ifcond541 = icmp eq i64* %142, null
  br i1 %ifcond541, label %then_block, label %entry_ifend540

entry_ifend540:                                   ; preds = %entry_ifend537
  %lvar542 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar542, i64* %lvar, align 8
  %lvar544 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value7, align 8
  store i64 %lvar544, i64* %lvar_offset_value7, align 8
  %lvar546 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value9, align 8
  store i64 %lvar546, i64* %lvar_offset_value9, align 8
  %lvar548 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar548, i64* %lvar_offset_value11, align 8
  %lvar550 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar550, i64* %lvar_offset_value13, align 8
  %lvar552 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar552, i64* %lvar_offset_value15, align 8
  %lvar554 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar554, i64* %lvar_offset_value17, align 8
  %lvar556 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar556, i64* %lvar_offset_value19, align 8
  %lvar558 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar558, i64* %lvar_offset_value21, align 8
  %lvar560 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar560, i64* %lvar_offset_value23, align 8
  %lvar562 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar562, i64* %lvar_offset_value25, align 8
  %lvar564 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar564, i64* %lvar_offset_value27, align 8
  %loaded_stack_ptr_address_value566 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value566, align 8
  %143 = zext i32 %113 to i64
  store i64 %143, i64* %loaded_stack_ptr_address_value566, align 8
  %loaded_stack_ptr_address_value567 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value568 = getelementptr i64, i64* %loaded_stack_ptr_address_value567, i64 1
  store i64* %inc_ptr_value568, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value568, align 8
  %144 = zext i32 %128 to i64
  store i64 %144, i64* %inc_ptr_value568, align 8
  %loaded_stack_ptr_address_value570 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value571 = getelementptr i64, i64* %loaded_stack_ptr_address_value570, i64 1
  store i64* %inc_ptr_value571, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value571, align 8
  %145 = zext i32 %141 to i64
  store i64 %145, i64* %inc_ptr_value571, align 8
  %loaded_stack_ptr_address_value573 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value574 = getelementptr i64, i64* %loaded_stack_ptr_address_value573, i64 1
  store i64* %inc_ptr_value574, i64** %stack_ptr_address
  %146 = call i32 @call_invoke_method(i64* %142, i32 11, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond575 = icmp ne i32 %146, 1
  br i1 %ifcond575, label %then_block576, label %entry_ifend577

then_block576:                                    ; preds = %entry_ifend540
  %147 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend577:                                   ; preds = %entry_ifend540
  %stack_offset_value581 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value581, i64* %"lvar$0$", align 8
  %stack_offset_value583 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value583, i64* %"lvar$1$", align 8
  %stack_offset_value585 = load i64, i64* %stack_offset_address_value35, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value585, i64* %"lvar$2$", align 8
  %stack_offset_value587 = load i64, i64* %stack_offset_address_value37, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value587, i64* %"lvar$3$", align 8
  %stack_offset_value589 = load i64, i64* %stack_offset_address_value39, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value589, i64* %"lvar$4$", align 8
  %stack_offset_value591 = load i64, i64* %stack_offset_address_value41, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value591, i64* %"lvar$5$", align 8
  %stack_offset_value593 = load i64, i64* %stack_offset_address_value43, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value593, i64* %"lvar$6$", align 8
  %stack_offset_value595 = load i64, i64* %stack_offset_address_value45, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value595, i64* %"lvar$7$", align 8
  %stack_offset_value597 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value597, i64* %"lvar$8$", align 8
  %stack_offset_value599 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value599, i64* %"lvar$9$", align 8
  %stack_offset_value601 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value601, i64* %"lvar$10$", align 8
  %stack_offset_value603 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value603, i64* %"lvar$11$", align 8
  %loaded_stack_ptr_address_value604 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value605 = getelementptr i64, i64* %loaded_stack_ptr_address_value604, i64 -1
  %stack_pointer_offset_value606 = load i64, i64* %stack_pointer_offset_value605, align 8
  %148 = trunc i64 %stack_pointer_offset_value606 to i32
  call void @push_jit_object(i32 %148)
  %loaded_stack_ptr_address_value607 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value608 = getelementptr i64, i64* %loaded_stack_ptr_address_value607, i64 1
  store i64* %dec_ptr_value608, i64** %stack_ptr_address
  %149 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52667104 to i8*))
  %ifcond611 = icmp eq i64* %149, null
  br i1 %ifcond611, label %then_block, label %entry_ifend610

entry_ifend610:                                   ; preds = %entry_ifend577
  %lvar612 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar612, i64* %lvar, align 8
  %lvar614 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value7, align 8
  store i64 %lvar614, i64* %lvar_offset_value7, align 8
  %lvar616 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value9, align 8
  store i64 %lvar616, i64* %lvar_offset_value9, align 8
  %lvar618 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar618, i64* %lvar_offset_value11, align 8
  %lvar620 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar620, i64* %lvar_offset_value13, align 8
  %lvar622 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar622, i64* %lvar_offset_value15, align 8
  %lvar624 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar624, i64* %lvar_offset_value17, align 8
  %lvar626 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar626, i64* %lvar_offset_value19, align 8
  %lvar628 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar628, i64* %lvar_offset_value21, align 8
  %lvar630 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar630, i64* %lvar_offset_value23, align 8
  %lvar632 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar632, i64* %lvar_offset_value25, align 8
  %lvar634 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar634, i64* %lvar_offset_value27, align 8
  %loaded_stack_ptr_address_value636 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value636, align 8
  store i64 %stack_pointer_offset_value606, i64* %loaded_stack_ptr_address_value636, align 8
  %loaded_stack_ptr_address_value637 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value638 = getelementptr i64, i64* %loaded_stack_ptr_address_value637, i64 1
  store i64* %inc_ptr_value638, i64** %stack_ptr_address
  %150 = call i32 @call_invoke_method(i64* %149, i32 10, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond639 = icmp ne i32 %150, 1
  br i1 %ifcond639, label %then_block640, label %entry_ifend641

then_block640:                                    ; preds = %entry_ifend610
  %151 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend641:                                   ; preds = %entry_ifend610
  %stack_offset_value645 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value645, i64* %"lvar$0$", align 8
  %stack_offset_value647 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value647, i64* %"lvar$1$", align 8
  %stack_offset_value649 = load i64, i64* %stack_offset_address_value35, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value649, i64* %"lvar$2$", align 8
  %stack_offset_value651 = load i64, i64* %stack_offset_address_value37, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value651, i64* %"lvar$3$", align 8
  %stack_offset_value653 = load i64, i64* %stack_offset_address_value39, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value653, i64* %"lvar$4$", align 8
  %stack_offset_value655 = load i64, i64* %stack_offset_address_value41, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value655, i64* %"lvar$5$", align 8
  %stack_offset_value657 = load i64, i64* %stack_offset_address_value43, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value657, i64* %"lvar$6$", align 8
  %stack_offset_value659 = load i64, i64* %stack_offset_address_value45, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value659, i64* %"lvar$7$", align 8
  %stack_offset_value661 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value661, i64* %"lvar$8$", align 8
  %stack_offset_value663 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value663, i64* %"lvar$9$", align 8
  %stack_offset_value665 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value665, i64* %"lvar$10$", align 8
  %stack_offset_value667 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value667, i64* %"lvar$11$", align 8
  %loaded_stack_ptr_address_value668 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value669 = getelementptr i64, i64* %loaded_stack_ptr_address_value668, i64 -1
  %stack_pointer_offset_value670 = load i64, i64* %stack_pointer_offset_value669, align 8
  %152 = trunc i64 %stack_pointer_offset_value670 to i32
  call void @push_jit_object(i32 %152)
  %loaded_stack_ptr_address_value671 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value672 = getelementptr i64, i64* %loaded_stack_ptr_address_value671, i64 1
  store i64* %dec_ptr_value672, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_pointer_offset_value670, i64* %"lvar$9$", align 8
  store i32 0, i32* @gSigInt
  %lvar673 = load i64, i64* %"lvar$3$"
  %153 = trunc i64 %lvar673 to i32
  %154 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52667112 to i8*))
  %ifcond677 = icmp eq i64* %154, null
  br i1 %ifcond677, label %then_block, label %entry_ifend676

entry_ifend676:                                   ; preds = %entry_ifend641
  %lvar678 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar678, i64* %lvar, align 8
  %lvar680 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value7, align 8
  store i64 %lvar680, i64* %lvar_offset_value7, align 8
  %lvar682 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value9, align 8
  store i64 %lvar682, i64* %lvar_offset_value9, align 8
  %lvar684 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar684, i64* %lvar_offset_value11, align 8
  %lvar686 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar686, i64* %lvar_offset_value13, align 8
  %lvar688 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar688, i64* %lvar_offset_value15, align 8
  %lvar690 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar690, i64* %lvar_offset_value17, align 8
  %lvar692 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar692, i64* %lvar_offset_value19, align 8
  %lvar694 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar694, i64* %lvar_offset_value21, align 8
  %lvar696 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar696, i64* %lvar_offset_value23, align 8
  %lvar698 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar698, i64* %lvar_offset_value25, align 8
  %lvar700 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar700, i64* %lvar_offset_value27, align 8
  %loaded_stack_ptr_address_value702 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value702, align 8
  %155 = zext i32 %153 to i64
  store i64 %155, i64* %loaded_stack_ptr_address_value702, align 8
  %loaded_stack_ptr_address_value703 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value704 = getelementptr i64, i64* %loaded_stack_ptr_address_value703, i64 1
  store i64* %inc_ptr_value704, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value704, align 8
  %156 = zext i32 %152 to i64
  store i64 %156, i64* %inc_ptr_value704, align 8
  %loaded_stack_ptr_address_value706 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value707 = getelementptr i64, i64* %loaded_stack_ptr_address_value706, i64 1
  store i64* %inc_ptr_value707, i64** %stack_ptr_address
  %157 = call i32 @call_invoke_method(i64* %154, i32 7, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond708 = icmp ne i32 %157, 1
  br i1 %ifcond708, label %then_block709, label %entry_ifend710

then_block709:                                    ; preds = %entry_ifend676
  %158 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend710:                                   ; preds = %entry_ifend676
  %stack_offset_value714 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value714, i64* %"lvar$0$", align 8
  %stack_offset_value716 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value716, i64* %"lvar$1$", align 8
  %stack_offset_value718 = load i64, i64* %stack_offset_address_value35, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value718, i64* %"lvar$2$", align 8
  %stack_offset_value720 = load i64, i64* %stack_offset_address_value37, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value720, i64* %"lvar$3$", align 8
  %stack_offset_value722 = load i64, i64* %stack_offset_address_value39, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value722, i64* %"lvar$4$", align 8
  %stack_offset_value724 = load i64, i64* %stack_offset_address_value41, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value724, i64* %"lvar$5$", align 8
  %stack_offset_value726 = load i64, i64* %stack_offset_address_value43, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value726, i64* %"lvar$6$", align 8
  %stack_offset_value728 = load i64, i64* %stack_offset_address_value45, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value728, i64* %"lvar$7$", align 8
  %stack_offset_value730 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value730, i64* %"lvar$8$", align 8
  %stack_offset_value732 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value732, i64* %"lvar$9$", align 8
  %stack_offset_value734 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value734, i64* %"lvar$10$", align 8
  %stack_offset_value736 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value736, i64* %"lvar$11$", align 8
  %loaded_stack_ptr_address_value737 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value738 = getelementptr i64, i64* %loaded_stack_ptr_address_value737, i64 -1
  %stack_pointer_offset_value739 = load i64, i64* %stack_pointer_offset_value738, align 8
  %159 = trunc i64 %stack_pointer_offset_value739 to i32
  call void @push_jit_object(i32 %159)
  %loaded_stack_ptr_address_value740 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value741 = getelementptr i64, i64* %loaded_stack_ptr_address_value740, i64 1
  store i64* %dec_ptr_value741, i64** %stack_ptr_address
  store i32 0, i32* @gSigInt
  %lvar742 = load i64, i64* %"lvar$4$"
  %160 = trunc i64 %lvar742 to i32
  %lvar743 = load i64, i64* %"lvar$7$"
  %161 = trunc i64 %lvar743 to i32
  %162 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %161, i32 1)
  %163 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %162, i32 0, i32 0
  %164 = load i64, i64* %163, align 4
  %165 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %162, i32 0, i32 1
  %166 = load i32, i32* %165, align 4
  %ifcond746 = icmp eq i32 %166, 0
  br i1 %ifcond746, label %then_block, label %entry_ifend745

entry_ifend745:                                   ; preds = %entry_ifend710
  %167 = trunc i64 %164 to i32
  %168 = call %clvalue_and_bool_struct* @load_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %167, i32 0)
  %169 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %168, i32 0, i32 0
  %170 = load i64, i64* %169, align 4
  %171 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %168, i32 0, i32 1
  %172 = load i32, i32* %171, align 4
  %ifcond749 = icmp eq i32 %172, 0
  br i1 %ifcond749, label %then_block, label %entry_ifend748

entry_ifend748:                                   ; preds = %entry_ifend745
  %173 = trunc i64 %170 to i32
  %eqtmpx750 = icmp eq i32 %160, %173
  store i32 0, i32* @gSigInt
  br i1 %eqtmpx750, label %entry_condend752, label %label_elsezzzs

entry_condend752:                                 ; preds = %entry_ifend748
  %lvar754 = load i64, i64* %"lvar$4$"
  %174 = trunc i64 %lvar754 to i32
  %addtmp755 = add nuw i32 %174, 1
  store i64 0, i64* %"lvar$4$"
  %175 = zext i32 %addtmp755 to i64
  store i64 %175, i64* %"lvar$4$", align 8
  br label %label_if_endzzzs

label_elsezzzs:                                   ; preds = %entry_ifend748
  %lvar758 = load i64, i64* %"lvar$7$"
  %176 = trunc i64 %lvar758 to i32
  %177 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %176, i32 1)
  %178 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %177, i32 0, i32 0
  %179 = load i64, i64* %178, align 4
  %180 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %177, i32 0, i32 1
  %181 = load i32, i32* %180, align 4
  %ifcond761 = icmp eq i32 %181, 0
  br i1 %ifcond761, label %then_block, label %entry_ifend760

label_if_endzzzs:                                 ; preds = %entry_ifend763, %entry_condend752
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$10$"
  store i64 1, i64* %"lvar$10$", align 8
  br label %for_start_pointzzzt

entry_ifend760:                                   ; preds = %label_elsezzzs
  %182 = trunc i64 %179 to i32
  %183 = call %clvalue_and_bool_struct* @load_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %182, i32 0)
  %184 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %183, i32 0, i32 0
  %185 = load i64, i64* %184, align 4
  %186 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %183, i32 0, i32 1
  %187 = load i32, i32* %186, align 4
  %ifcond764 = icmp eq i32 %187, 0
  br i1 %ifcond764, label %then_block, label %entry_ifend763

entry_ifend763:                                   ; preds = %entry_ifend760
  %188 = trunc i64 %185 to i32
  store i64 0, i64* %"lvar$4$"
  %189 = zext i32 %188 to i64
  store i64 %189, i64* %"lvar$4$", align 8
  br label %label_if_endzzzs

for_start_pointzzzt:                              ; preds = %entry_ifend959, %label_if_endzzzs
  %lvar766 = phi i64 [ %240, %entry_ifend959 ], [ 1, %label_if_endzzzs ]
  %190 = trunc i64 %lvar766 to i32
  %lvar767 = load i64, i64* %"lvar$8$"
  %191 = trunc i64 %lvar767 to i32
  %letmp = icmp slt i32 %190, %191
  br i1 %letmp, label %entry_condend769, label %entry_condend

entry_condend769:                                 ; preds = %for_start_pointzzzt
  store i32 0, i32* @gSigInt
  %lvar771 = load i64, i64* %"lvar$5$"
  %192 = trunc i64 %lvar771 to i32
  %lvar772 = load i64, i64* %"lvar$7$"
  %193 = trunc i64 %lvar772 to i32
  %194 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %193, i32 0)
  %195 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %194, i32 0, i32 0
  %196 = load i64, i64* %195, align 4
  %197 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %194, i32 0, i32 1
  %198 = load i32, i32* %197, align 4
  %ifcond775 = icmp eq i32 %198, 0
  br i1 %ifcond775, label %then_block, label %entry_ifend774

entry_ifend774:                                   ; preds = %entry_condend769
  %199 = trunc i64 %196 to i32
  %lvar776 = load i64, i64* %"lvar$10$"
  %200 = trunc i64 %lvar776 to i32
  %201 = call %clvalue_and_bool_struct* @load_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %199, i32 %200)
  %202 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %201, i32 0, i32 0
  %203 = load i64, i64* %202, align 4
  %204 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %201, i32 0, i32 1
  %205 = load i32, i32* %204, align 4
  %ifcond779 = icmp eq i32 %205, 0
  br i1 %ifcond779, label %then_block, label %entry_ifend778

entry_ifend778:                                   ; preds = %entry_ifend774
  %206 = trunc i64 %203 to i32
  %lvar780 = load i64, i64* %"lvar$7$"
  %207 = trunc i64 %lvar780 to i32
  %208 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %207, i32 1)
  %209 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %208, i32 0, i32 0
  %210 = load i64, i64* %209, align 4
  %211 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %208, i32 0, i32 1
  %212 = load i32, i32* %211, align 4
  %ifcond783 = icmp eq i32 %212, 0
  br i1 %ifcond783, label %then_block, label %entry_ifend782

entry_ifend782:                                   ; preds = %entry_ifend778
  %213 = trunc i64 %210 to i32
  %lvar784 = load i64, i64* %"lvar$10$"
  %214 = trunc i64 %lvar784 to i32
  %215 = call %clvalue_and_bool_struct* @load_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %213, i32 %214)
  %216 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %215, i32 0, i32 0
  %217 = load i64, i64* %216, align 4
  %218 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %215, i32 0, i32 1
  %219 = load i32, i32* %218, align 4
  %ifcond787 = icmp eq i32 %219, 0
  br i1 %ifcond787, label %then_block, label %entry_ifend786

entry_ifend786:                                   ; preds = %entry_ifend782
  %220 = trunc i64 %217 to i32
  %221 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52667260 to i8*))
  %ifcond790 = icmp eq i64* %221, null
  br i1 %ifcond790, label %then_block, label %entry_ifend789

entry_ifend789:                                   ; preds = %entry_ifend786
  %lvar791 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar791, i64* %lvar, align 8
  %lvar793 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value7, align 8
  store i64 %lvar793, i64* %lvar_offset_value7, align 8
  %lvar795 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value9, align 8
  store i64 %lvar795, i64* %lvar_offset_value9, align 8
  %lvar797 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar797, i64* %lvar_offset_value11, align 8
  %lvar799 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar799, i64* %lvar_offset_value13, align 8
  %lvar801 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar801, i64* %lvar_offset_value15, align 8
  %lvar803 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar803, i64* %lvar_offset_value17, align 8
  %lvar805 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar805, i64* %lvar_offset_value19, align 8
  %lvar807 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar807, i64* %lvar_offset_value21, align 8
  %lvar809 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar809, i64* %lvar_offset_value23, align 8
  %lvar811 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar811, i64* %lvar_offset_value25, align 8
  %lvar813 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar813, i64* %lvar_offset_value27, align 8
  %loaded_stack_ptr_address_value815 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value815, align 8
  %222 = zext i32 %192 to i64
  store i64 %222, i64* %loaded_stack_ptr_address_value815, align 8
  %loaded_stack_ptr_address_value816 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value817 = getelementptr i64, i64* %loaded_stack_ptr_address_value816, i64 1
  store i64* %inc_ptr_value817, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value817, align 8
  %223 = zext i32 %206 to i64
  store i64 %223, i64* %inc_ptr_value817, align 8
  %loaded_stack_ptr_address_value819 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value820 = getelementptr i64, i64* %loaded_stack_ptr_address_value819, i64 1
  store i64* %inc_ptr_value820, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value820, align 8
  %224 = zext i32 %220 to i64
  store i64 %224, i64* %inc_ptr_value820, align 8
  %loaded_stack_ptr_address_value822 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value823 = getelementptr i64, i64* %loaded_stack_ptr_address_value822, i64 1
  store i64* %inc_ptr_value823, i64** %stack_ptr_address
  %225 = call i32 @call_invoke_method(i64* %221, i32 11, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond824 = icmp ne i32 %225, 1
  br i1 %ifcond824, label %then_block825, label %entry_ifend826

then_block825:                                    ; preds = %entry_ifend789
  %226 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend826:                                   ; preds = %entry_ifend789
  %stack_offset_value830 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value830, i64* %"lvar$0$", align 8
  %stack_offset_value832 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value832, i64* %"lvar$1$", align 8
  %stack_offset_value834 = load i64, i64* %stack_offset_address_value35, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value834, i64* %"lvar$2$", align 8
  %stack_offset_value836 = load i64, i64* %stack_offset_address_value37, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value836, i64* %"lvar$3$", align 8
  %stack_offset_value838 = load i64, i64* %stack_offset_address_value39, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value838, i64* %"lvar$4$", align 8
  %stack_offset_value840 = load i64, i64* %stack_offset_address_value41, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value840, i64* %"lvar$5$", align 8
  %stack_offset_value842 = load i64, i64* %stack_offset_address_value43, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value842, i64* %"lvar$6$", align 8
  %stack_offset_value844 = load i64, i64* %stack_offset_address_value45, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value844, i64* %"lvar$7$", align 8
  %stack_offset_value846 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value846, i64* %"lvar$8$", align 8
  %stack_offset_value848 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value848, i64* %"lvar$9$", align 8
  %stack_offset_value850 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value850, i64* %"lvar$10$", align 8
  %stack_offset_value852 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value852, i64* %"lvar$11$", align 8
  %loaded_stack_ptr_address_value853 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value854 = getelementptr i64, i64* %loaded_stack_ptr_address_value853, i64 -1
  %stack_pointer_offset_value855 = load i64, i64* %stack_pointer_offset_value854, align 8
  %227 = trunc i64 %stack_pointer_offset_value855 to i32
  call void @push_jit_object(i32 %227)
  %loaded_stack_ptr_address_value856 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value857 = getelementptr i64, i64* %loaded_stack_ptr_address_value856, i64 1
  store i64* %dec_ptr_value857, i64** %stack_ptr_address
  %228 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52667268 to i8*))
  %ifcond860 = icmp eq i64* %228, null
  br i1 %ifcond860, label %then_block, label %entry_ifend859

entry_ifend859:                                   ; preds = %entry_ifend826
  %lvar861 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar861, i64* %lvar, align 8
  %lvar863 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value7, align 8
  store i64 %lvar863, i64* %lvar_offset_value7, align 8
  %lvar865 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value9, align 8
  store i64 %lvar865, i64* %lvar_offset_value9, align 8
  %lvar867 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar867, i64* %lvar_offset_value11, align 8
  %lvar869 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar869, i64* %lvar_offset_value13, align 8
  %lvar871 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar871, i64* %lvar_offset_value15, align 8
  %lvar873 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar873, i64* %lvar_offset_value17, align 8
  %lvar875 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar875, i64* %lvar_offset_value19, align 8
  %lvar877 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar877, i64* %lvar_offset_value21, align 8
  %lvar879 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar879, i64* %lvar_offset_value23, align 8
  %lvar881 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar881, i64* %lvar_offset_value25, align 8
  %lvar883 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar883, i64* %lvar_offset_value27, align 8
  %loaded_stack_ptr_address_value885 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value885, align 8
  store i64 %stack_pointer_offset_value855, i64* %loaded_stack_ptr_address_value885, align 8
  %loaded_stack_ptr_address_value886 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value887 = getelementptr i64, i64* %loaded_stack_ptr_address_value886, i64 1
  store i64* %inc_ptr_value887, i64** %stack_ptr_address
  %229 = call i32 @call_invoke_method(i64* %228, i32 10, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond888 = icmp ne i32 %229, 1
  br i1 %ifcond888, label %then_block889, label %entry_ifend890

then_block889:                                    ; preds = %entry_ifend859
  %230 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend890:                                   ; preds = %entry_ifend859
  %stack_offset_value894 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value894, i64* %"lvar$0$", align 8
  %stack_offset_value896 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value896, i64* %"lvar$1$", align 8
  %stack_offset_value898 = load i64, i64* %stack_offset_address_value35, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value898, i64* %"lvar$2$", align 8
  %stack_offset_value900 = load i64, i64* %stack_offset_address_value37, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value900, i64* %"lvar$3$", align 8
  %stack_offset_value902 = load i64, i64* %stack_offset_address_value39, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value902, i64* %"lvar$4$", align 8
  %stack_offset_value904 = load i64, i64* %stack_offset_address_value41, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value904, i64* %"lvar$5$", align 8
  %stack_offset_value906 = load i64, i64* %stack_offset_address_value43, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value906, i64* %"lvar$6$", align 8
  %stack_offset_value908 = load i64, i64* %stack_offset_address_value45, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value908, i64* %"lvar$7$", align 8
  %stack_offset_value910 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value910, i64* %"lvar$8$", align 8
  %stack_offset_value912 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value912, i64* %"lvar$9$", align 8
  %stack_offset_value914 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value914, i64* %"lvar$10$", align 8
  %stack_offset_value916 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value916, i64* %"lvar$11$", align 8
  %loaded_stack_ptr_address_value917 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value918 = getelementptr i64, i64* %loaded_stack_ptr_address_value917, i64 -1
  %stack_pointer_offset_value919 = load i64, i64* %stack_pointer_offset_value918, align 8
  %231 = trunc i64 %stack_pointer_offset_value919 to i32
  call void @push_jit_object(i32 %231)
  %loaded_stack_ptr_address_value920 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value921 = getelementptr i64, i64* %loaded_stack_ptr_address_value920, i64 1
  store i64* %dec_ptr_value921, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_pointer_offset_value919, i64* %"lvar$11$", align 8
  store i32 0, i32* @gSigInt
  %lvar922 = load i64, i64* %"lvar$3$"
  %232 = trunc i64 %lvar922 to i32
  %233 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52667276 to i8*))
  %ifcond926 = icmp eq i64* %233, null
  br i1 %ifcond926, label %then_block, label %entry_ifend925

entry_ifend925:                                   ; preds = %entry_ifend890
  %lvar927 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar927, i64* %lvar, align 8
  %lvar929 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value7, align 8
  store i64 %lvar929, i64* %lvar_offset_value7, align 8
  %lvar931 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value9, align 8
  store i64 %lvar931, i64* %lvar_offset_value9, align 8
  %lvar933 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar933, i64* %lvar_offset_value11, align 8
  %lvar935 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar935, i64* %lvar_offset_value13, align 8
  %lvar937 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar937, i64* %lvar_offset_value15, align 8
  %lvar939 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar939, i64* %lvar_offset_value17, align 8
  %lvar941 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar941, i64* %lvar_offset_value19, align 8
  %lvar943 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar943, i64* %lvar_offset_value21, align 8
  %lvar945 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar945, i64* %lvar_offset_value23, align 8
  %lvar947 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar947, i64* %lvar_offset_value25, align 8
  %lvar949 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar949, i64* %lvar_offset_value27, align 8
  %loaded_stack_ptr_address_value951 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value951, align 8
  %234 = zext i32 %232 to i64
  store i64 %234, i64* %loaded_stack_ptr_address_value951, align 8
  %loaded_stack_ptr_address_value952 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value953 = getelementptr i64, i64* %loaded_stack_ptr_address_value952, i64 1
  store i64* %inc_ptr_value953, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value953, align 8
  %235 = zext i32 %231 to i64
  store i64 %235, i64* %inc_ptr_value953, align 8
  %loaded_stack_ptr_address_value955 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value956 = getelementptr i64, i64* %loaded_stack_ptr_address_value955, i64 1
  store i64* %inc_ptr_value956, i64** %stack_ptr_address
  %236 = call i32 @call_invoke_method(i64* %233, i32 7, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond957 = icmp ne i32 %236, 1
  br i1 %ifcond957, label %then_block958, label %entry_ifend959

then_block958:                                    ; preds = %entry_ifend925
  %237 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend959:                                   ; preds = %entry_ifend925
  %stack_offset_value963 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value963, i64* %"lvar$0$", align 8
  %stack_offset_value965 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value965, i64* %"lvar$1$", align 8
  %stack_offset_value967 = load i64, i64* %stack_offset_address_value35, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value967, i64* %"lvar$2$", align 8
  %stack_offset_value969 = load i64, i64* %stack_offset_address_value37, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value969, i64* %"lvar$3$", align 8
  %stack_offset_value971 = load i64, i64* %stack_offset_address_value39, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value971, i64* %"lvar$4$", align 8
  %stack_offset_value973 = load i64, i64* %stack_offset_address_value41, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value973, i64* %"lvar$5$", align 8
  %stack_offset_value975 = load i64, i64* %stack_offset_address_value43, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value975, i64* %"lvar$6$", align 8
  %stack_offset_value977 = load i64, i64* %stack_offset_address_value45, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value977, i64* %"lvar$7$", align 8
  %stack_offset_value979 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value979, i64* %"lvar$8$", align 8
  %stack_offset_value981 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value981, i64* %"lvar$9$", align 8
  %stack_offset_value983 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value983, i64* %"lvar$10$", align 8
  %stack_offset_value985 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value985, i64* %"lvar$11$", align 8
  %loaded_stack_ptr_address_value986 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value987 = getelementptr i64, i64* %loaded_stack_ptr_address_value986, i64 -1
  %stack_pointer_offset_value988 = load i64, i64* %stack_pointer_offset_value987, align 8
  %238 = trunc i64 %stack_pointer_offset_value988 to i32
  call void @push_jit_object(i32 %238)
  %loaded_stack_ptr_address_value989 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value990 = getelementptr i64, i64* %loaded_stack_ptr_address_value989, i64 1
  store i64* %dec_ptr_value990, i64** %stack_ptr_address
  %lvar991 = load i64, i64* %"lvar$10$"
  %239 = trunc i64 %lvar991 to i32
  %addtmp992 = add nuw i32 %239, 1
  store i64 0, i64* %"lvar$10$"
  %240 = zext i32 %addtmp992 to i64
  store i64 %240, i64* %"lvar$10$", align 8
  br label %for_start_pointzzzt
}

define i32 @"JITTest.groupName()$$224"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$2$" = alloca i64
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i64 0, i64* %"lvar$2$"
  store i64 0, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52667484 to i8*))
  %ifcond = icmp eq i64* %0, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %then_block126, %then_block95, %then_block64, %then_block36, %entry_ifend96, %entry_ifend65, %entry_ifend37, %entry_ifend15, %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %1 = call i32 @create_object(i64* %0)
  call void @push_jit_object(i32 %1)
  %2 = call i32 @create_string_object(i8* inttoptr (i64 52667492 to i8*))
  call void @push_jit_object(i32 %2)
  %3 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52667500 to i8*))
  %ifcond3 = icmp eq i64* %3, null
  br i1 %ifcond3, label %then_block, label %entry_ifend2

entry_ifend2:                                     ; preds = %entry_ifend
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value6 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value6, align 8
  store i64 0, i64* %lvar_offset_value6, align 8
  %lvar_offset_value8 = getelementptr i64, i64* %lvar, i64 2
  store i64 0, i64* %lvar_offset_value8, align 8
  store i64 0, i64* %lvar_offset_value8, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %4 = zext i32 %1 to i64
  store i64 %4, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value9 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value9, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  %5 = zext i32 %2 to i64
  store i64 %5, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value11 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value12 = getelementptr i64, i64* %loaded_stack_ptr_address_value11, i64 1
  store i64* %inc_ptr_value12, i64** %stack_ptr_address
  %6 = call i32 @call_invoke_method(i64* %3, i32 1, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond13 = icmp ne i32 %6, 1
  br i1 %ifcond13, label %then_block14, label %entry_ifend15

then_block14:                                     ; preds = %entry_ifend2
  %7 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend15:                                    ; preds = %entry_ifend2
  %stack_offset_value16 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value16, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value17 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value17, i64* %"lvar$1$", align 8
  %stack_offset_address_value18 = getelementptr i64, i64* %stack, i64 2
  %stack_offset_value19 = load i64, i64* %stack_offset_address_value18, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value19, i64* %"lvar$2$", align 8
  %loaded_stack_ptr_address_value20 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value20, i64 -1
  %stack_pointer_offset_value21 = load i64, i64* %stack_pointer_offset_value, align 8
  %8 = trunc i64 %stack_pointer_offset_value21 to i32
  call void @push_jit_object(i32 %8)
  %loaded_stack_ptr_address_value22 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value22, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_pointer_offset_value21, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %9 = call i32 @create_string_object(i8* inttoptr (i64 52667508 to i8*))
  call void @push_jit_object(i32 %9)
  store i64 0, i64* %"lvar$2$"
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  %11 = call i32 @create_path_object(i8* inttoptr (i64 52667512 to i8*))
  call void @push_jit_object(i32 %11)
  %12 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52667524 to i8*))
  %ifcond25 = icmp eq i64* %12, null
  br i1 %ifcond25, label %then_block, label %entry_ifend24

entry_ifend24:                                    ; preds = %entry_ifend15
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value16, i64* %lvar, align 8
  store i64 0, i64* %lvar_offset_value6, align 8
  store i64 %stack_pointer_offset_value21, i64* %lvar_offset_value6, align 8
  store i64 0, i64* %lvar_offset_value8, align 8
  store i64 %10, i64* %lvar_offset_value8, align 8
  %loaded_stack_ptr_address_value32 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value32, align 8
  %13 = zext i32 %11 to i64
  store i64 %13, i64* %loaded_stack_ptr_address_value32, align 8
  %loaded_stack_ptr_address_value33 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value34 = getelementptr i64, i64* %loaded_stack_ptr_address_value33, i64 1
  store i64* %inc_ptr_value34, i64** %stack_ptr_address
  %14 = call i32 @call_invoke_method(i64* %12, i32 9, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond35 = icmp ne i32 %14, 1
  br i1 %ifcond35, label %then_block36, label %entry_ifend37

then_block36:                                     ; preds = %entry_ifend24
  %15 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend37:                                    ; preds = %entry_ifend24
  %stack_offset_value41 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value41, i64* %"lvar$0$", align 8
  %stack_offset_value43 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value43, i64* %"lvar$1$", align 8
  %stack_offset_value45 = load i64, i64* %stack_offset_address_value18, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value45, i64* %"lvar$2$", align 8
  %loaded_stack_ptr_address_value46 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value47 = getelementptr i64, i64* %loaded_stack_ptr_address_value46, i64 -1
  %stack_pointer_offset_value48 = load i64, i64* %stack_pointer_offset_value47, align 8
  %16 = trunc i64 %stack_pointer_offset_value48 to i32
  call void @push_jit_object(i32 %16)
  %loaded_stack_ptr_address_value49 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value50 = getelementptr i64, i64* %loaded_stack_ptr_address_value49, i64 1
  store i64* %dec_ptr_value50, i64** %stack_ptr_address
  %17 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52667532 to i8*))
  %ifcond53 = icmp eq i64* %17, null
  br i1 %ifcond53, label %then_block, label %entry_ifend52

entry_ifend52:                                    ; preds = %entry_ifend37
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value41, i64* %lvar, align 8
  store i64 0, i64* %lvar_offset_value6, align 8
  store i64 %stack_offset_value43, i64* %lvar_offset_value6, align 8
  store i64 0, i64* %lvar_offset_value8, align 8
  store i64 %stack_offset_value45, i64* %lvar_offset_value8, align 8
  %loaded_stack_ptr_address_value60 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value60, align 8
  store i64 %stack_pointer_offset_value48, i64* %loaded_stack_ptr_address_value60, align 8
  %loaded_stack_ptr_address_value61 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value62 = getelementptr i64, i64* %loaded_stack_ptr_address_value61, i64 1
  store i64* %inc_ptr_value62, i64** %stack_ptr_address
  %18 = call i32 @call_invoke_method(i64* %17, i32 10, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond63 = icmp ne i32 %18, 1
  br i1 %ifcond63, label %then_block64, label %entry_ifend65

then_block64:                                     ; preds = %entry_ifend52
  %19 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend65:                                    ; preds = %entry_ifend52
  %stack_offset_value69 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value69, i64* %"lvar$0$", align 8
  %stack_offset_value71 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value71, i64* %"lvar$1$", align 8
  %stack_offset_value73 = load i64, i64* %stack_offset_address_value18, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value73, i64* %"lvar$2$", align 8
  %loaded_stack_ptr_address_value74 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value75 = getelementptr i64, i64* %loaded_stack_ptr_address_value74, i64 -1
  %stack_pointer_offset_value76 = load i64, i64* %stack_pointer_offset_value75, align 8
  %20 = trunc i64 %stack_pointer_offset_value76 to i32
  call void @push_jit_object(i32 %20)
  %loaded_stack_ptr_address_value77 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value78 = getelementptr i64, i64* %loaded_stack_ptr_address_value77, i64 1
  store i64* %dec_ptr_value78, i64** %stack_ptr_address
  %21 = call i32 @create_regex_object(i8* inttoptr (i64 52667540 to i8*), i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0)
  call void @push_jit_object(i32 %21)
  %22 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52667544 to i8*))
  %ifcond81 = icmp eq i64* %22, null
  br i1 %ifcond81, label %then_block, label %entry_ifend80

entry_ifend80:                                    ; preds = %entry_ifend65
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value69, i64* %lvar, align 8
  store i64 0, i64* %lvar_offset_value6, align 8
  store i64 %stack_offset_value71, i64* %lvar_offset_value6, align 8
  store i64 0, i64* %lvar_offset_value8, align 8
  store i64 %stack_offset_value73, i64* %lvar_offset_value8, align 8
  %loaded_stack_ptr_address_value88 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value88, align 8
  store i64 %stack_pointer_offset_value76, i64* %loaded_stack_ptr_address_value88, align 8
  %loaded_stack_ptr_address_value89 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value90 = getelementptr i64, i64* %loaded_stack_ptr_address_value89, i64 1
  store i64* %inc_ptr_value90, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value90, align 8
  %23 = zext i32 %21 to i64
  store i64 %23, i64* %inc_ptr_value90, align 8
  %loaded_stack_ptr_address_value92 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value93 = getelementptr i64, i64* %loaded_stack_ptr_address_value92, i64 1
  store i64* %inc_ptr_value93, i64** %stack_ptr_address
  %24 = call i32 @call_invoke_method(i64* %22, i32 30, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond94 = icmp ne i32 %24, 1
  br i1 %ifcond94, label %then_block95, label %entry_ifend96

then_block95:                                     ; preds = %entry_ifend80
  %25 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend96:                                    ; preds = %entry_ifend80
  %stack_offset_value100 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value100, i64* %"lvar$0$", align 8
  %stack_offset_value102 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value102, i64* %"lvar$1$", align 8
  %stack_offset_value104 = load i64, i64* %stack_offset_address_value18, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value104, i64* %"lvar$2$", align 8
  %loaded_stack_ptr_address_value105 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value106 = getelementptr i64, i64* %loaded_stack_ptr_address_value105, i64 -1
  %stack_pointer_offset_value107 = load i64, i64* %stack_pointer_offset_value106, align 8
  %26 = trunc i64 %stack_pointer_offset_value107 to i32
  call void @push_jit_object(i32 %26)
  %loaded_stack_ptr_address_value108 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value109 = getelementptr i64, i64* %loaded_stack_ptr_address_value108, i64 1
  store i64* %dec_ptr_value109, i64** %stack_ptr_address
  %27 = call i32 @run_create_block_object(i64** %stack_ptr_address, i64* %stack, i64* %constant, i32 23312, i32 264, i32 23576, i32 117, i32 2, i32 3, i32 0, i64* %info)
  call void @push_jit_object(i32 %27)
  %28 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52667936 to i8*))
  %ifcond112 = icmp eq i64* %28, null
  br i1 %ifcond112, label %then_block, label %entry_ifend111

entry_ifend111:                                   ; preds = %entry_ifend96
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value100, i64* %lvar, align 8
  store i64 0, i64* %lvar_offset_value6, align 8
  store i64 %stack_offset_value102, i64* %lvar_offset_value6, align 8
  store i64 0, i64* %lvar_offset_value8, align 8
  store i64 %stack_offset_value104, i64* %lvar_offset_value8, align 8
  %loaded_stack_ptr_address_value119 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value119, align 8
  store i64 %stack_pointer_offset_value107, i64* %loaded_stack_ptr_address_value119, align 8
  %loaded_stack_ptr_address_value120 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value121 = getelementptr i64, i64* %loaded_stack_ptr_address_value120, i64 1
  store i64* %inc_ptr_value121, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value121, align 8
  %29 = zext i32 %27 to i64
  store i64 %29, i64* %inc_ptr_value121, align 8
  %loaded_stack_ptr_address_value123 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value124 = getelementptr i64, i64* %loaded_stack_ptr_address_value123, i64 1
  store i64* %inc_ptr_value124, i64** %stack_ptr_address
  %30 = call i32 @call_invoke_method(i64* %28, i32 13, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond125 = icmp ne i32 %30, 1
  br i1 %ifcond125, label %then_block126, label %entry_ifend127

then_block126:                                    ; preds = %entry_ifend111
  %31 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend127:                                   ; preds = %entry_ifend111
  %stack_offset_value131 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value131, i64* %"lvar$0$", align 8
  %stack_offset_value133 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value133, i64* %"lvar$1$", align 8
  %stack_offset_value135 = load i64, i64* %stack_offset_address_value18, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value135, i64* %"lvar$2$", align 8
  %loaded_stack_ptr_address_value136 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value137 = getelementptr i64, i64* %loaded_stack_ptr_address_value136, i64 -1
  %stack_pointer_offset_value138 = load i64, i64* %stack_pointer_offset_value137, align 8
  %32 = trunc i64 %stack_pointer_offset_value138 to i32
  call void @push_jit_object(i32 %32)
  %loaded_stack_ptr_address_value139 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value140 = getelementptr i64, i64* %loaded_stack_ptr_address_value139, i64 1
  store i64* %dec_ptr_value140, i64** %stack_ptr_address
  store i32 0, i32* @gSigInt
  %33 = trunc i64 %stack_offset_value135 to i32
  %34 = zext i32 %33 to i64
  store i64 %34, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.sub(regex,String,EqualableList)$$225"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %VALUE_FOR_ANDAND_OROR315 = alloca i64
  %VALUE_FOR_ANDAND_OROR = alloca i64
  %"lvar$13$" = alloca i64
  %"lvar$12$" = alloca i64
  %"lvar$11$" = alloca i64
  %"lvar$10$" = alloca i64
  %"lvar$9$" = alloca i64
  %"lvar$8$" = alloca i64
  %"lvar$7$" = alloca i64
  %"lvar$6$" = alloca i64
  %"lvar$5$" = alloca i64
  %"lvar$4$" = alloca i64
  %"lvar$3$" = alloca i64
  %"lvar$2$" = alloca i64
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value1 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value1, i64* %"lvar$1$", align 8
  %stack_offset_address_value2 = getelementptr i64, i64* %stack, i64 2
  %stack_offset_value3 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value3, i64* %"lvar$2$", align 8
  %stack_offset_address_value4 = getelementptr i64, i64* %stack, i64 3
  %stack_offset_value5 = load i64, i64* %stack_offset_address_value4, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value5, i64* %"lvar$3$", align 8
  store i64 0, i64* %"lvar$4$"
  store i64 0, i64* %"lvar$4$", align 8
  store i64 0, i64* %"lvar$5$"
  store i64 0, i64* %"lvar$5$", align 8
  store i64 0, i64* %"lvar$6$"
  store i64 0, i64* %"lvar$6$", align 8
  store i64 0, i64* %"lvar$7$"
  store i64 0, i64* %"lvar$7$", align 8
  store i64 0, i64* %"lvar$8$"
  store i64 0, i64* %"lvar$8$", align 8
  store i64 0, i64* %"lvar$9$"
  store i64 0, i64* %"lvar$9$", align 8
  store i64 0, i64* %"lvar$10$"
  store i64 0, i64* %"lvar$10$", align 8
  store i64 0, i64* %"lvar$11$"
  store i64 0, i64* %"lvar$11$", align 8
  store i64 0, i64* %"lvar$12$"
  store i64 0, i64* %"lvar$12$", align 8
  store i64 0, i64* %"lvar$13$"
  store i64 0, i64* %"lvar$13$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_string_object(i8* inttoptr (i64 52667952 to i8*))
  call void @push_jit_object(i32 %0)
  store i64 0, i64* %"lvar$4$"
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %"lvar$4$", align 8
  store i32 0, i32* @gSigInt
  %2 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52667956 to i8*))
  %ifcond = icmp eq i64* %2, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %then_block1919, %then_block1842, %then_block1770, %then_block1687, %then_block1610, %then_block1538, %then_block1449, %then_block1372, %then_block1300, %then_block1176, %then_block1099, %then_block1022, %then_block950, %then_block855, %then_block778, %then_block706, %then_block600, %then_block523, %then_block446, %then_block374, %then_block274, %then_block185, %then_block106, %entry_ifend1843, %entry_ifend1771, %label_if_elifzzzw0a, %entry_ifend1611, %entry_ifend1539, %entry_condend1493, %entry_ifend1373, %entry_ifend1301, %entry_ifend1257, %entry_ifend1253, %entry_ifend1249, %entry_ifend1245, %entry_condend1240, %entry_ifend1231, %label_elsezzzzc, %entry_ifend1216, %entry_ifend1177, %entry_ifend1100, %entry_ifend1023, %entry_ifend951, %entry_ifend907, %entry_ifend904, %entry_condend898, %entry_ifend779, %entry_ifend707, %entry_condend661, %entry_ifend653, %label_elsezzzz, %entry_ifend640, %entry_ifend601, %entry_ifend524, %entry_ifend447, %entry_ifend375, %entry_ifend331, %entry_ifend328, %entry_condend322, %entry_condend, %entry_ifend144, %entry_ifend107, %entry_ifend39, %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %3 = call i32 @create_object(i64* %2)
  call void @push_jit_object(i32 %3)
  %4 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52667964 to i8*))
  %ifcond8 = icmp eq i64* %4, null
  br i1 %ifcond8, label %then_block, label %entry_ifend7

entry_ifend7:                                     ; preds = %entry_ifend
  %lvar9 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar9, i64* %lvar, align 8
  %lvar10 = load i64, i64* %"lvar$1$"
  %lvar_offset_value11 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar10, i64* %lvar_offset_value11, align 8
  %lvar12 = load i64, i64* %"lvar$2$"
  %lvar_offset_value13 = getelementptr i64, i64* %lvar, i64 2
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar12, i64* %lvar_offset_value13, align 8
  %lvar14 = load i64, i64* %"lvar$3$"
  %lvar_offset_value15 = getelementptr i64, i64* %lvar, i64 3
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar14, i64* %lvar_offset_value15, align 8
  %lvar16 = load i64, i64* %"lvar$4$"
  %lvar_offset_value17 = getelementptr i64, i64* %lvar, i64 4
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar16, i64* %lvar_offset_value17, align 8
  %lvar18 = load i64, i64* %"lvar$5$"
  %lvar_offset_value19 = getelementptr i64, i64* %lvar, i64 5
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar18, i64* %lvar_offset_value19, align 8
  %lvar20 = load i64, i64* %"lvar$6$"
  %lvar_offset_value21 = getelementptr i64, i64* %lvar, i64 6
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar20, i64* %lvar_offset_value21, align 8
  %lvar22 = load i64, i64* %"lvar$7$"
  %lvar_offset_value23 = getelementptr i64, i64* %lvar, i64 7
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar22, i64* %lvar_offset_value23, align 8
  %lvar24 = load i64, i64* %"lvar$8$"
  %lvar_offset_value25 = getelementptr i64, i64* %lvar, i64 8
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar24, i64* %lvar_offset_value25, align 8
  %lvar26 = load i64, i64* %"lvar$9$"
  %lvar_offset_value27 = getelementptr i64, i64* %lvar, i64 9
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar26, i64* %lvar_offset_value27, align 8
  %lvar28 = load i64, i64* %"lvar$10$"
  %lvar_offset_value29 = getelementptr i64, i64* %lvar, i64 10
  store i64 0, i64* %lvar_offset_value29, align 8
  store i64 %lvar28, i64* %lvar_offset_value29, align 8
  %lvar30 = load i64, i64* %"lvar$11$"
  %lvar_offset_value31 = getelementptr i64, i64* %lvar, i64 11
  store i64 0, i64* %lvar_offset_value31, align 8
  store i64 %lvar30, i64* %lvar_offset_value31, align 8
  %lvar32 = load i64, i64* %"lvar$12$"
  %lvar_offset_value33 = getelementptr i64, i64* %lvar, i64 12
  store i64 0, i64* %lvar_offset_value33, align 8
  store i64 %lvar32, i64* %lvar_offset_value33, align 8
  %lvar34 = load i64, i64* %"lvar$13$"
  %lvar_offset_value35 = getelementptr i64, i64* %lvar, i64 13
  store i64 0, i64* %lvar_offset_value35, align 8
  store i64 %lvar34, i64* %lvar_offset_value35, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %5 = zext i32 %3 to i64
  store i64 %5, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value36 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value36, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  %6 = call i32 @call_invoke_method(i64* %4, i32 0, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond37 = icmp ne i32 %6, 1
  br i1 %ifcond37, label %then_block38, label %entry_ifend39

then_block38:                                     ; preds = %entry_ifend7
  %7 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend39:                                    ; preds = %entry_ifend7
  %stack_offset_value40 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value40, i64* %"lvar$0$", align 8
  %stack_offset_value42 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value42, i64* %"lvar$1$", align 8
  %stack_offset_value44 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value44, i64* %"lvar$2$", align 8
  %stack_offset_value46 = load i64, i64* %stack_offset_address_value4, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value46, i64* %"lvar$3$", align 8
  %stack_offset_address_value47 = getelementptr i64, i64* %stack, i64 4
  %stack_offset_value48 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value48, i64* %"lvar$4$", align 8
  %stack_offset_address_value49 = getelementptr i64, i64* %stack, i64 5
  %stack_offset_value50 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value50, i64* %"lvar$5$", align 8
  %stack_offset_address_value51 = getelementptr i64, i64* %stack, i64 6
  %stack_offset_value52 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value52, i64* %"lvar$6$", align 8
  %stack_offset_address_value53 = getelementptr i64, i64* %stack, i64 7
  %stack_offset_value54 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value54, i64* %"lvar$7$", align 8
  %stack_offset_address_value55 = getelementptr i64, i64* %stack, i64 8
  %stack_offset_value56 = load i64, i64* %stack_offset_address_value55, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value56, i64* %"lvar$8$", align 8
  %stack_offset_address_value57 = getelementptr i64, i64* %stack, i64 9
  %stack_offset_value58 = load i64, i64* %stack_offset_address_value57, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value58, i64* %"lvar$9$", align 8
  %stack_offset_address_value59 = getelementptr i64, i64* %stack, i64 10
  %stack_offset_value60 = load i64, i64* %stack_offset_address_value59, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value60, i64* %"lvar$10$", align 8
  %stack_offset_address_value61 = getelementptr i64, i64* %stack, i64 11
  %stack_offset_value62 = load i64, i64* %stack_offset_address_value61, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value62, i64* %"lvar$11$", align 8
  %stack_offset_address_value63 = getelementptr i64, i64* %stack, i64 12
  %stack_offset_value64 = load i64, i64* %stack_offset_address_value63, align 8
  store i64 0, i64* %"lvar$12$"
  store i64 %stack_offset_value64, i64* %"lvar$12$", align 8
  %stack_offset_address_value65 = getelementptr i64, i64* %stack, i64 13
  %stack_offset_value66 = load i64, i64* %stack_offset_address_value65, align 8
  store i64 0, i64* %"lvar$13$"
  store i64 %stack_offset_value66, i64* %"lvar$13$", align 8
  %loaded_stack_ptr_address_value67 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value67, i64 -1
  %stack_pointer_offset_value68 = load i64, i64* %stack_pointer_offset_value, align 8
  %8 = trunc i64 %stack_pointer_offset_value68 to i32
  call void @push_jit_object(i32 %8)
  %loaded_stack_ptr_address_value69 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value69, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_pointer_offset_value68, i64* %"lvar$5$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$6$"
  store i64 0, i64* %"lvar$6$", align 8
  store i32 0, i32* @gSigInt
  %lvar70 = load i64, i64* %"lvar$4$"
  %9 = trunc i64 %lvar70 to i32
  %10 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52667972 to i8*))
  %ifcond73 = icmp eq i64* %10, null
  br i1 %ifcond73, label %then_block, label %entry_ifend72

entry_ifend72:                                    ; preds = %entry_ifend39
  %lvar74 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar74, i64* %lvar, align 8
  %lvar76 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar76, i64* %lvar_offset_value11, align 8
  %lvar78 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar78, i64* %lvar_offset_value13, align 8
  %lvar80 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar80, i64* %lvar_offset_value15, align 8
  %lvar82 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar82, i64* %lvar_offset_value17, align 8
  %lvar84 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar84, i64* %lvar_offset_value19, align 8
  %lvar86 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar86, i64* %lvar_offset_value21, align 8
  %lvar88 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar88, i64* %lvar_offset_value23, align 8
  %lvar90 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar90, i64* %lvar_offset_value25, align 8
  %lvar92 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar92, i64* %lvar_offset_value27, align 8
  %lvar94 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value29, align 8
  store i64 %lvar94, i64* %lvar_offset_value29, align 8
  %lvar96 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value31, align 8
  store i64 %lvar96, i64* %lvar_offset_value31, align 8
  %lvar98 = load i64, i64* %"lvar$12$"
  store i64 0, i64* %lvar_offset_value33, align 8
  store i64 %lvar98, i64* %lvar_offset_value33, align 8
  %lvar100 = load i64, i64* %"lvar$13$"
  store i64 0, i64* %lvar_offset_value35, align 8
  store i64 %lvar100, i64* %lvar_offset_value35, align 8
  %loaded_stack_ptr_address_value102 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value102, align 8
  %11 = zext i32 %9 to i64
  store i64 %11, i64* %loaded_stack_ptr_address_value102, align 8
  %loaded_stack_ptr_address_value103 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value104 = getelementptr i64, i64* %loaded_stack_ptr_address_value103, i64 1
  store i64* %inc_ptr_value104, i64** %stack_ptr_address
  %12 = call i32 @call_invoke_method(i64* %10, i32 48, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond105 = icmp ne i32 %12, 1
  br i1 %ifcond105, label %then_block106, label %entry_ifend107

then_block106:                                    ; preds = %entry_ifend72
  %13 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend107:                                   ; preds = %entry_ifend72
  %stack_offset_value111 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value111, i64* %"lvar$0$", align 8
  %stack_offset_value113 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value113, i64* %"lvar$1$", align 8
  %stack_offset_value115 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value115, i64* %"lvar$2$", align 8
  %stack_offset_value117 = load i64, i64* %stack_offset_address_value4, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value117, i64* %"lvar$3$", align 8
  %stack_offset_value119 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value119, i64* %"lvar$4$", align 8
  %stack_offset_value121 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value121, i64* %"lvar$5$", align 8
  %stack_offset_value123 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value123, i64* %"lvar$6$", align 8
  %stack_offset_value125 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value125, i64* %"lvar$7$", align 8
  %stack_offset_value127 = load i64, i64* %stack_offset_address_value55, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value127, i64* %"lvar$8$", align 8
  %stack_offset_value129 = load i64, i64* %stack_offset_address_value57, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value129, i64* %"lvar$9$", align 8
  %stack_offset_value131 = load i64, i64* %stack_offset_address_value59, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value131, i64* %"lvar$10$", align 8
  %stack_offset_value133 = load i64, i64* %stack_offset_address_value61, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value133, i64* %"lvar$11$", align 8
  %stack_offset_value135 = load i64, i64* %stack_offset_address_value63, align 8
  store i64 0, i64* %"lvar$12$"
  store i64 %stack_offset_value135, i64* %"lvar$12$", align 8
  %stack_offset_value137 = load i64, i64* %stack_offset_address_value65, align 8
  store i64 0, i64* %"lvar$13$"
  store i64 %stack_offset_value137, i64* %"lvar$13$", align 8
  %loaded_stack_ptr_address_value138 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value139 = getelementptr i64, i64* %loaded_stack_ptr_address_value138, i64 -1
  %stack_pointer_offset_value140 = load i64, i64* %stack_pointer_offset_value139, align 8
  %14 = trunc i64 %stack_pointer_offset_value140 to i32
  call void @push_jit_object(i32 %14)
  %loaded_stack_ptr_address_value141 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value142 = getelementptr i64, i64* %loaded_stack_ptr_address_value141, i64 1
  store i64* %dec_ptr_value142, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_pointer_offset_value140, i64* %"lvar$7$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$8$"
  store i64 16, i64* %"lvar$8$", align 8
  store i32 0, i32* @gSigInt
  %15 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52667980 to i8*))
  %ifcond145 = icmp eq i64* %15, null
  br i1 %ifcond145, label %then_block, label %entry_ifend144

entry_ifend144:                                   ; preds = %entry_ifend107
  %16 = call i32 @create_object(i64* %15)
  call void @push_jit_object(i32 %16)
  %lvar146 = load i64, i64* %"lvar$8$"
  %17 = trunc i64 %lvar146 to i32
  %18 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52667992 to i8*))
  %ifcond149 = icmp eq i64* %18, null
  br i1 %ifcond149, label %then_block, label %entry_ifend148

entry_ifend148:                                   ; preds = %entry_ifend144
  %lvar150 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar150, i64* %lvar, align 8
  %lvar152 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar152, i64* %lvar_offset_value11, align 8
  %lvar154 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar154, i64* %lvar_offset_value13, align 8
  %lvar156 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar156, i64* %lvar_offset_value15, align 8
  %lvar158 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar158, i64* %lvar_offset_value17, align 8
  %lvar160 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar160, i64* %lvar_offset_value19, align 8
  %lvar162 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar162, i64* %lvar_offset_value21, align 8
  %lvar164 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar164, i64* %lvar_offset_value23, align 8
  %lvar166 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar166, i64* %lvar_offset_value25, align 8
  %lvar168 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar168, i64* %lvar_offset_value27, align 8
  %lvar170 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value29, align 8
  store i64 %lvar170, i64* %lvar_offset_value29, align 8
  %lvar172 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value31, align 8
  store i64 %lvar172, i64* %lvar_offset_value31, align 8
  %lvar174 = load i64, i64* %"lvar$12$"
  store i64 0, i64* %lvar_offset_value33, align 8
  store i64 %lvar174, i64* %lvar_offset_value33, align 8
  %lvar176 = load i64, i64* %"lvar$13$"
  store i64 0, i64* %lvar_offset_value35, align 8
  store i64 %lvar176, i64* %lvar_offset_value35, align 8
  %loaded_stack_ptr_address_value178 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value178, align 8
  %19 = zext i32 %16 to i64
  store i64 %19, i64* %loaded_stack_ptr_address_value178, align 8
  %loaded_stack_ptr_address_value179 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value180 = getelementptr i64, i64* %loaded_stack_ptr_address_value179, i64 1
  store i64* %inc_ptr_value180, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value180, align 8
  %20 = zext i32 %17 to i64
  store i64 %20, i64* %inc_ptr_value180, align 8
  %loaded_stack_ptr_address_value182 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value183 = getelementptr i64, i64* %loaded_stack_ptr_address_value182, i64 1
  store i64* %inc_ptr_value183, i64** %stack_ptr_address
  %21 = call i32 @call_invoke_method(i64* %18, i32 0, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond184 = icmp ne i32 %21, 1
  br i1 %ifcond184, label %then_block185, label %entry_ifend186

then_block185:                                    ; preds = %entry_ifend148
  %22 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend186:                                   ; preds = %entry_ifend148
  %stack_offset_value190 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value190, i64* %"lvar$0$", align 8
  %stack_offset_value192 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value192, i64* %"lvar$1$", align 8
  %stack_offset_value194 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value194, i64* %"lvar$2$", align 8
  %stack_offset_value196 = load i64, i64* %stack_offset_address_value4, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value196, i64* %"lvar$3$", align 8
  %stack_offset_value198 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value198, i64* %"lvar$4$", align 8
  %stack_offset_value200 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value200, i64* %"lvar$5$", align 8
  %stack_offset_value202 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value202, i64* %"lvar$6$", align 8
  %stack_offset_value204 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value204, i64* %"lvar$7$", align 8
  %stack_offset_value206 = load i64, i64* %stack_offset_address_value55, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value206, i64* %"lvar$8$", align 8
  %stack_offset_value208 = load i64, i64* %stack_offset_address_value57, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value208, i64* %"lvar$9$", align 8
  %stack_offset_value210 = load i64, i64* %stack_offset_address_value59, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value210, i64* %"lvar$10$", align 8
  %stack_offset_value212 = load i64, i64* %stack_offset_address_value61, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value212, i64* %"lvar$11$", align 8
  %stack_offset_value214 = load i64, i64* %stack_offset_address_value63, align 8
  store i64 0, i64* %"lvar$12$"
  store i64 %stack_offset_value214, i64* %"lvar$12$", align 8
  %stack_offset_value216 = load i64, i64* %stack_offset_address_value65, align 8
  store i64 0, i64* %"lvar$13$"
  store i64 %stack_offset_value216, i64* %"lvar$13$", align 8
  %loaded_stack_ptr_address_value217 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value218 = getelementptr i64, i64* %loaded_stack_ptr_address_value217, i64 -1
  %stack_pointer_offset_value219 = load i64, i64* %stack_pointer_offset_value218, align 8
  %23 = trunc i64 %stack_pointer_offset_value219 to i32
  call void @push_jit_object(i32 %23)
  %loaded_stack_ptr_address_value220 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value221 = getelementptr i64, i64* %loaded_stack_ptr_address_value220, i64 1
  store i64* %dec_ptr_value221, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_pointer_offset_value219, i64* %"lvar$9$", align 8
  store i32 0, i32* @gSigInt
  br label %entry_condend

entry_condend:                                    ; preds = %label_for_endzzzzd, %label_if_endzzzz, %entry_ifend186
  store i32 0, i32* @gSigInt
  %lvar222 = load i64, i64* %"lvar$1$"
  %24 = trunc i64 %lvar222 to i32
  %lvar223 = load i64, i64* %"lvar$7$"
  %25 = trunc i64 %lvar223 to i32
  %lvar224 = load i64, i64* %"lvar$6$"
  %26 = trunc i64 %lvar224 to i32
  %lvar225 = load i64, i64* %"lvar$8$"
  %27 = trunc i64 %lvar225 to i32
  %lvar226 = load i64, i64* %"lvar$9$"
  %28 = trunc i64 %lvar226 to i32
  %29 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52668044 to i8*))
  %ifcond229 = icmp eq i64* %29, null
  br i1 %ifcond229, label %then_block, label %entry_ifend228

label_whilezzzv:                                  ; preds = %entry_ifend1920, %entry_ifend1688, %entry_ifend856
  store i32 0, i32* @gSigInt
  %lvar1959 = load i64, i64* %"lvar$5$"
  %30 = trunc i64 %lvar1959 to i32
  %31 = zext i32 %30 to i64
  store i64 %31, i64* %stack, align 8
  ret i32 1

entry_ifend228:                                   ; preds = %entry_condend
  %lvar230 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar230, i64* %lvar, align 8
  %lvar232 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar232, i64* %lvar_offset_value11, align 8
  %lvar234 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar234, i64* %lvar_offset_value13, align 8
  %lvar236 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar236, i64* %lvar_offset_value15, align 8
  %lvar238 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar238, i64* %lvar_offset_value17, align 8
  %lvar240 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar240, i64* %lvar_offset_value19, align 8
  %lvar242 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar242, i64* %lvar_offset_value21, align 8
  %lvar244 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar244, i64* %lvar_offset_value23, align 8
  %lvar246 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar246, i64* %lvar_offset_value25, align 8
  %lvar248 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar248, i64* %lvar_offset_value27, align 8
  %lvar250 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value29, align 8
  store i64 %lvar250, i64* %lvar_offset_value29, align 8
  %lvar252 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value31, align 8
  store i64 %lvar252, i64* %lvar_offset_value31, align 8
  %lvar254 = load i64, i64* %"lvar$12$"
  store i64 0, i64* %lvar_offset_value33, align 8
  store i64 %lvar254, i64* %lvar_offset_value33, align 8
  %lvar256 = load i64, i64* %"lvar$13$"
  store i64 0, i64* %lvar_offset_value35, align 8
  store i64 %lvar256, i64* %lvar_offset_value35, align 8
  %loaded_stack_ptr_address_value258 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value258, align 8
  %32 = zext i32 %24 to i64
  store i64 %32, i64* %loaded_stack_ptr_address_value258, align 8
  %loaded_stack_ptr_address_value259 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value260 = getelementptr i64, i64* %loaded_stack_ptr_address_value259, i64 1
  store i64* %inc_ptr_value260, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value260, align 8
  %33 = zext i32 %25 to i64
  store i64 %33, i64* %inc_ptr_value260, align 8
  %loaded_stack_ptr_address_value262 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value263 = getelementptr i64, i64* %loaded_stack_ptr_address_value262, i64 1
  store i64* %inc_ptr_value263, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value263, align 8
  %34 = zext i32 %26 to i64
  store i64 %34, i64* %inc_ptr_value263, align 8
  %loaded_stack_ptr_address_value265 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value266 = getelementptr i64, i64* %loaded_stack_ptr_address_value265, i64 1
  store i64* %inc_ptr_value266, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value266, align 8
  %35 = zext i32 %27 to i64
  store i64 %35, i64* %inc_ptr_value266, align 8
  %loaded_stack_ptr_address_value268 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value269 = getelementptr i64, i64* %loaded_stack_ptr_address_value268, i64 1
  store i64* %inc_ptr_value269, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value269, align 8
  %36 = zext i32 %28 to i64
  store i64 %36, i64* %inc_ptr_value269, align 8
  %loaded_stack_ptr_address_value271 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value272 = getelementptr i64, i64* %loaded_stack_ptr_address_value271, i64 1
  store i64* %inc_ptr_value272, i64** %stack_ptr_address
  %37 = call i32 @call_invoke_method(i64* %29, i32 25, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond273 = icmp ne i32 %37, 1
  br i1 %ifcond273, label %then_block274, label %entry_ifend275

then_block274:                                    ; preds = %entry_ifend228
  %38 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend275:                                   ; preds = %entry_ifend228
  %stack_offset_value279 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value279, i64* %"lvar$0$", align 8
  %stack_offset_value281 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value281, i64* %"lvar$1$", align 8
  %stack_offset_value283 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value283, i64* %"lvar$2$", align 8
  %stack_offset_value285 = load i64, i64* %stack_offset_address_value4, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value285, i64* %"lvar$3$", align 8
  %stack_offset_value287 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value287, i64* %"lvar$4$", align 8
  %stack_offset_value289 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value289, i64* %"lvar$5$", align 8
  %stack_offset_value291 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value291, i64* %"lvar$6$", align 8
  %stack_offset_value293 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value293, i64* %"lvar$7$", align 8
  %stack_offset_value295 = load i64, i64* %stack_offset_address_value55, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value295, i64* %"lvar$8$", align 8
  %stack_offset_value297 = load i64, i64* %stack_offset_address_value57, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value297, i64* %"lvar$9$", align 8
  %stack_offset_value299 = load i64, i64* %stack_offset_address_value59, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value299, i64* %"lvar$10$", align 8
  %stack_offset_value301 = load i64, i64* %stack_offset_address_value61, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value301, i64* %"lvar$11$", align 8
  %stack_offset_value303 = load i64, i64* %stack_offset_address_value63, align 8
  store i64 0, i64* %"lvar$12$"
  store i64 %stack_offset_value303, i64* %"lvar$12$", align 8
  %stack_offset_value305 = load i64, i64* %stack_offset_address_value65, align 8
  store i64 0, i64* %"lvar$13$"
  store i64 %stack_offset_value305, i64* %"lvar$13$", align 8
  %loaded_stack_ptr_address_value306 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value307 = getelementptr i64, i64* %loaded_stack_ptr_address_value306, i64 -1
  %stack_pointer_offset_value308 = load i64, i64* %stack_pointer_offset_value307, align 8
  %39 = trunc i64 %stack_pointer_offset_value308 to i32
  call void @push_jit_object(i32 %39)
  %loaded_stack_ptr_address_value309 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value310 = getelementptr i64, i64* %loaded_stack_ptr_address_value309, i64 1
  store i64* %dec_ptr_value310, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_pointer_offset_value308, i64* %"lvar$10$", align 8
  store i32 0, i32* @gSigInt
  %eqtmpx = icmp eq i32 %39, 1
  store i64 0, i64* %VALUE_FOR_ANDAND_OROR, align 8
  %40 = zext i1 %eqtmpx to i64
  store i64 %40, i64* %VALUE_FOR_ANDAND_OROR, align 8
  br i1 %eqtmpx, label %label_or_endpointzzzx, label %entry_condnotend

entry_condnotend:                                 ; preds = %entry_ifend275
  %lvar313 = load i64, i64* %"lvar$3$"
  %41 = trunc i64 %lvar313 to i32
  %eqtmpx314 = icmp eq i32 %41, 0
  store i64 0, i64* %VALUE_FOR_ANDAND_OROR315, align 8
  %42 = zext i1 %eqtmpx314 to i64
  store i64 %42, i64* %VALUE_FOR_ANDAND_OROR315, align 8
  br i1 %eqtmpx314, label %entry_condend317, label %label_and_endpointzzzy

label_or_endpointzzzx:                            ; preds = %entry_ifend275, %label_and_endpointzzzy
  %value_for_andand_oror320 = phi i64 [ %46, %label_and_endpointzzzy ], [ %40, %entry_ifend275 ]
  %43 = trunc i64 %value_for_andand_oror320 to i1
  br i1 %43, label %entry_condend322, label %label_elifzzzw1a

entry_condend317:                                 ; preds = %entry_condnotend
  %gttmp = icmp sgt i32 %39, 0
  %44 = zext i1 %gttmp to i64
  store i64 %44, i64* %VALUE_FOR_ANDAND_OROR315, align 8
  br label %label_and_endpointzzzy

label_and_endpointzzzy:                           ; preds = %entry_condnotend, %entry_condend317
  %value_for_andand_oror = phi i64 [ %44, %entry_condend317 ], [ %42, %entry_condnotend ]
  %45 = trunc i64 %value_for_andand_oror to i1
  %46 = zext i1 %45 to i64
  store i64 %46, i64* %VALUE_FOR_ANDAND_OROR, align 8
  br label %label_or_endpointzzzx

entry_condend322:                                 ; preds = %label_or_endpointzzzx
  store i32 0, i32* @gSigInt
  %lvar324 = load i64, i64* %"lvar$7$"
  %47 = trunc i64 %lvar324 to i32
  %lvar325 = load i64, i64* %"lvar$6$"
  %48 = trunc i64 %lvar325 to i32
  %lvar326 = load i64, i64* %"lvar$9$"
  %49 = trunc i64 %lvar326 to i32
  %50 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %49, i32 0)
  %51 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %50, i32 0, i32 0
  %52 = load i64, i64* %51, align 4
  %53 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %50, i32 0, i32 1
  %54 = load i32, i32* %53, align 4
  %ifcond329 = icmp eq i32 %54, 0
  br i1 %ifcond329, label %then_block, label %entry_ifend328

label_elifzzzw1a:                                 ; preds = %label_or_endpointzzzx
  %gttmp896 = icmp sgt i32 %39, 1
  store i32 0, i32* @gSigInt
  %lvar900 = load i64, i64* %"lvar$7$"
  %55 = trunc i64 %lvar900 to i32
  %lvar901 = load i64, i64* %"lvar$6$"
  %56 = trunc i64 %lvar901 to i32
  br i1 %gttmp896, label %entry_condend898, label %label_if_elifzzzw0a

entry_ifend328:                                   ; preds = %entry_condend322
  %57 = trunc i64 %52 to i32
  %58 = call %clvalue_and_bool_struct* @load_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %57, i32 0)
  %59 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %58, i32 0, i32 0
  %60 = load i64, i64* %59, align 4
  %61 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %58, i32 0, i32 1
  %62 = load i32, i32* %61, align 4
  %ifcond332 = icmp eq i32 %62, 0
  br i1 %ifcond332, label %then_block, label %entry_ifend331

entry_ifend331:                                   ; preds = %entry_ifend328
  %63 = trunc i64 %60 to i32
  %64 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52668168 to i8*))
  %ifcond335 = icmp eq i64* %64, null
  br i1 %ifcond335, label %then_block, label %entry_ifend334

entry_ifend334:                                   ; preds = %entry_ifend331
  %lvar336 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar336, i64* %lvar, align 8
  %lvar338 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar338, i64* %lvar_offset_value11, align 8
  %lvar340 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar340, i64* %lvar_offset_value13, align 8
  %lvar342 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar342, i64* %lvar_offset_value15, align 8
  %lvar344 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar344, i64* %lvar_offset_value17, align 8
  %lvar346 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar346, i64* %lvar_offset_value19, align 8
  %lvar348 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar348, i64* %lvar_offset_value21, align 8
  %lvar350 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar350, i64* %lvar_offset_value23, align 8
  %lvar352 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar352, i64* %lvar_offset_value25, align 8
  %lvar354 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar354, i64* %lvar_offset_value27, align 8
  %lvar356 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value29, align 8
  store i64 %lvar356, i64* %lvar_offset_value29, align 8
  %lvar358 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value31, align 8
  store i64 %lvar358, i64* %lvar_offset_value31, align 8
  %lvar360 = load i64, i64* %"lvar$12$"
  store i64 0, i64* %lvar_offset_value33, align 8
  store i64 %lvar360, i64* %lvar_offset_value33, align 8
  %lvar362 = load i64, i64* %"lvar$13$"
  store i64 0, i64* %lvar_offset_value35, align 8
  store i64 %lvar362, i64* %lvar_offset_value35, align 8
  %loaded_stack_ptr_address_value364 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value364, align 8
  %65 = zext i32 %47 to i64
  store i64 %65, i64* %loaded_stack_ptr_address_value364, align 8
  %loaded_stack_ptr_address_value365 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value366 = getelementptr i64, i64* %loaded_stack_ptr_address_value365, i64 1
  store i64* %inc_ptr_value366, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value366, align 8
  %66 = zext i32 %48 to i64
  store i64 %66, i64* %inc_ptr_value366, align 8
  %loaded_stack_ptr_address_value368 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value369 = getelementptr i64, i64* %loaded_stack_ptr_address_value368, i64 1
  store i64* %inc_ptr_value369, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value369, align 8
  %67 = zext i32 %63 to i64
  store i64 %67, i64* %inc_ptr_value369, align 8
  %loaded_stack_ptr_address_value371 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value372 = getelementptr i64, i64* %loaded_stack_ptr_address_value371, i64 1
  store i64* %inc_ptr_value372, i64** %stack_ptr_address
  %68 = call i32 @call_invoke_method(i64* %64, i32 11, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond373 = icmp ne i32 %68, 1
  br i1 %ifcond373, label %then_block374, label %entry_ifend375

then_block374:                                    ; preds = %entry_ifend334
  %69 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend375:                                   ; preds = %entry_ifend334
  %stack_offset_value379 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value379, i64* %"lvar$0$", align 8
  %stack_offset_value381 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value381, i64* %"lvar$1$", align 8
  %stack_offset_value383 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value383, i64* %"lvar$2$", align 8
  %stack_offset_value385 = load i64, i64* %stack_offset_address_value4, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value385, i64* %"lvar$3$", align 8
  %stack_offset_value387 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value387, i64* %"lvar$4$", align 8
  %stack_offset_value389 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value389, i64* %"lvar$5$", align 8
  %stack_offset_value391 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value391, i64* %"lvar$6$", align 8
  %stack_offset_value393 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value393, i64* %"lvar$7$", align 8
  %stack_offset_value395 = load i64, i64* %stack_offset_address_value55, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value395, i64* %"lvar$8$", align 8
  %stack_offset_value397 = load i64, i64* %stack_offset_address_value57, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value397, i64* %"lvar$9$", align 8
  %stack_offset_value399 = load i64, i64* %stack_offset_address_value59, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value399, i64* %"lvar$10$", align 8
  %stack_offset_value401 = load i64, i64* %stack_offset_address_value61, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value401, i64* %"lvar$11$", align 8
  %stack_offset_value403 = load i64, i64* %stack_offset_address_value63, align 8
  store i64 0, i64* %"lvar$12$"
  store i64 %stack_offset_value403, i64* %"lvar$12$", align 8
  %stack_offset_value405 = load i64, i64* %stack_offset_address_value65, align 8
  store i64 0, i64* %"lvar$13$"
  store i64 %stack_offset_value405, i64* %"lvar$13$", align 8
  %loaded_stack_ptr_address_value406 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value407 = getelementptr i64, i64* %loaded_stack_ptr_address_value406, i64 -1
  %stack_pointer_offset_value408 = load i64, i64* %stack_pointer_offset_value407, align 8
  %70 = trunc i64 %stack_pointer_offset_value408 to i32
  call void @push_jit_object(i32 %70)
  %loaded_stack_ptr_address_value409 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value410 = getelementptr i64, i64* %loaded_stack_ptr_address_value409, i64 1
  store i64* %dec_ptr_value410, i64** %stack_ptr_address
  %71 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52668176 to i8*))
  %ifcond413 = icmp eq i64* %71, null
  br i1 %ifcond413, label %then_block, label %entry_ifend412

entry_ifend412:                                   ; preds = %entry_ifend375
  %lvar414 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar414, i64* %lvar, align 8
  %lvar416 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar416, i64* %lvar_offset_value11, align 8
  %lvar418 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar418, i64* %lvar_offset_value13, align 8
  %lvar420 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar420, i64* %lvar_offset_value15, align 8
  %lvar422 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar422, i64* %lvar_offset_value17, align 8
  %lvar424 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar424, i64* %lvar_offset_value19, align 8
  %lvar426 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar426, i64* %lvar_offset_value21, align 8
  %lvar428 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar428, i64* %lvar_offset_value23, align 8
  %lvar430 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar430, i64* %lvar_offset_value25, align 8
  %lvar432 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar432, i64* %lvar_offset_value27, align 8
  %lvar434 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value29, align 8
  store i64 %lvar434, i64* %lvar_offset_value29, align 8
  %lvar436 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value31, align 8
  store i64 %lvar436, i64* %lvar_offset_value31, align 8
  %lvar438 = load i64, i64* %"lvar$12$"
  store i64 0, i64* %lvar_offset_value33, align 8
  store i64 %lvar438, i64* %lvar_offset_value33, align 8
  %lvar440 = load i64, i64* %"lvar$13$"
  store i64 0, i64* %lvar_offset_value35, align 8
  store i64 %lvar440, i64* %lvar_offset_value35, align 8
  %loaded_stack_ptr_address_value442 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value442, align 8
  store i64 %stack_pointer_offset_value408, i64* %loaded_stack_ptr_address_value442, align 8
  %loaded_stack_ptr_address_value443 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value444 = getelementptr i64, i64* %loaded_stack_ptr_address_value443, i64 1
  store i64* %inc_ptr_value444, i64** %stack_ptr_address
  %72 = call i32 @call_invoke_method(i64* %71, i32 10, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond445 = icmp ne i32 %72, 1
  br i1 %ifcond445, label %then_block446, label %entry_ifend447

then_block446:                                    ; preds = %entry_ifend412
  %73 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend447:                                   ; preds = %entry_ifend412
  %stack_offset_value451 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value451, i64* %"lvar$0$", align 8
  %stack_offset_value453 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value453, i64* %"lvar$1$", align 8
  %stack_offset_value455 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value455, i64* %"lvar$2$", align 8
  %stack_offset_value457 = load i64, i64* %stack_offset_address_value4, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value457, i64* %"lvar$3$", align 8
  %stack_offset_value459 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value459, i64* %"lvar$4$", align 8
  %stack_offset_value461 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value461, i64* %"lvar$5$", align 8
  %stack_offset_value463 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value463, i64* %"lvar$6$", align 8
  %stack_offset_value465 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value465, i64* %"lvar$7$", align 8
  %stack_offset_value467 = load i64, i64* %stack_offset_address_value55, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value467, i64* %"lvar$8$", align 8
  %stack_offset_value469 = load i64, i64* %stack_offset_address_value57, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value469, i64* %"lvar$9$", align 8
  %stack_offset_value471 = load i64, i64* %stack_offset_address_value59, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value471, i64* %"lvar$10$", align 8
  %stack_offset_value473 = load i64, i64* %stack_offset_address_value61, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value473, i64* %"lvar$11$", align 8
  %stack_offset_value475 = load i64, i64* %stack_offset_address_value63, align 8
  store i64 0, i64* %"lvar$12$"
  store i64 %stack_offset_value475, i64* %"lvar$12$", align 8
  %stack_offset_value477 = load i64, i64* %stack_offset_address_value65, align 8
  store i64 0, i64* %"lvar$13$"
  store i64 %stack_offset_value477, i64* %"lvar$13$", align 8
  %loaded_stack_ptr_address_value478 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value479 = getelementptr i64, i64* %loaded_stack_ptr_address_value478, i64 -1
  %stack_pointer_offset_value480 = load i64, i64* %stack_pointer_offset_value479, align 8
  %74 = trunc i64 %stack_pointer_offset_value480 to i32
  call void @push_jit_object(i32 %74)
  %loaded_stack_ptr_address_value481 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value482 = getelementptr i64, i64* %loaded_stack_ptr_address_value481, i64 1
  store i64* %dec_ptr_value482, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_pointer_offset_value480, i64* %"lvar$11$", align 8
  store i32 0, i32* @gSigInt
  %lvar483 = load i64, i64* %"lvar$5$"
  %75 = trunc i64 %lvar483 to i32
  %76 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52668184 to i8*))
  %ifcond487 = icmp eq i64* %76, null
  br i1 %ifcond487, label %then_block, label %entry_ifend486

entry_ifend486:                                   ; preds = %entry_ifend447
  %lvar488 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar488, i64* %lvar, align 8
  %lvar490 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar490, i64* %lvar_offset_value11, align 8
  %lvar492 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar492, i64* %lvar_offset_value13, align 8
  %lvar494 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar494, i64* %lvar_offset_value15, align 8
  %lvar496 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar496, i64* %lvar_offset_value17, align 8
  %lvar498 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar498, i64* %lvar_offset_value19, align 8
  %lvar500 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar500, i64* %lvar_offset_value21, align 8
  %lvar502 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar502, i64* %lvar_offset_value23, align 8
  %lvar504 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar504, i64* %lvar_offset_value25, align 8
  %lvar506 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar506, i64* %lvar_offset_value27, align 8
  %lvar508 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value29, align 8
  store i64 %lvar508, i64* %lvar_offset_value29, align 8
  %lvar510 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value31, align 8
  store i64 %lvar510, i64* %lvar_offset_value31, align 8
  %lvar512 = load i64, i64* %"lvar$12$"
  store i64 0, i64* %lvar_offset_value33, align 8
  store i64 %lvar512, i64* %lvar_offset_value33, align 8
  %lvar514 = load i64, i64* %"lvar$13$"
  store i64 0, i64* %lvar_offset_value35, align 8
  store i64 %lvar514, i64* %lvar_offset_value35, align 8
  %loaded_stack_ptr_address_value516 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value516, align 8
  %77 = zext i32 %75 to i64
  store i64 %77, i64* %loaded_stack_ptr_address_value516, align 8
  %loaded_stack_ptr_address_value517 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value518 = getelementptr i64, i64* %loaded_stack_ptr_address_value517, i64 1
  store i64* %inc_ptr_value518, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value518, align 8
  %78 = zext i32 %74 to i64
  store i64 %78, i64* %inc_ptr_value518, align 8
  %loaded_stack_ptr_address_value520 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value521 = getelementptr i64, i64* %loaded_stack_ptr_address_value520, i64 1
  store i64* %inc_ptr_value521, i64** %stack_ptr_address
  %79 = call i32 @call_invoke_method(i64* %76, i32 8, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond522 = icmp ne i32 %79, 1
  br i1 %ifcond522, label %then_block523, label %entry_ifend524

then_block523:                                    ; preds = %entry_ifend486
  %80 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend524:                                   ; preds = %entry_ifend486
  %stack_offset_value528 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value528, i64* %"lvar$0$", align 8
  %stack_offset_value530 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value530, i64* %"lvar$1$", align 8
  %stack_offset_value532 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value532, i64* %"lvar$2$", align 8
  %stack_offset_value534 = load i64, i64* %stack_offset_address_value4, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value534, i64* %"lvar$3$", align 8
  %stack_offset_value536 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value536, i64* %"lvar$4$", align 8
  %stack_offset_value538 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value538, i64* %"lvar$5$", align 8
  %stack_offset_value540 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value540, i64* %"lvar$6$", align 8
  %stack_offset_value542 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value542, i64* %"lvar$7$", align 8
  %stack_offset_value544 = load i64, i64* %stack_offset_address_value55, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value544, i64* %"lvar$8$", align 8
  %stack_offset_value546 = load i64, i64* %stack_offset_address_value57, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value546, i64* %"lvar$9$", align 8
  %stack_offset_value548 = load i64, i64* %stack_offset_address_value59, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value548, i64* %"lvar$10$", align 8
  %stack_offset_value550 = load i64, i64* %stack_offset_address_value61, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value550, i64* %"lvar$11$", align 8
  %stack_offset_value552 = load i64, i64* %stack_offset_address_value63, align 8
  store i64 0, i64* %"lvar$12$"
  store i64 %stack_offset_value552, i64* %"lvar$12$", align 8
  %stack_offset_value554 = load i64, i64* %stack_offset_address_value65, align 8
  store i64 0, i64* %"lvar$13$"
  store i64 %stack_offset_value554, i64* %"lvar$13$", align 8
  %loaded_stack_ptr_address_value555 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value556 = getelementptr i64, i64* %loaded_stack_ptr_address_value555, i64 -1
  %stack_pointer_offset_value557 = load i64, i64* %stack_pointer_offset_value556, align 8
  %81 = trunc i64 %stack_pointer_offset_value557 to i32
  call void @push_jit_object(i32 %81)
  %loaded_stack_ptr_address_value558 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value559 = getelementptr i64, i64* %loaded_stack_ptr_address_value558, i64 1
  store i64* %dec_ptr_value559, i64** %stack_ptr_address
  store i32 0, i32* @gSigInt
  %lvar560 = load i64, i64* %"lvar$5$"
  %82 = trunc i64 %lvar560 to i32
  %lvar561 = load i64, i64* %"lvar$2$"
  %83 = trunc i64 %lvar561 to i32
  %84 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52668192 to i8*))
  %ifcond564 = icmp eq i64* %84, null
  br i1 %ifcond564, label %then_block, label %entry_ifend563

entry_ifend563:                                   ; preds = %entry_ifend524
  %lvar565 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar565, i64* %lvar, align 8
  %lvar567 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar567, i64* %lvar_offset_value11, align 8
  %lvar569 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar569, i64* %lvar_offset_value13, align 8
  %lvar571 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar571, i64* %lvar_offset_value15, align 8
  %lvar573 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar573, i64* %lvar_offset_value17, align 8
  %lvar575 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar575, i64* %lvar_offset_value19, align 8
  %lvar577 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar577, i64* %lvar_offset_value21, align 8
  %lvar579 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar579, i64* %lvar_offset_value23, align 8
  %lvar581 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar581, i64* %lvar_offset_value25, align 8
  %lvar583 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar583, i64* %lvar_offset_value27, align 8
  %lvar585 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value29, align 8
  store i64 %lvar585, i64* %lvar_offset_value29, align 8
  %lvar587 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value31, align 8
  store i64 %lvar587, i64* %lvar_offset_value31, align 8
  %lvar589 = load i64, i64* %"lvar$12$"
  store i64 0, i64* %lvar_offset_value33, align 8
  store i64 %lvar589, i64* %lvar_offset_value33, align 8
  %lvar591 = load i64, i64* %"lvar$13$"
  store i64 0, i64* %lvar_offset_value35, align 8
  store i64 %lvar591, i64* %lvar_offset_value35, align 8
  %loaded_stack_ptr_address_value593 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value593, align 8
  %85 = zext i32 %82 to i64
  store i64 %85, i64* %loaded_stack_ptr_address_value593, align 8
  %loaded_stack_ptr_address_value594 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value595 = getelementptr i64, i64* %loaded_stack_ptr_address_value594, i64 1
  store i64* %inc_ptr_value595, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value595, align 8
  %86 = zext i32 %83 to i64
  store i64 %86, i64* %inc_ptr_value595, align 8
  %loaded_stack_ptr_address_value597 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value598 = getelementptr i64, i64* %loaded_stack_ptr_address_value597, i64 1
  store i64* %inc_ptr_value598, i64** %stack_ptr_address
  %87 = call i32 @call_invoke_method(i64* %84, i32 8, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond599 = icmp ne i32 %87, 1
  br i1 %ifcond599, label %then_block600, label %entry_ifend601

then_block600:                                    ; preds = %entry_ifend563
  %88 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend601:                                   ; preds = %entry_ifend563
  %stack_offset_value605 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value605, i64* %"lvar$0$", align 8
  %stack_offset_value607 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value607, i64* %"lvar$1$", align 8
  %stack_offset_value609 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value609, i64* %"lvar$2$", align 8
  %stack_offset_value611 = load i64, i64* %stack_offset_address_value4, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value611, i64* %"lvar$3$", align 8
  %stack_offset_value613 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value613, i64* %"lvar$4$", align 8
  %stack_offset_value615 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value615, i64* %"lvar$5$", align 8
  %stack_offset_value617 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value617, i64* %"lvar$6$", align 8
  %stack_offset_value619 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value619, i64* %"lvar$7$", align 8
  %stack_offset_value621 = load i64, i64* %stack_offset_address_value55, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value621, i64* %"lvar$8$", align 8
  %stack_offset_value623 = load i64, i64* %stack_offset_address_value57, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value623, i64* %"lvar$9$", align 8
  %stack_offset_value625 = load i64, i64* %stack_offset_address_value59, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value625, i64* %"lvar$10$", align 8
  %stack_offset_value627 = load i64, i64* %stack_offset_address_value61, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value627, i64* %"lvar$11$", align 8
  %stack_offset_value629 = load i64, i64* %stack_offset_address_value63, align 8
  store i64 0, i64* %"lvar$12$"
  store i64 %stack_offset_value629, i64* %"lvar$12$", align 8
  %stack_offset_value631 = load i64, i64* %stack_offset_address_value65, align 8
  store i64 0, i64* %"lvar$13$"
  store i64 %stack_offset_value631, i64* %"lvar$13$", align 8
  %loaded_stack_ptr_address_value632 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value633 = getelementptr i64, i64* %loaded_stack_ptr_address_value632, i64 -1
  %stack_pointer_offset_value634 = load i64, i64* %stack_pointer_offset_value633, align 8
  %89 = trunc i64 %stack_pointer_offset_value634 to i32
  call void @push_jit_object(i32 %89)
  %loaded_stack_ptr_address_value635 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value636 = getelementptr i64, i64* %loaded_stack_ptr_address_value635, i64 1
  store i64* %dec_ptr_value636, i64** %stack_ptr_address
  store i32 0, i32* @gSigInt
  %lvar637 = load i64, i64* %"lvar$6$"
  %90 = trunc i64 %lvar637 to i32
  %lvar638 = load i64, i64* %"lvar$9$"
  %91 = trunc i64 %lvar638 to i32
  %92 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %91, i32 1)
  %93 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %92, i32 0, i32 0
  %94 = load i64, i64* %93, align 4
  %95 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %92, i32 0, i32 1
  %96 = load i32, i32* %95, align 4
  %ifcond641 = icmp eq i32 %96, 0
  br i1 %ifcond641, label %then_block, label %entry_ifend640

entry_ifend640:                                   ; preds = %entry_ifend601
  %97 = trunc i64 %94 to i32
  %98 = call %clvalue_and_bool_struct* @load_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %97, i32 0)
  %99 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %98, i32 0, i32 0
  %100 = load i64, i64* %99, align 4
  %101 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %98, i32 0, i32 1
  %102 = load i32, i32* %101, align 4
  %ifcond644 = icmp eq i32 %102, 0
  br i1 %ifcond644, label %then_block, label %entry_ifend643

entry_ifend643:                                   ; preds = %entry_ifend640
  %103 = trunc i64 %100 to i32
  %eqtmpx645 = icmp eq i32 %90, %103
  store i32 0, i32* @gSigInt
  br i1 %eqtmpx645, label %entry_condend647, label %label_elsezzzz

entry_condend647:                                 ; preds = %entry_ifend643
  %lvar649 = load i64, i64* %"lvar$6$"
  %104 = trunc i64 %lvar649 to i32
  %addtmp = add nuw i32 %104, 1
  store i64 0, i64* %"lvar$6$"
  %105 = zext i32 %addtmp to i64
  store i64 %105, i64* %"lvar$6$", align 8
  br label %label_if_endzzzz

label_elsezzzz:                                   ; preds = %entry_ifend643
  %lvar651 = load i64, i64* %"lvar$9$"
  %106 = trunc i64 %lvar651 to i32
  %107 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %106, i32 1)
  %108 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %107, i32 0, i32 0
  %109 = load i64, i64* %108, align 4
  %110 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %107, i32 0, i32 1
  %111 = load i32, i32* %110, align 4
  %ifcond654 = icmp eq i32 %111, 0
  br i1 %ifcond654, label %then_block, label %entry_ifend653

label_if_endzzzz:                                 ; preds = %entry_ifend656, %entry_condend647
  store i32 0, i32* @gSigInt
  %lvar659 = load i64, i64* %"lvar$1$"
  %112 = trunc i64 %lvar659 to i32
  %113 = call i32 @get_regex_global(i32 %112)
  %LOGICAL_DIANEAL = icmp eq i32 %113, 0
  br i1 %LOGICAL_DIANEAL, label %entry_condend661, label %entry_condend

entry_ifend653:                                   ; preds = %label_elsezzzz
  %114 = trunc i64 %109 to i32
  %115 = call %clvalue_and_bool_struct* @load_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %114, i32 0)
  %116 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %115, i32 0, i32 0
  %117 = load i64, i64* %116, align 4
  %118 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %115, i32 0, i32 1
  %119 = load i32, i32* %118, align 4
  %ifcond657 = icmp eq i32 %119, 0
  br i1 %ifcond657, label %then_block, label %entry_ifend656

entry_ifend656:                                   ; preds = %entry_ifend653
  %120 = trunc i64 %117 to i32
  store i64 0, i64* %"lvar$6$"
  %121 = zext i32 %120 to i64
  store i64 %121, i64* %"lvar$6$", align 8
  br label %label_if_endzzzz

entry_condend661:                                 ; preds = %label_if_endzzzz
  store i32 0, i32* @gSigInt
  %lvar663 = load i64, i64* %"lvar$7$"
  %122 = trunc i64 %lvar663 to i32
  %lvar664 = load i64, i64* %"lvar$6$"
  %123 = trunc i64 %lvar664 to i32
  %124 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52668312 to i8*))
  %ifcond667 = icmp eq i64* %124, null
  br i1 %ifcond667, label %then_block, label %entry_ifend666

entry_ifend666:                                   ; preds = %entry_condend661
  %lvar668 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar668, i64* %lvar, align 8
  %lvar670 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar670, i64* %lvar_offset_value11, align 8
  %lvar672 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar672, i64* %lvar_offset_value13, align 8
  %lvar674 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar674, i64* %lvar_offset_value15, align 8
  %lvar676 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar676, i64* %lvar_offset_value17, align 8
  %lvar678 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar678, i64* %lvar_offset_value19, align 8
  %lvar680 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar680, i64* %lvar_offset_value21, align 8
  %lvar682 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar682, i64* %lvar_offset_value23, align 8
  %lvar684 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar684, i64* %lvar_offset_value25, align 8
  %lvar686 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar686, i64* %lvar_offset_value27, align 8
  %lvar688 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value29, align 8
  store i64 %lvar688, i64* %lvar_offset_value29, align 8
  %lvar690 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value31, align 8
  store i64 %lvar690, i64* %lvar_offset_value31, align 8
  %lvar692 = load i64, i64* %"lvar$12$"
  store i64 0, i64* %lvar_offset_value33, align 8
  store i64 %lvar692, i64* %lvar_offset_value33, align 8
  %lvar694 = load i64, i64* %"lvar$13$"
  store i64 0, i64* %lvar_offset_value35, align 8
  store i64 %lvar694, i64* %lvar_offset_value35, align 8
  %loaded_stack_ptr_address_value696 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value696, align 8
  %125 = zext i32 %122 to i64
  store i64 %125, i64* %loaded_stack_ptr_address_value696, align 8
  %loaded_stack_ptr_address_value697 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value698 = getelementptr i64, i64* %loaded_stack_ptr_address_value697, i64 1
  store i64* %inc_ptr_value698, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value698, align 8
  %126 = zext i32 %123 to i64
  store i64 %126, i64* %inc_ptr_value698, align 8
  %loaded_stack_ptr_address_value700 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value701 = getelementptr i64, i64* %loaded_stack_ptr_address_value700, i64 1
  store i64* %inc_ptr_value701, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value701, align 8
  store i64 4294967295, i64* %inc_ptr_value701, align 8
  %loaded_stack_ptr_address_value703 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value704 = getelementptr i64, i64* %loaded_stack_ptr_address_value703, i64 1
  store i64* %inc_ptr_value704, i64** %stack_ptr_address
  %127 = call i32 @call_invoke_method(i64* %124, i32 11, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond705 = icmp ne i32 %127, 1
  br i1 %ifcond705, label %then_block706, label %entry_ifend707

then_block706:                                    ; preds = %entry_ifend666
  %128 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend707:                                   ; preds = %entry_ifend666
  %stack_offset_value711 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value711, i64* %"lvar$0$", align 8
  %stack_offset_value713 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value713, i64* %"lvar$1$", align 8
  %stack_offset_value715 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value715, i64* %"lvar$2$", align 8
  %stack_offset_value717 = load i64, i64* %stack_offset_address_value4, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value717, i64* %"lvar$3$", align 8
  %stack_offset_value719 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value719, i64* %"lvar$4$", align 8
  %stack_offset_value721 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value721, i64* %"lvar$5$", align 8
  %stack_offset_value723 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value723, i64* %"lvar$6$", align 8
  %stack_offset_value725 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value725, i64* %"lvar$7$", align 8
  %stack_offset_value727 = load i64, i64* %stack_offset_address_value55, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value727, i64* %"lvar$8$", align 8
  %stack_offset_value729 = load i64, i64* %stack_offset_address_value57, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value729, i64* %"lvar$9$", align 8
  %stack_offset_value731 = load i64, i64* %stack_offset_address_value59, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value731, i64* %"lvar$10$", align 8
  %stack_offset_value733 = load i64, i64* %stack_offset_address_value61, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value733, i64* %"lvar$11$", align 8
  %stack_offset_value735 = load i64, i64* %stack_offset_address_value63, align 8
  store i64 0, i64* %"lvar$12$"
  store i64 %stack_offset_value735, i64* %"lvar$12$", align 8
  %stack_offset_value737 = load i64, i64* %stack_offset_address_value65, align 8
  store i64 0, i64* %"lvar$13$"
  store i64 %stack_offset_value737, i64* %"lvar$13$", align 8
  %loaded_stack_ptr_address_value738 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value739 = getelementptr i64, i64* %loaded_stack_ptr_address_value738, i64 -1
  %stack_pointer_offset_value740 = load i64, i64* %stack_pointer_offset_value739, align 8
  %129 = trunc i64 %stack_pointer_offset_value740 to i32
  call void @push_jit_object(i32 %129)
  %loaded_stack_ptr_address_value741 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value742 = getelementptr i64, i64* %loaded_stack_ptr_address_value741, i64 1
  store i64* %dec_ptr_value742, i64** %stack_ptr_address
  %130 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52668320 to i8*))
  %ifcond745 = icmp eq i64* %130, null
  br i1 %ifcond745, label %then_block, label %entry_ifend744

entry_ifend744:                                   ; preds = %entry_ifend707
  %lvar746 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar746, i64* %lvar, align 8
  %lvar748 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar748, i64* %lvar_offset_value11, align 8
  %lvar750 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar750, i64* %lvar_offset_value13, align 8
  %lvar752 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar752, i64* %lvar_offset_value15, align 8
  %lvar754 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar754, i64* %lvar_offset_value17, align 8
  %lvar756 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar756, i64* %lvar_offset_value19, align 8
  %lvar758 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar758, i64* %lvar_offset_value21, align 8
  %lvar760 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar760, i64* %lvar_offset_value23, align 8
  %lvar762 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar762, i64* %lvar_offset_value25, align 8
  %lvar764 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar764, i64* %lvar_offset_value27, align 8
  %lvar766 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value29, align 8
  store i64 %lvar766, i64* %lvar_offset_value29, align 8
  %lvar768 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value31, align 8
  store i64 %lvar768, i64* %lvar_offset_value31, align 8
  %lvar770 = load i64, i64* %"lvar$12$"
  store i64 0, i64* %lvar_offset_value33, align 8
  store i64 %lvar770, i64* %lvar_offset_value33, align 8
  %lvar772 = load i64, i64* %"lvar$13$"
  store i64 0, i64* %lvar_offset_value35, align 8
  store i64 %lvar772, i64* %lvar_offset_value35, align 8
  %loaded_stack_ptr_address_value774 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value774, align 8
  store i64 %stack_pointer_offset_value740, i64* %loaded_stack_ptr_address_value774, align 8
  %loaded_stack_ptr_address_value775 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value776 = getelementptr i64, i64* %loaded_stack_ptr_address_value775, i64 1
  store i64* %inc_ptr_value776, i64** %stack_ptr_address
  %131 = call i32 @call_invoke_method(i64* %130, i32 10, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond777 = icmp ne i32 %131, 1
  br i1 %ifcond777, label %then_block778, label %entry_ifend779

then_block778:                                    ; preds = %entry_ifend744
  %132 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend779:                                   ; preds = %entry_ifend744
  %stack_offset_value783 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value783, i64* %"lvar$0$", align 8
  %stack_offset_value785 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value785, i64* %"lvar$1$", align 8
  %stack_offset_value787 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value787, i64* %"lvar$2$", align 8
  %stack_offset_value789 = load i64, i64* %stack_offset_address_value4, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value789, i64* %"lvar$3$", align 8
  %stack_offset_value791 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value791, i64* %"lvar$4$", align 8
  %stack_offset_value793 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value793, i64* %"lvar$5$", align 8
  %stack_offset_value795 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value795, i64* %"lvar$6$", align 8
  %stack_offset_value797 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value797, i64* %"lvar$7$", align 8
  %stack_offset_value799 = load i64, i64* %stack_offset_address_value55, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value799, i64* %"lvar$8$", align 8
  %stack_offset_value801 = load i64, i64* %stack_offset_address_value57, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value801, i64* %"lvar$9$", align 8
  %stack_offset_value803 = load i64, i64* %stack_offset_address_value59, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value803, i64* %"lvar$10$", align 8
  %stack_offset_value805 = load i64, i64* %stack_offset_address_value61, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value805, i64* %"lvar$11$", align 8
  %stack_offset_value807 = load i64, i64* %stack_offset_address_value63, align 8
  store i64 0, i64* %"lvar$12$"
  store i64 %stack_offset_value807, i64* %"lvar$12$", align 8
  %stack_offset_value809 = load i64, i64* %stack_offset_address_value65, align 8
  store i64 0, i64* %"lvar$13$"
  store i64 %stack_offset_value809, i64* %"lvar$13$", align 8
  %loaded_stack_ptr_address_value810 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value811 = getelementptr i64, i64* %loaded_stack_ptr_address_value810, i64 -1
  %stack_pointer_offset_value812 = load i64, i64* %stack_pointer_offset_value811, align 8
  %133 = trunc i64 %stack_pointer_offset_value812 to i32
  call void @push_jit_object(i32 %133)
  %loaded_stack_ptr_address_value813 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value814 = getelementptr i64, i64* %loaded_stack_ptr_address_value813, i64 1
  store i64* %dec_ptr_value814, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$12$"
  store i64 %stack_pointer_offset_value812, i64* %"lvar$12$", align 8
  store i32 0, i32* @gSigInt
  %lvar815 = load i64, i64* %"lvar$5$"
  %134 = trunc i64 %lvar815 to i32
  %135 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52668328 to i8*))
  %ifcond819 = icmp eq i64* %135, null
  br i1 %ifcond819, label %then_block, label %entry_ifend818

entry_ifend818:                                   ; preds = %entry_ifend779
  %lvar820 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar820, i64* %lvar, align 8
  %lvar822 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar822, i64* %lvar_offset_value11, align 8
  %lvar824 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar824, i64* %lvar_offset_value13, align 8
  %lvar826 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar826, i64* %lvar_offset_value15, align 8
  %lvar828 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar828, i64* %lvar_offset_value17, align 8
  %lvar830 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar830, i64* %lvar_offset_value19, align 8
  %lvar832 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar832, i64* %lvar_offset_value21, align 8
  %lvar834 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar834, i64* %lvar_offset_value23, align 8
  %lvar836 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar836, i64* %lvar_offset_value25, align 8
  %lvar838 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar838, i64* %lvar_offset_value27, align 8
  %lvar840 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value29, align 8
  store i64 %lvar840, i64* %lvar_offset_value29, align 8
  %lvar842 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value31, align 8
  store i64 %lvar842, i64* %lvar_offset_value31, align 8
  %lvar844 = load i64, i64* %"lvar$12$"
  store i64 0, i64* %lvar_offset_value33, align 8
  store i64 %lvar844, i64* %lvar_offset_value33, align 8
  %lvar846 = load i64, i64* %"lvar$13$"
  store i64 0, i64* %lvar_offset_value35, align 8
  store i64 %lvar846, i64* %lvar_offset_value35, align 8
  %loaded_stack_ptr_address_value848 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value848, align 8
  %136 = zext i32 %134 to i64
  store i64 %136, i64* %loaded_stack_ptr_address_value848, align 8
  %loaded_stack_ptr_address_value849 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value850 = getelementptr i64, i64* %loaded_stack_ptr_address_value849, i64 1
  store i64* %inc_ptr_value850, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value850, align 8
  %137 = zext i32 %133 to i64
  store i64 %137, i64* %inc_ptr_value850, align 8
  %loaded_stack_ptr_address_value852 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value853 = getelementptr i64, i64* %loaded_stack_ptr_address_value852, i64 1
  store i64* %inc_ptr_value853, i64** %stack_ptr_address
  %138 = call i32 @call_invoke_method(i64* %135, i32 8, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond854 = icmp ne i32 %138, 1
  br i1 %ifcond854, label %then_block855, label %entry_ifend856

then_block855:                                    ; preds = %entry_ifend818
  %139 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend856:                                   ; preds = %entry_ifend818
  %stack_offset_value860 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value860, i64* %"lvar$0$", align 8
  %stack_offset_value862 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value862, i64* %"lvar$1$", align 8
  %stack_offset_value864 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value864, i64* %"lvar$2$", align 8
  %stack_offset_value866 = load i64, i64* %stack_offset_address_value4, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value866, i64* %"lvar$3$", align 8
  %stack_offset_value868 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value868, i64* %"lvar$4$", align 8
  %stack_offset_value870 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value870, i64* %"lvar$5$", align 8
  %stack_offset_value872 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value872, i64* %"lvar$6$", align 8
  %stack_offset_value874 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value874, i64* %"lvar$7$", align 8
  %stack_offset_value876 = load i64, i64* %stack_offset_address_value55, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value876, i64* %"lvar$8$", align 8
  %stack_offset_value878 = load i64, i64* %stack_offset_address_value57, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value878, i64* %"lvar$9$", align 8
  %stack_offset_value880 = load i64, i64* %stack_offset_address_value59, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value880, i64* %"lvar$10$", align 8
  %stack_offset_value882 = load i64, i64* %stack_offset_address_value61, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value882, i64* %"lvar$11$", align 8
  %stack_offset_value884 = load i64, i64* %stack_offset_address_value63, align 8
  store i64 0, i64* %"lvar$12$"
  store i64 %stack_offset_value884, i64* %"lvar$12$", align 8
  %stack_offset_value886 = load i64, i64* %stack_offset_address_value65, align 8
  store i64 0, i64* %"lvar$13$"
  store i64 %stack_offset_value886, i64* %"lvar$13$", align 8
  %loaded_stack_ptr_address_value887 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value888 = getelementptr i64, i64* %loaded_stack_ptr_address_value887, i64 -1
  %stack_pointer_offset_value889 = load i64, i64* %stack_pointer_offset_value888, align 8
  %140 = trunc i64 %stack_pointer_offset_value889 to i32
  call void @push_jit_object(i32 %140)
  %loaded_stack_ptr_address_value890 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value891 = getelementptr i64, i64* %loaded_stack_ptr_address_value890, i64 1
  store i64* %dec_ptr_value891, i64** %stack_ptr_address
  store i32 0, i32* @gSigInt
  br label %label_whilezzzv

entry_condend898:                                 ; preds = %label_elifzzzw1a
  %lvar902 = load i64, i64* %"lvar$9$"
  %141 = trunc i64 %lvar902 to i32
  %142 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %141, i32 0)
  %143 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %142, i32 0, i32 0
  %144 = load i64, i64* %143, align 4
  %145 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %142, i32 0, i32 1
  %146 = load i32, i32* %145, align 4
  %ifcond905 = icmp eq i32 %146, 0
  br i1 %ifcond905, label %then_block, label %entry_ifend904

label_if_elifzzzw0a:                              ; preds = %label_elifzzzw1a
  %147 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52668852 to i8*))
  %ifcond1731 = icmp eq i64* %147, null
  br i1 %ifcond1731, label %then_block, label %entry_ifend1730

entry_ifend904:                                   ; preds = %entry_condend898
  %148 = trunc i64 %144 to i32
  %149 = call %clvalue_and_bool_struct* @load_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %148, i32 0)
  %150 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %149, i32 0, i32 0
  %151 = load i64, i64* %150, align 4
  %152 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %149, i32 0, i32 1
  %153 = load i32, i32* %152, align 4
  %ifcond908 = icmp eq i32 %153, 0
  br i1 %ifcond908, label %then_block, label %entry_ifend907

entry_ifend907:                                   ; preds = %entry_ifend904
  %154 = trunc i64 %151 to i32
  %155 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52668452 to i8*))
  %ifcond911 = icmp eq i64* %155, null
  br i1 %ifcond911, label %then_block, label %entry_ifend910

entry_ifend910:                                   ; preds = %entry_ifend907
  %lvar912 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar912, i64* %lvar, align 8
  %lvar914 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar914, i64* %lvar_offset_value11, align 8
  %lvar916 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar916, i64* %lvar_offset_value13, align 8
  %lvar918 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar918, i64* %lvar_offset_value15, align 8
  %lvar920 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar920, i64* %lvar_offset_value17, align 8
  %lvar922 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar922, i64* %lvar_offset_value19, align 8
  %lvar924 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar924, i64* %lvar_offset_value21, align 8
  %lvar926 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar926, i64* %lvar_offset_value23, align 8
  %lvar928 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar928, i64* %lvar_offset_value25, align 8
  %lvar930 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar930, i64* %lvar_offset_value27, align 8
  %lvar932 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value29, align 8
  store i64 %lvar932, i64* %lvar_offset_value29, align 8
  %lvar934 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value31, align 8
  store i64 %lvar934, i64* %lvar_offset_value31, align 8
  %lvar936 = load i64, i64* %"lvar$12$"
  store i64 0, i64* %lvar_offset_value33, align 8
  store i64 %lvar936, i64* %lvar_offset_value33, align 8
  %lvar938 = load i64, i64* %"lvar$13$"
  store i64 0, i64* %lvar_offset_value35, align 8
  store i64 %lvar938, i64* %lvar_offset_value35, align 8
  %loaded_stack_ptr_address_value940 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value940, align 8
  %156 = zext i32 %55 to i64
  store i64 %156, i64* %loaded_stack_ptr_address_value940, align 8
  %loaded_stack_ptr_address_value941 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value942 = getelementptr i64, i64* %loaded_stack_ptr_address_value941, i64 1
  store i64* %inc_ptr_value942, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value942, align 8
  %157 = zext i32 %56 to i64
  store i64 %157, i64* %inc_ptr_value942, align 8
  %loaded_stack_ptr_address_value944 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value945 = getelementptr i64, i64* %loaded_stack_ptr_address_value944, i64 1
  store i64* %inc_ptr_value945, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value945, align 8
  %158 = zext i32 %154 to i64
  store i64 %158, i64* %inc_ptr_value945, align 8
  %loaded_stack_ptr_address_value947 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value948 = getelementptr i64, i64* %loaded_stack_ptr_address_value947, i64 1
  store i64* %inc_ptr_value948, i64** %stack_ptr_address
  %159 = call i32 @call_invoke_method(i64* %155, i32 11, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond949 = icmp ne i32 %159, 1
  br i1 %ifcond949, label %then_block950, label %entry_ifend951

then_block950:                                    ; preds = %entry_ifend910
  %160 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend951:                                   ; preds = %entry_ifend910
  %stack_offset_value955 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value955, i64* %"lvar$0$", align 8
  %stack_offset_value957 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value957, i64* %"lvar$1$", align 8
  %stack_offset_value959 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value959, i64* %"lvar$2$", align 8
  %stack_offset_value961 = load i64, i64* %stack_offset_address_value4, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value961, i64* %"lvar$3$", align 8
  %stack_offset_value963 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value963, i64* %"lvar$4$", align 8
  %stack_offset_value965 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value965, i64* %"lvar$5$", align 8
  %stack_offset_value967 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value967, i64* %"lvar$6$", align 8
  %stack_offset_value969 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value969, i64* %"lvar$7$", align 8
  %stack_offset_value971 = load i64, i64* %stack_offset_address_value55, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value971, i64* %"lvar$8$", align 8
  %stack_offset_value973 = load i64, i64* %stack_offset_address_value57, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value973, i64* %"lvar$9$", align 8
  %stack_offset_value975 = load i64, i64* %stack_offset_address_value59, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value975, i64* %"lvar$10$", align 8
  %stack_offset_value977 = load i64, i64* %stack_offset_address_value61, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value977, i64* %"lvar$11$", align 8
  %stack_offset_value979 = load i64, i64* %stack_offset_address_value63, align 8
  store i64 0, i64* %"lvar$12$"
  store i64 %stack_offset_value979, i64* %"lvar$12$", align 8
  %stack_offset_value981 = load i64, i64* %stack_offset_address_value65, align 8
  store i64 0, i64* %"lvar$13$"
  store i64 %stack_offset_value981, i64* %"lvar$13$", align 8
  %loaded_stack_ptr_address_value982 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value983 = getelementptr i64, i64* %loaded_stack_ptr_address_value982, i64 -1
  %stack_pointer_offset_value984 = load i64, i64* %stack_pointer_offset_value983, align 8
  %161 = trunc i64 %stack_pointer_offset_value984 to i32
  call void @push_jit_object(i32 %161)
  %loaded_stack_ptr_address_value985 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value986 = getelementptr i64, i64* %loaded_stack_ptr_address_value985, i64 1
  store i64* %dec_ptr_value986, i64** %stack_ptr_address
  %162 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52668460 to i8*))
  %ifcond989 = icmp eq i64* %162, null
  br i1 %ifcond989, label %then_block, label %entry_ifend988

entry_ifend988:                                   ; preds = %entry_ifend951
  %lvar990 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar990, i64* %lvar, align 8
  %lvar992 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar992, i64* %lvar_offset_value11, align 8
  %lvar994 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar994, i64* %lvar_offset_value13, align 8
  %lvar996 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar996, i64* %lvar_offset_value15, align 8
  %lvar998 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar998, i64* %lvar_offset_value17, align 8
  %lvar1000 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar1000, i64* %lvar_offset_value19, align 8
  %lvar1002 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar1002, i64* %lvar_offset_value21, align 8
  %lvar1004 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar1004, i64* %lvar_offset_value23, align 8
  %lvar1006 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar1006, i64* %lvar_offset_value25, align 8
  %lvar1008 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar1008, i64* %lvar_offset_value27, align 8
  %lvar1010 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value29, align 8
  store i64 %lvar1010, i64* %lvar_offset_value29, align 8
  %lvar1012 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value31, align 8
  store i64 %lvar1012, i64* %lvar_offset_value31, align 8
  %lvar1014 = load i64, i64* %"lvar$12$"
  store i64 0, i64* %lvar_offset_value33, align 8
  store i64 %lvar1014, i64* %lvar_offset_value33, align 8
  %lvar1016 = load i64, i64* %"lvar$13$"
  store i64 0, i64* %lvar_offset_value35, align 8
  store i64 %lvar1016, i64* %lvar_offset_value35, align 8
  %loaded_stack_ptr_address_value1018 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value1018, align 8
  store i64 %stack_pointer_offset_value984, i64* %loaded_stack_ptr_address_value1018, align 8
  %loaded_stack_ptr_address_value1019 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value1020 = getelementptr i64, i64* %loaded_stack_ptr_address_value1019, i64 1
  store i64* %inc_ptr_value1020, i64** %stack_ptr_address
  %163 = call i32 @call_invoke_method(i64* %162, i32 10, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond1021 = icmp ne i32 %163, 1
  br i1 %ifcond1021, label %then_block1022, label %entry_ifend1023

then_block1022:                                   ; preds = %entry_ifend988
  %164 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend1023:                                  ; preds = %entry_ifend988
  %stack_offset_value1027 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value1027, i64* %"lvar$0$", align 8
  %stack_offset_value1029 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value1029, i64* %"lvar$1$", align 8
  %stack_offset_value1031 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value1031, i64* %"lvar$2$", align 8
  %stack_offset_value1033 = load i64, i64* %stack_offset_address_value4, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value1033, i64* %"lvar$3$", align 8
  %stack_offset_value1035 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value1035, i64* %"lvar$4$", align 8
  %stack_offset_value1037 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value1037, i64* %"lvar$5$", align 8
  %stack_offset_value1039 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value1039, i64* %"lvar$6$", align 8
  %stack_offset_value1041 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value1041, i64* %"lvar$7$", align 8
  %stack_offset_value1043 = load i64, i64* %stack_offset_address_value55, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value1043, i64* %"lvar$8$", align 8
  %stack_offset_value1045 = load i64, i64* %stack_offset_address_value57, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value1045, i64* %"lvar$9$", align 8
  %stack_offset_value1047 = load i64, i64* %stack_offset_address_value59, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value1047, i64* %"lvar$10$", align 8
  %stack_offset_value1049 = load i64, i64* %stack_offset_address_value61, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value1049, i64* %"lvar$11$", align 8
  %stack_offset_value1051 = load i64, i64* %stack_offset_address_value63, align 8
  store i64 0, i64* %"lvar$12$"
  store i64 %stack_offset_value1051, i64* %"lvar$12$", align 8
  %stack_offset_value1053 = load i64, i64* %stack_offset_address_value65, align 8
  store i64 0, i64* %"lvar$13$"
  store i64 %stack_offset_value1053, i64* %"lvar$13$", align 8
  %loaded_stack_ptr_address_value1054 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value1055 = getelementptr i64, i64* %loaded_stack_ptr_address_value1054, i64 -1
  %stack_pointer_offset_value1056 = load i64, i64* %stack_pointer_offset_value1055, align 8
  %165 = trunc i64 %stack_pointer_offset_value1056 to i32
  call void @push_jit_object(i32 %165)
  %loaded_stack_ptr_address_value1057 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value1058 = getelementptr i64, i64* %loaded_stack_ptr_address_value1057, i64 1
  store i64* %dec_ptr_value1058, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_pointer_offset_value1056, i64* %"lvar$11$", align 8
  store i32 0, i32* @gSigInt
  %lvar1059 = load i64, i64* %"lvar$5$"
  %166 = trunc i64 %lvar1059 to i32
  %167 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52668468 to i8*))
  %ifcond1063 = icmp eq i64* %167, null
  br i1 %ifcond1063, label %then_block, label %entry_ifend1062

entry_ifend1062:                                  ; preds = %entry_ifend1023
  %lvar1064 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar1064, i64* %lvar, align 8
  %lvar1066 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar1066, i64* %lvar_offset_value11, align 8
  %lvar1068 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar1068, i64* %lvar_offset_value13, align 8
  %lvar1070 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar1070, i64* %lvar_offset_value15, align 8
  %lvar1072 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar1072, i64* %lvar_offset_value17, align 8
  %lvar1074 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar1074, i64* %lvar_offset_value19, align 8
  %lvar1076 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar1076, i64* %lvar_offset_value21, align 8
  %lvar1078 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar1078, i64* %lvar_offset_value23, align 8
  %lvar1080 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar1080, i64* %lvar_offset_value25, align 8
  %lvar1082 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar1082, i64* %lvar_offset_value27, align 8
  %lvar1084 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value29, align 8
  store i64 %lvar1084, i64* %lvar_offset_value29, align 8
  %lvar1086 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value31, align 8
  store i64 %lvar1086, i64* %lvar_offset_value31, align 8
  %lvar1088 = load i64, i64* %"lvar$12$"
  store i64 0, i64* %lvar_offset_value33, align 8
  store i64 %lvar1088, i64* %lvar_offset_value33, align 8
  %lvar1090 = load i64, i64* %"lvar$13$"
  store i64 0, i64* %lvar_offset_value35, align 8
  store i64 %lvar1090, i64* %lvar_offset_value35, align 8
  %loaded_stack_ptr_address_value1092 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value1092, align 8
  %168 = zext i32 %166 to i64
  store i64 %168, i64* %loaded_stack_ptr_address_value1092, align 8
  %loaded_stack_ptr_address_value1093 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value1094 = getelementptr i64, i64* %loaded_stack_ptr_address_value1093, i64 1
  store i64* %inc_ptr_value1094, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value1094, align 8
  %169 = zext i32 %165 to i64
  store i64 %169, i64* %inc_ptr_value1094, align 8
  %loaded_stack_ptr_address_value1096 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value1097 = getelementptr i64, i64* %loaded_stack_ptr_address_value1096, i64 1
  store i64* %inc_ptr_value1097, i64** %stack_ptr_address
  %170 = call i32 @call_invoke_method(i64* %167, i32 8, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond1098 = icmp ne i32 %170, 1
  br i1 %ifcond1098, label %then_block1099, label %entry_ifend1100

then_block1099:                                   ; preds = %entry_ifend1062
  %171 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend1100:                                  ; preds = %entry_ifend1062
  %stack_offset_value1104 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value1104, i64* %"lvar$0$", align 8
  %stack_offset_value1106 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value1106, i64* %"lvar$1$", align 8
  %stack_offset_value1108 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value1108, i64* %"lvar$2$", align 8
  %stack_offset_value1110 = load i64, i64* %stack_offset_address_value4, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value1110, i64* %"lvar$3$", align 8
  %stack_offset_value1112 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value1112, i64* %"lvar$4$", align 8
  %stack_offset_value1114 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value1114, i64* %"lvar$5$", align 8
  %stack_offset_value1116 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value1116, i64* %"lvar$6$", align 8
  %stack_offset_value1118 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value1118, i64* %"lvar$7$", align 8
  %stack_offset_value1120 = load i64, i64* %stack_offset_address_value55, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value1120, i64* %"lvar$8$", align 8
  %stack_offset_value1122 = load i64, i64* %stack_offset_address_value57, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value1122, i64* %"lvar$9$", align 8
  %stack_offset_value1124 = load i64, i64* %stack_offset_address_value59, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value1124, i64* %"lvar$10$", align 8
  %stack_offset_value1126 = load i64, i64* %stack_offset_address_value61, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value1126, i64* %"lvar$11$", align 8
  %stack_offset_value1128 = load i64, i64* %stack_offset_address_value63, align 8
  store i64 0, i64* %"lvar$12$"
  store i64 %stack_offset_value1128, i64* %"lvar$12$", align 8
  %stack_offset_value1130 = load i64, i64* %stack_offset_address_value65, align 8
  store i64 0, i64* %"lvar$13$"
  store i64 %stack_offset_value1130, i64* %"lvar$13$", align 8
  %loaded_stack_ptr_address_value1131 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value1132 = getelementptr i64, i64* %loaded_stack_ptr_address_value1131, i64 -1
  %stack_pointer_offset_value1133 = load i64, i64* %stack_pointer_offset_value1132, align 8
  %172 = trunc i64 %stack_pointer_offset_value1133 to i32
  call void @push_jit_object(i32 %172)
  %loaded_stack_ptr_address_value1134 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value1135 = getelementptr i64, i64* %loaded_stack_ptr_address_value1134, i64 1
  store i64* %dec_ptr_value1135, i64** %stack_ptr_address
  store i32 0, i32* @gSigInt
  %lvar1136 = load i64, i64* %"lvar$5$"
  %173 = trunc i64 %lvar1136 to i32
  %lvar1137 = load i64, i64* %"lvar$2$"
  %174 = trunc i64 %lvar1137 to i32
  %175 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52668476 to i8*))
  %ifcond1140 = icmp eq i64* %175, null
  br i1 %ifcond1140, label %then_block, label %entry_ifend1139

entry_ifend1139:                                  ; preds = %entry_ifend1100
  %lvar1141 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar1141, i64* %lvar, align 8
  %lvar1143 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar1143, i64* %lvar_offset_value11, align 8
  %lvar1145 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar1145, i64* %lvar_offset_value13, align 8
  %lvar1147 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar1147, i64* %lvar_offset_value15, align 8
  %lvar1149 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar1149, i64* %lvar_offset_value17, align 8
  %lvar1151 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar1151, i64* %lvar_offset_value19, align 8
  %lvar1153 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar1153, i64* %lvar_offset_value21, align 8
  %lvar1155 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar1155, i64* %lvar_offset_value23, align 8
  %lvar1157 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar1157, i64* %lvar_offset_value25, align 8
  %lvar1159 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar1159, i64* %lvar_offset_value27, align 8
  %lvar1161 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value29, align 8
  store i64 %lvar1161, i64* %lvar_offset_value29, align 8
  %lvar1163 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value31, align 8
  store i64 %lvar1163, i64* %lvar_offset_value31, align 8
  %lvar1165 = load i64, i64* %"lvar$12$"
  store i64 0, i64* %lvar_offset_value33, align 8
  store i64 %lvar1165, i64* %lvar_offset_value33, align 8
  %lvar1167 = load i64, i64* %"lvar$13$"
  store i64 0, i64* %lvar_offset_value35, align 8
  store i64 %lvar1167, i64* %lvar_offset_value35, align 8
  %loaded_stack_ptr_address_value1169 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value1169, align 8
  %176 = zext i32 %173 to i64
  store i64 %176, i64* %loaded_stack_ptr_address_value1169, align 8
  %loaded_stack_ptr_address_value1170 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value1171 = getelementptr i64, i64* %loaded_stack_ptr_address_value1170, i64 1
  store i64* %inc_ptr_value1171, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value1171, align 8
  %177 = zext i32 %174 to i64
  store i64 %177, i64* %inc_ptr_value1171, align 8
  %loaded_stack_ptr_address_value1173 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value1174 = getelementptr i64, i64* %loaded_stack_ptr_address_value1173, i64 1
  store i64* %inc_ptr_value1174, i64** %stack_ptr_address
  %178 = call i32 @call_invoke_method(i64* %175, i32 8, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond1175 = icmp ne i32 %178, 1
  br i1 %ifcond1175, label %then_block1176, label %entry_ifend1177

then_block1176:                                   ; preds = %entry_ifend1139
  %179 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend1177:                                  ; preds = %entry_ifend1139
  %stack_offset_value1181 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value1181, i64* %"lvar$0$", align 8
  %stack_offset_value1183 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value1183, i64* %"lvar$1$", align 8
  %stack_offset_value1185 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value1185, i64* %"lvar$2$", align 8
  %stack_offset_value1187 = load i64, i64* %stack_offset_address_value4, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value1187, i64* %"lvar$3$", align 8
  %stack_offset_value1189 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value1189, i64* %"lvar$4$", align 8
  %stack_offset_value1191 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value1191, i64* %"lvar$5$", align 8
  %stack_offset_value1193 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value1193, i64* %"lvar$6$", align 8
  %stack_offset_value1195 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value1195, i64* %"lvar$7$", align 8
  %stack_offset_value1197 = load i64, i64* %stack_offset_address_value55, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value1197, i64* %"lvar$8$", align 8
  %stack_offset_value1199 = load i64, i64* %stack_offset_address_value57, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value1199, i64* %"lvar$9$", align 8
  %stack_offset_value1201 = load i64, i64* %stack_offset_address_value59, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value1201, i64* %"lvar$10$", align 8
  %stack_offset_value1203 = load i64, i64* %stack_offset_address_value61, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value1203, i64* %"lvar$11$", align 8
  %stack_offset_value1205 = load i64, i64* %stack_offset_address_value63, align 8
  store i64 0, i64* %"lvar$12$"
  store i64 %stack_offset_value1205, i64* %"lvar$12$", align 8
  %stack_offset_value1207 = load i64, i64* %stack_offset_address_value65, align 8
  store i64 0, i64* %"lvar$13$"
  store i64 %stack_offset_value1207, i64* %"lvar$13$", align 8
  %loaded_stack_ptr_address_value1208 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value1209 = getelementptr i64, i64* %loaded_stack_ptr_address_value1208, i64 -1
  %stack_pointer_offset_value1210 = load i64, i64* %stack_pointer_offset_value1209, align 8
  %180 = trunc i64 %stack_pointer_offset_value1210 to i32
  call void @push_jit_object(i32 %180)
  %loaded_stack_ptr_address_value1211 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value1212 = getelementptr i64, i64* %loaded_stack_ptr_address_value1211, i64 1
  store i64* %dec_ptr_value1212, i64** %stack_ptr_address
  store i32 0, i32* @gSigInt
  %lvar1213 = load i64, i64* %"lvar$6$"
  %181 = trunc i64 %lvar1213 to i32
  %lvar1214 = load i64, i64* %"lvar$9$"
  %182 = trunc i64 %lvar1214 to i32
  %183 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %182, i32 1)
  %184 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %183, i32 0, i32 0
  %185 = load i64, i64* %184, align 4
  %186 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %183, i32 0, i32 1
  %187 = load i32, i32* %186, align 4
  %ifcond1217 = icmp eq i32 %187, 0
  br i1 %ifcond1217, label %then_block, label %entry_ifend1216

entry_ifend1216:                                  ; preds = %entry_ifend1177
  %188 = trunc i64 %185 to i32
  %189 = call %clvalue_and_bool_struct* @load_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %188, i32 0)
  %190 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %189, i32 0, i32 0
  %191 = load i64, i64* %190, align 4
  %192 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %189, i32 0, i32 1
  %193 = load i32, i32* %192, align 4
  %ifcond1220 = icmp eq i32 %193, 0
  br i1 %ifcond1220, label %then_block, label %entry_ifend1219

entry_ifend1219:                                  ; preds = %entry_ifend1216
  %194 = trunc i64 %191 to i32
  %eqtmpx1221 = icmp eq i32 %181, %194
  store i32 0, i32* @gSigInt
  br i1 %eqtmpx1221, label %entry_condend1223, label %label_elsezzzzc

entry_condend1223:                                ; preds = %entry_ifend1219
  %lvar1225 = load i64, i64* %"lvar$6$"
  %195 = trunc i64 %lvar1225 to i32
  %addtmp1226 = add nuw i32 %195, 1
  store i64 0, i64* %"lvar$6$"
  %196 = zext i32 %addtmp1226 to i64
  store i64 %196, i64* %"lvar$6$", align 8
  br label %label_if_endzzzzc

label_elsezzzzc:                                  ; preds = %entry_ifend1219
  %lvar1229 = load i64, i64* %"lvar$9$"
  %197 = trunc i64 %lvar1229 to i32
  %198 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %197, i32 1)
  %199 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %198, i32 0, i32 0
  %200 = load i64, i64* %199, align 4
  %201 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %198, i32 0, i32 1
  %202 = load i32, i32* %201, align 4
  %ifcond1232 = icmp eq i32 %202, 0
  br i1 %ifcond1232, label %then_block, label %entry_ifend1231

label_if_endzzzzc:                                ; preds = %entry_ifend1234, %entry_condend1223
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$12$"
  store i64 1, i64* %"lvar$12$", align 8
  br label %for_start_pointzzzzd

entry_ifend1231:                                  ; preds = %label_elsezzzzc
  %203 = trunc i64 %200 to i32
  %204 = call %clvalue_and_bool_struct* @load_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %203, i32 0)
  %205 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %204, i32 0, i32 0
  %206 = load i64, i64* %205, align 4
  %207 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %204, i32 0, i32 1
  %208 = load i32, i32* %207, align 4
  %ifcond1235 = icmp eq i32 %208, 0
  br i1 %ifcond1235, label %then_block, label %entry_ifend1234

entry_ifend1234:                                  ; preds = %entry_ifend1231
  %209 = trunc i64 %206 to i32
  store i64 0, i64* %"lvar$6$"
  %210 = zext i32 %209 to i64
  store i64 %210, i64* %"lvar$6$", align 8
  br label %label_if_endzzzzc

for_start_pointzzzzd:                             ; preds = %entry_ifend1450, %label_if_endzzzzc
  %lvar1237 = phi i64 [ %263, %entry_ifend1450 ], [ 1, %label_if_endzzzzc ]
  %211 = trunc i64 %lvar1237 to i32
  %lvar1238 = load i64, i64* %"lvar$10$"
  %212 = trunc i64 %lvar1238 to i32
  %letmp = icmp slt i32 %211, %212
  store i32 0, i32* @gSigInt
  br i1 %letmp, label %entry_condend1240, label %label_for_endzzzzd

entry_condend1240:                                ; preds = %for_start_pointzzzzd
  %lvar1242 = load i64, i64* %"lvar$7$"
  %213 = trunc i64 %lvar1242 to i32
  %lvar1243 = load i64, i64* %"lvar$9$"
  %214 = trunc i64 %lvar1243 to i32
  %215 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %214, i32 0)
  %216 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %215, i32 0, i32 0
  %217 = load i64, i64* %216, align 4
  %218 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %215, i32 0, i32 1
  %219 = load i32, i32* %218, align 4
  %ifcond1246 = icmp eq i32 %219, 0
  br i1 %ifcond1246, label %then_block, label %entry_ifend1245

label_for_endzzzzd:                               ; preds = %for_start_pointzzzzd
  %lvar1490 = load i64, i64* %"lvar$1$"
  %220 = trunc i64 %lvar1490 to i32
  %221 = call i32 @get_regex_global(i32 %220)
  %LOGICAL_DIANEAL1491 = icmp eq i32 %221, 0
  br i1 %LOGICAL_DIANEAL1491, label %entry_condend1493, label %entry_condend

entry_ifend1245:                                  ; preds = %entry_condend1240
  %222 = trunc i64 %217 to i32
  %lvar1247 = load i64, i64* %"lvar$12$"
  %223 = trunc i64 %lvar1247 to i32
  %224 = call %clvalue_and_bool_struct* @load_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %222, i32 %223)
  %225 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %224, i32 0, i32 0
  %226 = load i64, i64* %225, align 4
  %227 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %224, i32 0, i32 1
  %228 = load i32, i32* %227, align 4
  %ifcond1250 = icmp eq i32 %228, 0
  br i1 %ifcond1250, label %then_block, label %entry_ifend1249

entry_ifend1249:                                  ; preds = %entry_ifend1245
  %229 = trunc i64 %226 to i32
  %lvar1251 = load i64, i64* %"lvar$9$"
  %230 = trunc i64 %lvar1251 to i32
  %231 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %230, i32 1)
  %232 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %231, i32 0, i32 0
  %233 = load i64, i64* %232, align 4
  %234 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %231, i32 0, i32 1
  %235 = load i32, i32* %234, align 4
  %ifcond1254 = icmp eq i32 %235, 0
  br i1 %ifcond1254, label %then_block, label %entry_ifend1253

entry_ifend1253:                                  ; preds = %entry_ifend1249
  %236 = trunc i64 %233 to i32
  %lvar1255 = load i64, i64* %"lvar$12$"
  %237 = trunc i64 %lvar1255 to i32
  %238 = call %clvalue_and_bool_struct* @load_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %236, i32 %237)
  %239 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %238, i32 0, i32 0
  %240 = load i64, i64* %239, align 4
  %241 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %238, i32 0, i32 1
  %242 = load i32, i32* %241, align 4
  %ifcond1258 = icmp eq i32 %242, 0
  br i1 %ifcond1258, label %then_block, label %entry_ifend1257

entry_ifend1257:                                  ; preds = %entry_ifend1253
  %243 = trunc i64 %240 to i32
  %244 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52668620 to i8*))
  %ifcond1261 = icmp eq i64* %244, null
  br i1 %ifcond1261, label %then_block, label %entry_ifend1260

entry_ifend1260:                                  ; preds = %entry_ifend1257
  %lvar1262 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar1262, i64* %lvar, align 8
  %lvar1264 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar1264, i64* %lvar_offset_value11, align 8
  %lvar1266 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar1266, i64* %lvar_offset_value13, align 8
  %lvar1268 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar1268, i64* %lvar_offset_value15, align 8
  %lvar1270 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar1270, i64* %lvar_offset_value17, align 8
  %lvar1272 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar1272, i64* %lvar_offset_value19, align 8
  %lvar1274 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar1274, i64* %lvar_offset_value21, align 8
  %lvar1276 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar1276, i64* %lvar_offset_value23, align 8
  %lvar1278 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar1278, i64* %lvar_offset_value25, align 8
  %lvar1280 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar1280, i64* %lvar_offset_value27, align 8
  %lvar1282 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value29, align 8
  store i64 %lvar1282, i64* %lvar_offset_value29, align 8
  %lvar1284 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value31, align 8
  store i64 %lvar1284, i64* %lvar_offset_value31, align 8
  %lvar1286 = load i64, i64* %"lvar$12$"
  store i64 0, i64* %lvar_offset_value33, align 8
  store i64 %lvar1286, i64* %lvar_offset_value33, align 8
  %lvar1288 = load i64, i64* %"lvar$13$"
  store i64 0, i64* %lvar_offset_value35, align 8
  store i64 %lvar1288, i64* %lvar_offset_value35, align 8
  %loaded_stack_ptr_address_value1290 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value1290, align 8
  %245 = zext i32 %213 to i64
  store i64 %245, i64* %loaded_stack_ptr_address_value1290, align 8
  %loaded_stack_ptr_address_value1291 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value1292 = getelementptr i64, i64* %loaded_stack_ptr_address_value1291, i64 1
  store i64* %inc_ptr_value1292, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value1292, align 8
  %246 = zext i32 %229 to i64
  store i64 %246, i64* %inc_ptr_value1292, align 8
  %loaded_stack_ptr_address_value1294 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value1295 = getelementptr i64, i64* %loaded_stack_ptr_address_value1294, i64 1
  store i64* %inc_ptr_value1295, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value1295, align 8
  %247 = zext i32 %243 to i64
  store i64 %247, i64* %inc_ptr_value1295, align 8
  %loaded_stack_ptr_address_value1297 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value1298 = getelementptr i64, i64* %loaded_stack_ptr_address_value1297, i64 1
  store i64* %inc_ptr_value1298, i64** %stack_ptr_address
  %248 = call i32 @call_invoke_method(i64* %244, i32 11, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond1299 = icmp ne i32 %248, 1
  br i1 %ifcond1299, label %then_block1300, label %entry_ifend1301

then_block1300:                                   ; preds = %entry_ifend1260
  %249 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend1301:                                  ; preds = %entry_ifend1260
  %stack_offset_value1305 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value1305, i64* %"lvar$0$", align 8
  %stack_offset_value1307 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value1307, i64* %"lvar$1$", align 8
  %stack_offset_value1309 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value1309, i64* %"lvar$2$", align 8
  %stack_offset_value1311 = load i64, i64* %stack_offset_address_value4, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value1311, i64* %"lvar$3$", align 8
  %stack_offset_value1313 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value1313, i64* %"lvar$4$", align 8
  %stack_offset_value1315 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value1315, i64* %"lvar$5$", align 8
  %stack_offset_value1317 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value1317, i64* %"lvar$6$", align 8
  %stack_offset_value1319 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value1319, i64* %"lvar$7$", align 8
  %stack_offset_value1321 = load i64, i64* %stack_offset_address_value55, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value1321, i64* %"lvar$8$", align 8
  %stack_offset_value1323 = load i64, i64* %stack_offset_address_value57, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value1323, i64* %"lvar$9$", align 8
  %stack_offset_value1325 = load i64, i64* %stack_offset_address_value59, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value1325, i64* %"lvar$10$", align 8
  %stack_offset_value1327 = load i64, i64* %stack_offset_address_value61, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value1327, i64* %"lvar$11$", align 8
  %stack_offset_value1329 = load i64, i64* %stack_offset_address_value63, align 8
  store i64 0, i64* %"lvar$12$"
  store i64 %stack_offset_value1329, i64* %"lvar$12$", align 8
  %stack_offset_value1331 = load i64, i64* %stack_offset_address_value65, align 8
  store i64 0, i64* %"lvar$13$"
  store i64 %stack_offset_value1331, i64* %"lvar$13$", align 8
  %loaded_stack_ptr_address_value1332 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value1333 = getelementptr i64, i64* %loaded_stack_ptr_address_value1332, i64 -1
  %stack_pointer_offset_value1334 = load i64, i64* %stack_pointer_offset_value1333, align 8
  %250 = trunc i64 %stack_pointer_offset_value1334 to i32
  call void @push_jit_object(i32 %250)
  %loaded_stack_ptr_address_value1335 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value1336 = getelementptr i64, i64* %loaded_stack_ptr_address_value1335, i64 1
  store i64* %dec_ptr_value1336, i64** %stack_ptr_address
  %251 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52668628 to i8*))
  %ifcond1339 = icmp eq i64* %251, null
  br i1 %ifcond1339, label %then_block, label %entry_ifend1338

entry_ifend1338:                                  ; preds = %entry_ifend1301
  %lvar1340 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar1340, i64* %lvar, align 8
  %lvar1342 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar1342, i64* %lvar_offset_value11, align 8
  %lvar1344 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar1344, i64* %lvar_offset_value13, align 8
  %lvar1346 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar1346, i64* %lvar_offset_value15, align 8
  %lvar1348 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar1348, i64* %lvar_offset_value17, align 8
  %lvar1350 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar1350, i64* %lvar_offset_value19, align 8
  %lvar1352 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar1352, i64* %lvar_offset_value21, align 8
  %lvar1354 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar1354, i64* %lvar_offset_value23, align 8
  %lvar1356 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar1356, i64* %lvar_offset_value25, align 8
  %lvar1358 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar1358, i64* %lvar_offset_value27, align 8
  %lvar1360 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value29, align 8
  store i64 %lvar1360, i64* %lvar_offset_value29, align 8
  %lvar1362 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value31, align 8
  store i64 %lvar1362, i64* %lvar_offset_value31, align 8
  %lvar1364 = load i64, i64* %"lvar$12$"
  store i64 0, i64* %lvar_offset_value33, align 8
  store i64 %lvar1364, i64* %lvar_offset_value33, align 8
  %lvar1366 = load i64, i64* %"lvar$13$"
  store i64 0, i64* %lvar_offset_value35, align 8
  store i64 %lvar1366, i64* %lvar_offset_value35, align 8
  %loaded_stack_ptr_address_value1368 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value1368, align 8
  store i64 %stack_pointer_offset_value1334, i64* %loaded_stack_ptr_address_value1368, align 8
  %loaded_stack_ptr_address_value1369 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value1370 = getelementptr i64, i64* %loaded_stack_ptr_address_value1369, i64 1
  store i64* %inc_ptr_value1370, i64** %stack_ptr_address
  %252 = call i32 @call_invoke_method(i64* %251, i32 10, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond1371 = icmp ne i32 %252, 1
  br i1 %ifcond1371, label %then_block1372, label %entry_ifend1373

then_block1372:                                   ; preds = %entry_ifend1338
  %253 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend1373:                                  ; preds = %entry_ifend1338
  %stack_offset_value1377 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value1377, i64* %"lvar$0$", align 8
  %stack_offset_value1379 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value1379, i64* %"lvar$1$", align 8
  %stack_offset_value1381 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value1381, i64* %"lvar$2$", align 8
  %stack_offset_value1383 = load i64, i64* %stack_offset_address_value4, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value1383, i64* %"lvar$3$", align 8
  %stack_offset_value1385 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value1385, i64* %"lvar$4$", align 8
  %stack_offset_value1387 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value1387, i64* %"lvar$5$", align 8
  %stack_offset_value1389 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value1389, i64* %"lvar$6$", align 8
  %stack_offset_value1391 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value1391, i64* %"lvar$7$", align 8
  %stack_offset_value1393 = load i64, i64* %stack_offset_address_value55, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value1393, i64* %"lvar$8$", align 8
  %stack_offset_value1395 = load i64, i64* %stack_offset_address_value57, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value1395, i64* %"lvar$9$", align 8
  %stack_offset_value1397 = load i64, i64* %stack_offset_address_value59, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value1397, i64* %"lvar$10$", align 8
  %stack_offset_value1399 = load i64, i64* %stack_offset_address_value61, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value1399, i64* %"lvar$11$", align 8
  %stack_offset_value1401 = load i64, i64* %stack_offset_address_value63, align 8
  store i64 0, i64* %"lvar$12$"
  store i64 %stack_offset_value1401, i64* %"lvar$12$", align 8
  %stack_offset_value1403 = load i64, i64* %stack_offset_address_value65, align 8
  store i64 0, i64* %"lvar$13$"
  store i64 %stack_offset_value1403, i64* %"lvar$13$", align 8
  %loaded_stack_ptr_address_value1404 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value1405 = getelementptr i64, i64* %loaded_stack_ptr_address_value1404, i64 -1
  %stack_pointer_offset_value1406 = load i64, i64* %stack_pointer_offset_value1405, align 8
  %254 = trunc i64 %stack_pointer_offset_value1406 to i32
  call void @push_jit_object(i32 %254)
  %loaded_stack_ptr_address_value1407 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value1408 = getelementptr i64, i64* %loaded_stack_ptr_address_value1407, i64 1
  store i64* %dec_ptr_value1408, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$13$"
  store i64 %stack_pointer_offset_value1406, i64* %"lvar$13$", align 8
  store i32 0, i32* @gSigInt
  %lvar1409 = load i64, i64* %"lvar$3$"
  %255 = trunc i64 %lvar1409 to i32
  %256 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52668636 to i8*))
  %ifcond1413 = icmp eq i64* %256, null
  br i1 %ifcond1413, label %then_block, label %entry_ifend1412

entry_ifend1412:                                  ; preds = %entry_ifend1373
  %lvar1414 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar1414, i64* %lvar, align 8
  %lvar1416 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar1416, i64* %lvar_offset_value11, align 8
  %lvar1418 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar1418, i64* %lvar_offset_value13, align 8
  %lvar1420 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar1420, i64* %lvar_offset_value15, align 8
  %lvar1422 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar1422, i64* %lvar_offset_value17, align 8
  %lvar1424 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar1424, i64* %lvar_offset_value19, align 8
  %lvar1426 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar1426, i64* %lvar_offset_value21, align 8
  %lvar1428 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar1428, i64* %lvar_offset_value23, align 8
  %lvar1430 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar1430, i64* %lvar_offset_value25, align 8
  %lvar1432 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar1432, i64* %lvar_offset_value27, align 8
  %lvar1434 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value29, align 8
  store i64 %lvar1434, i64* %lvar_offset_value29, align 8
  %lvar1436 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value31, align 8
  store i64 %lvar1436, i64* %lvar_offset_value31, align 8
  %lvar1438 = load i64, i64* %"lvar$12$"
  store i64 0, i64* %lvar_offset_value33, align 8
  store i64 %lvar1438, i64* %lvar_offset_value33, align 8
  %lvar1440 = load i64, i64* %"lvar$13$"
  store i64 0, i64* %lvar_offset_value35, align 8
  store i64 %lvar1440, i64* %lvar_offset_value35, align 8
  %loaded_stack_ptr_address_value1442 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value1442, align 8
  %257 = zext i32 %255 to i64
  store i64 %257, i64* %loaded_stack_ptr_address_value1442, align 8
  %loaded_stack_ptr_address_value1443 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value1444 = getelementptr i64, i64* %loaded_stack_ptr_address_value1443, i64 1
  store i64* %inc_ptr_value1444, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value1444, align 8
  %258 = zext i32 %254 to i64
  store i64 %258, i64* %inc_ptr_value1444, align 8
  %loaded_stack_ptr_address_value1446 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value1447 = getelementptr i64, i64* %loaded_stack_ptr_address_value1446, i64 1
  store i64* %inc_ptr_value1447, i64** %stack_ptr_address
  %259 = call i32 @call_invoke_method(i64* %256, i32 7, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond1448 = icmp ne i32 %259, 1
  br i1 %ifcond1448, label %then_block1449, label %entry_ifend1450

then_block1449:                                   ; preds = %entry_ifend1412
  %260 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend1450:                                  ; preds = %entry_ifend1412
  %stack_offset_value1454 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value1454, i64* %"lvar$0$", align 8
  %stack_offset_value1456 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value1456, i64* %"lvar$1$", align 8
  %stack_offset_value1458 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value1458, i64* %"lvar$2$", align 8
  %stack_offset_value1460 = load i64, i64* %stack_offset_address_value4, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value1460, i64* %"lvar$3$", align 8
  %stack_offset_value1462 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value1462, i64* %"lvar$4$", align 8
  %stack_offset_value1464 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value1464, i64* %"lvar$5$", align 8
  %stack_offset_value1466 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value1466, i64* %"lvar$6$", align 8
  %stack_offset_value1468 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value1468, i64* %"lvar$7$", align 8
  %stack_offset_value1470 = load i64, i64* %stack_offset_address_value55, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value1470, i64* %"lvar$8$", align 8
  %stack_offset_value1472 = load i64, i64* %stack_offset_address_value57, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value1472, i64* %"lvar$9$", align 8
  %stack_offset_value1474 = load i64, i64* %stack_offset_address_value59, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value1474, i64* %"lvar$10$", align 8
  %stack_offset_value1476 = load i64, i64* %stack_offset_address_value61, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value1476, i64* %"lvar$11$", align 8
  %stack_offset_value1478 = load i64, i64* %stack_offset_address_value63, align 8
  store i64 0, i64* %"lvar$12$"
  store i64 %stack_offset_value1478, i64* %"lvar$12$", align 8
  %stack_offset_value1480 = load i64, i64* %stack_offset_address_value65, align 8
  store i64 0, i64* %"lvar$13$"
  store i64 %stack_offset_value1480, i64* %"lvar$13$", align 8
  %loaded_stack_ptr_address_value1481 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value1482 = getelementptr i64, i64* %loaded_stack_ptr_address_value1481, i64 -1
  %stack_pointer_offset_value1483 = load i64, i64* %stack_pointer_offset_value1482, align 8
  %261 = trunc i64 %stack_pointer_offset_value1483 to i32
  call void @push_jit_object(i32 %261)
  %loaded_stack_ptr_address_value1484 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value1485 = getelementptr i64, i64* %loaded_stack_ptr_address_value1484, i64 1
  store i64* %dec_ptr_value1485, i64** %stack_ptr_address
  %lvar1486 = load i64, i64* %"lvar$12$"
  %262 = trunc i64 %lvar1486 to i32
  %addtmp1487 = add nuw i32 %262, 1
  store i64 0, i64* %"lvar$12$"
  %263 = zext i32 %addtmp1487 to i64
  store i64 %263, i64* %"lvar$12$", align 8
  br label %for_start_pointzzzzd

entry_condend1493:                                ; preds = %label_for_endzzzzd
  store i32 0, i32* @gSigInt
  %lvar1495 = load i64, i64* %"lvar$7$"
  %264 = trunc i64 %lvar1495 to i32
  %lvar1496 = load i64, i64* %"lvar$6$"
  %265 = trunc i64 %lvar1496 to i32
  %266 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52668716 to i8*))
  %ifcond1499 = icmp eq i64* %266, null
  br i1 %ifcond1499, label %then_block, label %entry_ifend1498

entry_ifend1498:                                  ; preds = %entry_condend1493
  %lvar1500 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar1500, i64* %lvar, align 8
  %lvar1502 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar1502, i64* %lvar_offset_value11, align 8
  %lvar1504 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar1504, i64* %lvar_offset_value13, align 8
  %lvar1506 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar1506, i64* %lvar_offset_value15, align 8
  %lvar1508 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar1508, i64* %lvar_offset_value17, align 8
  %lvar1510 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar1510, i64* %lvar_offset_value19, align 8
  %lvar1512 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar1512, i64* %lvar_offset_value21, align 8
  %lvar1514 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar1514, i64* %lvar_offset_value23, align 8
  %lvar1516 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar1516, i64* %lvar_offset_value25, align 8
  %lvar1518 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar1518, i64* %lvar_offset_value27, align 8
  %lvar1520 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value29, align 8
  store i64 %lvar1520, i64* %lvar_offset_value29, align 8
  %lvar1522 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value31, align 8
  store i64 %lvar1522, i64* %lvar_offset_value31, align 8
  %lvar1524 = load i64, i64* %"lvar$12$"
  store i64 0, i64* %lvar_offset_value33, align 8
  store i64 %lvar1524, i64* %lvar_offset_value33, align 8
  %lvar1526 = load i64, i64* %"lvar$13$"
  store i64 0, i64* %lvar_offset_value35, align 8
  store i64 %lvar1526, i64* %lvar_offset_value35, align 8
  %loaded_stack_ptr_address_value1528 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value1528, align 8
  %267 = zext i32 %264 to i64
  store i64 %267, i64* %loaded_stack_ptr_address_value1528, align 8
  %loaded_stack_ptr_address_value1529 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value1530 = getelementptr i64, i64* %loaded_stack_ptr_address_value1529, i64 1
  store i64* %inc_ptr_value1530, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value1530, align 8
  %268 = zext i32 %265 to i64
  store i64 %268, i64* %inc_ptr_value1530, align 8
  %loaded_stack_ptr_address_value1532 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value1533 = getelementptr i64, i64* %loaded_stack_ptr_address_value1532, i64 1
  store i64* %inc_ptr_value1533, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value1533, align 8
  store i64 4294967295, i64* %inc_ptr_value1533, align 8
  %loaded_stack_ptr_address_value1535 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value1536 = getelementptr i64, i64* %loaded_stack_ptr_address_value1535, i64 1
  store i64* %inc_ptr_value1536, i64** %stack_ptr_address
  %269 = call i32 @call_invoke_method(i64* %266, i32 11, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond1537 = icmp ne i32 %269, 1
  br i1 %ifcond1537, label %then_block1538, label %entry_ifend1539

then_block1538:                                   ; preds = %entry_ifend1498
  %270 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend1539:                                  ; preds = %entry_ifend1498
  %stack_offset_value1543 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value1543, i64* %"lvar$0$", align 8
  %stack_offset_value1545 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value1545, i64* %"lvar$1$", align 8
  %stack_offset_value1547 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value1547, i64* %"lvar$2$", align 8
  %stack_offset_value1549 = load i64, i64* %stack_offset_address_value4, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value1549, i64* %"lvar$3$", align 8
  %stack_offset_value1551 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value1551, i64* %"lvar$4$", align 8
  %stack_offset_value1553 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value1553, i64* %"lvar$5$", align 8
  %stack_offset_value1555 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value1555, i64* %"lvar$6$", align 8
  %stack_offset_value1557 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value1557, i64* %"lvar$7$", align 8
  %stack_offset_value1559 = load i64, i64* %stack_offset_address_value55, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value1559, i64* %"lvar$8$", align 8
  %stack_offset_value1561 = load i64, i64* %stack_offset_address_value57, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value1561, i64* %"lvar$9$", align 8
  %stack_offset_value1563 = load i64, i64* %stack_offset_address_value59, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value1563, i64* %"lvar$10$", align 8
  %stack_offset_value1565 = load i64, i64* %stack_offset_address_value61, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value1565, i64* %"lvar$11$", align 8
  %stack_offset_value1567 = load i64, i64* %stack_offset_address_value63, align 8
  store i64 0, i64* %"lvar$12$"
  store i64 %stack_offset_value1567, i64* %"lvar$12$", align 8
  %stack_offset_value1569 = load i64, i64* %stack_offset_address_value65, align 8
  store i64 0, i64* %"lvar$13$"
  store i64 %stack_offset_value1569, i64* %"lvar$13$", align 8
  %loaded_stack_ptr_address_value1570 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value1571 = getelementptr i64, i64* %loaded_stack_ptr_address_value1570, i64 -1
  %stack_pointer_offset_value1572 = load i64, i64* %stack_pointer_offset_value1571, align 8
  %271 = trunc i64 %stack_pointer_offset_value1572 to i32
  call void @push_jit_object(i32 %271)
  %loaded_stack_ptr_address_value1573 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value1574 = getelementptr i64, i64* %loaded_stack_ptr_address_value1573, i64 1
  store i64* %dec_ptr_value1574, i64** %stack_ptr_address
  %272 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52668724 to i8*))
  %ifcond1577 = icmp eq i64* %272, null
  br i1 %ifcond1577, label %then_block, label %entry_ifend1576

entry_ifend1576:                                  ; preds = %entry_ifend1539
  %lvar1578 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar1578, i64* %lvar, align 8
  %lvar1580 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar1580, i64* %lvar_offset_value11, align 8
  %lvar1582 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar1582, i64* %lvar_offset_value13, align 8
  %lvar1584 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar1584, i64* %lvar_offset_value15, align 8
  %lvar1586 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar1586, i64* %lvar_offset_value17, align 8
  %lvar1588 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar1588, i64* %lvar_offset_value19, align 8
  %lvar1590 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar1590, i64* %lvar_offset_value21, align 8
  %lvar1592 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar1592, i64* %lvar_offset_value23, align 8
  %lvar1594 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar1594, i64* %lvar_offset_value25, align 8
  %lvar1596 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar1596, i64* %lvar_offset_value27, align 8
  %lvar1598 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value29, align 8
  store i64 %lvar1598, i64* %lvar_offset_value29, align 8
  %lvar1600 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value31, align 8
  store i64 %lvar1600, i64* %lvar_offset_value31, align 8
  %lvar1602 = load i64, i64* %"lvar$12$"
  store i64 0, i64* %lvar_offset_value33, align 8
  store i64 %lvar1602, i64* %lvar_offset_value33, align 8
  %lvar1604 = load i64, i64* %"lvar$13$"
  store i64 0, i64* %lvar_offset_value35, align 8
  store i64 %lvar1604, i64* %lvar_offset_value35, align 8
  %loaded_stack_ptr_address_value1606 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value1606, align 8
  store i64 %stack_pointer_offset_value1572, i64* %loaded_stack_ptr_address_value1606, align 8
  %loaded_stack_ptr_address_value1607 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value1608 = getelementptr i64, i64* %loaded_stack_ptr_address_value1607, i64 1
  store i64* %inc_ptr_value1608, i64** %stack_ptr_address
  %273 = call i32 @call_invoke_method(i64* %272, i32 10, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond1609 = icmp ne i32 %273, 1
  br i1 %ifcond1609, label %then_block1610, label %entry_ifend1611

then_block1610:                                   ; preds = %entry_ifend1576
  %274 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend1611:                                  ; preds = %entry_ifend1576
  %stack_offset_value1615 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value1615, i64* %"lvar$0$", align 8
  %stack_offset_value1617 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value1617, i64* %"lvar$1$", align 8
  %stack_offset_value1619 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value1619, i64* %"lvar$2$", align 8
  %stack_offset_value1621 = load i64, i64* %stack_offset_address_value4, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value1621, i64* %"lvar$3$", align 8
  %stack_offset_value1623 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value1623, i64* %"lvar$4$", align 8
  %stack_offset_value1625 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value1625, i64* %"lvar$5$", align 8
  %stack_offset_value1627 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value1627, i64* %"lvar$6$", align 8
  %stack_offset_value1629 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value1629, i64* %"lvar$7$", align 8
  %stack_offset_value1631 = load i64, i64* %stack_offset_address_value55, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value1631, i64* %"lvar$8$", align 8
  %stack_offset_value1633 = load i64, i64* %stack_offset_address_value57, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value1633, i64* %"lvar$9$", align 8
  %stack_offset_value1635 = load i64, i64* %stack_offset_address_value59, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value1635, i64* %"lvar$10$", align 8
  %stack_offset_value1637 = load i64, i64* %stack_offset_address_value61, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value1637, i64* %"lvar$11$", align 8
  %stack_offset_value1639 = load i64, i64* %stack_offset_address_value63, align 8
  store i64 0, i64* %"lvar$12$"
  store i64 %stack_offset_value1639, i64* %"lvar$12$", align 8
  %stack_offset_value1641 = load i64, i64* %stack_offset_address_value65, align 8
  store i64 0, i64* %"lvar$13$"
  store i64 %stack_offset_value1641, i64* %"lvar$13$", align 8
  %loaded_stack_ptr_address_value1642 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value1643 = getelementptr i64, i64* %loaded_stack_ptr_address_value1642, i64 -1
  %stack_pointer_offset_value1644 = load i64, i64* %stack_pointer_offset_value1643, align 8
  %275 = trunc i64 %stack_pointer_offset_value1644 to i32
  call void @push_jit_object(i32 %275)
  %loaded_stack_ptr_address_value1645 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value1646 = getelementptr i64, i64* %loaded_stack_ptr_address_value1645, i64 1
  store i64* %dec_ptr_value1646, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$13$"
  store i64 %stack_pointer_offset_value1644, i64* %"lvar$13$", align 8
  store i32 0, i32* @gSigInt
  %lvar1647 = load i64, i64* %"lvar$5$"
  %276 = trunc i64 %lvar1647 to i32
  %277 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52668732 to i8*))
  %ifcond1651 = icmp eq i64* %277, null
  br i1 %ifcond1651, label %then_block, label %entry_ifend1650

entry_ifend1650:                                  ; preds = %entry_ifend1611
  %lvar1652 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar1652, i64* %lvar, align 8
  %lvar1654 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar1654, i64* %lvar_offset_value11, align 8
  %lvar1656 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar1656, i64* %lvar_offset_value13, align 8
  %lvar1658 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar1658, i64* %lvar_offset_value15, align 8
  %lvar1660 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar1660, i64* %lvar_offset_value17, align 8
  %lvar1662 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar1662, i64* %lvar_offset_value19, align 8
  %lvar1664 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar1664, i64* %lvar_offset_value21, align 8
  %lvar1666 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar1666, i64* %lvar_offset_value23, align 8
  %lvar1668 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar1668, i64* %lvar_offset_value25, align 8
  %lvar1670 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar1670, i64* %lvar_offset_value27, align 8
  %lvar1672 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value29, align 8
  store i64 %lvar1672, i64* %lvar_offset_value29, align 8
  %lvar1674 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value31, align 8
  store i64 %lvar1674, i64* %lvar_offset_value31, align 8
  %lvar1676 = load i64, i64* %"lvar$12$"
  store i64 0, i64* %lvar_offset_value33, align 8
  store i64 %lvar1676, i64* %lvar_offset_value33, align 8
  %lvar1678 = load i64, i64* %"lvar$13$"
  store i64 0, i64* %lvar_offset_value35, align 8
  store i64 %lvar1678, i64* %lvar_offset_value35, align 8
  %loaded_stack_ptr_address_value1680 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value1680, align 8
  %278 = zext i32 %276 to i64
  store i64 %278, i64* %loaded_stack_ptr_address_value1680, align 8
  %loaded_stack_ptr_address_value1681 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value1682 = getelementptr i64, i64* %loaded_stack_ptr_address_value1681, i64 1
  store i64* %inc_ptr_value1682, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value1682, align 8
  %279 = zext i32 %275 to i64
  store i64 %279, i64* %inc_ptr_value1682, align 8
  %loaded_stack_ptr_address_value1684 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value1685 = getelementptr i64, i64* %loaded_stack_ptr_address_value1684, i64 1
  store i64* %inc_ptr_value1685, i64** %stack_ptr_address
  %280 = call i32 @call_invoke_method(i64* %277, i32 8, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond1686 = icmp ne i32 %280, 1
  br i1 %ifcond1686, label %then_block1687, label %entry_ifend1688

then_block1687:                                   ; preds = %entry_ifend1650
  %281 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend1688:                                  ; preds = %entry_ifend1650
  %stack_offset_value1692 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value1692, i64* %"lvar$0$", align 8
  %stack_offset_value1694 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value1694, i64* %"lvar$1$", align 8
  %stack_offset_value1696 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value1696, i64* %"lvar$2$", align 8
  %stack_offset_value1698 = load i64, i64* %stack_offset_address_value4, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value1698, i64* %"lvar$3$", align 8
  %stack_offset_value1700 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value1700, i64* %"lvar$4$", align 8
  %stack_offset_value1702 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value1702, i64* %"lvar$5$", align 8
  %stack_offset_value1704 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value1704, i64* %"lvar$6$", align 8
  %stack_offset_value1706 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value1706, i64* %"lvar$7$", align 8
  %stack_offset_value1708 = load i64, i64* %stack_offset_address_value55, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value1708, i64* %"lvar$8$", align 8
  %stack_offset_value1710 = load i64, i64* %stack_offset_address_value57, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value1710, i64* %"lvar$9$", align 8
  %stack_offset_value1712 = load i64, i64* %stack_offset_address_value59, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value1712, i64* %"lvar$10$", align 8
  %stack_offset_value1714 = load i64, i64* %stack_offset_address_value61, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value1714, i64* %"lvar$11$", align 8
  %stack_offset_value1716 = load i64, i64* %stack_offset_address_value63, align 8
  store i64 0, i64* %"lvar$12$"
  store i64 %stack_offset_value1716, i64* %"lvar$12$", align 8
  %stack_offset_value1718 = load i64, i64* %stack_offset_address_value65, align 8
  store i64 0, i64* %"lvar$13$"
  store i64 %stack_offset_value1718, i64* %"lvar$13$", align 8
  %loaded_stack_ptr_address_value1719 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value1720 = getelementptr i64, i64* %loaded_stack_ptr_address_value1719, i64 -1
  %stack_pointer_offset_value1721 = load i64, i64* %stack_pointer_offset_value1720, align 8
  %282 = trunc i64 %stack_pointer_offset_value1721 to i32
  call void @push_jit_object(i32 %282)
  %loaded_stack_ptr_address_value1722 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value1723 = getelementptr i64, i64* %loaded_stack_ptr_address_value1722, i64 1
  store i64* %dec_ptr_value1723, i64** %stack_ptr_address
  store i32 0, i32* @gSigInt
  br label %label_whilezzzv

entry_ifend1730:                                  ; preds = %label_if_elifzzzw0a
  %lvar1732 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar1732, i64* %lvar, align 8
  %lvar1734 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar1734, i64* %lvar_offset_value11, align 8
  %lvar1736 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar1736, i64* %lvar_offset_value13, align 8
  %lvar1738 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar1738, i64* %lvar_offset_value15, align 8
  %lvar1740 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar1740, i64* %lvar_offset_value17, align 8
  %lvar1742 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar1742, i64* %lvar_offset_value19, align 8
  %lvar1744 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar1744, i64* %lvar_offset_value21, align 8
  %lvar1746 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar1746, i64* %lvar_offset_value23, align 8
  %lvar1748 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar1748, i64* %lvar_offset_value25, align 8
  %lvar1750 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar1750, i64* %lvar_offset_value27, align 8
  %lvar1752 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value29, align 8
  store i64 %lvar1752, i64* %lvar_offset_value29, align 8
  %lvar1754 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value31, align 8
  store i64 %lvar1754, i64* %lvar_offset_value31, align 8
  %lvar1756 = load i64, i64* %"lvar$12$"
  store i64 0, i64* %lvar_offset_value33, align 8
  store i64 %lvar1756, i64* %lvar_offset_value33, align 8
  %lvar1758 = load i64, i64* %"lvar$13$"
  store i64 0, i64* %lvar_offset_value35, align 8
  store i64 %lvar1758, i64* %lvar_offset_value35, align 8
  %loaded_stack_ptr_address_value1760 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value1760, align 8
  %283 = zext i32 %55 to i64
  store i64 %283, i64* %loaded_stack_ptr_address_value1760, align 8
  %loaded_stack_ptr_address_value1761 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value1762 = getelementptr i64, i64* %loaded_stack_ptr_address_value1761, i64 1
  store i64* %inc_ptr_value1762, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value1762, align 8
  %284 = zext i32 %56 to i64
  store i64 %284, i64* %inc_ptr_value1762, align 8
  %loaded_stack_ptr_address_value1764 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value1765 = getelementptr i64, i64* %loaded_stack_ptr_address_value1764, i64 1
  store i64* %inc_ptr_value1765, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value1765, align 8
  store i64 4294967295, i64* %inc_ptr_value1765, align 8
  %loaded_stack_ptr_address_value1767 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value1768 = getelementptr i64, i64* %loaded_stack_ptr_address_value1767, i64 1
  store i64* %inc_ptr_value1768, i64** %stack_ptr_address
  %285 = call i32 @call_invoke_method(i64* %147, i32 11, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond1769 = icmp ne i32 %285, 1
  br i1 %ifcond1769, label %then_block1770, label %entry_ifend1771

then_block1770:                                   ; preds = %entry_ifend1730
  %286 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend1771:                                  ; preds = %entry_ifend1730
  %stack_offset_value1775 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value1775, i64* %"lvar$0$", align 8
  %stack_offset_value1777 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value1777, i64* %"lvar$1$", align 8
  %stack_offset_value1779 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value1779, i64* %"lvar$2$", align 8
  %stack_offset_value1781 = load i64, i64* %stack_offset_address_value4, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value1781, i64* %"lvar$3$", align 8
  %stack_offset_value1783 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value1783, i64* %"lvar$4$", align 8
  %stack_offset_value1785 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value1785, i64* %"lvar$5$", align 8
  %stack_offset_value1787 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value1787, i64* %"lvar$6$", align 8
  %stack_offset_value1789 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value1789, i64* %"lvar$7$", align 8
  %stack_offset_value1791 = load i64, i64* %stack_offset_address_value55, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value1791, i64* %"lvar$8$", align 8
  %stack_offset_value1793 = load i64, i64* %stack_offset_address_value57, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value1793, i64* %"lvar$9$", align 8
  %stack_offset_value1795 = load i64, i64* %stack_offset_address_value59, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value1795, i64* %"lvar$10$", align 8
  %stack_offset_value1797 = load i64, i64* %stack_offset_address_value61, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value1797, i64* %"lvar$11$", align 8
  %stack_offset_value1799 = load i64, i64* %stack_offset_address_value63, align 8
  store i64 0, i64* %"lvar$12$"
  store i64 %stack_offset_value1799, i64* %"lvar$12$", align 8
  %stack_offset_value1801 = load i64, i64* %stack_offset_address_value65, align 8
  store i64 0, i64* %"lvar$13$"
  store i64 %stack_offset_value1801, i64* %"lvar$13$", align 8
  %loaded_stack_ptr_address_value1802 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value1803 = getelementptr i64, i64* %loaded_stack_ptr_address_value1802, i64 -1
  %stack_pointer_offset_value1804 = load i64, i64* %stack_pointer_offset_value1803, align 8
  %287 = trunc i64 %stack_pointer_offset_value1804 to i32
  call void @push_jit_object(i32 %287)
  %loaded_stack_ptr_address_value1805 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value1806 = getelementptr i64, i64* %loaded_stack_ptr_address_value1805, i64 1
  store i64* %dec_ptr_value1806, i64** %stack_ptr_address
  %288 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52668860 to i8*))
  %ifcond1809 = icmp eq i64* %288, null
  br i1 %ifcond1809, label %then_block, label %entry_ifend1808

entry_ifend1808:                                  ; preds = %entry_ifend1771
  %lvar1810 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar1810, i64* %lvar, align 8
  %lvar1812 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar1812, i64* %lvar_offset_value11, align 8
  %lvar1814 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar1814, i64* %lvar_offset_value13, align 8
  %lvar1816 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar1816, i64* %lvar_offset_value15, align 8
  %lvar1818 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar1818, i64* %lvar_offset_value17, align 8
  %lvar1820 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar1820, i64* %lvar_offset_value19, align 8
  %lvar1822 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar1822, i64* %lvar_offset_value21, align 8
  %lvar1824 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar1824, i64* %lvar_offset_value23, align 8
  %lvar1826 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar1826, i64* %lvar_offset_value25, align 8
  %lvar1828 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar1828, i64* %lvar_offset_value27, align 8
  %lvar1830 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value29, align 8
  store i64 %lvar1830, i64* %lvar_offset_value29, align 8
  %lvar1832 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value31, align 8
  store i64 %lvar1832, i64* %lvar_offset_value31, align 8
  %lvar1834 = load i64, i64* %"lvar$12$"
  store i64 0, i64* %lvar_offset_value33, align 8
  store i64 %lvar1834, i64* %lvar_offset_value33, align 8
  %lvar1836 = load i64, i64* %"lvar$13$"
  store i64 0, i64* %lvar_offset_value35, align 8
  store i64 %lvar1836, i64* %lvar_offset_value35, align 8
  %loaded_stack_ptr_address_value1838 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value1838, align 8
  store i64 %stack_pointer_offset_value1804, i64* %loaded_stack_ptr_address_value1838, align 8
  %loaded_stack_ptr_address_value1839 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value1840 = getelementptr i64, i64* %loaded_stack_ptr_address_value1839, i64 1
  store i64* %inc_ptr_value1840, i64** %stack_ptr_address
  %289 = call i32 @call_invoke_method(i64* %288, i32 10, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond1841 = icmp ne i32 %289, 1
  br i1 %ifcond1841, label %then_block1842, label %entry_ifend1843

then_block1842:                                   ; preds = %entry_ifend1808
  %290 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend1843:                                  ; preds = %entry_ifend1808
  %stack_offset_value1847 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value1847, i64* %"lvar$0$", align 8
  %stack_offset_value1849 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value1849, i64* %"lvar$1$", align 8
  %stack_offset_value1851 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value1851, i64* %"lvar$2$", align 8
  %stack_offset_value1853 = load i64, i64* %stack_offset_address_value4, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value1853, i64* %"lvar$3$", align 8
  %stack_offset_value1855 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value1855, i64* %"lvar$4$", align 8
  %stack_offset_value1857 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value1857, i64* %"lvar$5$", align 8
  %stack_offset_value1859 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value1859, i64* %"lvar$6$", align 8
  %stack_offset_value1861 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value1861, i64* %"lvar$7$", align 8
  %stack_offset_value1863 = load i64, i64* %stack_offset_address_value55, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value1863, i64* %"lvar$8$", align 8
  %stack_offset_value1865 = load i64, i64* %stack_offset_address_value57, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value1865, i64* %"lvar$9$", align 8
  %stack_offset_value1867 = load i64, i64* %stack_offset_address_value59, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value1867, i64* %"lvar$10$", align 8
  %stack_offset_value1869 = load i64, i64* %stack_offset_address_value61, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value1869, i64* %"lvar$11$", align 8
  %stack_offset_value1871 = load i64, i64* %stack_offset_address_value63, align 8
  store i64 0, i64* %"lvar$12$"
  store i64 %stack_offset_value1871, i64* %"lvar$12$", align 8
  %stack_offset_value1873 = load i64, i64* %stack_offset_address_value65, align 8
  store i64 0, i64* %"lvar$13$"
  store i64 %stack_offset_value1873, i64* %"lvar$13$", align 8
  %loaded_stack_ptr_address_value1874 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value1875 = getelementptr i64, i64* %loaded_stack_ptr_address_value1874, i64 -1
  %stack_pointer_offset_value1876 = load i64, i64* %stack_pointer_offset_value1875, align 8
  %291 = trunc i64 %stack_pointer_offset_value1876 to i32
  call void @push_jit_object(i32 %291)
  %loaded_stack_ptr_address_value1877 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value1878 = getelementptr i64, i64* %loaded_stack_ptr_address_value1877, i64 1
  store i64* %dec_ptr_value1878, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_pointer_offset_value1876, i64* %"lvar$11$", align 8
  store i32 0, i32* @gSigInt
  %lvar1879 = load i64, i64* %"lvar$5$"
  %292 = trunc i64 %lvar1879 to i32
  %293 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52668868 to i8*))
  %ifcond1883 = icmp eq i64* %293, null
  br i1 %ifcond1883, label %then_block, label %entry_ifend1882

entry_ifend1882:                                  ; preds = %entry_ifend1843
  %lvar1884 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar1884, i64* %lvar, align 8
  %lvar1886 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar1886, i64* %lvar_offset_value11, align 8
  %lvar1888 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar1888, i64* %lvar_offset_value13, align 8
  %lvar1890 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar1890, i64* %lvar_offset_value15, align 8
  %lvar1892 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar1892, i64* %lvar_offset_value17, align 8
  %lvar1894 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar1894, i64* %lvar_offset_value19, align 8
  %lvar1896 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar1896, i64* %lvar_offset_value21, align 8
  %lvar1898 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar1898, i64* %lvar_offset_value23, align 8
  %lvar1900 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar1900, i64* %lvar_offset_value25, align 8
  %lvar1902 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar1902, i64* %lvar_offset_value27, align 8
  %lvar1904 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value29, align 8
  store i64 %lvar1904, i64* %lvar_offset_value29, align 8
  %lvar1906 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value31, align 8
  store i64 %lvar1906, i64* %lvar_offset_value31, align 8
  %lvar1908 = load i64, i64* %"lvar$12$"
  store i64 0, i64* %lvar_offset_value33, align 8
  store i64 %lvar1908, i64* %lvar_offset_value33, align 8
  %lvar1910 = load i64, i64* %"lvar$13$"
  store i64 0, i64* %lvar_offset_value35, align 8
  store i64 %lvar1910, i64* %lvar_offset_value35, align 8
  %loaded_stack_ptr_address_value1912 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value1912, align 8
  %294 = zext i32 %292 to i64
  store i64 %294, i64* %loaded_stack_ptr_address_value1912, align 8
  %loaded_stack_ptr_address_value1913 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value1914 = getelementptr i64, i64* %loaded_stack_ptr_address_value1913, i64 1
  store i64* %inc_ptr_value1914, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value1914, align 8
  %295 = zext i32 %291 to i64
  store i64 %295, i64* %inc_ptr_value1914, align 8
  %loaded_stack_ptr_address_value1916 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value1917 = getelementptr i64, i64* %loaded_stack_ptr_address_value1916, i64 1
  store i64* %inc_ptr_value1917, i64** %stack_ptr_address
  %296 = call i32 @call_invoke_method(i64* %293, i32 8, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond1918 = icmp ne i32 %296, 1
  br i1 %ifcond1918, label %then_block1919, label %entry_ifend1920

then_block1919:                                   ; preds = %entry_ifend1882
  %297 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend1920:                                  ; preds = %entry_ifend1882
  %stack_offset_value1924 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value1924, i64* %"lvar$0$", align 8
  %stack_offset_value1926 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value1926, i64* %"lvar$1$", align 8
  %stack_offset_value1928 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value1928, i64* %"lvar$2$", align 8
  %stack_offset_value1930 = load i64, i64* %stack_offset_address_value4, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value1930, i64* %"lvar$3$", align 8
  %stack_offset_value1932 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value1932, i64* %"lvar$4$", align 8
  %stack_offset_value1934 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value1934, i64* %"lvar$5$", align 8
  %stack_offset_value1936 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value1936, i64* %"lvar$6$", align 8
  %stack_offset_value1938 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value1938, i64* %"lvar$7$", align 8
  %stack_offset_value1940 = load i64, i64* %stack_offset_address_value55, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value1940, i64* %"lvar$8$", align 8
  %stack_offset_value1942 = load i64, i64* %stack_offset_address_value57, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value1942, i64* %"lvar$9$", align 8
  %stack_offset_value1944 = load i64, i64* %stack_offset_address_value59, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value1944, i64* %"lvar$10$", align 8
  %stack_offset_value1946 = load i64, i64* %stack_offset_address_value61, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value1946, i64* %"lvar$11$", align 8
  %stack_offset_value1948 = load i64, i64* %stack_offset_address_value63, align 8
  store i64 0, i64* %"lvar$12$"
  store i64 %stack_offset_value1948, i64* %"lvar$12$", align 8
  %stack_offset_value1950 = load i64, i64* %stack_offset_address_value65, align 8
  store i64 0, i64* %"lvar$13$"
  store i64 %stack_offset_value1950, i64* %"lvar$13$", align 8
  %loaded_stack_ptr_address_value1951 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value1952 = getelementptr i64, i64* %loaded_stack_ptr_address_value1951, i64 -1
  %stack_pointer_offset_value1953 = load i64, i64* %stack_pointer_offset_value1952, align 8
  %298 = trunc i64 %stack_pointer_offset_value1953 to i32
  call void @push_jit_object(i32 %298)
  %loaded_stack_ptr_address_value1954 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value1955 = getelementptr i64, i64* %loaded_stack_ptr_address_value1954, i64 1
  store i64* %dec_ptr_value1955, i64** %stack_ptr_address
  store i32 0, i32* @gSigInt
  br label %label_whilezzzv
}

define i32 @"JITTest.buffer_initialize(ulong)$$226"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$2$" = alloca i64
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value1 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value1, i64* %"lvar$1$", align 8
  store i64 0, i64* %"lvar$2$"
  store i64 0, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52668972 to i8*))
  %ifcond = icmp eq i64* %0, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %then_block77, %then_block39, %entry_ifend93, %entry_ifend78, %entry_ifend62, %entry_ifend57, %entry_ifend40, %entry_ifend24, %entry_ifend13, %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %1 = call i32 @create_object(i64* %0)
  call void @push_jit_object(i32 %1)
  %2 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52668980 to i8*))
  %ifcond4 = icmp eq i64* %2, null
  br i1 %ifcond4, label %then_block, label %entry_ifend3

entry_ifend3:                                     ; preds = %entry_ifend
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value7 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value7, align 8
  store i64 %stack_offset_value1, i64* %lvar_offset_value7, align 8
  %lvar_offset_value9 = getelementptr i64, i64* %lvar, i64 2
  store i64 0, i64* %lvar_offset_value9, align 8
  store i64 0, i64* %lvar_offset_value9, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %3 = zext i32 %1 to i64
  store i64 %3, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value10 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value10, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  %4 = call i32 @call_invoke_method(i64* %2, i32 0, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond11 = icmp ne i32 %4, 1
  br i1 %ifcond11, label %then_block12, label %entry_ifend13

then_block12:                                     ; preds = %entry_ifend3
  %5 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend13:                                    ; preds = %entry_ifend3
  %stack_offset_value14 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value14, i64* %"lvar$0$", align 8
  %stack_offset_value16 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value16, i64* %"lvar$1$", align 8
  %stack_offset_address_value17 = getelementptr i64, i64* %stack, i64 2
  %stack_offset_value18 = load i64, i64* %stack_offset_address_value17, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value18, i64* %"lvar$2$", align 8
  %loaded_stack_ptr_address_value19 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value19, i64 -1
  %stack_pointer_offset_value20 = load i64, i64* %stack_pointer_offset_value, align 8
  %6 = trunc i64 %stack_pointer_offset_value20 to i32
  call void @push_jit_object(i32 %6)
  %loaded_stack_ptr_address_value21 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value21, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_pointer_offset_value20, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  %7 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %6, i32 0)
  %8 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %7, i32 0, i32 0
  %9 = load i64, i64* %8, align 4
  %10 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %7, i32 0, i32 1
  %11 = load i32, i32* %10, align 4
  %ifcond25 = icmp eq i32 %11, 0
  br i1 %ifcond25, label %then_block, label %entry_ifend24

entry_ifend24:                                    ; preds = %entry_ifend13
  %12 = inttoptr i64 %9 to i8*
  %13 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52668988 to i8*))
  %ifcond28 = icmp eq i64* %13, null
  br i1 %ifcond28, label %then_block, label %entry_ifend27

entry_ifend27:                                    ; preds = %entry_ifend24
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value14, i64* %lvar, align 8
  store i64 0, i64* %lvar_offset_value7, align 8
  store i64 %stack_offset_value16, i64* %lvar_offset_value7, align 8
  store i64 0, i64* %lvar_offset_value9, align 8
  store i64 %stack_pointer_offset_value20, i64* %lvar_offset_value9, align 8
  %loaded_stack_ptr_address_value35 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value35, align 8
  %14 = ptrtoint i8* %12 to i64
  store i64 %14, i64* %loaded_stack_ptr_address_value35, align 8
  %loaded_stack_ptr_address_value36 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value37 = getelementptr i64, i64* %loaded_stack_ptr_address_value36, i64 1
  store i64* %inc_ptr_value37, i64** %stack_ptr_address
  %15 = call i32 @call_invoke_method(i64* %13, i32 7, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond38 = icmp ne i32 %15, 1
  br i1 %ifcond38, label %then_block39, label %entry_ifend40

then_block39:                                     ; preds = %entry_ifend27
  %16 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend40:                                    ; preds = %entry_ifend27
  %stack_offset_value44 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value44, i64* %"lvar$0$", align 8
  %stack_offset_value46 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value46, i64* %"lvar$1$", align 8
  %stack_offset_value48 = load i64, i64* %stack_offset_address_value17, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value48, i64* %"lvar$2$", align 8
  %loaded_stack_ptr_address_value49 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value50 = getelementptr i64, i64* %loaded_stack_ptr_address_value49, i64 -1
  %stack_pointer_offset_value51 = load i64, i64* %stack_pointer_offset_value50, align 8
  %17 = trunc i64 %stack_pointer_offset_value51 to i32
  call void @push_jit_object(i32 %17)
  %loaded_stack_ptr_address_value52 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value53 = getelementptr i64, i64* %loaded_stack_ptr_address_value52, i64 1
  store i64* %dec_ptr_value53, i64** %stack_ptr_address
  store i32 0, i32* @gSigInt
  %18 = trunc i64 %stack_offset_value48 to i32
  %19 = call i32 @store_field(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %18, i64 %stack_offset_value46, i32 2)
  %ifcond58 = icmp eq i32 %19, 0
  br i1 %ifcond58, label %then_block, label %entry_ifend57

entry_ifend57:                                    ; preds = %entry_ifend40
  store i32 0, i32* @gSigInt
  %20 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %18, i32 2)
  %21 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %20, i32 0, i32 0
  %22 = load i64, i64* %21, align 4
  %23 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %20, i32 0, i32 1
  %24 = load i32, i32* %23, align 4
  %ifcond63 = icmp eq i32 %24, 0
  br i1 %ifcond63, label %then_block, label %entry_ifend62

entry_ifend62:                                    ; preds = %entry_ifend57
  %25 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52668996 to i8*))
  %ifcond66 = icmp eq i64* %25, null
  br i1 %ifcond66, label %then_block, label %entry_ifend65

entry_ifend65:                                    ; preds = %entry_ifend62
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value44, i64* %lvar, align 8
  store i64 0, i64* %lvar_offset_value7, align 8
  store i64 %stack_offset_value46, i64* %lvar_offset_value7, align 8
  store i64 0, i64* %lvar_offset_value9, align 8
  store i64 %stack_offset_value48, i64* %lvar_offset_value9, align 8
  %loaded_stack_ptr_address_value73 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value73, align 8
  store i64 %22, i64* %loaded_stack_ptr_address_value73, align 8
  %loaded_stack_ptr_address_value74 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value75 = getelementptr i64, i64* %loaded_stack_ptr_address_value74, i64 1
  store i64* %inc_ptr_value75, i64** %stack_ptr_address
  %26 = call i32 @call_invoke_method(i64* %25, i32 3, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond76 = icmp ne i32 %26, 1
  br i1 %ifcond76, label %then_block77, label %entry_ifend78

then_block77:                                     ; preds = %entry_ifend65
  %27 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend78:                                    ; preds = %entry_ifend65
  %stack_offset_value82 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value82, i64* %"lvar$0$", align 8
  %stack_offset_value84 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value84, i64* %"lvar$1$", align 8
  %stack_offset_value86 = load i64, i64* %stack_offset_address_value17, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value86, i64* %"lvar$2$", align 8
  %loaded_stack_ptr_address_value87 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value88 = getelementptr i64, i64* %loaded_stack_ptr_address_value87, i64 -1
  %stack_pointer_offset_value89 = load i64, i64* %stack_pointer_offset_value88, align 8
  %28 = trunc i64 %stack_pointer_offset_value89 to i32
  call void @push_jit_object(i32 %28)
  %loaded_stack_ptr_address_value90 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value91 = getelementptr i64, i64* %loaded_stack_ptr_address_value90, i64 1
  store i64* %dec_ptr_value91, i64** %stack_ptr_address
  %29 = call i32 @store_field(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %18, i64 %stack_pointer_offset_value89, i32 0)
  %ifcond94 = icmp eq i32 %29, 0
  br i1 %ifcond94, label %then_block, label %entry_ifend93

entry_ifend93:                                    ; preds = %entry_ifend78
  store i32 0, i32* @gSigInt
  %30 = trunc i64 %stack_offset_value86 to i32
  %31 = call i32 @store_field(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %30, i64 0, i32 1)
  %ifcond98 = icmp eq i32 %31, 0
  br i1 %ifcond98, label %then_block, label %entry_ifend97

entry_ifend97:                                    ; preds = %entry_ifend93
  store i64 0, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.buffer_initialize2(pointer,ulong)$$227"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$3$" = alloca i64
  %"lvar$2$" = alloca i64
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value1 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value1, i64* %"lvar$1$", align 8
  %stack_offset_address_value2 = getelementptr i64, i64* %stack, i64 2
  %stack_offset_value3 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value3, i64* %"lvar$2$", align 8
  store i64 0, i64* %"lvar$3$"
  store i64 0, i64* %"lvar$3$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52669004 to i8*))
  %ifcond = icmp eq i64* %0, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %then_block136, %then_block89, %then_block47, %entry_ifend156, %entry_ifend137, %entry_ifend111, %entry_ifend107, %entry_ifend90, %entry_ifend72, %entry_ifend67, %entry_ifend48, %entry_ifend30, %entry_ifend17, %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %1 = call i32 @create_object(i64* %0)
  call void @push_jit_object(i32 %1)
  %2 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52669012 to i8*))
  %ifcond6 = icmp eq i64* %2, null
  br i1 %ifcond6, label %then_block, label %entry_ifend5

entry_ifend5:                                     ; preds = %entry_ifend
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value9 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value9, align 8
  store i64 %stack_offset_value1, i64* %lvar_offset_value9, align 8
  %lvar_offset_value11 = getelementptr i64, i64* %lvar, i64 2
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %stack_offset_value3, i64* %lvar_offset_value11, align 8
  %lvar12 = load i64, i64* %"lvar$3$"
  %lvar_offset_value13 = getelementptr i64, i64* %lvar, i64 3
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar12, i64* %lvar_offset_value13, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %3 = zext i32 %1 to i64
  store i64 %3, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value14 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value14, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  %4 = call i32 @call_invoke_method(i64* %2, i32 0, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond15 = icmp ne i32 %4, 1
  br i1 %ifcond15, label %then_block16, label %entry_ifend17

then_block16:                                     ; preds = %entry_ifend5
  %5 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend17:                                    ; preds = %entry_ifend5
  %stack_offset_value18 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value18, i64* %"lvar$0$", align 8
  %stack_offset_value20 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value20, i64* %"lvar$1$", align 8
  %stack_offset_value22 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value22, i64* %"lvar$2$", align 8
  %stack_offset_address_value23 = getelementptr i64, i64* %stack, i64 3
  %stack_offset_value24 = load i64, i64* %stack_offset_address_value23, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value24, i64* %"lvar$3$", align 8
  %loaded_stack_ptr_address_value25 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value25, i64 -1
  %stack_pointer_offset_value26 = load i64, i64* %stack_pointer_offset_value, align 8
  %6 = trunc i64 %stack_pointer_offset_value26 to i32
  call void @push_jit_object(i32 %6)
  %loaded_stack_ptr_address_value27 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value27, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_pointer_offset_value26, i64* %"lvar$3$", align 8
  store i32 0, i32* @gSigInt
  %7 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %6, i32 0)
  %8 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %7, i32 0, i32 0
  %9 = load i64, i64* %8, align 4
  %10 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %7, i32 0, i32 1
  %11 = load i32, i32* %10, align 4
  %ifcond31 = icmp eq i32 %11, 0
  br i1 %ifcond31, label %then_block, label %entry_ifend30

entry_ifend30:                                    ; preds = %entry_ifend17
  %12 = inttoptr i64 %9 to i8*
  %13 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52669020 to i8*))
  %ifcond34 = icmp eq i64* %13, null
  br i1 %ifcond34, label %then_block, label %entry_ifend33

entry_ifend33:                                    ; preds = %entry_ifend30
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value18, i64* %lvar, align 8
  store i64 0, i64* %lvar_offset_value9, align 8
  store i64 %stack_offset_value20, i64* %lvar_offset_value9, align 8
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %stack_offset_value22, i64* %lvar_offset_value11, align 8
  %lvar41 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar41, i64* %lvar_offset_value13, align 8
  %loaded_stack_ptr_address_value43 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value43, align 8
  %14 = ptrtoint i8* %12 to i64
  store i64 %14, i64* %loaded_stack_ptr_address_value43, align 8
  %loaded_stack_ptr_address_value44 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value45 = getelementptr i64, i64* %loaded_stack_ptr_address_value44, i64 1
  store i64* %inc_ptr_value45, i64** %stack_ptr_address
  %15 = call i32 @call_invoke_method(i64* %13, i32 7, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond46 = icmp ne i32 %15, 1
  br i1 %ifcond46, label %then_block47, label %entry_ifend48

then_block47:                                     ; preds = %entry_ifend33
  %16 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend48:                                    ; preds = %entry_ifend33
  %stack_offset_value52 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value52, i64* %"lvar$0$", align 8
  %stack_offset_value54 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value54, i64* %"lvar$1$", align 8
  %stack_offset_value56 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value56, i64* %"lvar$2$", align 8
  %stack_offset_value58 = load i64, i64* %stack_offset_address_value23, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value58, i64* %"lvar$3$", align 8
  %loaded_stack_ptr_address_value59 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value60 = getelementptr i64, i64* %loaded_stack_ptr_address_value59, i64 -1
  %stack_pointer_offset_value61 = load i64, i64* %stack_pointer_offset_value60, align 8
  %17 = trunc i64 %stack_pointer_offset_value61 to i32
  call void @push_jit_object(i32 %17)
  %loaded_stack_ptr_address_value62 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value63 = getelementptr i64, i64* %loaded_stack_ptr_address_value62, i64 1
  store i64* %dec_ptr_value63, i64** %stack_ptr_address
  store i32 0, i32* @gSigInt
  %lvar64 = load i64, i64* %"lvar$3$"
  %18 = trunc i64 %lvar64 to i32
  %19 = call i32 @store_field(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %18, i64 %stack_offset_value56, i32 2)
  %ifcond68 = icmp eq i32 %19, 0
  br i1 %ifcond68, label %then_block, label %entry_ifend67

entry_ifend67:                                    ; preds = %entry_ifend48
  store i32 0, i32* @gSigInt
  %lvar69 = load i64, i64* %"lvar$3$"
  %20 = trunc i64 %lvar69 to i32
  %21 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %20, i32 2)
  %22 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %21, i32 0, i32 0
  %23 = load i64, i64* %22, align 4
  %24 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %21, i32 0, i32 1
  %25 = load i32, i32* %24, align 4
  %ifcond73 = icmp eq i32 %25, 0
  br i1 %ifcond73, label %then_block, label %entry_ifend72

entry_ifend72:                                    ; preds = %entry_ifend67
  %26 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52669028 to i8*))
  %ifcond76 = icmp eq i64* %26, null
  br i1 %ifcond76, label %then_block, label %entry_ifend75

entry_ifend75:                                    ; preds = %entry_ifend72
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value52, i64* %lvar, align 8
  store i64 0, i64* %lvar_offset_value9, align 8
  store i64 %stack_offset_value54, i64* %lvar_offset_value9, align 8
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %stack_offset_value56, i64* %lvar_offset_value11, align 8
  %lvar83 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar83, i64* %lvar_offset_value13, align 8
  %loaded_stack_ptr_address_value85 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value85, align 8
  store i64 %23, i64* %loaded_stack_ptr_address_value85, align 8
  %loaded_stack_ptr_address_value86 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value87 = getelementptr i64, i64* %loaded_stack_ptr_address_value86, i64 1
  store i64* %inc_ptr_value87, i64** %stack_ptr_address
  %27 = call i32 @call_invoke_method(i64* %26, i32 3, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond88 = icmp ne i32 %27, 1
  br i1 %ifcond88, label %then_block89, label %entry_ifend90

then_block89:                                     ; preds = %entry_ifend75
  %28 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend90:                                    ; preds = %entry_ifend75
  %stack_offset_value94 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value94, i64* %"lvar$0$", align 8
  %stack_offset_value96 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value96, i64* %"lvar$1$", align 8
  %stack_offset_value98 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value98, i64* %"lvar$2$", align 8
  %stack_offset_value100 = load i64, i64* %stack_offset_address_value23, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value100, i64* %"lvar$3$", align 8
  %loaded_stack_ptr_address_value101 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value102 = getelementptr i64, i64* %loaded_stack_ptr_address_value101, i64 -1
  %stack_pointer_offset_value103 = load i64, i64* %stack_pointer_offset_value102, align 8
  %29 = trunc i64 %stack_pointer_offset_value103 to i32
  call void @push_jit_object(i32 %29)
  %loaded_stack_ptr_address_value104 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value105 = getelementptr i64, i64* %loaded_stack_ptr_address_value104, i64 1
  store i64* %dec_ptr_value105, i64** %stack_ptr_address
  %30 = call i32 @store_field(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %20, i64 %stack_pointer_offset_value103, i32 0)
  %ifcond108 = icmp eq i32 %30, 0
  br i1 %ifcond108, label %then_block, label %entry_ifend107

entry_ifend107:                                   ; preds = %entry_ifend90
  store i32 0, i32* @gSigInt
  %lvar109 = load i64, i64* %"lvar$3$"
  %31 = trunc i64 %lvar109 to i32
  %32 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %31, i32 0)
  %33 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %32, i32 0, i32 0
  %34 = load i64, i64* %33, align 4
  %35 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %32, i32 0, i32 1
  %36 = load i32, i32* %35, align 4
  %ifcond112 = icmp eq i32 %36, 0
  br i1 %ifcond112, label %then_block, label %entry_ifend111

entry_ifend111:                                   ; preds = %entry_ifend107
  %37 = inttoptr i64 %34 to i8*
  %38 = inttoptr i64 %stack_offset_value96 to i8*
  %39 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52669036 to i8*))
  %ifcond117 = icmp eq i64* %39, null
  br i1 %ifcond117, label %then_block, label %entry_ifend116

entry_ifend116:                                   ; preds = %entry_ifend111
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value94, i64* %lvar, align 8
  store i64 0, i64* %lvar_offset_value9, align 8
  store i64 %stack_offset_value96, i64* %lvar_offset_value9, align 8
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %stack_offset_value98, i64* %lvar_offset_value11, align 8
  %lvar124 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar124, i64* %lvar_offset_value13, align 8
  %loaded_stack_ptr_address_value126 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value126, align 8
  %40 = ptrtoint i8* %37 to i64
  store i64 %40, i64* %loaded_stack_ptr_address_value126, align 8
  %loaded_stack_ptr_address_value127 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value128 = getelementptr i64, i64* %loaded_stack_ptr_address_value127, i64 1
  store i64* %inc_ptr_value128, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value128, align 8
  %41 = ptrtoint i8* %38 to i64
  store i64 %41, i64* %inc_ptr_value128, align 8
  %loaded_stack_ptr_address_value130 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value131 = getelementptr i64, i64* %loaded_stack_ptr_address_value130, i64 1
  store i64* %inc_ptr_value131, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value131, align 8
  store i64 %stack_offset_value98, i64* %inc_ptr_value131, align 8
  %loaded_stack_ptr_address_value133 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value134 = getelementptr i64, i64* %loaded_stack_ptr_address_value133, i64 1
  store i64* %inc_ptr_value134, i64** %stack_ptr_address
  %42 = call i32 @call_invoke_method(i64* %39, i32 12, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond135 = icmp ne i32 %42, 1
  br i1 %ifcond135, label %then_block136, label %entry_ifend137

then_block136:                                    ; preds = %entry_ifend116
  %43 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend137:                                   ; preds = %entry_ifend116
  %stack_offset_value141 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value141, i64* %"lvar$0$", align 8
  %stack_offset_value143 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value143, i64* %"lvar$1$", align 8
  %stack_offset_value145 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value145, i64* %"lvar$2$", align 8
  %stack_offset_value147 = load i64, i64* %stack_offset_address_value23, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value147, i64* %"lvar$3$", align 8
  %loaded_stack_ptr_address_value148 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value149 = getelementptr i64, i64* %loaded_stack_ptr_address_value148, i64 -1
  %stack_pointer_offset_value150 = load i64, i64* %stack_pointer_offset_value149, align 8
  %44 = trunc i64 %stack_pointer_offset_value150 to i32
  call void @push_jit_object(i32 %44)
  %loaded_stack_ptr_address_value151 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value152 = getelementptr i64, i64* %loaded_stack_ptr_address_value151, i64 1
  store i64* %dec_ptr_value152, i64** %stack_ptr_address
  store i32 0, i32* @gSigInt
  %lvar153 = load i64, i64* %"lvar$3$"
  %45 = trunc i64 %lvar153 to i32
  %46 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %45, i32 2)
  %47 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %46, i32 0, i32 0
  %48 = load i64, i64* %47, align 4
  %49 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %46, i32 0, i32 1
  %50 = load i32, i32* %49, align 4
  %ifcond157 = icmp eq i32 %50, 0
  br i1 %ifcond157, label %then_block, label %entry_ifend156

entry_ifend156:                                   ; preds = %entry_ifend137
  %51 = call i32 @store_field(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %45, i64 %48, i32 1)
  %ifcond160 = icmp eq i32 %51, 0
  br i1 %ifcond160, label %then_block, label %entry_ifend159

entry_ifend159:                                   ; preds = %entry_ifend156
  store i64 0, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.run118()$$228"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$2$" = alloca i64
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  store i64 0, i64* %"lvar$0$"
  store i64 0, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i64 0, i64* %"lvar$2$"
  store i64 0, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$0$"
  store i64 0, i64* %"lvar$0$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_string_object(i8* inttoptr (i64 52669044 to i8*))
  call void @push_jit_object(i32 %0)
  %1 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %0, i32 0)
  %2 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %1, i32 0, i32 0
  %3 = load i64, i64* %2, align 4
  %4 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %1, i32 0, i32 1
  %5 = load i32, i32* %4, align 4
  %ifcond = icmp eq i32 %5, 0
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %then_block82, %then_block43, %entry_ifend64, %entry_condend, %entry_ifend24, %entry_ifend15, %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %6 = trunc i64 %3 to i32
  %7 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52669048 to i8*))
  %ifcond3 = icmp eq i64* %7, null
  br i1 %ifcond3, label %then_block, label %entry_ifend2

entry_ifend2:                                     ; preds = %entry_ifend
  store i64 0, i64* %lvar, align 8
  store i64 0, i64* %lvar, align 8
  %lvar_offset_value6 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value6, align 8
  store i64 0, i64* %lvar_offset_value6, align 8
  %lvar_offset_value8 = getelementptr i64, i64* %lvar, i64 2
  store i64 0, i64* %lvar_offset_value8, align 8
  store i64 0, i64* %lvar_offset_value8, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %8 = ptrtoint i64* %lvar to i64
  store i64 %8, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value9 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value9, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  %9 = zext i32 %6 to i64
  store i64 %9, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value11 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value12 = getelementptr i64, i64* %loaded_stack_ptr_address_value11, i64 1
  store i64* %inc_ptr_value12, i64** %stack_ptr_address
  %10 = call i32 @call_invoke_method(i64* %7, i32 34, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond13 = icmp ne i32 %10, 1
  br i1 %ifcond13, label %then_block14, label %entry_ifend15

then_block14:                                     ; preds = %entry_ifend2
  %11 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend15:                                    ; preds = %entry_ifend2
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value17 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value17, i64* %"lvar$1$", align 8
  %stack_offset_address_value18 = getelementptr i64, i64* %stack, i64 2
  %stack_offset_value19 = load i64, i64* %stack_offset_address_value18, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value19, i64* %"lvar$2$", align 8
  %loaded_stack_ptr_address_value20 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value20, i64 -1
  %stack_pointer_offset_value21 = load i64, i64* %stack_pointer_offset_value, align 8
  %12 = trunc i64 %stack_pointer_offset_value21 to i32
  call void @push_jit_object(i32 %12)
  %loaded_stack_ptr_address_value22 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value22, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i32 0, i32* @gSigInt
  %13 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52669056 to i8*))
  %ifcond25 = icmp eq i64* %13, null
  br i1 %ifcond25, label %then_block, label %entry_ifend24

entry_ifend24:                                    ; preds = %entry_ifend15
  %14 = call i32 @create_object(i64* %13)
  call void @push_jit_object(i32 %14)
  %15 = trunc i64 %stack_offset_value to i32
  %16 = call i32 @get_array_length(i32 %15)
  %value2 = zext i32 %16 to i64
  %17 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52669064 to i8*))
  %ifcond29 = icmp eq i64* %17, null
  br i1 %ifcond29, label %then_block, label %entry_ifend28

entry_ifend28:                                    ; preds = %entry_ifend24
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  store i64 0, i64* %lvar_offset_value6, align 8
  store i64 %stack_offset_value17, i64* %lvar_offset_value6, align 8
  store i64 0, i64* %lvar_offset_value8, align 8
  store i64 %stack_offset_value19, i64* %lvar_offset_value8, align 8
  %loaded_stack_ptr_address_value36 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value36, align 8
  %18 = zext i32 %14 to i64
  store i64 %18, i64* %loaded_stack_ptr_address_value36, align 8
  %loaded_stack_ptr_address_value37 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value38 = getelementptr i64, i64* %loaded_stack_ptr_address_value37, i64 1
  store i64* %inc_ptr_value38, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value38, align 8
  store i64 %value2, i64* %inc_ptr_value38, align 8
  %loaded_stack_ptr_address_value40 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value41 = getelementptr i64, i64* %loaded_stack_ptr_address_value40, i64 1
  store i64* %inc_ptr_value41, i64** %stack_ptr_address
  %19 = call i32 @call_invoke_method(i64* %17, i32 2, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond42 = icmp ne i32 %19, 1
  br i1 %ifcond42, label %then_block43, label %entry_ifend44

then_block43:                                     ; preds = %entry_ifend28
  %20 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend44:                                    ; preds = %entry_ifend28
  %stack_offset_value48 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value48, i64* %"lvar$0$", align 8
  %stack_offset_value50 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value50, i64* %"lvar$1$", align 8
  %stack_offset_value52 = load i64, i64* %stack_offset_address_value18, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value52, i64* %"lvar$2$", align 8
  %loaded_stack_ptr_address_value53 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value54 = getelementptr i64, i64* %loaded_stack_ptr_address_value53, i64 -1
  %stack_pointer_offset_value55 = load i64, i64* %stack_pointer_offset_value54, align 8
  %21 = trunc i64 %stack_pointer_offset_value55 to i32
  call void @push_jit_object(i32 %21)
  %loaded_stack_ptr_address_value56 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value57 = getelementptr i64, i64* %loaded_stack_ptr_address_value56, i64 1
  store i64* %dec_ptr_value57, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_pointer_offset_value55, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$2$"
  store i64 0, i64* %"lvar$2$", align 8
  br label %for_start_pointzzzzf

for_start_pointzzzzf:                             ; preds = %entry_ifend83, %entry_ifend44
  %lvar71 = phi i64 [ %stack_offset_value89, %entry_ifend83 ], [ %stack_pointer_offset_value55, %entry_ifend44 ]
  %lvar69 = phi i64 [ %stack_offset_value87, %entry_ifend83 ], [ %stack_offset_value48, %entry_ifend44 ]
  %lvar73 = phi i64 [ %40, %entry_ifend83 ], [ 0, %entry_ifend44 ]
  %22 = trunc i64 %lvar73 to i32
  %23 = trunc i64 %lvar69 to i32
  %24 = call i32 @get_array_length(i32 %23)
  %subtmp = sub nuw i32 %24, 1
  %letmp = icmp slt i32 %22, %subtmp
  store i32 0, i32* @gSigInt
  %25 = trunc i64 %lvar71 to i32
  br i1 %letmp, label %entry_condend, label %label_for_endzzzzf

entry_condend:                                    ; preds = %for_start_pointzzzzf
  %26 = call %clvalue_and_bool_struct* @load_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %23, i32 %22)
  %27 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %26, i32 0, i32 0
  %28 = load i64, i64* %27, align 4
  %29 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %26, i32 0, i32 1
  %30 = load i32, i32* %29, align 4
  %ifcond65 = icmp eq i32 %30, 0
  br i1 %ifcond65, label %then_block, label %entry_ifend64

label_for_endzzzzf:                               ; preds = %for_start_pointzzzzf
  %31 = zext i32 %25 to i64
  store i64 %31, i64* %stack, align 8
  ret i32 1

entry_ifend64:                                    ; preds = %entry_condend
  %32 = trunc i64 %28 to i8
  %33 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52669116 to i8*))
  %ifcond68 = icmp eq i64* %33, null
  br i1 %ifcond68, label %then_block, label %entry_ifend67

entry_ifend67:                                    ; preds = %entry_ifend64
  store i64 0, i64* %lvar, align 8
  store i64 %lvar69, i64* %lvar, align 8
  store i64 0, i64* %lvar_offset_value6, align 8
  store i64 %lvar71, i64* %lvar_offset_value6, align 8
  store i64 0, i64* %lvar_offset_value8, align 8
  store i64 %lvar73, i64* %lvar_offset_value8, align 8
  %loaded_stack_ptr_address_value75 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value75, align 8
  %34 = zext i32 %25 to i64
  store i64 %34, i64* %loaded_stack_ptr_address_value75, align 8
  %loaded_stack_ptr_address_value76 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value77 = getelementptr i64, i64* %loaded_stack_ptr_address_value76, i64 1
  store i64* %inc_ptr_value77, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value77, align 8
  %35 = zext i8 %32 to i64
  store i64 %35, i64* %inc_ptr_value77, align 8
  %loaded_stack_ptr_address_value79 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value80 = getelementptr i64, i64* %loaded_stack_ptr_address_value79, i64 1
  store i64* %inc_ptr_value80, i64** %stack_ptr_address
  %36 = call i32 @call_invoke_method(i64* %33, i32 5, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond81 = icmp ne i32 %36, 1
  br i1 %ifcond81, label %then_block82, label %entry_ifend83

then_block82:                                     ; preds = %entry_ifend67
  %37 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend83:                                    ; preds = %entry_ifend67
  %stack_offset_value87 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value87, i64* %"lvar$0$", align 8
  %stack_offset_value89 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value89, i64* %"lvar$1$", align 8
  %stack_offset_value91 = load i64, i64* %stack_offset_address_value18, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value91, i64* %"lvar$2$", align 8
  %loaded_stack_ptr_address_value92 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value93 = getelementptr i64, i64* %loaded_stack_ptr_address_value92, i64 -1
  %stack_pointer_offset_value94 = load i64, i64* %stack_pointer_offset_value93, align 8
  %38 = trunc i64 %stack_pointer_offset_value94 to i32
  call void @push_jit_object(i32 %38)
  %loaded_stack_ptr_address_value95 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value96 = getelementptr i64, i64* %loaded_stack_ptr_address_value95, i64 1
  store i64* %dec_ptr_value96, i64** %stack_ptr_address
  %39 = trunc i64 %stack_offset_value91 to i32
  %addtmp = add nuw i32 %39, 1
  store i64 0, i64* %"lvar$2$"
  %40 = zext i32 %addtmp to i64
  store i64 %40, i64* %"lvar$2$", align 8
  br label %for_start_pointzzzzf
}

define i32 @"JITTest.items(Array,int)$$229"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$2$" = alloca i64
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value1 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value1, i64* %"lvar$1$", align 8
  %stack_offset_address_value2 = getelementptr i64, i64* %stack, i64 2
  %stack_offset_value3 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value3, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  %0 = trunc i64 %stack_offset_value3 to i32
  %letmp = icmp slt i32 %0, 0
  br i1 %letmp, label %entry_condend, label %label_if_endzzzzg

entry_condend:                                    ; preds = %entry
  store i32 0, i32* @gSigInt
  %1 = trunc i64 %stack_offset_value1 to i32
  %2 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %1, i32 0)
  %3 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %2, i32 0, i32 0
  %4 = load i64, i64* %3, align 4
  %5 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %2, i32 0, i32 1
  %6 = load i32, i32* %5, align 4
  %ifcond = icmp eq i32 %6, 0
  br i1 %ifcond, label %then_block, label %entry_ifend

label_if_endzzzzg:                                ; preds = %entry, %entry_ifend
  %lvar12 = phi i64 [ %15, %entry_ifend ], [ %stack_offset_value3, %entry ]
  store i32 0, i32* @gSigInt
  %7 = trunc i64 %stack_offset_value1 to i32
  %8 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %7, i32 0)
  %9 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %8, i32 0, i32 0
  %10 = load i64, i64* %9, align 4
  %11 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %8, i32 0, i32 1
  %12 = load i32, i32* %11, align 4
  %ifcond11 = icmp eq i32 %12, 0
  br i1 %ifcond11, label %then_block, label %entry_ifend10

then_block:                                       ; preds = %entry_ifend10, %label_if_endzzzzg, %entry_condend
  ret i32 0

entry_ifend:                                      ; preds = %entry_condend
  %13 = trunc i64 %4 to i32
  %14 = call i32 @get_array_length(i32 %13)
  %addtmp = add nuw i32 %14, %0
  store i64 0, i64* %"lvar$2$"
  %15 = zext i32 %addtmp to i64
  store i64 %15, i64* %"lvar$2$", align 8
  br label %label_if_endzzzzg

entry_ifend10:                                    ; preds = %label_if_endzzzzg
  %16 = trunc i64 %10 to i32
  %17 = trunc i64 %lvar12 to i32
  %18 = call %clvalue_and_bool_struct* @load_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %16, i32 %17)
  %19 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %18, i32 0, i32 0
  %20 = load i64, i64* %19, align 4
  %21 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %18, i32 0, i32 1
  %22 = load i32, i32* %21, align 4
  %ifcond15 = icmp eq i32 %22, 0
  br i1 %ifcond15, label %then_block, label %entry_ifend14

entry_ifend14:                                    ; preds = %entry_ifend10
  %23 = trunc i64 %20 to i32
  %24 = zext i32 %23 to i64
  store i64 %24, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.toBuffer(String)$$230"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$4$" = alloca i64
  %"lvar$3$" = alloca i64
  %"lvar$2$" = alloca i64
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value1 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value1, i64* %"lvar$1$", align 8
  store i64 0, i64* %"lvar$2$"
  store i64 0, i64* %"lvar$2$", align 8
  store i64 0, i64* %"lvar$3$"
  store i64 0, i64* %"lvar$3$", align 8
  store i64 0, i64* %"lvar$4$"
  store i64 0, i64* %"lvar$4$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$2$"
  store i64 0, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  %gepaddtmp = getelementptr i64, i64* %lvar, i64 2
  %0 = trunc i64 %stack_offset_value1 to i32
  %1 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %0, i32 0)
  %2 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %1, i32 0, i32 0
  %3 = load i64, i64* %2, align 4
  %4 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %1, i32 0, i32 1
  %5 = load i32, i32* %4, align 4
  %ifcond = icmp eq i32 %5, 0
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %then_block107, %then_block60, %entry_ifend85, %entry_condend, %entry_ifend37, %entry_ifend21, %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %6 = trunc i64 %3 to i32
  %7 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52669228 to i8*))
  %ifcond5 = icmp eq i64* %7, null
  br i1 %ifcond5, label %then_block, label %entry_ifend4

entry_ifend4:                                     ; preds = %entry_ifend
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value8 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value8, align 8
  store i64 %stack_offset_value1, i64* %lvar_offset_value8, align 8
  store i64 0, i64* %gepaddtmp, align 8
  store i64 0, i64* %gepaddtmp, align 8
  %lvar_offset_value12 = getelementptr i64, i64* %lvar, i64 3
  store i64 0, i64* %lvar_offset_value12, align 8
  store i64 0, i64* %lvar_offset_value12, align 8
  %lvar_offset_value14 = getelementptr i64, i64* %lvar, i64 4
  store i64 0, i64* %lvar_offset_value14, align 8
  store i64 0, i64* %lvar_offset_value14, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %8 = ptrtoint i64* %gepaddtmp to i64
  store i64 %8, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value15 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value15, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  %9 = zext i32 %6 to i64
  store i64 %9, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value17 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value18 = getelementptr i64, i64* %loaded_stack_ptr_address_value17, i64 1
  store i64* %inc_ptr_value18, i64** %stack_ptr_address
  %10 = call i32 @call_invoke_method(i64* %7, i32 34, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond19 = icmp ne i32 %10, 1
  br i1 %ifcond19, label %then_block20, label %entry_ifend21

then_block20:                                     ; preds = %entry_ifend4
  %11 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend21:                                    ; preds = %entry_ifend4
  %stack_offset_address_value22 = getelementptr i64, i64* %stack, i64 2
  %stack_offset_value23 = load i64, i64* %stack_offset_address_value22, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value23, i64* %"lvar$2$", align 8
  %stack_offset_value24 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value24, i64* %"lvar$0$", align 8
  %stack_offset_value26 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value26, i64* %"lvar$1$", align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value23, i64* %"lvar$2$", align 8
  %stack_offset_address_value29 = getelementptr i64, i64* %stack, i64 3
  %stack_offset_value30 = load i64, i64* %stack_offset_address_value29, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value30, i64* %"lvar$3$", align 8
  %stack_offset_address_value31 = getelementptr i64, i64* %stack, i64 4
  %stack_offset_value32 = load i64, i64* %stack_offset_address_value31, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value32, i64* %"lvar$4$", align 8
  %loaded_stack_ptr_address_value33 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value33, i64 -1
  %stack_pointer_offset_value34 = load i64, i64* %stack_pointer_offset_value, align 8
  %12 = trunc i64 %stack_pointer_offset_value34 to i32
  call void @push_jit_object(i32 %12)
  %loaded_stack_ptr_address_value35 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value35, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i32 0, i32* @gSigInt
  %13 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52669236 to i8*))
  %ifcond38 = icmp eq i64* %13, null
  br i1 %ifcond38, label %then_block, label %entry_ifend37

entry_ifend37:                                    ; preds = %entry_ifend21
  %14 = call i32 @create_object(i64* %13)
  call void @push_jit_object(i32 %14)
  %15 = trunc i64 %stack_offset_value23 to i32
  %16 = call i32 @get_array_length(i32 %15)
  %value2 = zext i32 %16 to i64
  %17 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52669244 to i8*))
  %ifcond42 = icmp eq i64* %17, null
  br i1 %ifcond42, label %then_block, label %entry_ifend41

entry_ifend41:                                    ; preds = %entry_ifend37
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value24, i64* %lvar, align 8
  store i64 0, i64* %lvar_offset_value8, align 8
  store i64 %stack_offset_value26, i64* %lvar_offset_value8, align 8
  store i64 0, i64* %gepaddtmp, align 8
  store i64 %stack_offset_value23, i64* %gepaddtmp, align 8
  store i64 0, i64* %lvar_offset_value12, align 8
  store i64 %stack_offset_value30, i64* %lvar_offset_value12, align 8
  store i64 0, i64* %lvar_offset_value14, align 8
  store i64 %stack_offset_value32, i64* %lvar_offset_value14, align 8
  %loaded_stack_ptr_address_value53 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value53, align 8
  %18 = zext i32 %14 to i64
  store i64 %18, i64* %loaded_stack_ptr_address_value53, align 8
  %loaded_stack_ptr_address_value54 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value55 = getelementptr i64, i64* %loaded_stack_ptr_address_value54, i64 1
  store i64* %inc_ptr_value55, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value55, align 8
  store i64 %value2, i64* %inc_ptr_value55, align 8
  %loaded_stack_ptr_address_value57 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value58 = getelementptr i64, i64* %loaded_stack_ptr_address_value57, i64 1
  store i64* %inc_ptr_value58, i64** %stack_ptr_address
  %19 = call i32 @call_invoke_method(i64* %17, i32 2, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond59 = icmp ne i32 %19, 1
  br i1 %ifcond59, label %then_block60, label %entry_ifend61

then_block60:                                     ; preds = %entry_ifend41
  %20 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend61:                                    ; preds = %entry_ifend41
  %stack_offset_value65 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value65, i64* %"lvar$0$", align 8
  %stack_offset_value67 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value67, i64* %"lvar$1$", align 8
  %stack_offset_value69 = load i64, i64* %stack_offset_address_value22, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value69, i64* %"lvar$2$", align 8
  %stack_offset_value71 = load i64, i64* %stack_offset_address_value29, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value71, i64* %"lvar$3$", align 8
  %stack_offset_value73 = load i64, i64* %stack_offset_address_value31, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value73, i64* %"lvar$4$", align 8
  %loaded_stack_ptr_address_value74 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value75 = getelementptr i64, i64* %loaded_stack_ptr_address_value74, i64 -1
  %stack_pointer_offset_value76 = load i64, i64* %stack_pointer_offset_value75, align 8
  %21 = trunc i64 %stack_pointer_offset_value76 to i32
  call void @push_jit_object(i32 %21)
  %loaded_stack_ptr_address_value77 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value78 = getelementptr i64, i64* %loaded_stack_ptr_address_value77, i64 1
  store i64* %dec_ptr_value78, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_pointer_offset_value76, i64* %"lvar$3$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$4$"
  store i64 0, i64* %"lvar$4$", align 8
  br label %for_start_pointzzzzh

for_start_pointzzzzh:                             ; preds = %entry_ifend108, %entry_ifend61
  %lvar92 = phi i64 [ %stack_offset_value114, %entry_ifend108 ], [ %stack_offset_value67, %entry_ifend61 ]
  %lvar90 = phi i64 [ %stack_offset_value112, %entry_ifend108 ], [ %stack_offset_value65, %entry_ifend61 ]
  %lvar96 = phi i64 [ %stack_offset_value118, %entry_ifend108 ], [ %stack_pointer_offset_value76, %entry_ifend61 ]
  %lvar94 = phi i64 [ %stack_offset_value116, %entry_ifend108 ], [ %stack_offset_value69, %entry_ifend61 ]
  %lvar98 = phi i64 [ %40, %entry_ifend108 ], [ 0, %entry_ifend61 ]
  %22 = trunc i64 %lvar98 to i32
  %23 = trunc i64 %lvar94 to i32
  %24 = call i32 @get_array_length(i32 %23)
  %subtmp = sub nuw i32 %24, 1
  %letmp = icmp slt i32 %22, %subtmp
  store i32 0, i32* @gSigInt
  %25 = trunc i64 %lvar96 to i32
  br i1 %letmp, label %entry_condend, label %label_for_endzzzzh

entry_condend:                                    ; preds = %for_start_pointzzzzh
  %26 = call %clvalue_and_bool_struct* @load_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %23, i32 %22)
  %27 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %26, i32 0, i32 0
  %28 = load i64, i64* %27, align 4
  %29 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %26, i32 0, i32 1
  %30 = load i32, i32* %29, align 4
  %ifcond86 = icmp eq i32 %30, 0
  br i1 %ifcond86, label %then_block, label %entry_ifend85

label_for_endzzzzh:                               ; preds = %for_start_pointzzzzh
  %31 = zext i32 %25 to i64
  store i64 %31, i64* %stack, align 8
  ret i32 1

entry_ifend85:                                    ; preds = %entry_condend
  %32 = trunc i64 %28 to i8
  %33 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52669296 to i8*))
  %ifcond89 = icmp eq i64* %33, null
  br i1 %ifcond89, label %then_block, label %entry_ifend88

entry_ifend88:                                    ; preds = %entry_ifend85
  store i64 0, i64* %lvar, align 8
  store i64 %lvar90, i64* %lvar, align 8
  store i64 0, i64* %lvar_offset_value8, align 8
  store i64 %lvar92, i64* %lvar_offset_value8, align 8
  store i64 0, i64* %gepaddtmp, align 8
  store i64 %lvar94, i64* %gepaddtmp, align 8
  store i64 0, i64* %lvar_offset_value12, align 8
  store i64 %lvar96, i64* %lvar_offset_value12, align 8
  store i64 0, i64* %lvar_offset_value14, align 8
  store i64 %lvar98, i64* %lvar_offset_value14, align 8
  %loaded_stack_ptr_address_value100 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value100, align 8
  %34 = zext i32 %25 to i64
  store i64 %34, i64* %loaded_stack_ptr_address_value100, align 8
  %loaded_stack_ptr_address_value101 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value102 = getelementptr i64, i64* %loaded_stack_ptr_address_value101, i64 1
  store i64* %inc_ptr_value102, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value102, align 8
  %35 = zext i8 %32 to i64
  store i64 %35, i64* %inc_ptr_value102, align 8
  %loaded_stack_ptr_address_value104 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value105 = getelementptr i64, i64* %loaded_stack_ptr_address_value104, i64 1
  store i64* %inc_ptr_value105, i64** %stack_ptr_address
  %36 = call i32 @call_invoke_method(i64* %33, i32 5, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond106 = icmp ne i32 %36, 1
  br i1 %ifcond106, label %then_block107, label %entry_ifend108

then_block107:                                    ; preds = %entry_ifend88
  %37 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend108:                                   ; preds = %entry_ifend88
  %stack_offset_value112 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value112, i64* %"lvar$0$", align 8
  %stack_offset_value114 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value114, i64* %"lvar$1$", align 8
  %stack_offset_value116 = load i64, i64* %stack_offset_address_value22, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value116, i64* %"lvar$2$", align 8
  %stack_offset_value118 = load i64, i64* %stack_offset_address_value29, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value118, i64* %"lvar$3$", align 8
  %stack_offset_value120 = load i64, i64* %stack_offset_address_value31, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value120, i64* %"lvar$4$", align 8
  %loaded_stack_ptr_address_value121 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value122 = getelementptr i64, i64* %loaded_stack_ptr_address_value121, i64 -1
  %stack_pointer_offset_value123 = load i64, i64* %stack_pointer_offset_value122, align 8
  %38 = trunc i64 %stack_pointer_offset_value123 to i32
  call void @push_jit_object(i32 %38)
  %loaded_stack_ptr_address_value124 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value125 = getelementptr i64, i64* %loaded_stack_ptr_address_value124, i64 1
  store i64* %dec_ptr_value125, i64** %stack_ptr_address
  %39 = trunc i64 %stack_offset_value120 to i32
  %addtmp = add nuw i32 %39, 1
  store i64 0, i64* %"lvar$4$"
  %40 = zext i32 %addtmp to i64
  store i64 %40, i64* %"lvar$4$", align 8
  br label %for_start_pointzzzzh
}

define i32 @"JITTest.split2(String,regex)$$231"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$11$" = alloca i64
  %"lvar$10$" = alloca i64
  %"lvar$9$" = alloca i64
  %"lvar$8$" = alloca i64
  %"lvar$7$" = alloca i64
  %"lvar$6$" = alloca i64
  %"lvar$5$" = alloca i64
  %"lvar$4$" = alloca i64
  %"lvar$3$" = alloca i64
  %"lvar$2$" = alloca i64
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value1 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value1, i64* %"lvar$1$", align 8
  %stack_offset_address_value2 = getelementptr i64, i64* %stack, i64 2
  %stack_offset_value3 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value3, i64* %"lvar$2$", align 8
  store i64 0, i64* %"lvar$3$"
  store i64 0, i64* %"lvar$3$", align 8
  store i64 0, i64* %"lvar$4$"
  store i64 0, i64* %"lvar$4$", align 8
  store i64 0, i64* %"lvar$5$"
  store i64 0, i64* %"lvar$5$", align 8
  store i64 0, i64* %"lvar$6$"
  store i64 0, i64* %"lvar$6$", align 8
  store i64 0, i64* %"lvar$7$"
  store i64 0, i64* %"lvar$7$", align 8
  store i64 0, i64* %"lvar$8$"
  store i64 0, i64* %"lvar$8$", align 8
  store i64 0, i64* %"lvar$9$"
  store i64 0, i64* %"lvar$9$", align 8
  store i64 0, i64* %"lvar$10$"
  store i64 0, i64* %"lvar$10$", align 8
  store i64 0, i64* %"lvar$11$"
  store i64 0, i64* %"lvar$11$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52669348 to i8*))
  %ifcond = icmp eq i64* %0, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %then_block952, %then_block883, %then_block819, %then_block703, %then_block634, %then_block570, %then_block464, %then_block395, %then_block331, %then_block248, %then_block167, %then_block96, %entry_ifend884, %entry_ifend820, %entry_ifend780, %entry_ifend776, %entry_ifend772, %entry_ifend768, %entry_condend763, %entry_ifend754, %label_elsezzzzl, %entry_ifend739, %entry_ifend704, %entry_ifend635, %entry_ifend571, %entry_ifend531, %entry_ifend528, %entry_condend522, %entry_ifend513, %label_elsezzzzk, %entry_ifend500, %entry_ifend465, %entry_ifend396, %entry_ifend332, %entry_ifend292, %entry_ifend289, %entry_condend283, %entry_condend, %entry_ifend130, %entry_ifend97, %entry_ifend33, %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %1 = call i32 @create_object(i64* %0)
  call void @push_jit_object(i32 %1)
  %2 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52669364 to i8*))
  %ifcond6 = icmp eq i64* %2, null
  br i1 %ifcond6, label %then_block, label %entry_ifend5

entry_ifend5:                                     ; preds = %entry_ifend
  %lvar7 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar7, i64* %lvar, align 8
  %lvar8 = load i64, i64* %"lvar$1$"
  %lvar_offset_value9 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value9, align 8
  store i64 %lvar8, i64* %lvar_offset_value9, align 8
  %lvar10 = load i64, i64* %"lvar$2$"
  %lvar_offset_value11 = getelementptr i64, i64* %lvar, i64 2
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar10, i64* %lvar_offset_value11, align 8
  %lvar12 = load i64, i64* %"lvar$3$"
  %lvar_offset_value13 = getelementptr i64, i64* %lvar, i64 3
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar12, i64* %lvar_offset_value13, align 8
  %lvar14 = load i64, i64* %"lvar$4$"
  %lvar_offset_value15 = getelementptr i64, i64* %lvar, i64 4
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar14, i64* %lvar_offset_value15, align 8
  %lvar16 = load i64, i64* %"lvar$5$"
  %lvar_offset_value17 = getelementptr i64, i64* %lvar, i64 5
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar16, i64* %lvar_offset_value17, align 8
  %lvar18 = load i64, i64* %"lvar$6$"
  %lvar_offset_value19 = getelementptr i64, i64* %lvar, i64 6
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar18, i64* %lvar_offset_value19, align 8
  %lvar20 = load i64, i64* %"lvar$7$"
  %lvar_offset_value21 = getelementptr i64, i64* %lvar, i64 7
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar20, i64* %lvar_offset_value21, align 8
  %lvar22 = load i64, i64* %"lvar$8$"
  %lvar_offset_value23 = getelementptr i64, i64* %lvar, i64 8
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar22, i64* %lvar_offset_value23, align 8
  %lvar24 = load i64, i64* %"lvar$9$"
  %lvar_offset_value25 = getelementptr i64, i64* %lvar, i64 9
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar24, i64* %lvar_offset_value25, align 8
  %lvar26 = load i64, i64* %"lvar$10$"
  %lvar_offset_value27 = getelementptr i64, i64* %lvar, i64 10
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar26, i64* %lvar_offset_value27, align 8
  %lvar28 = load i64, i64* %"lvar$11$"
  %lvar_offset_value29 = getelementptr i64, i64* %lvar, i64 11
  store i64 0, i64* %lvar_offset_value29, align 8
  store i64 %lvar28, i64* %lvar_offset_value29, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %3 = zext i32 %1 to i64
  store i64 %3, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value30 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value30, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  %4 = call i32 @call_invoke_method(i64* %2, i32 0, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond31 = icmp ne i32 %4, 1
  br i1 %ifcond31, label %then_block32, label %entry_ifend33

then_block32:                                     ; preds = %entry_ifend5
  %5 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend33:                                    ; preds = %entry_ifend5
  %stack_offset_value34 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value34, i64* %"lvar$0$", align 8
  %stack_offset_value36 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value36, i64* %"lvar$1$", align 8
  %stack_offset_value38 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value38, i64* %"lvar$2$", align 8
  %stack_offset_address_value39 = getelementptr i64, i64* %stack, i64 3
  %stack_offset_value40 = load i64, i64* %stack_offset_address_value39, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value40, i64* %"lvar$3$", align 8
  %stack_offset_address_value41 = getelementptr i64, i64* %stack, i64 4
  %stack_offset_value42 = load i64, i64* %stack_offset_address_value41, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value42, i64* %"lvar$4$", align 8
  %stack_offset_address_value43 = getelementptr i64, i64* %stack, i64 5
  %stack_offset_value44 = load i64, i64* %stack_offset_address_value43, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value44, i64* %"lvar$5$", align 8
  %stack_offset_address_value45 = getelementptr i64, i64* %stack, i64 6
  %stack_offset_value46 = load i64, i64* %stack_offset_address_value45, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value46, i64* %"lvar$6$", align 8
  %stack_offset_address_value47 = getelementptr i64, i64* %stack, i64 7
  %stack_offset_value48 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value48, i64* %"lvar$7$", align 8
  %stack_offset_address_value49 = getelementptr i64, i64* %stack, i64 8
  %stack_offset_value50 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value50, i64* %"lvar$8$", align 8
  %stack_offset_address_value51 = getelementptr i64, i64* %stack, i64 9
  %stack_offset_value52 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value52, i64* %"lvar$9$", align 8
  %stack_offset_address_value53 = getelementptr i64, i64* %stack, i64 10
  %stack_offset_value54 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value54, i64* %"lvar$10$", align 8
  %stack_offset_address_value55 = getelementptr i64, i64* %stack, i64 11
  %stack_offset_value56 = load i64, i64* %stack_offset_address_value55, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value56, i64* %"lvar$11$", align 8
  %loaded_stack_ptr_address_value57 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value57, i64 -1
  %stack_pointer_offset_value58 = load i64, i64* %stack_pointer_offset_value, align 8
  %6 = trunc i64 %stack_pointer_offset_value58 to i32
  call void @push_jit_object(i32 %6)
  %loaded_stack_ptr_address_value59 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value59, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_pointer_offset_value58, i64* %"lvar$3$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$4$"
  store i64 0, i64* %"lvar$4$", align 8
  store i32 0, i32* @gSigInt
  %lvar60 = load i64, i64* %"lvar$0$"
  %7 = trunc i64 %lvar60 to i32
  %lvar61 = load i64, i64* %"lvar$1$"
  %8 = trunc i64 %lvar61 to i32
  %9 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52669380 to i8*))
  %ifcond64 = icmp eq i64* %9, null
  br i1 %ifcond64, label %then_block, label %entry_ifend63

entry_ifend63:                                    ; preds = %entry_ifend33
  %lvar65 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar65, i64* %lvar, align 8
  %lvar67 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value9, align 8
  store i64 %lvar67, i64* %lvar_offset_value9, align 8
  %lvar69 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar69, i64* %lvar_offset_value11, align 8
  %lvar71 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar71, i64* %lvar_offset_value13, align 8
  %lvar73 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar73, i64* %lvar_offset_value15, align 8
  %lvar75 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar75, i64* %lvar_offset_value17, align 8
  %lvar77 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar77, i64* %lvar_offset_value19, align 8
  %lvar79 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar79, i64* %lvar_offset_value21, align 8
  %lvar81 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar81, i64* %lvar_offset_value23, align 8
  %lvar83 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar83, i64* %lvar_offset_value25, align 8
  %lvar85 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar85, i64* %lvar_offset_value27, align 8
  %lvar87 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value29, align 8
  store i64 %lvar87, i64* %lvar_offset_value29, align 8
  %loaded_stack_ptr_address_value89 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value89, align 8
  %10 = zext i32 %7 to i64
  store i64 %10, i64* %loaded_stack_ptr_address_value89, align 8
  %loaded_stack_ptr_address_value90 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value91 = getelementptr i64, i64* %loaded_stack_ptr_address_value90, i64 1
  store i64* %inc_ptr_value91, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value91, align 8
  %11 = zext i32 %8 to i64
  store i64 %11, i64* %inc_ptr_value91, align 8
  %loaded_stack_ptr_address_value93 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value94 = getelementptr i64, i64* %loaded_stack_ptr_address_value93, i64 1
  store i64* %inc_ptr_value94, i64** %stack_ptr_address
  %12 = call i32 @call_invoke_method(i64* %9, i32 230, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond95 = icmp ne i32 %12, 1
  br i1 %ifcond95, label %then_block96, label %entry_ifend97

then_block96:                                     ; preds = %entry_ifend63
  %13 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend97:                                    ; preds = %entry_ifend63
  %stack_offset_value101 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value101, i64* %"lvar$0$", align 8
  %stack_offset_value103 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value103, i64* %"lvar$1$", align 8
  %stack_offset_value105 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value105, i64* %"lvar$2$", align 8
  %stack_offset_value107 = load i64, i64* %stack_offset_address_value39, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value107, i64* %"lvar$3$", align 8
  %stack_offset_value109 = load i64, i64* %stack_offset_address_value41, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value109, i64* %"lvar$4$", align 8
  %stack_offset_value111 = load i64, i64* %stack_offset_address_value43, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value111, i64* %"lvar$5$", align 8
  %stack_offset_value113 = load i64, i64* %stack_offset_address_value45, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value113, i64* %"lvar$6$", align 8
  %stack_offset_value115 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value115, i64* %"lvar$7$", align 8
  %stack_offset_value117 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value117, i64* %"lvar$8$", align 8
  %stack_offset_value119 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value119, i64* %"lvar$9$", align 8
  %stack_offset_value121 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value121, i64* %"lvar$10$", align 8
  %stack_offset_value123 = load i64, i64* %stack_offset_address_value55, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value123, i64* %"lvar$11$", align 8
  %loaded_stack_ptr_address_value124 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value125 = getelementptr i64, i64* %loaded_stack_ptr_address_value124, i64 -1
  %stack_pointer_offset_value126 = load i64, i64* %stack_pointer_offset_value125, align 8
  %14 = trunc i64 %stack_pointer_offset_value126 to i32
  call void @push_jit_object(i32 %14)
  %loaded_stack_ptr_address_value127 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value128 = getelementptr i64, i64* %loaded_stack_ptr_address_value127, i64 1
  store i64* %dec_ptr_value128, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_pointer_offset_value126, i64* %"lvar$5$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$6$"
  store i64 16, i64* %"lvar$6$", align 8
  store i32 0, i32* @gSigInt
  %15 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52669388 to i8*))
  %ifcond131 = icmp eq i64* %15, null
  br i1 %ifcond131, label %then_block, label %entry_ifend130

entry_ifend130:                                   ; preds = %entry_ifend97
  %16 = call i32 @create_object(i64* %15)
  call void @push_jit_object(i32 %16)
  %lvar132 = load i64, i64* %"lvar$6$"
  %17 = trunc i64 %lvar132 to i32
  %18 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52669400 to i8*))
  %ifcond135 = icmp eq i64* %18, null
  br i1 %ifcond135, label %then_block, label %entry_ifend134

entry_ifend134:                                   ; preds = %entry_ifend130
  %lvar136 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar136, i64* %lvar, align 8
  %lvar138 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value9, align 8
  store i64 %lvar138, i64* %lvar_offset_value9, align 8
  %lvar140 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar140, i64* %lvar_offset_value11, align 8
  %lvar142 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar142, i64* %lvar_offset_value13, align 8
  %lvar144 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar144, i64* %lvar_offset_value15, align 8
  %lvar146 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar146, i64* %lvar_offset_value17, align 8
  %lvar148 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar148, i64* %lvar_offset_value19, align 8
  %lvar150 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar150, i64* %lvar_offset_value21, align 8
  %lvar152 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar152, i64* %lvar_offset_value23, align 8
  %lvar154 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar154, i64* %lvar_offset_value25, align 8
  %lvar156 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar156, i64* %lvar_offset_value27, align 8
  %lvar158 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value29, align 8
  store i64 %lvar158, i64* %lvar_offset_value29, align 8
  %loaded_stack_ptr_address_value160 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value160, align 8
  %19 = zext i32 %16 to i64
  store i64 %19, i64* %loaded_stack_ptr_address_value160, align 8
  %loaded_stack_ptr_address_value161 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value162 = getelementptr i64, i64* %loaded_stack_ptr_address_value161, i64 1
  store i64* %inc_ptr_value162, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value162, align 8
  %20 = zext i32 %17 to i64
  store i64 %20, i64* %inc_ptr_value162, align 8
  %loaded_stack_ptr_address_value164 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value165 = getelementptr i64, i64* %loaded_stack_ptr_address_value164, i64 1
  store i64* %inc_ptr_value165, i64** %stack_ptr_address
  %21 = call i32 @call_invoke_method(i64* %18, i32 0, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond166 = icmp ne i32 %21, 1
  br i1 %ifcond166, label %then_block167, label %entry_ifend168

then_block167:                                    ; preds = %entry_ifend134
  %22 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend168:                                   ; preds = %entry_ifend134
  %stack_offset_value172 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value172, i64* %"lvar$0$", align 8
  %stack_offset_value174 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value174, i64* %"lvar$1$", align 8
  %stack_offset_value176 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value176, i64* %"lvar$2$", align 8
  %stack_offset_value178 = load i64, i64* %stack_offset_address_value39, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value178, i64* %"lvar$3$", align 8
  %stack_offset_value180 = load i64, i64* %stack_offset_address_value41, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value180, i64* %"lvar$4$", align 8
  %stack_offset_value182 = load i64, i64* %stack_offset_address_value43, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value182, i64* %"lvar$5$", align 8
  %stack_offset_value184 = load i64, i64* %stack_offset_address_value45, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value184, i64* %"lvar$6$", align 8
  %stack_offset_value186 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value186, i64* %"lvar$7$", align 8
  %stack_offset_value188 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value188, i64* %"lvar$8$", align 8
  %stack_offset_value190 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value190, i64* %"lvar$9$", align 8
  %stack_offset_value192 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value192, i64* %"lvar$10$", align 8
  %stack_offset_value194 = load i64, i64* %stack_offset_address_value55, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value194, i64* %"lvar$11$", align 8
  %loaded_stack_ptr_address_value195 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value196 = getelementptr i64, i64* %loaded_stack_ptr_address_value195, i64 -1
  %stack_pointer_offset_value197 = load i64, i64* %stack_pointer_offset_value196, align 8
  %23 = trunc i64 %stack_pointer_offset_value197 to i32
  call void @push_jit_object(i32 %23)
  %loaded_stack_ptr_address_value198 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value199 = getelementptr i64, i64* %loaded_stack_ptr_address_value198, i64 1
  store i64* %dec_ptr_value199, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_pointer_offset_value197, i64* %"lvar$7$", align 8
  store i32 0, i32* @gSigInt
  br label %entry_condend

entry_condend:                                    ; preds = %for_start_pointzzzzm, %entry_ifend516, %entry_condend507, %entry_ifend168
  store i32 0, i32* @gSigInt
  %lvar200 = load i64, i64* %"lvar$2$"
  %24 = trunc i64 %lvar200 to i32
  %lvar201 = load i64, i64* %"lvar$5$"
  %25 = trunc i64 %lvar201 to i32
  %lvar202 = load i64, i64* %"lvar$4$"
  %26 = trunc i64 %lvar202 to i32
  %lvar203 = load i64, i64* %"lvar$6$"
  %27 = trunc i64 %lvar203 to i32
  %lvar204 = load i64, i64* %"lvar$7$"
  %28 = trunc i64 %lvar204 to i32
  %29 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52669456 to i8*))
  %ifcond207 = icmp eq i64* %29, null
  br i1 %ifcond207, label %then_block, label %entry_ifend206

entry_ifend206:                                   ; preds = %entry_condend
  %lvar208 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar208, i64* %lvar, align 8
  %lvar210 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value9, align 8
  store i64 %lvar210, i64* %lvar_offset_value9, align 8
  %lvar212 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar212, i64* %lvar_offset_value11, align 8
  %lvar214 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar214, i64* %lvar_offset_value13, align 8
  %lvar216 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar216, i64* %lvar_offset_value15, align 8
  %lvar218 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar218, i64* %lvar_offset_value17, align 8
  %lvar220 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar220, i64* %lvar_offset_value19, align 8
  %lvar222 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar222, i64* %lvar_offset_value21, align 8
  %lvar224 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar224, i64* %lvar_offset_value23, align 8
  %lvar226 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar226, i64* %lvar_offset_value25, align 8
  %lvar228 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar228, i64* %lvar_offset_value27, align 8
  %lvar230 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value29, align 8
  store i64 %lvar230, i64* %lvar_offset_value29, align 8
  %loaded_stack_ptr_address_value232 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value232, align 8
  %30 = zext i32 %24 to i64
  store i64 %30, i64* %loaded_stack_ptr_address_value232, align 8
  %loaded_stack_ptr_address_value233 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value234 = getelementptr i64, i64* %loaded_stack_ptr_address_value233, i64 1
  store i64* %inc_ptr_value234, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value234, align 8
  %31 = zext i32 %25 to i64
  store i64 %31, i64* %inc_ptr_value234, align 8
  %loaded_stack_ptr_address_value236 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value237 = getelementptr i64, i64* %loaded_stack_ptr_address_value236, i64 1
  store i64* %inc_ptr_value237, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value237, align 8
  %32 = zext i32 %26 to i64
  store i64 %32, i64* %inc_ptr_value237, align 8
  %loaded_stack_ptr_address_value239 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value240 = getelementptr i64, i64* %loaded_stack_ptr_address_value239, i64 1
  store i64* %inc_ptr_value240, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value240, align 8
  %33 = zext i32 %27 to i64
  store i64 %33, i64* %inc_ptr_value240, align 8
  %loaded_stack_ptr_address_value242 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value243 = getelementptr i64, i64* %loaded_stack_ptr_address_value242, i64 1
  store i64* %inc_ptr_value243, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value243, align 8
  %34 = zext i32 %28 to i64
  store i64 %34, i64* %inc_ptr_value243, align 8
  %loaded_stack_ptr_address_value245 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value246 = getelementptr i64, i64* %loaded_stack_ptr_address_value245, i64 1
  store i64* %inc_ptr_value246, i64** %stack_ptr_address
  %35 = call i32 @call_invoke_method(i64* %29, i32 25, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond247 = icmp ne i32 %35, 1
  br i1 %ifcond247, label %then_block248, label %entry_ifend249

then_block248:                                    ; preds = %entry_ifend206
  %36 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend249:                                   ; preds = %entry_ifend206
  %stack_offset_value253 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value253, i64* %"lvar$0$", align 8
  %stack_offset_value255 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value255, i64* %"lvar$1$", align 8
  %stack_offset_value257 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value257, i64* %"lvar$2$", align 8
  %stack_offset_value259 = load i64, i64* %stack_offset_address_value39, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value259, i64* %"lvar$3$", align 8
  %stack_offset_value261 = load i64, i64* %stack_offset_address_value41, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value261, i64* %"lvar$4$", align 8
  %stack_offset_value263 = load i64, i64* %stack_offset_address_value43, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value263, i64* %"lvar$5$", align 8
  %stack_offset_value265 = load i64, i64* %stack_offset_address_value45, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value265, i64* %"lvar$6$", align 8
  %stack_offset_value267 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value267, i64* %"lvar$7$", align 8
  %stack_offset_value269 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value269, i64* %"lvar$8$", align 8
  %stack_offset_value271 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value271, i64* %"lvar$9$", align 8
  %stack_offset_value273 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value273, i64* %"lvar$10$", align 8
  %stack_offset_value275 = load i64, i64* %stack_offset_address_value55, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value275, i64* %"lvar$11$", align 8
  %loaded_stack_ptr_address_value276 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value277 = getelementptr i64, i64* %loaded_stack_ptr_address_value276, i64 -1
  %stack_pointer_offset_value278 = load i64, i64* %stack_pointer_offset_value277, align 8
  %37 = trunc i64 %stack_pointer_offset_value278 to i32
  call void @push_jit_object(i32 %37)
  %loaded_stack_ptr_address_value279 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value280 = getelementptr i64, i64* %loaded_stack_ptr_address_value279, i64 1
  store i64* %dec_ptr_value280, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_pointer_offset_value278, i64* %"lvar$8$", align 8
  store i32 0, i32* @gSigInt
  %eqtmpx = icmp eq i32 %37, 1
  br i1 %eqtmpx, label %entry_condend283, label %label_elifzzzzj1a

entry_condend283:                                 ; preds = %entry_ifend249
  store i32 0, i32* @gSigInt
  %lvar285 = load i64, i64* %"lvar$5$"
  %38 = trunc i64 %lvar285 to i32
  %lvar286 = load i64, i64* %"lvar$4$"
  %39 = trunc i64 %lvar286 to i32
  %lvar287 = load i64, i64* %"lvar$7$"
  %40 = trunc i64 %lvar287 to i32
  %41 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %40, i32 0)
  %42 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %41, i32 0, i32 0
  %43 = load i64, i64* %42, align 4
  %44 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %41, i32 0, i32 1
  %45 = load i32, i32* %44, align 4
  %ifcond290 = icmp eq i32 %45, 0
  br i1 %ifcond290, label %then_block, label %entry_ifend289

label_elifzzzzj1a:                                ; preds = %entry_ifend249
  %gttmp = icmp sgt i32 %37, 1
  store i32 0, i32* @gSigInt
  br i1 %gttmp, label %entry_condend522, label %label_if_elifzzzzj0a

entry_ifend289:                                   ; preds = %entry_condend283
  %46 = trunc i64 %43 to i32
  %47 = call %clvalue_and_bool_struct* @load_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %46, i32 0)
  %48 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %47, i32 0, i32 0
  %49 = load i64, i64* %48, align 4
  %50 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %47, i32 0, i32 1
  %51 = load i32, i32* %50, align 4
  %ifcond293 = icmp eq i32 %51, 0
  br i1 %ifcond293, label %then_block, label %entry_ifend292

entry_ifend292:                                   ; preds = %entry_ifend289
  %52 = trunc i64 %49 to i32
  %53 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52669484 to i8*))
  %ifcond296 = icmp eq i64* %53, null
  br i1 %ifcond296, label %then_block, label %entry_ifend295

entry_ifend295:                                   ; preds = %entry_ifend292
  %lvar297 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar297, i64* %lvar, align 8
  %lvar299 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value9, align 8
  store i64 %lvar299, i64* %lvar_offset_value9, align 8
  %lvar301 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar301, i64* %lvar_offset_value11, align 8
  %lvar303 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar303, i64* %lvar_offset_value13, align 8
  %lvar305 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar305, i64* %lvar_offset_value15, align 8
  %lvar307 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar307, i64* %lvar_offset_value17, align 8
  %lvar309 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar309, i64* %lvar_offset_value19, align 8
  %lvar311 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar311, i64* %lvar_offset_value21, align 8
  %lvar313 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar313, i64* %lvar_offset_value23, align 8
  %lvar315 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar315, i64* %lvar_offset_value25, align 8
  %lvar317 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar317, i64* %lvar_offset_value27, align 8
  %lvar319 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value29, align 8
  store i64 %lvar319, i64* %lvar_offset_value29, align 8
  %loaded_stack_ptr_address_value321 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value321, align 8
  %54 = zext i32 %38 to i64
  store i64 %54, i64* %loaded_stack_ptr_address_value321, align 8
  %loaded_stack_ptr_address_value322 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value323 = getelementptr i64, i64* %loaded_stack_ptr_address_value322, i64 1
  store i64* %inc_ptr_value323, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value323, align 8
  %55 = zext i32 %39 to i64
  store i64 %55, i64* %inc_ptr_value323, align 8
  %loaded_stack_ptr_address_value325 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value326 = getelementptr i64, i64* %loaded_stack_ptr_address_value325, i64 1
  store i64* %inc_ptr_value326, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value326, align 8
  %56 = zext i32 %52 to i64
  store i64 %56, i64* %inc_ptr_value326, align 8
  %loaded_stack_ptr_address_value328 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value329 = getelementptr i64, i64* %loaded_stack_ptr_address_value328, i64 1
  store i64* %inc_ptr_value329, i64** %stack_ptr_address
  %57 = call i32 @call_invoke_method(i64* %53, i32 11, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond330 = icmp ne i32 %57, 1
  br i1 %ifcond330, label %then_block331, label %entry_ifend332

then_block331:                                    ; preds = %entry_ifend295
  %58 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend332:                                   ; preds = %entry_ifend295
  %stack_offset_value336 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value336, i64* %"lvar$0$", align 8
  %stack_offset_value338 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value338, i64* %"lvar$1$", align 8
  %stack_offset_value340 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value340, i64* %"lvar$2$", align 8
  %stack_offset_value342 = load i64, i64* %stack_offset_address_value39, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value342, i64* %"lvar$3$", align 8
  %stack_offset_value344 = load i64, i64* %stack_offset_address_value41, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value344, i64* %"lvar$4$", align 8
  %stack_offset_value346 = load i64, i64* %stack_offset_address_value43, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value346, i64* %"lvar$5$", align 8
  %stack_offset_value348 = load i64, i64* %stack_offset_address_value45, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value348, i64* %"lvar$6$", align 8
  %stack_offset_value350 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value350, i64* %"lvar$7$", align 8
  %stack_offset_value352 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value352, i64* %"lvar$8$", align 8
  %stack_offset_value354 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value354, i64* %"lvar$9$", align 8
  %stack_offset_value356 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value356, i64* %"lvar$10$", align 8
  %stack_offset_value358 = load i64, i64* %stack_offset_address_value55, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value358, i64* %"lvar$11$", align 8
  %loaded_stack_ptr_address_value359 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value360 = getelementptr i64, i64* %loaded_stack_ptr_address_value359, i64 -1
  %stack_pointer_offset_value361 = load i64, i64* %stack_pointer_offset_value360, align 8
  %59 = trunc i64 %stack_pointer_offset_value361 to i32
  call void @push_jit_object(i32 %59)
  %loaded_stack_ptr_address_value362 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value363 = getelementptr i64, i64* %loaded_stack_ptr_address_value362, i64 1
  store i64* %dec_ptr_value363, i64** %stack_ptr_address
  %60 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52669492 to i8*))
  %ifcond366 = icmp eq i64* %60, null
  br i1 %ifcond366, label %then_block, label %entry_ifend365

entry_ifend365:                                   ; preds = %entry_ifend332
  %lvar367 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar367, i64* %lvar, align 8
  %lvar369 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value9, align 8
  store i64 %lvar369, i64* %lvar_offset_value9, align 8
  %lvar371 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar371, i64* %lvar_offset_value11, align 8
  %lvar373 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar373, i64* %lvar_offset_value13, align 8
  %lvar375 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar375, i64* %lvar_offset_value15, align 8
  %lvar377 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar377, i64* %lvar_offset_value17, align 8
  %lvar379 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar379, i64* %lvar_offset_value19, align 8
  %lvar381 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar381, i64* %lvar_offset_value21, align 8
  %lvar383 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar383, i64* %lvar_offset_value23, align 8
  %lvar385 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar385, i64* %lvar_offset_value25, align 8
  %lvar387 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar387, i64* %lvar_offset_value27, align 8
  %lvar389 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value29, align 8
  store i64 %lvar389, i64* %lvar_offset_value29, align 8
  %loaded_stack_ptr_address_value391 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value391, align 8
  store i64 %stack_pointer_offset_value361, i64* %loaded_stack_ptr_address_value391, align 8
  %loaded_stack_ptr_address_value392 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value393 = getelementptr i64, i64* %loaded_stack_ptr_address_value392, i64 1
  store i64* %inc_ptr_value393, i64** %stack_ptr_address
  %61 = call i32 @call_invoke_method(i64* %60, i32 10, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond394 = icmp ne i32 %61, 1
  br i1 %ifcond394, label %then_block395, label %entry_ifend396

then_block395:                                    ; preds = %entry_ifend365
  %62 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend396:                                   ; preds = %entry_ifend365
  %stack_offset_value400 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value400, i64* %"lvar$0$", align 8
  %stack_offset_value402 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value402, i64* %"lvar$1$", align 8
  %stack_offset_value404 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value404, i64* %"lvar$2$", align 8
  %stack_offset_value406 = load i64, i64* %stack_offset_address_value39, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value406, i64* %"lvar$3$", align 8
  %stack_offset_value408 = load i64, i64* %stack_offset_address_value41, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value408, i64* %"lvar$4$", align 8
  %stack_offset_value410 = load i64, i64* %stack_offset_address_value43, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value410, i64* %"lvar$5$", align 8
  %stack_offset_value412 = load i64, i64* %stack_offset_address_value45, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value412, i64* %"lvar$6$", align 8
  %stack_offset_value414 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value414, i64* %"lvar$7$", align 8
  %stack_offset_value416 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value416, i64* %"lvar$8$", align 8
  %stack_offset_value418 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value418, i64* %"lvar$9$", align 8
  %stack_offset_value420 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value420, i64* %"lvar$10$", align 8
  %stack_offset_value422 = load i64, i64* %stack_offset_address_value55, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value422, i64* %"lvar$11$", align 8
  %loaded_stack_ptr_address_value423 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value424 = getelementptr i64, i64* %loaded_stack_ptr_address_value423, i64 -1
  %stack_pointer_offset_value425 = load i64, i64* %stack_pointer_offset_value424, align 8
  %63 = trunc i64 %stack_pointer_offset_value425 to i32
  call void @push_jit_object(i32 %63)
  %loaded_stack_ptr_address_value426 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value427 = getelementptr i64, i64* %loaded_stack_ptr_address_value426, i64 1
  store i64* %dec_ptr_value427, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_pointer_offset_value425, i64* %"lvar$9$", align 8
  store i32 0, i32* @gSigInt
  %lvar428 = load i64, i64* %"lvar$3$"
  %64 = trunc i64 %lvar428 to i32
  %65 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52669500 to i8*))
  %ifcond432 = icmp eq i64* %65, null
  br i1 %ifcond432, label %then_block, label %entry_ifend431

entry_ifend431:                                   ; preds = %entry_ifend396
  %lvar433 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar433, i64* %lvar, align 8
  %lvar435 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value9, align 8
  store i64 %lvar435, i64* %lvar_offset_value9, align 8
  %lvar437 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar437, i64* %lvar_offset_value11, align 8
  %lvar439 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar439, i64* %lvar_offset_value13, align 8
  %lvar441 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar441, i64* %lvar_offset_value15, align 8
  %lvar443 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar443, i64* %lvar_offset_value17, align 8
  %lvar445 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar445, i64* %lvar_offset_value19, align 8
  %lvar447 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar447, i64* %lvar_offset_value21, align 8
  %lvar449 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar449, i64* %lvar_offset_value23, align 8
  %lvar451 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar451, i64* %lvar_offset_value25, align 8
  %lvar453 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar453, i64* %lvar_offset_value27, align 8
  %lvar455 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value29, align 8
  store i64 %lvar455, i64* %lvar_offset_value29, align 8
  %loaded_stack_ptr_address_value457 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value457, align 8
  %66 = zext i32 %64 to i64
  store i64 %66, i64* %loaded_stack_ptr_address_value457, align 8
  %loaded_stack_ptr_address_value458 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value459 = getelementptr i64, i64* %loaded_stack_ptr_address_value458, i64 1
  store i64* %inc_ptr_value459, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value459, align 8
  %67 = zext i32 %63 to i64
  store i64 %67, i64* %inc_ptr_value459, align 8
  %loaded_stack_ptr_address_value461 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value462 = getelementptr i64, i64* %loaded_stack_ptr_address_value461, i64 1
  store i64* %inc_ptr_value462, i64** %stack_ptr_address
  %68 = call i32 @call_invoke_method(i64* %65, i32 7, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond463 = icmp ne i32 %68, 1
  br i1 %ifcond463, label %then_block464, label %entry_ifend465

then_block464:                                    ; preds = %entry_ifend431
  %69 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend465:                                   ; preds = %entry_ifend431
  %stack_offset_value469 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value469, i64* %"lvar$0$", align 8
  %stack_offset_value471 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value471, i64* %"lvar$1$", align 8
  %stack_offset_value473 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value473, i64* %"lvar$2$", align 8
  %stack_offset_value475 = load i64, i64* %stack_offset_address_value39, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value475, i64* %"lvar$3$", align 8
  %stack_offset_value477 = load i64, i64* %stack_offset_address_value41, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value477, i64* %"lvar$4$", align 8
  %stack_offset_value479 = load i64, i64* %stack_offset_address_value43, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value479, i64* %"lvar$5$", align 8
  %stack_offset_value481 = load i64, i64* %stack_offset_address_value45, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value481, i64* %"lvar$6$", align 8
  %stack_offset_value483 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value483, i64* %"lvar$7$", align 8
  %stack_offset_value485 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value485, i64* %"lvar$8$", align 8
  %stack_offset_value487 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value487, i64* %"lvar$9$", align 8
  %stack_offset_value489 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value489, i64* %"lvar$10$", align 8
  %stack_offset_value491 = load i64, i64* %stack_offset_address_value55, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value491, i64* %"lvar$11$", align 8
  %loaded_stack_ptr_address_value492 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value493 = getelementptr i64, i64* %loaded_stack_ptr_address_value492, i64 -1
  %stack_pointer_offset_value494 = load i64, i64* %stack_pointer_offset_value493, align 8
  %70 = trunc i64 %stack_pointer_offset_value494 to i32
  call void @push_jit_object(i32 %70)
  %loaded_stack_ptr_address_value495 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value496 = getelementptr i64, i64* %loaded_stack_ptr_address_value495, i64 1
  store i64* %dec_ptr_value496, i64** %stack_ptr_address
  store i32 0, i32* @gSigInt
  %lvar497 = load i64, i64* %"lvar$4$"
  %71 = trunc i64 %lvar497 to i32
  %lvar498 = load i64, i64* %"lvar$7$"
  %72 = trunc i64 %lvar498 to i32
  %73 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %72, i32 1)
  %74 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %73, i32 0, i32 0
  %75 = load i64, i64* %74, align 4
  %76 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %73, i32 0, i32 1
  %77 = load i32, i32* %76, align 4
  %ifcond501 = icmp eq i32 %77, 0
  br i1 %ifcond501, label %then_block, label %entry_ifend500

entry_ifend500:                                   ; preds = %entry_ifend465
  %78 = trunc i64 %75 to i32
  %79 = call %clvalue_and_bool_struct* @load_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %78, i32 0)
  %80 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %79, i32 0, i32 0
  %81 = load i64, i64* %80, align 4
  %82 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %79, i32 0, i32 1
  %83 = load i32, i32* %82, align 4
  %ifcond504 = icmp eq i32 %83, 0
  br i1 %ifcond504, label %then_block, label %entry_ifend503

entry_ifend503:                                   ; preds = %entry_ifend500
  %84 = trunc i64 %81 to i32
  %eqtmpx505 = icmp eq i32 %71, %84
  store i32 0, i32* @gSigInt
  br i1 %eqtmpx505, label %entry_condend507, label %label_elsezzzzk

entry_condend507:                                 ; preds = %entry_ifend503
  %lvar509 = load i64, i64* %"lvar$4$"
  %85 = trunc i64 %lvar509 to i32
  %addtmp = add nuw i32 %85, 1
  store i64 0, i64* %"lvar$4$"
  %86 = zext i32 %addtmp to i64
  store i64 %86, i64* %"lvar$4$", align 8
  br label %entry_condend

label_elsezzzzk:                                  ; preds = %entry_ifend503
  %lvar511 = load i64, i64* %"lvar$7$"
  %87 = trunc i64 %lvar511 to i32
  %88 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %87, i32 1)
  %89 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %88, i32 0, i32 0
  %90 = load i64, i64* %89, align 4
  %91 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %88, i32 0, i32 1
  %92 = load i32, i32* %91, align 4
  %ifcond514 = icmp eq i32 %92, 0
  br i1 %ifcond514, label %then_block, label %entry_ifend513

entry_ifend513:                                   ; preds = %label_elsezzzzk
  %93 = trunc i64 %90 to i32
  %94 = call %clvalue_and_bool_struct* @load_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %93, i32 0)
  %95 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %94, i32 0, i32 0
  %96 = load i64, i64* %95, align 4
  %97 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %94, i32 0, i32 1
  %98 = load i32, i32* %97, align 4
  %ifcond517 = icmp eq i32 %98, 0
  br i1 %ifcond517, label %then_block, label %entry_ifend516

entry_ifend516:                                   ; preds = %entry_ifend513
  %99 = trunc i64 %96 to i32
  store i64 0, i64* %"lvar$4$"
  %100 = zext i32 %99 to i64
  store i64 %100, i64* %"lvar$4$", align 8
  br label %entry_condend

entry_condend522:                                 ; preds = %label_elifzzzzj1a
  %lvar524 = load i64, i64* %"lvar$5$"
  %101 = trunc i64 %lvar524 to i32
  %lvar525 = load i64, i64* %"lvar$4$"
  %102 = trunc i64 %lvar525 to i32
  %lvar526 = load i64, i64* %"lvar$7$"
  %103 = trunc i64 %lvar526 to i32
  %104 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %103, i32 0)
  %105 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %104, i32 0, i32 0
  %106 = load i64, i64* %105, align 4
  %107 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %104, i32 0, i32 1
  %108 = load i32, i32* %107, align 4
  %ifcond529 = icmp eq i32 %108, 0
  br i1 %ifcond529, label %then_block, label %entry_ifend528

label_if_elifzzzzj0a:                             ; preds = %label_elifzzzzj1a
  store i32 0, i32* @gSigInt
  %lvar993 = load i64, i64* %"lvar$3$"
  %109 = trunc i64 %lvar993 to i32
  %110 = zext i32 %109 to i64
  store i64 %110, i64* %stack, align 8
  ret i32 1

entry_ifend528:                                   ; preds = %entry_condend522
  %111 = trunc i64 %106 to i32
  %112 = call %clvalue_and_bool_struct* @load_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %111, i32 0)
  %113 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %112, i32 0, i32 0
  %114 = load i64, i64* %113, align 4
  %115 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %112, i32 0, i32 1
  %116 = load i32, i32* %115, align 4
  %ifcond532 = icmp eq i32 %116, 0
  br i1 %ifcond532, label %then_block, label %entry_ifend531

entry_ifend531:                                   ; preds = %entry_ifend528
  %117 = trunc i64 %114 to i32
  %118 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52669672 to i8*))
  %ifcond535 = icmp eq i64* %118, null
  br i1 %ifcond535, label %then_block, label %entry_ifend534

entry_ifend534:                                   ; preds = %entry_ifend531
  %lvar536 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar536, i64* %lvar, align 8
  %lvar538 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value9, align 8
  store i64 %lvar538, i64* %lvar_offset_value9, align 8
  %lvar540 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar540, i64* %lvar_offset_value11, align 8
  %lvar542 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar542, i64* %lvar_offset_value13, align 8
  %lvar544 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar544, i64* %lvar_offset_value15, align 8
  %lvar546 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar546, i64* %lvar_offset_value17, align 8
  %lvar548 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar548, i64* %lvar_offset_value19, align 8
  %lvar550 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar550, i64* %lvar_offset_value21, align 8
  %lvar552 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar552, i64* %lvar_offset_value23, align 8
  %lvar554 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar554, i64* %lvar_offset_value25, align 8
  %lvar556 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar556, i64* %lvar_offset_value27, align 8
  %lvar558 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value29, align 8
  store i64 %lvar558, i64* %lvar_offset_value29, align 8
  %loaded_stack_ptr_address_value560 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value560, align 8
  %119 = zext i32 %101 to i64
  store i64 %119, i64* %loaded_stack_ptr_address_value560, align 8
  %loaded_stack_ptr_address_value561 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value562 = getelementptr i64, i64* %loaded_stack_ptr_address_value561, i64 1
  store i64* %inc_ptr_value562, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value562, align 8
  %120 = zext i32 %102 to i64
  store i64 %120, i64* %inc_ptr_value562, align 8
  %loaded_stack_ptr_address_value564 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value565 = getelementptr i64, i64* %loaded_stack_ptr_address_value564, i64 1
  store i64* %inc_ptr_value565, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value565, align 8
  %121 = zext i32 %117 to i64
  store i64 %121, i64* %inc_ptr_value565, align 8
  %loaded_stack_ptr_address_value567 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value568 = getelementptr i64, i64* %loaded_stack_ptr_address_value567, i64 1
  store i64* %inc_ptr_value568, i64** %stack_ptr_address
  %122 = call i32 @call_invoke_method(i64* %118, i32 11, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond569 = icmp ne i32 %122, 1
  br i1 %ifcond569, label %then_block570, label %entry_ifend571

then_block570:                                    ; preds = %entry_ifend534
  %123 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend571:                                   ; preds = %entry_ifend534
  %stack_offset_value575 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value575, i64* %"lvar$0$", align 8
  %stack_offset_value577 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value577, i64* %"lvar$1$", align 8
  %stack_offset_value579 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value579, i64* %"lvar$2$", align 8
  %stack_offset_value581 = load i64, i64* %stack_offset_address_value39, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value581, i64* %"lvar$3$", align 8
  %stack_offset_value583 = load i64, i64* %stack_offset_address_value41, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value583, i64* %"lvar$4$", align 8
  %stack_offset_value585 = load i64, i64* %stack_offset_address_value43, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value585, i64* %"lvar$5$", align 8
  %stack_offset_value587 = load i64, i64* %stack_offset_address_value45, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value587, i64* %"lvar$6$", align 8
  %stack_offset_value589 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value589, i64* %"lvar$7$", align 8
  %stack_offset_value591 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value591, i64* %"lvar$8$", align 8
  %stack_offset_value593 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value593, i64* %"lvar$9$", align 8
  %stack_offset_value595 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value595, i64* %"lvar$10$", align 8
  %stack_offset_value597 = load i64, i64* %stack_offset_address_value55, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value597, i64* %"lvar$11$", align 8
  %loaded_stack_ptr_address_value598 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value599 = getelementptr i64, i64* %loaded_stack_ptr_address_value598, i64 -1
  %stack_pointer_offset_value600 = load i64, i64* %stack_pointer_offset_value599, align 8
  %124 = trunc i64 %stack_pointer_offset_value600 to i32
  call void @push_jit_object(i32 %124)
  %loaded_stack_ptr_address_value601 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value602 = getelementptr i64, i64* %loaded_stack_ptr_address_value601, i64 1
  store i64* %dec_ptr_value602, i64** %stack_ptr_address
  %125 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52669680 to i8*))
  %ifcond605 = icmp eq i64* %125, null
  br i1 %ifcond605, label %then_block, label %entry_ifend604

entry_ifend604:                                   ; preds = %entry_ifend571
  %lvar606 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar606, i64* %lvar, align 8
  %lvar608 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value9, align 8
  store i64 %lvar608, i64* %lvar_offset_value9, align 8
  %lvar610 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar610, i64* %lvar_offset_value11, align 8
  %lvar612 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar612, i64* %lvar_offset_value13, align 8
  %lvar614 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar614, i64* %lvar_offset_value15, align 8
  %lvar616 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar616, i64* %lvar_offset_value17, align 8
  %lvar618 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar618, i64* %lvar_offset_value19, align 8
  %lvar620 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar620, i64* %lvar_offset_value21, align 8
  %lvar622 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar622, i64* %lvar_offset_value23, align 8
  %lvar624 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar624, i64* %lvar_offset_value25, align 8
  %lvar626 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar626, i64* %lvar_offset_value27, align 8
  %lvar628 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value29, align 8
  store i64 %lvar628, i64* %lvar_offset_value29, align 8
  %loaded_stack_ptr_address_value630 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value630, align 8
  store i64 %stack_pointer_offset_value600, i64* %loaded_stack_ptr_address_value630, align 8
  %loaded_stack_ptr_address_value631 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value632 = getelementptr i64, i64* %loaded_stack_ptr_address_value631, i64 1
  store i64* %inc_ptr_value632, i64** %stack_ptr_address
  %126 = call i32 @call_invoke_method(i64* %125, i32 10, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond633 = icmp ne i32 %126, 1
  br i1 %ifcond633, label %then_block634, label %entry_ifend635

then_block634:                                    ; preds = %entry_ifend604
  %127 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend635:                                   ; preds = %entry_ifend604
  %stack_offset_value639 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value639, i64* %"lvar$0$", align 8
  %stack_offset_value641 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value641, i64* %"lvar$1$", align 8
  %stack_offset_value643 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value643, i64* %"lvar$2$", align 8
  %stack_offset_value645 = load i64, i64* %stack_offset_address_value39, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value645, i64* %"lvar$3$", align 8
  %stack_offset_value647 = load i64, i64* %stack_offset_address_value41, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value647, i64* %"lvar$4$", align 8
  %stack_offset_value649 = load i64, i64* %stack_offset_address_value43, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value649, i64* %"lvar$5$", align 8
  %stack_offset_value651 = load i64, i64* %stack_offset_address_value45, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value651, i64* %"lvar$6$", align 8
  %stack_offset_value653 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value653, i64* %"lvar$7$", align 8
  %stack_offset_value655 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value655, i64* %"lvar$8$", align 8
  %stack_offset_value657 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value657, i64* %"lvar$9$", align 8
  %stack_offset_value659 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value659, i64* %"lvar$10$", align 8
  %stack_offset_value661 = load i64, i64* %stack_offset_address_value55, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value661, i64* %"lvar$11$", align 8
  %loaded_stack_ptr_address_value662 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value663 = getelementptr i64, i64* %loaded_stack_ptr_address_value662, i64 -1
  %stack_pointer_offset_value664 = load i64, i64* %stack_pointer_offset_value663, align 8
  %128 = trunc i64 %stack_pointer_offset_value664 to i32
  call void @push_jit_object(i32 %128)
  %loaded_stack_ptr_address_value665 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value666 = getelementptr i64, i64* %loaded_stack_ptr_address_value665, i64 1
  store i64* %dec_ptr_value666, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_pointer_offset_value664, i64* %"lvar$9$", align 8
  store i32 0, i32* @gSigInt
  %lvar667 = load i64, i64* %"lvar$3$"
  %129 = trunc i64 %lvar667 to i32
  %130 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52669688 to i8*))
  %ifcond671 = icmp eq i64* %130, null
  br i1 %ifcond671, label %then_block, label %entry_ifend670

entry_ifend670:                                   ; preds = %entry_ifend635
  %lvar672 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar672, i64* %lvar, align 8
  %lvar674 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value9, align 8
  store i64 %lvar674, i64* %lvar_offset_value9, align 8
  %lvar676 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar676, i64* %lvar_offset_value11, align 8
  %lvar678 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar678, i64* %lvar_offset_value13, align 8
  %lvar680 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar680, i64* %lvar_offset_value15, align 8
  %lvar682 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar682, i64* %lvar_offset_value17, align 8
  %lvar684 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar684, i64* %lvar_offset_value19, align 8
  %lvar686 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar686, i64* %lvar_offset_value21, align 8
  %lvar688 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar688, i64* %lvar_offset_value23, align 8
  %lvar690 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar690, i64* %lvar_offset_value25, align 8
  %lvar692 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar692, i64* %lvar_offset_value27, align 8
  %lvar694 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value29, align 8
  store i64 %lvar694, i64* %lvar_offset_value29, align 8
  %loaded_stack_ptr_address_value696 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value696, align 8
  %131 = zext i32 %129 to i64
  store i64 %131, i64* %loaded_stack_ptr_address_value696, align 8
  %loaded_stack_ptr_address_value697 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value698 = getelementptr i64, i64* %loaded_stack_ptr_address_value697, i64 1
  store i64* %inc_ptr_value698, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value698, align 8
  %132 = zext i32 %128 to i64
  store i64 %132, i64* %inc_ptr_value698, align 8
  %loaded_stack_ptr_address_value700 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value701 = getelementptr i64, i64* %loaded_stack_ptr_address_value700, i64 1
  store i64* %inc_ptr_value701, i64** %stack_ptr_address
  %133 = call i32 @call_invoke_method(i64* %130, i32 7, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond702 = icmp ne i32 %133, 1
  br i1 %ifcond702, label %then_block703, label %entry_ifend704

then_block703:                                    ; preds = %entry_ifend670
  %134 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend704:                                   ; preds = %entry_ifend670
  %stack_offset_value708 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value708, i64* %"lvar$0$", align 8
  %stack_offset_value710 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value710, i64* %"lvar$1$", align 8
  %stack_offset_value712 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value712, i64* %"lvar$2$", align 8
  %stack_offset_value714 = load i64, i64* %stack_offset_address_value39, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value714, i64* %"lvar$3$", align 8
  %stack_offset_value716 = load i64, i64* %stack_offset_address_value41, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value716, i64* %"lvar$4$", align 8
  %stack_offset_value718 = load i64, i64* %stack_offset_address_value43, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value718, i64* %"lvar$5$", align 8
  %stack_offset_value720 = load i64, i64* %stack_offset_address_value45, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value720, i64* %"lvar$6$", align 8
  %stack_offset_value722 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value722, i64* %"lvar$7$", align 8
  %stack_offset_value724 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value724, i64* %"lvar$8$", align 8
  %stack_offset_value726 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value726, i64* %"lvar$9$", align 8
  %stack_offset_value728 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value728, i64* %"lvar$10$", align 8
  %stack_offset_value730 = load i64, i64* %stack_offset_address_value55, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value730, i64* %"lvar$11$", align 8
  %loaded_stack_ptr_address_value731 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value732 = getelementptr i64, i64* %loaded_stack_ptr_address_value731, i64 -1
  %stack_pointer_offset_value733 = load i64, i64* %stack_pointer_offset_value732, align 8
  %135 = trunc i64 %stack_pointer_offset_value733 to i32
  call void @push_jit_object(i32 %135)
  %loaded_stack_ptr_address_value734 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value735 = getelementptr i64, i64* %loaded_stack_ptr_address_value734, i64 1
  store i64* %dec_ptr_value735, i64** %stack_ptr_address
  store i32 0, i32* @gSigInt
  %lvar736 = load i64, i64* %"lvar$4$"
  %136 = trunc i64 %lvar736 to i32
  %lvar737 = load i64, i64* %"lvar$7$"
  %137 = trunc i64 %lvar737 to i32
  %138 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %137, i32 1)
  %139 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %138, i32 0, i32 0
  %140 = load i64, i64* %139, align 4
  %141 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %138, i32 0, i32 1
  %142 = load i32, i32* %141, align 4
  %ifcond740 = icmp eq i32 %142, 0
  br i1 %ifcond740, label %then_block, label %entry_ifend739

entry_ifend739:                                   ; preds = %entry_ifend704
  %143 = trunc i64 %140 to i32
  %144 = call %clvalue_and_bool_struct* @load_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %143, i32 0)
  %145 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %144, i32 0, i32 0
  %146 = load i64, i64* %145, align 4
  %147 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %144, i32 0, i32 1
  %148 = load i32, i32* %147, align 4
  %ifcond743 = icmp eq i32 %148, 0
  br i1 %ifcond743, label %then_block, label %entry_ifend742

entry_ifend742:                                   ; preds = %entry_ifend739
  %149 = trunc i64 %146 to i32
  %eqtmpx744 = icmp eq i32 %136, %149
  store i32 0, i32* @gSigInt
  br i1 %eqtmpx744, label %entry_condend746, label %label_elsezzzzl

entry_condend746:                                 ; preds = %entry_ifend742
  %lvar748 = load i64, i64* %"lvar$4$"
  %150 = trunc i64 %lvar748 to i32
  %addtmp749 = add nuw i32 %150, 1
  store i64 0, i64* %"lvar$4$"
  %151 = zext i32 %addtmp749 to i64
  store i64 %151, i64* %"lvar$4$", align 8
  br label %label_if_endzzzzl

label_elsezzzzl:                                  ; preds = %entry_ifend742
  %lvar752 = load i64, i64* %"lvar$7$"
  %152 = trunc i64 %lvar752 to i32
  %153 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %152, i32 1)
  %154 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %153, i32 0, i32 0
  %155 = load i64, i64* %154, align 4
  %156 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %153, i32 0, i32 1
  %157 = load i32, i32* %156, align 4
  %ifcond755 = icmp eq i32 %157, 0
  br i1 %ifcond755, label %then_block, label %entry_ifend754

label_if_endzzzzl:                                ; preds = %entry_ifend757, %entry_condend746
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$10$"
  store i64 1, i64* %"lvar$10$", align 8
  br label %for_start_pointzzzzm

entry_ifend754:                                   ; preds = %label_elsezzzzl
  %158 = trunc i64 %155 to i32
  %159 = call %clvalue_and_bool_struct* @load_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %158, i32 0)
  %160 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %159, i32 0, i32 0
  %161 = load i64, i64* %160, align 4
  %162 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %159, i32 0, i32 1
  %163 = load i32, i32* %162, align 4
  %ifcond758 = icmp eq i32 %163, 0
  br i1 %ifcond758, label %then_block, label %entry_ifend757

entry_ifend757:                                   ; preds = %entry_ifend754
  %164 = trunc i64 %161 to i32
  store i64 0, i64* %"lvar$4$"
  %165 = zext i32 %164 to i64
  store i64 %165, i64* %"lvar$4$", align 8
  br label %label_if_endzzzzl

for_start_pointzzzzm:                             ; preds = %entry_ifend953, %label_if_endzzzzl
  %lvar760 = phi i64 [ %216, %entry_ifend953 ], [ 1, %label_if_endzzzzl ]
  %166 = trunc i64 %lvar760 to i32
  %lvar761 = load i64, i64* %"lvar$8$"
  %167 = trunc i64 %lvar761 to i32
  %letmp = icmp slt i32 %166, %167
  br i1 %letmp, label %entry_condend763, label %entry_condend

entry_condend763:                                 ; preds = %for_start_pointzzzzm
  store i32 0, i32* @gSigInt
  %lvar765 = load i64, i64* %"lvar$5$"
  %168 = trunc i64 %lvar765 to i32
  %lvar766 = load i64, i64* %"lvar$7$"
  %169 = trunc i64 %lvar766 to i32
  %170 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %169, i32 0)
  %171 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %170, i32 0, i32 0
  %172 = load i64, i64* %171, align 4
  %173 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %170, i32 0, i32 1
  %174 = load i32, i32* %173, align 4
  %ifcond769 = icmp eq i32 %174, 0
  br i1 %ifcond769, label %then_block, label %entry_ifend768

entry_ifend768:                                   ; preds = %entry_condend763
  %175 = trunc i64 %172 to i32
  %lvar770 = load i64, i64* %"lvar$10$"
  %176 = trunc i64 %lvar770 to i32
  %177 = call %clvalue_and_bool_struct* @load_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %175, i32 %176)
  %178 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %177, i32 0, i32 0
  %179 = load i64, i64* %178, align 4
  %180 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %177, i32 0, i32 1
  %181 = load i32, i32* %180, align 4
  %ifcond773 = icmp eq i32 %181, 0
  br i1 %ifcond773, label %then_block, label %entry_ifend772

entry_ifend772:                                   ; preds = %entry_ifend768
  %182 = trunc i64 %179 to i32
  %lvar774 = load i64, i64* %"lvar$7$"
  %183 = trunc i64 %lvar774 to i32
  %184 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %183, i32 1)
  %185 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %184, i32 0, i32 0
  %186 = load i64, i64* %185, align 4
  %187 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %184, i32 0, i32 1
  %188 = load i32, i32* %187, align 4
  %ifcond777 = icmp eq i32 %188, 0
  br i1 %ifcond777, label %then_block, label %entry_ifend776

entry_ifend776:                                   ; preds = %entry_ifend772
  %189 = trunc i64 %186 to i32
  %lvar778 = load i64, i64* %"lvar$10$"
  %190 = trunc i64 %lvar778 to i32
  %191 = call %clvalue_and_bool_struct* @load_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %189, i32 %190)
  %192 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %191, i32 0, i32 0
  %193 = load i64, i64* %192, align 4
  %194 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %191, i32 0, i32 1
  %195 = load i32, i32* %194, align 4
  %ifcond781 = icmp eq i32 %195, 0
  br i1 %ifcond781, label %then_block, label %entry_ifend780

entry_ifend780:                                   ; preds = %entry_ifend776
  %196 = trunc i64 %193 to i32
  %197 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52669840 to i8*))
  %ifcond784 = icmp eq i64* %197, null
  br i1 %ifcond784, label %then_block, label %entry_ifend783

entry_ifend783:                                   ; preds = %entry_ifend780
  %lvar785 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar785, i64* %lvar, align 8
  %lvar787 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value9, align 8
  store i64 %lvar787, i64* %lvar_offset_value9, align 8
  %lvar789 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar789, i64* %lvar_offset_value11, align 8
  %lvar791 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar791, i64* %lvar_offset_value13, align 8
  %lvar793 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar793, i64* %lvar_offset_value15, align 8
  %lvar795 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar795, i64* %lvar_offset_value17, align 8
  %lvar797 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar797, i64* %lvar_offset_value19, align 8
  %lvar799 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar799, i64* %lvar_offset_value21, align 8
  %lvar801 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar801, i64* %lvar_offset_value23, align 8
  %lvar803 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar803, i64* %lvar_offset_value25, align 8
  %lvar805 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar805, i64* %lvar_offset_value27, align 8
  %lvar807 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value29, align 8
  store i64 %lvar807, i64* %lvar_offset_value29, align 8
  %loaded_stack_ptr_address_value809 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value809, align 8
  %198 = zext i32 %168 to i64
  store i64 %198, i64* %loaded_stack_ptr_address_value809, align 8
  %loaded_stack_ptr_address_value810 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value811 = getelementptr i64, i64* %loaded_stack_ptr_address_value810, i64 1
  store i64* %inc_ptr_value811, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value811, align 8
  %199 = zext i32 %182 to i64
  store i64 %199, i64* %inc_ptr_value811, align 8
  %loaded_stack_ptr_address_value813 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value814 = getelementptr i64, i64* %loaded_stack_ptr_address_value813, i64 1
  store i64* %inc_ptr_value814, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value814, align 8
  %200 = zext i32 %196 to i64
  store i64 %200, i64* %inc_ptr_value814, align 8
  %loaded_stack_ptr_address_value816 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value817 = getelementptr i64, i64* %loaded_stack_ptr_address_value816, i64 1
  store i64* %inc_ptr_value817, i64** %stack_ptr_address
  %201 = call i32 @call_invoke_method(i64* %197, i32 11, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond818 = icmp ne i32 %201, 1
  br i1 %ifcond818, label %then_block819, label %entry_ifend820

then_block819:                                    ; preds = %entry_ifend783
  %202 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend820:                                   ; preds = %entry_ifend783
  %stack_offset_value824 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value824, i64* %"lvar$0$", align 8
  %stack_offset_value826 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value826, i64* %"lvar$1$", align 8
  %stack_offset_value828 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value828, i64* %"lvar$2$", align 8
  %stack_offset_value830 = load i64, i64* %stack_offset_address_value39, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value830, i64* %"lvar$3$", align 8
  %stack_offset_value832 = load i64, i64* %stack_offset_address_value41, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value832, i64* %"lvar$4$", align 8
  %stack_offset_value834 = load i64, i64* %stack_offset_address_value43, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value834, i64* %"lvar$5$", align 8
  %stack_offset_value836 = load i64, i64* %stack_offset_address_value45, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value836, i64* %"lvar$6$", align 8
  %stack_offset_value838 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value838, i64* %"lvar$7$", align 8
  %stack_offset_value840 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value840, i64* %"lvar$8$", align 8
  %stack_offset_value842 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value842, i64* %"lvar$9$", align 8
  %stack_offset_value844 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value844, i64* %"lvar$10$", align 8
  %stack_offset_value846 = load i64, i64* %stack_offset_address_value55, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value846, i64* %"lvar$11$", align 8
  %loaded_stack_ptr_address_value847 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value848 = getelementptr i64, i64* %loaded_stack_ptr_address_value847, i64 -1
  %stack_pointer_offset_value849 = load i64, i64* %stack_pointer_offset_value848, align 8
  %203 = trunc i64 %stack_pointer_offset_value849 to i32
  call void @push_jit_object(i32 %203)
  %loaded_stack_ptr_address_value850 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value851 = getelementptr i64, i64* %loaded_stack_ptr_address_value850, i64 1
  store i64* %dec_ptr_value851, i64** %stack_ptr_address
  %204 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52669848 to i8*))
  %ifcond854 = icmp eq i64* %204, null
  br i1 %ifcond854, label %then_block, label %entry_ifend853

entry_ifend853:                                   ; preds = %entry_ifend820
  %lvar855 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar855, i64* %lvar, align 8
  %lvar857 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value9, align 8
  store i64 %lvar857, i64* %lvar_offset_value9, align 8
  %lvar859 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar859, i64* %lvar_offset_value11, align 8
  %lvar861 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar861, i64* %lvar_offset_value13, align 8
  %lvar863 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar863, i64* %lvar_offset_value15, align 8
  %lvar865 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar865, i64* %lvar_offset_value17, align 8
  %lvar867 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar867, i64* %lvar_offset_value19, align 8
  %lvar869 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar869, i64* %lvar_offset_value21, align 8
  %lvar871 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar871, i64* %lvar_offset_value23, align 8
  %lvar873 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar873, i64* %lvar_offset_value25, align 8
  %lvar875 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar875, i64* %lvar_offset_value27, align 8
  %lvar877 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value29, align 8
  store i64 %lvar877, i64* %lvar_offset_value29, align 8
  %loaded_stack_ptr_address_value879 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value879, align 8
  store i64 %stack_pointer_offset_value849, i64* %loaded_stack_ptr_address_value879, align 8
  %loaded_stack_ptr_address_value880 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value881 = getelementptr i64, i64* %loaded_stack_ptr_address_value880, i64 1
  store i64* %inc_ptr_value881, i64** %stack_ptr_address
  %205 = call i32 @call_invoke_method(i64* %204, i32 10, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond882 = icmp ne i32 %205, 1
  br i1 %ifcond882, label %then_block883, label %entry_ifend884

then_block883:                                    ; preds = %entry_ifend853
  %206 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend884:                                   ; preds = %entry_ifend853
  %stack_offset_value888 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value888, i64* %"lvar$0$", align 8
  %stack_offset_value890 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value890, i64* %"lvar$1$", align 8
  %stack_offset_value892 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value892, i64* %"lvar$2$", align 8
  %stack_offset_value894 = load i64, i64* %stack_offset_address_value39, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value894, i64* %"lvar$3$", align 8
  %stack_offset_value896 = load i64, i64* %stack_offset_address_value41, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value896, i64* %"lvar$4$", align 8
  %stack_offset_value898 = load i64, i64* %stack_offset_address_value43, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value898, i64* %"lvar$5$", align 8
  %stack_offset_value900 = load i64, i64* %stack_offset_address_value45, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value900, i64* %"lvar$6$", align 8
  %stack_offset_value902 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value902, i64* %"lvar$7$", align 8
  %stack_offset_value904 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value904, i64* %"lvar$8$", align 8
  %stack_offset_value906 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value906, i64* %"lvar$9$", align 8
  %stack_offset_value908 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value908, i64* %"lvar$10$", align 8
  %stack_offset_value910 = load i64, i64* %stack_offset_address_value55, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value910, i64* %"lvar$11$", align 8
  %loaded_stack_ptr_address_value911 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value912 = getelementptr i64, i64* %loaded_stack_ptr_address_value911, i64 -1
  %stack_pointer_offset_value913 = load i64, i64* %stack_pointer_offset_value912, align 8
  %207 = trunc i64 %stack_pointer_offset_value913 to i32
  call void @push_jit_object(i32 %207)
  %loaded_stack_ptr_address_value914 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value915 = getelementptr i64, i64* %loaded_stack_ptr_address_value914, i64 1
  store i64* %dec_ptr_value915, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_pointer_offset_value913, i64* %"lvar$11$", align 8
  store i32 0, i32* @gSigInt
  %lvar916 = load i64, i64* %"lvar$3$"
  %208 = trunc i64 %lvar916 to i32
  %209 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52669856 to i8*))
  %ifcond920 = icmp eq i64* %209, null
  br i1 %ifcond920, label %then_block, label %entry_ifend919

entry_ifend919:                                   ; preds = %entry_ifend884
  %lvar921 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar921, i64* %lvar, align 8
  %lvar923 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value9, align 8
  store i64 %lvar923, i64* %lvar_offset_value9, align 8
  %lvar925 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar925, i64* %lvar_offset_value11, align 8
  %lvar927 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar927, i64* %lvar_offset_value13, align 8
  %lvar929 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar929, i64* %lvar_offset_value15, align 8
  %lvar931 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar931, i64* %lvar_offset_value17, align 8
  %lvar933 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar933, i64* %lvar_offset_value19, align 8
  %lvar935 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar935, i64* %lvar_offset_value21, align 8
  %lvar937 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar937, i64* %lvar_offset_value23, align 8
  %lvar939 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar939, i64* %lvar_offset_value25, align 8
  %lvar941 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar941, i64* %lvar_offset_value27, align 8
  %lvar943 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value29, align 8
  store i64 %lvar943, i64* %lvar_offset_value29, align 8
  %loaded_stack_ptr_address_value945 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value945, align 8
  %210 = zext i32 %208 to i64
  store i64 %210, i64* %loaded_stack_ptr_address_value945, align 8
  %loaded_stack_ptr_address_value946 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value947 = getelementptr i64, i64* %loaded_stack_ptr_address_value946, i64 1
  store i64* %inc_ptr_value947, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value947, align 8
  %211 = zext i32 %207 to i64
  store i64 %211, i64* %inc_ptr_value947, align 8
  %loaded_stack_ptr_address_value949 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value950 = getelementptr i64, i64* %loaded_stack_ptr_address_value949, i64 1
  store i64* %inc_ptr_value950, i64** %stack_ptr_address
  %212 = call i32 @call_invoke_method(i64* %209, i32 7, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond951 = icmp ne i32 %212, 1
  br i1 %ifcond951, label %then_block952, label %entry_ifend953

then_block952:                                    ; preds = %entry_ifend919
  %213 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend953:                                   ; preds = %entry_ifend919
  %stack_offset_value957 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value957, i64* %"lvar$0$", align 8
  %stack_offset_value959 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value959, i64* %"lvar$1$", align 8
  %stack_offset_value961 = load i64, i64* %stack_offset_address_value2, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value961, i64* %"lvar$2$", align 8
  %stack_offset_value963 = load i64, i64* %stack_offset_address_value39, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value963, i64* %"lvar$3$", align 8
  %stack_offset_value965 = load i64, i64* %stack_offset_address_value41, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value965, i64* %"lvar$4$", align 8
  %stack_offset_value967 = load i64, i64* %stack_offset_address_value43, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value967, i64* %"lvar$5$", align 8
  %stack_offset_value969 = load i64, i64* %stack_offset_address_value45, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value969, i64* %"lvar$6$", align 8
  %stack_offset_value971 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value971, i64* %"lvar$7$", align 8
  %stack_offset_value973 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value973, i64* %"lvar$8$", align 8
  %stack_offset_value975 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value975, i64* %"lvar$9$", align 8
  %stack_offset_value977 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value977, i64* %"lvar$10$", align 8
  %stack_offset_value979 = load i64, i64* %stack_offset_address_value55, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value979, i64* %"lvar$11$", align 8
  %loaded_stack_ptr_address_value980 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value981 = getelementptr i64, i64* %loaded_stack_ptr_address_value980, i64 -1
  %stack_pointer_offset_value982 = load i64, i64* %stack_pointer_offset_value981, align 8
  %214 = trunc i64 %stack_pointer_offset_value982 to i32
  call void @push_jit_object(i32 %214)
  %loaded_stack_ptr_address_value983 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value984 = getelementptr i64, i64* %loaded_stack_ptr_address_value983, i64 1
  store i64* %dec_ptr_value984, i64** %stack_ptr_address
  %lvar985 = load i64, i64* %"lvar$10$"
  %215 = trunc i64 %lvar985 to i32
  %addtmp986 = add nuw i32 %215, 1
  store i64 0, i64* %"lvar$10$"
  %216 = zext i32 %addtmp986 to i64
  store i64 %216, i64* %"lvar$10$", align 8
  br label %for_start_pointzzzzm
}

define i32 @"JITTest.split(regex)$$232"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$11$" = alloca i64
  %"lvar$10$" = alloca i64
  %"lvar$9$" = alloca i64
  %"lvar$8$" = alloca i64
  %"lvar$7$" = alloca i64
  %"lvar$6$" = alloca i64
  %"lvar$5$" = alloca i64
  %"lvar$4$" = alloca i64
  %"lvar$3$" = alloca i64
  %"lvar$2$" = alloca i64
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value1 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value1, i64* %"lvar$1$", align 8
  store i64 0, i64* %"lvar$2$"
  store i64 0, i64* %"lvar$2$", align 8
  store i64 0, i64* %"lvar$3$"
  store i64 0, i64* %"lvar$3$", align 8
  store i64 0, i64* %"lvar$4$"
  store i64 0, i64* %"lvar$4$", align 8
  store i64 0, i64* %"lvar$5$"
  store i64 0, i64* %"lvar$5$", align 8
  store i64 0, i64* %"lvar$6$"
  store i64 0, i64* %"lvar$6$", align 8
  store i64 0, i64* %"lvar$7$"
  store i64 0, i64* %"lvar$7$", align 8
  store i64 0, i64* %"lvar$8$"
  store i64 0, i64* %"lvar$8$", align 8
  store i64 0, i64* %"lvar$9$"
  store i64 0, i64* %"lvar$9$", align 8
  store i64 0, i64* %"lvar$10$"
  store i64 0, i64* %"lvar$10$", align 8
  store i64 0, i64* %"lvar$11$"
  store i64 0, i64* %"lvar$11$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_string_object(i8* inttoptr (i64 52670080 to i8*))
  call void @push_jit_object(i32 %0)
  store i64 0, i64* %"lvar$2$"
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  %2 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52670088 to i8*))
  %ifcond = icmp eq i64* %2, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %then_block946, %then_block877, %then_block813, %then_block697, %then_block628, %then_block564, %then_block458, %then_block389, %then_block325, %then_block242, %then_block161, %then_block90, %entry_ifend878, %entry_ifend814, %entry_ifend774, %entry_ifend770, %entry_ifend766, %entry_ifend762, %entry_condend757, %entry_ifend748, %label_elsezzzzq, %entry_ifend733, %entry_ifend698, %entry_ifend629, %entry_ifend565, %entry_ifend525, %entry_ifend522, %entry_condend516, %entry_ifend507, %label_elsezzzzp, %entry_ifend494, %entry_ifend459, %entry_ifend390, %entry_ifend326, %entry_ifend286, %entry_ifend283, %entry_condend277, %entry_condend, %entry_ifend124, %entry_ifend91, %entry_ifend31, %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %3 = call i32 @create_object(i64* %2)
  call void @push_jit_object(i32 %3)
  %4 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52670104 to i8*))
  %ifcond4 = icmp eq i64* %4, null
  br i1 %ifcond4, label %then_block, label %entry_ifend3

entry_ifend3:                                     ; preds = %entry_ifend
  %lvar5 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar5, i64* %lvar, align 8
  %lvar6 = load i64, i64* %"lvar$1$"
  %lvar_offset_value7 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value7, align 8
  store i64 %lvar6, i64* %lvar_offset_value7, align 8
  %lvar8 = load i64, i64* %"lvar$2$"
  %lvar_offset_value9 = getelementptr i64, i64* %lvar, i64 2
  store i64 0, i64* %lvar_offset_value9, align 8
  store i64 %lvar8, i64* %lvar_offset_value9, align 8
  %lvar10 = load i64, i64* %"lvar$3$"
  %lvar_offset_value11 = getelementptr i64, i64* %lvar, i64 3
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar10, i64* %lvar_offset_value11, align 8
  %lvar12 = load i64, i64* %"lvar$4$"
  %lvar_offset_value13 = getelementptr i64, i64* %lvar, i64 4
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar12, i64* %lvar_offset_value13, align 8
  %lvar14 = load i64, i64* %"lvar$5$"
  %lvar_offset_value15 = getelementptr i64, i64* %lvar, i64 5
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar14, i64* %lvar_offset_value15, align 8
  %lvar16 = load i64, i64* %"lvar$6$"
  %lvar_offset_value17 = getelementptr i64, i64* %lvar, i64 6
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar16, i64* %lvar_offset_value17, align 8
  %lvar18 = load i64, i64* %"lvar$7$"
  %lvar_offset_value19 = getelementptr i64, i64* %lvar, i64 7
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar18, i64* %lvar_offset_value19, align 8
  %lvar20 = load i64, i64* %"lvar$8$"
  %lvar_offset_value21 = getelementptr i64, i64* %lvar, i64 8
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar20, i64* %lvar_offset_value21, align 8
  %lvar22 = load i64, i64* %"lvar$9$"
  %lvar_offset_value23 = getelementptr i64, i64* %lvar, i64 9
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar22, i64* %lvar_offset_value23, align 8
  %lvar24 = load i64, i64* %"lvar$10$"
  %lvar_offset_value25 = getelementptr i64, i64* %lvar, i64 10
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar24, i64* %lvar_offset_value25, align 8
  %lvar26 = load i64, i64* %"lvar$11$"
  %lvar_offset_value27 = getelementptr i64, i64* %lvar, i64 11
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar26, i64* %lvar_offset_value27, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %5 = zext i32 %3 to i64
  store i64 %5, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value28 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value28, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  %6 = call i32 @call_invoke_method(i64* %4, i32 0, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond29 = icmp ne i32 %6, 1
  br i1 %ifcond29, label %then_block30, label %entry_ifend31

then_block30:                                     ; preds = %entry_ifend3
  %7 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend31:                                    ; preds = %entry_ifend3
  %stack_offset_value32 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value32, i64* %"lvar$0$", align 8
  %stack_offset_value34 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value34, i64* %"lvar$1$", align 8
  %stack_offset_address_value35 = getelementptr i64, i64* %stack, i64 2
  %stack_offset_value36 = load i64, i64* %stack_offset_address_value35, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value36, i64* %"lvar$2$", align 8
  %stack_offset_address_value37 = getelementptr i64, i64* %stack, i64 3
  %stack_offset_value38 = load i64, i64* %stack_offset_address_value37, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value38, i64* %"lvar$3$", align 8
  %stack_offset_address_value39 = getelementptr i64, i64* %stack, i64 4
  %stack_offset_value40 = load i64, i64* %stack_offset_address_value39, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value40, i64* %"lvar$4$", align 8
  %stack_offset_address_value41 = getelementptr i64, i64* %stack, i64 5
  %stack_offset_value42 = load i64, i64* %stack_offset_address_value41, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value42, i64* %"lvar$5$", align 8
  %stack_offset_address_value43 = getelementptr i64, i64* %stack, i64 6
  %stack_offset_value44 = load i64, i64* %stack_offset_address_value43, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value44, i64* %"lvar$6$", align 8
  %stack_offset_address_value45 = getelementptr i64, i64* %stack, i64 7
  %stack_offset_value46 = load i64, i64* %stack_offset_address_value45, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value46, i64* %"lvar$7$", align 8
  %stack_offset_address_value47 = getelementptr i64, i64* %stack, i64 8
  %stack_offset_value48 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value48, i64* %"lvar$8$", align 8
  %stack_offset_address_value49 = getelementptr i64, i64* %stack, i64 9
  %stack_offset_value50 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value50, i64* %"lvar$9$", align 8
  %stack_offset_address_value51 = getelementptr i64, i64* %stack, i64 10
  %stack_offset_value52 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value52, i64* %"lvar$10$", align 8
  %stack_offset_address_value53 = getelementptr i64, i64* %stack, i64 11
  %stack_offset_value54 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value54, i64* %"lvar$11$", align 8
  %loaded_stack_ptr_address_value55 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value55, i64 -1
  %stack_pointer_offset_value56 = load i64, i64* %stack_pointer_offset_value, align 8
  %8 = trunc i64 %stack_pointer_offset_value56 to i32
  call void @push_jit_object(i32 %8)
  %loaded_stack_ptr_address_value57 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value57, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_pointer_offset_value56, i64* %"lvar$3$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$4$"
  store i64 0, i64* %"lvar$4$", align 8
  store i32 0, i32* @gSigInt
  %lvar58 = load i64, i64* %"lvar$2$"
  %9 = trunc i64 %lvar58 to i32
  %10 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52670120 to i8*))
  %ifcond61 = icmp eq i64* %10, null
  br i1 %ifcond61, label %then_block, label %entry_ifend60

entry_ifend60:                                    ; preds = %entry_ifend31
  %lvar62 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar62, i64* %lvar, align 8
  %lvar64 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value7, align 8
  store i64 %lvar64, i64* %lvar_offset_value7, align 8
  %lvar66 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value9, align 8
  store i64 %lvar66, i64* %lvar_offset_value9, align 8
  %lvar68 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar68, i64* %lvar_offset_value11, align 8
  %lvar70 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar70, i64* %lvar_offset_value13, align 8
  %lvar72 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar72, i64* %lvar_offset_value15, align 8
  %lvar74 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar74, i64* %lvar_offset_value17, align 8
  %lvar76 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar76, i64* %lvar_offset_value19, align 8
  %lvar78 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar78, i64* %lvar_offset_value21, align 8
  %lvar80 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar80, i64* %lvar_offset_value23, align 8
  %lvar82 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar82, i64* %lvar_offset_value25, align 8
  %lvar84 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar84, i64* %lvar_offset_value27, align 8
  %loaded_stack_ptr_address_value86 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value86, align 8
  %11 = zext i32 %9 to i64
  store i64 %11, i64* %loaded_stack_ptr_address_value86, align 8
  %loaded_stack_ptr_address_value87 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value88 = getelementptr i64, i64* %loaded_stack_ptr_address_value87, i64 1
  store i64* %inc_ptr_value88, i64** %stack_ptr_address
  %12 = call i32 @call_invoke_method(i64* %10, i32 48, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond89 = icmp ne i32 %12, 1
  br i1 %ifcond89, label %then_block90, label %entry_ifend91

then_block90:                                     ; preds = %entry_ifend60
  %13 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend91:                                    ; preds = %entry_ifend60
  %stack_offset_value95 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value95, i64* %"lvar$0$", align 8
  %stack_offset_value97 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value97, i64* %"lvar$1$", align 8
  %stack_offset_value99 = load i64, i64* %stack_offset_address_value35, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value99, i64* %"lvar$2$", align 8
  %stack_offset_value101 = load i64, i64* %stack_offset_address_value37, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value101, i64* %"lvar$3$", align 8
  %stack_offset_value103 = load i64, i64* %stack_offset_address_value39, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value103, i64* %"lvar$4$", align 8
  %stack_offset_value105 = load i64, i64* %stack_offset_address_value41, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value105, i64* %"lvar$5$", align 8
  %stack_offset_value107 = load i64, i64* %stack_offset_address_value43, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value107, i64* %"lvar$6$", align 8
  %stack_offset_value109 = load i64, i64* %stack_offset_address_value45, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value109, i64* %"lvar$7$", align 8
  %stack_offset_value111 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value111, i64* %"lvar$8$", align 8
  %stack_offset_value113 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value113, i64* %"lvar$9$", align 8
  %stack_offset_value115 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value115, i64* %"lvar$10$", align 8
  %stack_offset_value117 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value117, i64* %"lvar$11$", align 8
  %loaded_stack_ptr_address_value118 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value119 = getelementptr i64, i64* %loaded_stack_ptr_address_value118, i64 -1
  %stack_pointer_offset_value120 = load i64, i64* %stack_pointer_offset_value119, align 8
  %14 = trunc i64 %stack_pointer_offset_value120 to i32
  call void @push_jit_object(i32 %14)
  %loaded_stack_ptr_address_value121 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value122 = getelementptr i64, i64* %loaded_stack_ptr_address_value121, i64 1
  store i64* %dec_ptr_value122, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_pointer_offset_value120, i64* %"lvar$5$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$6$"
  store i64 16, i64* %"lvar$6$", align 8
  store i32 0, i32* @gSigInt
  %15 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52670128 to i8*))
  %ifcond125 = icmp eq i64* %15, null
  br i1 %ifcond125, label %then_block, label %entry_ifend124

entry_ifend124:                                   ; preds = %entry_ifend91
  %16 = call i32 @create_object(i64* %15)
  call void @push_jit_object(i32 %16)
  %lvar126 = load i64, i64* %"lvar$6$"
  %17 = trunc i64 %lvar126 to i32
  %18 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52670140 to i8*))
  %ifcond129 = icmp eq i64* %18, null
  br i1 %ifcond129, label %then_block, label %entry_ifend128

entry_ifend128:                                   ; preds = %entry_ifend124
  %lvar130 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar130, i64* %lvar, align 8
  %lvar132 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value7, align 8
  store i64 %lvar132, i64* %lvar_offset_value7, align 8
  %lvar134 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value9, align 8
  store i64 %lvar134, i64* %lvar_offset_value9, align 8
  %lvar136 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar136, i64* %lvar_offset_value11, align 8
  %lvar138 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar138, i64* %lvar_offset_value13, align 8
  %lvar140 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar140, i64* %lvar_offset_value15, align 8
  %lvar142 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar142, i64* %lvar_offset_value17, align 8
  %lvar144 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar144, i64* %lvar_offset_value19, align 8
  %lvar146 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar146, i64* %lvar_offset_value21, align 8
  %lvar148 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar148, i64* %lvar_offset_value23, align 8
  %lvar150 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar150, i64* %lvar_offset_value25, align 8
  %lvar152 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar152, i64* %lvar_offset_value27, align 8
  %loaded_stack_ptr_address_value154 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value154, align 8
  %19 = zext i32 %16 to i64
  store i64 %19, i64* %loaded_stack_ptr_address_value154, align 8
  %loaded_stack_ptr_address_value155 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value156 = getelementptr i64, i64* %loaded_stack_ptr_address_value155, i64 1
  store i64* %inc_ptr_value156, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value156, align 8
  %20 = zext i32 %17 to i64
  store i64 %20, i64* %inc_ptr_value156, align 8
  %loaded_stack_ptr_address_value158 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value159 = getelementptr i64, i64* %loaded_stack_ptr_address_value158, i64 1
  store i64* %inc_ptr_value159, i64** %stack_ptr_address
  %21 = call i32 @call_invoke_method(i64* %18, i32 0, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond160 = icmp ne i32 %21, 1
  br i1 %ifcond160, label %then_block161, label %entry_ifend162

then_block161:                                    ; preds = %entry_ifend128
  %22 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend162:                                   ; preds = %entry_ifend128
  %stack_offset_value166 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value166, i64* %"lvar$0$", align 8
  %stack_offset_value168 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value168, i64* %"lvar$1$", align 8
  %stack_offset_value170 = load i64, i64* %stack_offset_address_value35, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value170, i64* %"lvar$2$", align 8
  %stack_offset_value172 = load i64, i64* %stack_offset_address_value37, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value172, i64* %"lvar$3$", align 8
  %stack_offset_value174 = load i64, i64* %stack_offset_address_value39, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value174, i64* %"lvar$4$", align 8
  %stack_offset_value176 = load i64, i64* %stack_offset_address_value41, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value176, i64* %"lvar$5$", align 8
  %stack_offset_value178 = load i64, i64* %stack_offset_address_value43, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value178, i64* %"lvar$6$", align 8
  %stack_offset_value180 = load i64, i64* %stack_offset_address_value45, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value180, i64* %"lvar$7$", align 8
  %stack_offset_value182 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value182, i64* %"lvar$8$", align 8
  %stack_offset_value184 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value184, i64* %"lvar$9$", align 8
  %stack_offset_value186 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value186, i64* %"lvar$10$", align 8
  %stack_offset_value188 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value188, i64* %"lvar$11$", align 8
  %loaded_stack_ptr_address_value189 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value190 = getelementptr i64, i64* %loaded_stack_ptr_address_value189, i64 -1
  %stack_pointer_offset_value191 = load i64, i64* %stack_pointer_offset_value190, align 8
  %23 = trunc i64 %stack_pointer_offset_value191 to i32
  call void @push_jit_object(i32 %23)
  %loaded_stack_ptr_address_value192 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value193 = getelementptr i64, i64* %loaded_stack_ptr_address_value192, i64 1
  store i64* %dec_ptr_value193, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_pointer_offset_value191, i64* %"lvar$7$", align 8
  store i32 0, i32* @gSigInt
  br label %entry_condend

entry_condend:                                    ; preds = %for_start_pointzzzzr, %entry_ifend510, %entry_condend501, %entry_ifend162
  store i32 0, i32* @gSigInt
  %lvar194 = load i64, i64* %"lvar$1$"
  %24 = trunc i64 %lvar194 to i32
  %lvar195 = load i64, i64* %"lvar$5$"
  %25 = trunc i64 %lvar195 to i32
  %lvar196 = load i64, i64* %"lvar$4$"
  %26 = trunc i64 %lvar196 to i32
  %lvar197 = load i64, i64* %"lvar$6$"
  %27 = trunc i64 %lvar197 to i32
  %lvar198 = load i64, i64* %"lvar$7$"
  %28 = trunc i64 %lvar198 to i32
  %29 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52670196 to i8*))
  %ifcond201 = icmp eq i64* %29, null
  br i1 %ifcond201, label %then_block, label %entry_ifend200

entry_ifend200:                                   ; preds = %entry_condend
  %lvar202 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar202, i64* %lvar, align 8
  %lvar204 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value7, align 8
  store i64 %lvar204, i64* %lvar_offset_value7, align 8
  %lvar206 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value9, align 8
  store i64 %lvar206, i64* %lvar_offset_value9, align 8
  %lvar208 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar208, i64* %lvar_offset_value11, align 8
  %lvar210 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar210, i64* %lvar_offset_value13, align 8
  %lvar212 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar212, i64* %lvar_offset_value15, align 8
  %lvar214 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar214, i64* %lvar_offset_value17, align 8
  %lvar216 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar216, i64* %lvar_offset_value19, align 8
  %lvar218 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar218, i64* %lvar_offset_value21, align 8
  %lvar220 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar220, i64* %lvar_offset_value23, align 8
  %lvar222 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar222, i64* %lvar_offset_value25, align 8
  %lvar224 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar224, i64* %lvar_offset_value27, align 8
  %loaded_stack_ptr_address_value226 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value226, align 8
  %30 = zext i32 %24 to i64
  store i64 %30, i64* %loaded_stack_ptr_address_value226, align 8
  %loaded_stack_ptr_address_value227 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value228 = getelementptr i64, i64* %loaded_stack_ptr_address_value227, i64 1
  store i64* %inc_ptr_value228, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value228, align 8
  %31 = zext i32 %25 to i64
  store i64 %31, i64* %inc_ptr_value228, align 8
  %loaded_stack_ptr_address_value230 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value231 = getelementptr i64, i64* %loaded_stack_ptr_address_value230, i64 1
  store i64* %inc_ptr_value231, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value231, align 8
  %32 = zext i32 %26 to i64
  store i64 %32, i64* %inc_ptr_value231, align 8
  %loaded_stack_ptr_address_value233 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value234 = getelementptr i64, i64* %loaded_stack_ptr_address_value233, i64 1
  store i64* %inc_ptr_value234, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value234, align 8
  %33 = zext i32 %27 to i64
  store i64 %33, i64* %inc_ptr_value234, align 8
  %loaded_stack_ptr_address_value236 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value237 = getelementptr i64, i64* %loaded_stack_ptr_address_value236, i64 1
  store i64* %inc_ptr_value237, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value237, align 8
  %34 = zext i32 %28 to i64
  store i64 %34, i64* %inc_ptr_value237, align 8
  %loaded_stack_ptr_address_value239 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value240 = getelementptr i64, i64* %loaded_stack_ptr_address_value239, i64 1
  store i64* %inc_ptr_value240, i64** %stack_ptr_address
  %35 = call i32 @call_invoke_method(i64* %29, i32 25, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond241 = icmp ne i32 %35, 1
  br i1 %ifcond241, label %then_block242, label %entry_ifend243

then_block242:                                    ; preds = %entry_ifend200
  %36 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend243:                                   ; preds = %entry_ifend200
  %stack_offset_value247 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value247, i64* %"lvar$0$", align 8
  %stack_offset_value249 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value249, i64* %"lvar$1$", align 8
  %stack_offset_value251 = load i64, i64* %stack_offset_address_value35, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value251, i64* %"lvar$2$", align 8
  %stack_offset_value253 = load i64, i64* %stack_offset_address_value37, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value253, i64* %"lvar$3$", align 8
  %stack_offset_value255 = load i64, i64* %stack_offset_address_value39, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value255, i64* %"lvar$4$", align 8
  %stack_offset_value257 = load i64, i64* %stack_offset_address_value41, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value257, i64* %"lvar$5$", align 8
  %stack_offset_value259 = load i64, i64* %stack_offset_address_value43, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value259, i64* %"lvar$6$", align 8
  %stack_offset_value261 = load i64, i64* %stack_offset_address_value45, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value261, i64* %"lvar$7$", align 8
  %stack_offset_value263 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value263, i64* %"lvar$8$", align 8
  %stack_offset_value265 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value265, i64* %"lvar$9$", align 8
  %stack_offset_value267 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value267, i64* %"lvar$10$", align 8
  %stack_offset_value269 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value269, i64* %"lvar$11$", align 8
  %loaded_stack_ptr_address_value270 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value271 = getelementptr i64, i64* %loaded_stack_ptr_address_value270, i64 -1
  %stack_pointer_offset_value272 = load i64, i64* %stack_pointer_offset_value271, align 8
  %37 = trunc i64 %stack_pointer_offset_value272 to i32
  call void @push_jit_object(i32 %37)
  %loaded_stack_ptr_address_value273 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value274 = getelementptr i64, i64* %loaded_stack_ptr_address_value273, i64 1
  store i64* %dec_ptr_value274, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_pointer_offset_value272, i64* %"lvar$8$", align 8
  store i32 0, i32* @gSigInt
  %eqtmpx = icmp eq i32 %37, 1
  br i1 %eqtmpx, label %entry_condend277, label %label_elifzzzzo1a

entry_condend277:                                 ; preds = %entry_ifend243
  store i32 0, i32* @gSigInt
  %lvar279 = load i64, i64* %"lvar$5$"
  %38 = trunc i64 %lvar279 to i32
  %lvar280 = load i64, i64* %"lvar$4$"
  %39 = trunc i64 %lvar280 to i32
  %lvar281 = load i64, i64* %"lvar$7$"
  %40 = trunc i64 %lvar281 to i32
  %41 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %40, i32 0)
  %42 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %41, i32 0, i32 0
  %43 = load i64, i64* %42, align 4
  %44 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %41, i32 0, i32 1
  %45 = load i32, i32* %44, align 4
  %ifcond284 = icmp eq i32 %45, 0
  br i1 %ifcond284, label %then_block, label %entry_ifend283

label_elifzzzzo1a:                                ; preds = %entry_ifend243
  %gttmp = icmp sgt i32 %37, 1
  store i32 0, i32* @gSigInt
  br i1 %gttmp, label %entry_condend516, label %label_if_elifzzzzo0a

entry_ifend283:                                   ; preds = %entry_condend277
  %46 = trunc i64 %43 to i32
  %47 = call %clvalue_and_bool_struct* @load_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %46, i32 0)
  %48 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %47, i32 0, i32 0
  %49 = load i64, i64* %48, align 4
  %50 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %47, i32 0, i32 1
  %51 = load i32, i32* %50, align 4
  %ifcond287 = icmp eq i32 %51, 0
  br i1 %ifcond287, label %then_block, label %entry_ifend286

entry_ifend286:                                   ; preds = %entry_ifend283
  %52 = trunc i64 %49 to i32
  %53 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52670224 to i8*))
  %ifcond290 = icmp eq i64* %53, null
  br i1 %ifcond290, label %then_block, label %entry_ifend289

entry_ifend289:                                   ; preds = %entry_ifend286
  %lvar291 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar291, i64* %lvar, align 8
  %lvar293 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value7, align 8
  store i64 %lvar293, i64* %lvar_offset_value7, align 8
  %lvar295 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value9, align 8
  store i64 %lvar295, i64* %lvar_offset_value9, align 8
  %lvar297 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar297, i64* %lvar_offset_value11, align 8
  %lvar299 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar299, i64* %lvar_offset_value13, align 8
  %lvar301 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar301, i64* %lvar_offset_value15, align 8
  %lvar303 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar303, i64* %lvar_offset_value17, align 8
  %lvar305 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar305, i64* %lvar_offset_value19, align 8
  %lvar307 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar307, i64* %lvar_offset_value21, align 8
  %lvar309 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar309, i64* %lvar_offset_value23, align 8
  %lvar311 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar311, i64* %lvar_offset_value25, align 8
  %lvar313 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar313, i64* %lvar_offset_value27, align 8
  %loaded_stack_ptr_address_value315 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value315, align 8
  %54 = zext i32 %38 to i64
  store i64 %54, i64* %loaded_stack_ptr_address_value315, align 8
  %loaded_stack_ptr_address_value316 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value317 = getelementptr i64, i64* %loaded_stack_ptr_address_value316, i64 1
  store i64* %inc_ptr_value317, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value317, align 8
  %55 = zext i32 %39 to i64
  store i64 %55, i64* %inc_ptr_value317, align 8
  %loaded_stack_ptr_address_value319 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value320 = getelementptr i64, i64* %loaded_stack_ptr_address_value319, i64 1
  store i64* %inc_ptr_value320, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value320, align 8
  %56 = zext i32 %52 to i64
  store i64 %56, i64* %inc_ptr_value320, align 8
  %loaded_stack_ptr_address_value322 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value323 = getelementptr i64, i64* %loaded_stack_ptr_address_value322, i64 1
  store i64* %inc_ptr_value323, i64** %stack_ptr_address
  %57 = call i32 @call_invoke_method(i64* %53, i32 11, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond324 = icmp ne i32 %57, 1
  br i1 %ifcond324, label %then_block325, label %entry_ifend326

then_block325:                                    ; preds = %entry_ifend289
  %58 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend326:                                   ; preds = %entry_ifend289
  %stack_offset_value330 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value330, i64* %"lvar$0$", align 8
  %stack_offset_value332 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value332, i64* %"lvar$1$", align 8
  %stack_offset_value334 = load i64, i64* %stack_offset_address_value35, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value334, i64* %"lvar$2$", align 8
  %stack_offset_value336 = load i64, i64* %stack_offset_address_value37, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value336, i64* %"lvar$3$", align 8
  %stack_offset_value338 = load i64, i64* %stack_offset_address_value39, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value338, i64* %"lvar$4$", align 8
  %stack_offset_value340 = load i64, i64* %stack_offset_address_value41, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value340, i64* %"lvar$5$", align 8
  %stack_offset_value342 = load i64, i64* %stack_offset_address_value43, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value342, i64* %"lvar$6$", align 8
  %stack_offset_value344 = load i64, i64* %stack_offset_address_value45, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value344, i64* %"lvar$7$", align 8
  %stack_offset_value346 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value346, i64* %"lvar$8$", align 8
  %stack_offset_value348 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value348, i64* %"lvar$9$", align 8
  %stack_offset_value350 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value350, i64* %"lvar$10$", align 8
  %stack_offset_value352 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value352, i64* %"lvar$11$", align 8
  %loaded_stack_ptr_address_value353 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value354 = getelementptr i64, i64* %loaded_stack_ptr_address_value353, i64 -1
  %stack_pointer_offset_value355 = load i64, i64* %stack_pointer_offset_value354, align 8
  %59 = trunc i64 %stack_pointer_offset_value355 to i32
  call void @push_jit_object(i32 %59)
  %loaded_stack_ptr_address_value356 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value357 = getelementptr i64, i64* %loaded_stack_ptr_address_value356, i64 1
  store i64* %dec_ptr_value357, i64** %stack_ptr_address
  %60 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52670232 to i8*))
  %ifcond360 = icmp eq i64* %60, null
  br i1 %ifcond360, label %then_block, label %entry_ifend359

entry_ifend359:                                   ; preds = %entry_ifend326
  %lvar361 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar361, i64* %lvar, align 8
  %lvar363 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value7, align 8
  store i64 %lvar363, i64* %lvar_offset_value7, align 8
  %lvar365 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value9, align 8
  store i64 %lvar365, i64* %lvar_offset_value9, align 8
  %lvar367 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar367, i64* %lvar_offset_value11, align 8
  %lvar369 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar369, i64* %lvar_offset_value13, align 8
  %lvar371 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar371, i64* %lvar_offset_value15, align 8
  %lvar373 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar373, i64* %lvar_offset_value17, align 8
  %lvar375 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar375, i64* %lvar_offset_value19, align 8
  %lvar377 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar377, i64* %lvar_offset_value21, align 8
  %lvar379 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar379, i64* %lvar_offset_value23, align 8
  %lvar381 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar381, i64* %lvar_offset_value25, align 8
  %lvar383 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar383, i64* %lvar_offset_value27, align 8
  %loaded_stack_ptr_address_value385 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value385, align 8
  store i64 %stack_pointer_offset_value355, i64* %loaded_stack_ptr_address_value385, align 8
  %loaded_stack_ptr_address_value386 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value387 = getelementptr i64, i64* %loaded_stack_ptr_address_value386, i64 1
  store i64* %inc_ptr_value387, i64** %stack_ptr_address
  %61 = call i32 @call_invoke_method(i64* %60, i32 10, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond388 = icmp ne i32 %61, 1
  br i1 %ifcond388, label %then_block389, label %entry_ifend390

then_block389:                                    ; preds = %entry_ifend359
  %62 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend390:                                   ; preds = %entry_ifend359
  %stack_offset_value394 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value394, i64* %"lvar$0$", align 8
  %stack_offset_value396 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value396, i64* %"lvar$1$", align 8
  %stack_offset_value398 = load i64, i64* %stack_offset_address_value35, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value398, i64* %"lvar$2$", align 8
  %stack_offset_value400 = load i64, i64* %stack_offset_address_value37, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value400, i64* %"lvar$3$", align 8
  %stack_offset_value402 = load i64, i64* %stack_offset_address_value39, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value402, i64* %"lvar$4$", align 8
  %stack_offset_value404 = load i64, i64* %stack_offset_address_value41, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value404, i64* %"lvar$5$", align 8
  %stack_offset_value406 = load i64, i64* %stack_offset_address_value43, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value406, i64* %"lvar$6$", align 8
  %stack_offset_value408 = load i64, i64* %stack_offset_address_value45, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value408, i64* %"lvar$7$", align 8
  %stack_offset_value410 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value410, i64* %"lvar$8$", align 8
  %stack_offset_value412 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value412, i64* %"lvar$9$", align 8
  %stack_offset_value414 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value414, i64* %"lvar$10$", align 8
  %stack_offset_value416 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value416, i64* %"lvar$11$", align 8
  %loaded_stack_ptr_address_value417 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value418 = getelementptr i64, i64* %loaded_stack_ptr_address_value417, i64 -1
  %stack_pointer_offset_value419 = load i64, i64* %stack_pointer_offset_value418, align 8
  %63 = trunc i64 %stack_pointer_offset_value419 to i32
  call void @push_jit_object(i32 %63)
  %loaded_stack_ptr_address_value420 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value421 = getelementptr i64, i64* %loaded_stack_ptr_address_value420, i64 1
  store i64* %dec_ptr_value421, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_pointer_offset_value419, i64* %"lvar$9$", align 8
  store i32 0, i32* @gSigInt
  %lvar422 = load i64, i64* %"lvar$3$"
  %64 = trunc i64 %lvar422 to i32
  %65 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52670240 to i8*))
  %ifcond426 = icmp eq i64* %65, null
  br i1 %ifcond426, label %then_block, label %entry_ifend425

entry_ifend425:                                   ; preds = %entry_ifend390
  %lvar427 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar427, i64* %lvar, align 8
  %lvar429 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value7, align 8
  store i64 %lvar429, i64* %lvar_offset_value7, align 8
  %lvar431 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value9, align 8
  store i64 %lvar431, i64* %lvar_offset_value9, align 8
  %lvar433 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar433, i64* %lvar_offset_value11, align 8
  %lvar435 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar435, i64* %lvar_offset_value13, align 8
  %lvar437 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar437, i64* %lvar_offset_value15, align 8
  %lvar439 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar439, i64* %lvar_offset_value17, align 8
  %lvar441 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar441, i64* %lvar_offset_value19, align 8
  %lvar443 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar443, i64* %lvar_offset_value21, align 8
  %lvar445 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar445, i64* %lvar_offset_value23, align 8
  %lvar447 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar447, i64* %lvar_offset_value25, align 8
  %lvar449 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar449, i64* %lvar_offset_value27, align 8
  %loaded_stack_ptr_address_value451 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value451, align 8
  %66 = zext i32 %64 to i64
  store i64 %66, i64* %loaded_stack_ptr_address_value451, align 8
  %loaded_stack_ptr_address_value452 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value453 = getelementptr i64, i64* %loaded_stack_ptr_address_value452, i64 1
  store i64* %inc_ptr_value453, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value453, align 8
  %67 = zext i32 %63 to i64
  store i64 %67, i64* %inc_ptr_value453, align 8
  %loaded_stack_ptr_address_value455 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value456 = getelementptr i64, i64* %loaded_stack_ptr_address_value455, i64 1
  store i64* %inc_ptr_value456, i64** %stack_ptr_address
  %68 = call i32 @call_invoke_method(i64* %65, i32 7, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond457 = icmp ne i32 %68, 1
  br i1 %ifcond457, label %then_block458, label %entry_ifend459

then_block458:                                    ; preds = %entry_ifend425
  %69 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend459:                                   ; preds = %entry_ifend425
  %stack_offset_value463 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value463, i64* %"lvar$0$", align 8
  %stack_offset_value465 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value465, i64* %"lvar$1$", align 8
  %stack_offset_value467 = load i64, i64* %stack_offset_address_value35, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value467, i64* %"lvar$2$", align 8
  %stack_offset_value469 = load i64, i64* %stack_offset_address_value37, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value469, i64* %"lvar$3$", align 8
  %stack_offset_value471 = load i64, i64* %stack_offset_address_value39, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value471, i64* %"lvar$4$", align 8
  %stack_offset_value473 = load i64, i64* %stack_offset_address_value41, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value473, i64* %"lvar$5$", align 8
  %stack_offset_value475 = load i64, i64* %stack_offset_address_value43, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value475, i64* %"lvar$6$", align 8
  %stack_offset_value477 = load i64, i64* %stack_offset_address_value45, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value477, i64* %"lvar$7$", align 8
  %stack_offset_value479 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value479, i64* %"lvar$8$", align 8
  %stack_offset_value481 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value481, i64* %"lvar$9$", align 8
  %stack_offset_value483 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value483, i64* %"lvar$10$", align 8
  %stack_offset_value485 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value485, i64* %"lvar$11$", align 8
  %loaded_stack_ptr_address_value486 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value487 = getelementptr i64, i64* %loaded_stack_ptr_address_value486, i64 -1
  %stack_pointer_offset_value488 = load i64, i64* %stack_pointer_offset_value487, align 8
  %70 = trunc i64 %stack_pointer_offset_value488 to i32
  call void @push_jit_object(i32 %70)
  %loaded_stack_ptr_address_value489 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value490 = getelementptr i64, i64* %loaded_stack_ptr_address_value489, i64 1
  store i64* %dec_ptr_value490, i64** %stack_ptr_address
  store i32 0, i32* @gSigInt
  %lvar491 = load i64, i64* %"lvar$4$"
  %71 = trunc i64 %lvar491 to i32
  %lvar492 = load i64, i64* %"lvar$7$"
  %72 = trunc i64 %lvar492 to i32
  %73 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %72, i32 1)
  %74 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %73, i32 0, i32 0
  %75 = load i64, i64* %74, align 4
  %76 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %73, i32 0, i32 1
  %77 = load i32, i32* %76, align 4
  %ifcond495 = icmp eq i32 %77, 0
  br i1 %ifcond495, label %then_block, label %entry_ifend494

entry_ifend494:                                   ; preds = %entry_ifend459
  %78 = trunc i64 %75 to i32
  %79 = call %clvalue_and_bool_struct* @load_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %78, i32 0)
  %80 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %79, i32 0, i32 0
  %81 = load i64, i64* %80, align 4
  %82 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %79, i32 0, i32 1
  %83 = load i32, i32* %82, align 4
  %ifcond498 = icmp eq i32 %83, 0
  br i1 %ifcond498, label %then_block, label %entry_ifend497

entry_ifend497:                                   ; preds = %entry_ifend494
  %84 = trunc i64 %81 to i32
  %eqtmpx499 = icmp eq i32 %71, %84
  store i32 0, i32* @gSigInt
  br i1 %eqtmpx499, label %entry_condend501, label %label_elsezzzzp

entry_condend501:                                 ; preds = %entry_ifend497
  %lvar503 = load i64, i64* %"lvar$4$"
  %85 = trunc i64 %lvar503 to i32
  %addtmp = add nuw i32 %85, 1
  store i64 0, i64* %"lvar$4$"
  %86 = zext i32 %addtmp to i64
  store i64 %86, i64* %"lvar$4$", align 8
  br label %entry_condend

label_elsezzzzp:                                  ; preds = %entry_ifend497
  %lvar505 = load i64, i64* %"lvar$7$"
  %87 = trunc i64 %lvar505 to i32
  %88 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %87, i32 1)
  %89 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %88, i32 0, i32 0
  %90 = load i64, i64* %89, align 4
  %91 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %88, i32 0, i32 1
  %92 = load i32, i32* %91, align 4
  %ifcond508 = icmp eq i32 %92, 0
  br i1 %ifcond508, label %then_block, label %entry_ifend507

entry_ifend507:                                   ; preds = %label_elsezzzzp
  %93 = trunc i64 %90 to i32
  %94 = call %clvalue_and_bool_struct* @load_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %93, i32 0)
  %95 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %94, i32 0, i32 0
  %96 = load i64, i64* %95, align 4
  %97 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %94, i32 0, i32 1
  %98 = load i32, i32* %97, align 4
  %ifcond511 = icmp eq i32 %98, 0
  br i1 %ifcond511, label %then_block, label %entry_ifend510

entry_ifend510:                                   ; preds = %entry_ifend507
  %99 = trunc i64 %96 to i32
  store i64 0, i64* %"lvar$4$"
  %100 = zext i32 %99 to i64
  store i64 %100, i64* %"lvar$4$", align 8
  br label %entry_condend

entry_condend516:                                 ; preds = %label_elifzzzzo1a
  %lvar518 = load i64, i64* %"lvar$5$"
  %101 = trunc i64 %lvar518 to i32
  %lvar519 = load i64, i64* %"lvar$4$"
  %102 = trunc i64 %lvar519 to i32
  %lvar520 = load i64, i64* %"lvar$7$"
  %103 = trunc i64 %lvar520 to i32
  %104 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %103, i32 0)
  %105 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %104, i32 0, i32 0
  %106 = load i64, i64* %105, align 4
  %107 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %104, i32 0, i32 1
  %108 = load i32, i32* %107, align 4
  %ifcond523 = icmp eq i32 %108, 0
  br i1 %ifcond523, label %then_block, label %entry_ifend522

label_if_elifzzzzo0a:                             ; preds = %label_elifzzzzo1a
  store i32 0, i32* @gSigInt
  %lvar987 = load i64, i64* %"lvar$3$"
  %109 = trunc i64 %lvar987 to i32
  %110 = zext i32 %109 to i64
  store i64 %110, i64* %stack, align 8
  ret i32 1

entry_ifend522:                                   ; preds = %entry_condend516
  %111 = trunc i64 %106 to i32
  %112 = call %clvalue_and_bool_struct* @load_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %111, i32 0)
  %113 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %112, i32 0, i32 0
  %114 = load i64, i64* %113, align 4
  %115 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %112, i32 0, i32 1
  %116 = load i32, i32* %115, align 4
  %ifcond526 = icmp eq i32 %116, 0
  br i1 %ifcond526, label %then_block, label %entry_ifend525

entry_ifend525:                                   ; preds = %entry_ifend522
  %117 = trunc i64 %114 to i32
  %118 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52670412 to i8*))
  %ifcond529 = icmp eq i64* %118, null
  br i1 %ifcond529, label %then_block, label %entry_ifend528

entry_ifend528:                                   ; preds = %entry_ifend525
  %lvar530 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar530, i64* %lvar, align 8
  %lvar532 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value7, align 8
  store i64 %lvar532, i64* %lvar_offset_value7, align 8
  %lvar534 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value9, align 8
  store i64 %lvar534, i64* %lvar_offset_value9, align 8
  %lvar536 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar536, i64* %lvar_offset_value11, align 8
  %lvar538 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar538, i64* %lvar_offset_value13, align 8
  %lvar540 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar540, i64* %lvar_offset_value15, align 8
  %lvar542 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar542, i64* %lvar_offset_value17, align 8
  %lvar544 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar544, i64* %lvar_offset_value19, align 8
  %lvar546 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar546, i64* %lvar_offset_value21, align 8
  %lvar548 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar548, i64* %lvar_offset_value23, align 8
  %lvar550 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar550, i64* %lvar_offset_value25, align 8
  %lvar552 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar552, i64* %lvar_offset_value27, align 8
  %loaded_stack_ptr_address_value554 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value554, align 8
  %119 = zext i32 %101 to i64
  store i64 %119, i64* %loaded_stack_ptr_address_value554, align 8
  %loaded_stack_ptr_address_value555 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value556 = getelementptr i64, i64* %loaded_stack_ptr_address_value555, i64 1
  store i64* %inc_ptr_value556, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value556, align 8
  %120 = zext i32 %102 to i64
  store i64 %120, i64* %inc_ptr_value556, align 8
  %loaded_stack_ptr_address_value558 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value559 = getelementptr i64, i64* %loaded_stack_ptr_address_value558, i64 1
  store i64* %inc_ptr_value559, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value559, align 8
  %121 = zext i32 %117 to i64
  store i64 %121, i64* %inc_ptr_value559, align 8
  %loaded_stack_ptr_address_value561 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value562 = getelementptr i64, i64* %loaded_stack_ptr_address_value561, i64 1
  store i64* %inc_ptr_value562, i64** %stack_ptr_address
  %122 = call i32 @call_invoke_method(i64* %118, i32 11, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond563 = icmp ne i32 %122, 1
  br i1 %ifcond563, label %then_block564, label %entry_ifend565

then_block564:                                    ; preds = %entry_ifend528
  %123 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend565:                                   ; preds = %entry_ifend528
  %stack_offset_value569 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value569, i64* %"lvar$0$", align 8
  %stack_offset_value571 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value571, i64* %"lvar$1$", align 8
  %stack_offset_value573 = load i64, i64* %stack_offset_address_value35, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value573, i64* %"lvar$2$", align 8
  %stack_offset_value575 = load i64, i64* %stack_offset_address_value37, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value575, i64* %"lvar$3$", align 8
  %stack_offset_value577 = load i64, i64* %stack_offset_address_value39, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value577, i64* %"lvar$4$", align 8
  %stack_offset_value579 = load i64, i64* %stack_offset_address_value41, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value579, i64* %"lvar$5$", align 8
  %stack_offset_value581 = load i64, i64* %stack_offset_address_value43, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value581, i64* %"lvar$6$", align 8
  %stack_offset_value583 = load i64, i64* %stack_offset_address_value45, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value583, i64* %"lvar$7$", align 8
  %stack_offset_value585 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value585, i64* %"lvar$8$", align 8
  %stack_offset_value587 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value587, i64* %"lvar$9$", align 8
  %stack_offset_value589 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value589, i64* %"lvar$10$", align 8
  %stack_offset_value591 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value591, i64* %"lvar$11$", align 8
  %loaded_stack_ptr_address_value592 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value593 = getelementptr i64, i64* %loaded_stack_ptr_address_value592, i64 -1
  %stack_pointer_offset_value594 = load i64, i64* %stack_pointer_offset_value593, align 8
  %124 = trunc i64 %stack_pointer_offset_value594 to i32
  call void @push_jit_object(i32 %124)
  %loaded_stack_ptr_address_value595 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value596 = getelementptr i64, i64* %loaded_stack_ptr_address_value595, i64 1
  store i64* %dec_ptr_value596, i64** %stack_ptr_address
  %125 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52670420 to i8*))
  %ifcond599 = icmp eq i64* %125, null
  br i1 %ifcond599, label %then_block, label %entry_ifend598

entry_ifend598:                                   ; preds = %entry_ifend565
  %lvar600 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar600, i64* %lvar, align 8
  %lvar602 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value7, align 8
  store i64 %lvar602, i64* %lvar_offset_value7, align 8
  %lvar604 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value9, align 8
  store i64 %lvar604, i64* %lvar_offset_value9, align 8
  %lvar606 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar606, i64* %lvar_offset_value11, align 8
  %lvar608 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar608, i64* %lvar_offset_value13, align 8
  %lvar610 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar610, i64* %lvar_offset_value15, align 8
  %lvar612 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar612, i64* %lvar_offset_value17, align 8
  %lvar614 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar614, i64* %lvar_offset_value19, align 8
  %lvar616 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar616, i64* %lvar_offset_value21, align 8
  %lvar618 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar618, i64* %lvar_offset_value23, align 8
  %lvar620 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar620, i64* %lvar_offset_value25, align 8
  %lvar622 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar622, i64* %lvar_offset_value27, align 8
  %loaded_stack_ptr_address_value624 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value624, align 8
  store i64 %stack_pointer_offset_value594, i64* %loaded_stack_ptr_address_value624, align 8
  %loaded_stack_ptr_address_value625 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value626 = getelementptr i64, i64* %loaded_stack_ptr_address_value625, i64 1
  store i64* %inc_ptr_value626, i64** %stack_ptr_address
  %126 = call i32 @call_invoke_method(i64* %125, i32 10, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond627 = icmp ne i32 %126, 1
  br i1 %ifcond627, label %then_block628, label %entry_ifend629

then_block628:                                    ; preds = %entry_ifend598
  %127 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend629:                                   ; preds = %entry_ifend598
  %stack_offset_value633 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value633, i64* %"lvar$0$", align 8
  %stack_offset_value635 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value635, i64* %"lvar$1$", align 8
  %stack_offset_value637 = load i64, i64* %stack_offset_address_value35, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value637, i64* %"lvar$2$", align 8
  %stack_offset_value639 = load i64, i64* %stack_offset_address_value37, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value639, i64* %"lvar$3$", align 8
  %stack_offset_value641 = load i64, i64* %stack_offset_address_value39, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value641, i64* %"lvar$4$", align 8
  %stack_offset_value643 = load i64, i64* %stack_offset_address_value41, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value643, i64* %"lvar$5$", align 8
  %stack_offset_value645 = load i64, i64* %stack_offset_address_value43, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value645, i64* %"lvar$6$", align 8
  %stack_offset_value647 = load i64, i64* %stack_offset_address_value45, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value647, i64* %"lvar$7$", align 8
  %stack_offset_value649 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value649, i64* %"lvar$8$", align 8
  %stack_offset_value651 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value651, i64* %"lvar$9$", align 8
  %stack_offset_value653 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value653, i64* %"lvar$10$", align 8
  %stack_offset_value655 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value655, i64* %"lvar$11$", align 8
  %loaded_stack_ptr_address_value656 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value657 = getelementptr i64, i64* %loaded_stack_ptr_address_value656, i64 -1
  %stack_pointer_offset_value658 = load i64, i64* %stack_pointer_offset_value657, align 8
  %128 = trunc i64 %stack_pointer_offset_value658 to i32
  call void @push_jit_object(i32 %128)
  %loaded_stack_ptr_address_value659 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value660 = getelementptr i64, i64* %loaded_stack_ptr_address_value659, i64 1
  store i64* %dec_ptr_value660, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_pointer_offset_value658, i64* %"lvar$9$", align 8
  store i32 0, i32* @gSigInt
  %lvar661 = load i64, i64* %"lvar$3$"
  %129 = trunc i64 %lvar661 to i32
  %130 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52670428 to i8*))
  %ifcond665 = icmp eq i64* %130, null
  br i1 %ifcond665, label %then_block, label %entry_ifend664

entry_ifend664:                                   ; preds = %entry_ifend629
  %lvar666 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar666, i64* %lvar, align 8
  %lvar668 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value7, align 8
  store i64 %lvar668, i64* %lvar_offset_value7, align 8
  %lvar670 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value9, align 8
  store i64 %lvar670, i64* %lvar_offset_value9, align 8
  %lvar672 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar672, i64* %lvar_offset_value11, align 8
  %lvar674 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar674, i64* %lvar_offset_value13, align 8
  %lvar676 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar676, i64* %lvar_offset_value15, align 8
  %lvar678 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar678, i64* %lvar_offset_value17, align 8
  %lvar680 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar680, i64* %lvar_offset_value19, align 8
  %lvar682 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar682, i64* %lvar_offset_value21, align 8
  %lvar684 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar684, i64* %lvar_offset_value23, align 8
  %lvar686 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar686, i64* %lvar_offset_value25, align 8
  %lvar688 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar688, i64* %lvar_offset_value27, align 8
  %loaded_stack_ptr_address_value690 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value690, align 8
  %131 = zext i32 %129 to i64
  store i64 %131, i64* %loaded_stack_ptr_address_value690, align 8
  %loaded_stack_ptr_address_value691 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value692 = getelementptr i64, i64* %loaded_stack_ptr_address_value691, i64 1
  store i64* %inc_ptr_value692, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value692, align 8
  %132 = zext i32 %128 to i64
  store i64 %132, i64* %inc_ptr_value692, align 8
  %loaded_stack_ptr_address_value694 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value695 = getelementptr i64, i64* %loaded_stack_ptr_address_value694, i64 1
  store i64* %inc_ptr_value695, i64** %stack_ptr_address
  %133 = call i32 @call_invoke_method(i64* %130, i32 7, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond696 = icmp ne i32 %133, 1
  br i1 %ifcond696, label %then_block697, label %entry_ifend698

then_block697:                                    ; preds = %entry_ifend664
  %134 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend698:                                   ; preds = %entry_ifend664
  %stack_offset_value702 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value702, i64* %"lvar$0$", align 8
  %stack_offset_value704 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value704, i64* %"lvar$1$", align 8
  %stack_offset_value706 = load i64, i64* %stack_offset_address_value35, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value706, i64* %"lvar$2$", align 8
  %stack_offset_value708 = load i64, i64* %stack_offset_address_value37, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value708, i64* %"lvar$3$", align 8
  %stack_offset_value710 = load i64, i64* %stack_offset_address_value39, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value710, i64* %"lvar$4$", align 8
  %stack_offset_value712 = load i64, i64* %stack_offset_address_value41, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value712, i64* %"lvar$5$", align 8
  %stack_offset_value714 = load i64, i64* %stack_offset_address_value43, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value714, i64* %"lvar$6$", align 8
  %stack_offset_value716 = load i64, i64* %stack_offset_address_value45, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value716, i64* %"lvar$7$", align 8
  %stack_offset_value718 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value718, i64* %"lvar$8$", align 8
  %stack_offset_value720 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value720, i64* %"lvar$9$", align 8
  %stack_offset_value722 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value722, i64* %"lvar$10$", align 8
  %stack_offset_value724 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value724, i64* %"lvar$11$", align 8
  %loaded_stack_ptr_address_value725 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value726 = getelementptr i64, i64* %loaded_stack_ptr_address_value725, i64 -1
  %stack_pointer_offset_value727 = load i64, i64* %stack_pointer_offset_value726, align 8
  %135 = trunc i64 %stack_pointer_offset_value727 to i32
  call void @push_jit_object(i32 %135)
  %loaded_stack_ptr_address_value728 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value729 = getelementptr i64, i64* %loaded_stack_ptr_address_value728, i64 1
  store i64* %dec_ptr_value729, i64** %stack_ptr_address
  store i32 0, i32* @gSigInt
  %lvar730 = load i64, i64* %"lvar$4$"
  %136 = trunc i64 %lvar730 to i32
  %lvar731 = load i64, i64* %"lvar$7$"
  %137 = trunc i64 %lvar731 to i32
  %138 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %137, i32 1)
  %139 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %138, i32 0, i32 0
  %140 = load i64, i64* %139, align 4
  %141 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %138, i32 0, i32 1
  %142 = load i32, i32* %141, align 4
  %ifcond734 = icmp eq i32 %142, 0
  br i1 %ifcond734, label %then_block, label %entry_ifend733

entry_ifend733:                                   ; preds = %entry_ifend698
  %143 = trunc i64 %140 to i32
  %144 = call %clvalue_and_bool_struct* @load_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %143, i32 0)
  %145 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %144, i32 0, i32 0
  %146 = load i64, i64* %145, align 4
  %147 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %144, i32 0, i32 1
  %148 = load i32, i32* %147, align 4
  %ifcond737 = icmp eq i32 %148, 0
  br i1 %ifcond737, label %then_block, label %entry_ifend736

entry_ifend736:                                   ; preds = %entry_ifend733
  %149 = trunc i64 %146 to i32
  %eqtmpx738 = icmp eq i32 %136, %149
  store i32 0, i32* @gSigInt
  br i1 %eqtmpx738, label %entry_condend740, label %label_elsezzzzq

entry_condend740:                                 ; preds = %entry_ifend736
  %lvar742 = load i64, i64* %"lvar$4$"
  %150 = trunc i64 %lvar742 to i32
  %addtmp743 = add nuw i32 %150, 1
  store i64 0, i64* %"lvar$4$"
  %151 = zext i32 %addtmp743 to i64
  store i64 %151, i64* %"lvar$4$", align 8
  br label %label_if_endzzzzq

label_elsezzzzq:                                  ; preds = %entry_ifend736
  %lvar746 = load i64, i64* %"lvar$7$"
  %152 = trunc i64 %lvar746 to i32
  %153 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %152, i32 1)
  %154 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %153, i32 0, i32 0
  %155 = load i64, i64* %154, align 4
  %156 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %153, i32 0, i32 1
  %157 = load i32, i32* %156, align 4
  %ifcond749 = icmp eq i32 %157, 0
  br i1 %ifcond749, label %then_block, label %entry_ifend748

label_if_endzzzzq:                                ; preds = %entry_ifend751, %entry_condend740
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$10$"
  store i64 1, i64* %"lvar$10$", align 8
  br label %for_start_pointzzzzr

entry_ifend748:                                   ; preds = %label_elsezzzzq
  %158 = trunc i64 %155 to i32
  %159 = call %clvalue_and_bool_struct* @load_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %158, i32 0)
  %160 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %159, i32 0, i32 0
  %161 = load i64, i64* %160, align 4
  %162 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %159, i32 0, i32 1
  %163 = load i32, i32* %162, align 4
  %ifcond752 = icmp eq i32 %163, 0
  br i1 %ifcond752, label %then_block, label %entry_ifend751

entry_ifend751:                                   ; preds = %entry_ifend748
  %164 = trunc i64 %161 to i32
  store i64 0, i64* %"lvar$4$"
  %165 = zext i32 %164 to i64
  store i64 %165, i64* %"lvar$4$", align 8
  br label %label_if_endzzzzq

for_start_pointzzzzr:                             ; preds = %entry_ifend947, %label_if_endzzzzq
  %lvar754 = phi i64 [ %216, %entry_ifend947 ], [ 1, %label_if_endzzzzq ]
  %166 = trunc i64 %lvar754 to i32
  %lvar755 = load i64, i64* %"lvar$8$"
  %167 = trunc i64 %lvar755 to i32
  %letmp = icmp slt i32 %166, %167
  br i1 %letmp, label %entry_condend757, label %entry_condend

entry_condend757:                                 ; preds = %for_start_pointzzzzr
  store i32 0, i32* @gSigInt
  %lvar759 = load i64, i64* %"lvar$5$"
  %168 = trunc i64 %lvar759 to i32
  %lvar760 = load i64, i64* %"lvar$7$"
  %169 = trunc i64 %lvar760 to i32
  %170 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %169, i32 0)
  %171 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %170, i32 0, i32 0
  %172 = load i64, i64* %171, align 4
  %173 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %170, i32 0, i32 1
  %174 = load i32, i32* %173, align 4
  %ifcond763 = icmp eq i32 %174, 0
  br i1 %ifcond763, label %then_block, label %entry_ifend762

entry_ifend762:                                   ; preds = %entry_condend757
  %175 = trunc i64 %172 to i32
  %lvar764 = load i64, i64* %"lvar$10$"
  %176 = trunc i64 %lvar764 to i32
  %177 = call %clvalue_and_bool_struct* @load_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %175, i32 %176)
  %178 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %177, i32 0, i32 0
  %179 = load i64, i64* %178, align 4
  %180 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %177, i32 0, i32 1
  %181 = load i32, i32* %180, align 4
  %ifcond767 = icmp eq i32 %181, 0
  br i1 %ifcond767, label %then_block, label %entry_ifend766

entry_ifend766:                                   ; preds = %entry_ifend762
  %182 = trunc i64 %179 to i32
  %lvar768 = load i64, i64* %"lvar$7$"
  %183 = trunc i64 %lvar768 to i32
  %184 = call %clvalue_and_bool_struct* @get_field_from_object(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %183, i32 1)
  %185 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %184, i32 0, i32 0
  %186 = load i64, i64* %185, align 4
  %187 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %184, i32 0, i32 1
  %188 = load i32, i32* %187, align 4
  %ifcond771 = icmp eq i32 %188, 0
  br i1 %ifcond771, label %then_block, label %entry_ifend770

entry_ifend770:                                   ; preds = %entry_ifend766
  %189 = trunc i64 %186 to i32
  %lvar772 = load i64, i64* %"lvar$10$"
  %190 = trunc i64 %lvar772 to i32
  %191 = call %clvalue_and_bool_struct* @load_element(i64** %stack_ptr_address, i64* %stack, i32 %var_num, i64* %info, i32 %189, i32 %190)
  %192 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %191, i32 0, i32 0
  %193 = load i64, i64* %192, align 4
  %194 = getelementptr inbounds %clvalue_and_bool_struct, %clvalue_and_bool_struct* %191, i32 0, i32 1
  %195 = load i32, i32* %194, align 4
  %ifcond775 = icmp eq i32 %195, 0
  br i1 %ifcond775, label %then_block, label %entry_ifend774

entry_ifend774:                                   ; preds = %entry_ifend770
  %196 = trunc i64 %193 to i32
  %197 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52670580 to i8*))
  %ifcond778 = icmp eq i64* %197, null
  br i1 %ifcond778, label %then_block, label %entry_ifend777

entry_ifend777:                                   ; preds = %entry_ifend774
  %lvar779 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar779, i64* %lvar, align 8
  %lvar781 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value7, align 8
  store i64 %lvar781, i64* %lvar_offset_value7, align 8
  %lvar783 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value9, align 8
  store i64 %lvar783, i64* %lvar_offset_value9, align 8
  %lvar785 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar785, i64* %lvar_offset_value11, align 8
  %lvar787 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar787, i64* %lvar_offset_value13, align 8
  %lvar789 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar789, i64* %lvar_offset_value15, align 8
  %lvar791 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar791, i64* %lvar_offset_value17, align 8
  %lvar793 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar793, i64* %lvar_offset_value19, align 8
  %lvar795 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar795, i64* %lvar_offset_value21, align 8
  %lvar797 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar797, i64* %lvar_offset_value23, align 8
  %lvar799 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar799, i64* %lvar_offset_value25, align 8
  %lvar801 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar801, i64* %lvar_offset_value27, align 8
  %loaded_stack_ptr_address_value803 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value803, align 8
  %198 = zext i32 %168 to i64
  store i64 %198, i64* %loaded_stack_ptr_address_value803, align 8
  %loaded_stack_ptr_address_value804 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value805 = getelementptr i64, i64* %loaded_stack_ptr_address_value804, i64 1
  store i64* %inc_ptr_value805, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value805, align 8
  %199 = zext i32 %182 to i64
  store i64 %199, i64* %inc_ptr_value805, align 8
  %loaded_stack_ptr_address_value807 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value808 = getelementptr i64, i64* %loaded_stack_ptr_address_value807, i64 1
  store i64* %inc_ptr_value808, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value808, align 8
  %200 = zext i32 %196 to i64
  store i64 %200, i64* %inc_ptr_value808, align 8
  %loaded_stack_ptr_address_value810 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value811 = getelementptr i64, i64* %loaded_stack_ptr_address_value810, i64 1
  store i64* %inc_ptr_value811, i64** %stack_ptr_address
  %201 = call i32 @call_invoke_method(i64* %197, i32 11, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond812 = icmp ne i32 %201, 1
  br i1 %ifcond812, label %then_block813, label %entry_ifend814

then_block813:                                    ; preds = %entry_ifend777
  %202 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend814:                                   ; preds = %entry_ifend777
  %stack_offset_value818 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value818, i64* %"lvar$0$", align 8
  %stack_offset_value820 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value820, i64* %"lvar$1$", align 8
  %stack_offset_value822 = load i64, i64* %stack_offset_address_value35, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value822, i64* %"lvar$2$", align 8
  %stack_offset_value824 = load i64, i64* %stack_offset_address_value37, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value824, i64* %"lvar$3$", align 8
  %stack_offset_value826 = load i64, i64* %stack_offset_address_value39, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value826, i64* %"lvar$4$", align 8
  %stack_offset_value828 = load i64, i64* %stack_offset_address_value41, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value828, i64* %"lvar$5$", align 8
  %stack_offset_value830 = load i64, i64* %stack_offset_address_value43, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value830, i64* %"lvar$6$", align 8
  %stack_offset_value832 = load i64, i64* %stack_offset_address_value45, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value832, i64* %"lvar$7$", align 8
  %stack_offset_value834 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value834, i64* %"lvar$8$", align 8
  %stack_offset_value836 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value836, i64* %"lvar$9$", align 8
  %stack_offset_value838 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value838, i64* %"lvar$10$", align 8
  %stack_offset_value840 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value840, i64* %"lvar$11$", align 8
  %loaded_stack_ptr_address_value841 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value842 = getelementptr i64, i64* %loaded_stack_ptr_address_value841, i64 -1
  %stack_pointer_offset_value843 = load i64, i64* %stack_pointer_offset_value842, align 8
  %203 = trunc i64 %stack_pointer_offset_value843 to i32
  call void @push_jit_object(i32 %203)
  %loaded_stack_ptr_address_value844 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value845 = getelementptr i64, i64* %loaded_stack_ptr_address_value844, i64 1
  store i64* %dec_ptr_value845, i64** %stack_ptr_address
  %204 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52670588 to i8*))
  %ifcond848 = icmp eq i64* %204, null
  br i1 %ifcond848, label %then_block, label %entry_ifend847

entry_ifend847:                                   ; preds = %entry_ifend814
  %lvar849 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar849, i64* %lvar, align 8
  %lvar851 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value7, align 8
  store i64 %lvar851, i64* %lvar_offset_value7, align 8
  %lvar853 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value9, align 8
  store i64 %lvar853, i64* %lvar_offset_value9, align 8
  %lvar855 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar855, i64* %lvar_offset_value11, align 8
  %lvar857 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar857, i64* %lvar_offset_value13, align 8
  %lvar859 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar859, i64* %lvar_offset_value15, align 8
  %lvar861 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar861, i64* %lvar_offset_value17, align 8
  %lvar863 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar863, i64* %lvar_offset_value19, align 8
  %lvar865 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar865, i64* %lvar_offset_value21, align 8
  %lvar867 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar867, i64* %lvar_offset_value23, align 8
  %lvar869 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar869, i64* %lvar_offset_value25, align 8
  %lvar871 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar871, i64* %lvar_offset_value27, align 8
  %loaded_stack_ptr_address_value873 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value873, align 8
  store i64 %stack_pointer_offset_value843, i64* %loaded_stack_ptr_address_value873, align 8
  %loaded_stack_ptr_address_value874 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value875 = getelementptr i64, i64* %loaded_stack_ptr_address_value874, i64 1
  store i64* %inc_ptr_value875, i64** %stack_ptr_address
  %205 = call i32 @call_invoke_method(i64* %204, i32 10, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond876 = icmp ne i32 %205, 1
  br i1 %ifcond876, label %then_block877, label %entry_ifend878

then_block877:                                    ; preds = %entry_ifend847
  %206 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend878:                                   ; preds = %entry_ifend847
  %stack_offset_value882 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value882, i64* %"lvar$0$", align 8
  %stack_offset_value884 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value884, i64* %"lvar$1$", align 8
  %stack_offset_value886 = load i64, i64* %stack_offset_address_value35, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value886, i64* %"lvar$2$", align 8
  %stack_offset_value888 = load i64, i64* %stack_offset_address_value37, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value888, i64* %"lvar$3$", align 8
  %stack_offset_value890 = load i64, i64* %stack_offset_address_value39, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value890, i64* %"lvar$4$", align 8
  %stack_offset_value892 = load i64, i64* %stack_offset_address_value41, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value892, i64* %"lvar$5$", align 8
  %stack_offset_value894 = load i64, i64* %stack_offset_address_value43, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value894, i64* %"lvar$6$", align 8
  %stack_offset_value896 = load i64, i64* %stack_offset_address_value45, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value896, i64* %"lvar$7$", align 8
  %stack_offset_value898 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value898, i64* %"lvar$8$", align 8
  %stack_offset_value900 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value900, i64* %"lvar$9$", align 8
  %stack_offset_value902 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value902, i64* %"lvar$10$", align 8
  %stack_offset_value904 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value904, i64* %"lvar$11$", align 8
  %loaded_stack_ptr_address_value905 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value906 = getelementptr i64, i64* %loaded_stack_ptr_address_value905, i64 -1
  %stack_pointer_offset_value907 = load i64, i64* %stack_pointer_offset_value906, align 8
  %207 = trunc i64 %stack_pointer_offset_value907 to i32
  call void @push_jit_object(i32 %207)
  %loaded_stack_ptr_address_value908 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value909 = getelementptr i64, i64* %loaded_stack_ptr_address_value908, i64 1
  store i64* %dec_ptr_value909, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_pointer_offset_value907, i64* %"lvar$11$", align 8
  store i32 0, i32* @gSigInt
  %lvar910 = load i64, i64* %"lvar$3$"
  %208 = trunc i64 %lvar910 to i32
  %209 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52670596 to i8*))
  %ifcond914 = icmp eq i64* %209, null
  br i1 %ifcond914, label %then_block, label %entry_ifend913

entry_ifend913:                                   ; preds = %entry_ifend878
  %lvar915 = load i64, i64* %"lvar$0$"
  store i64 0, i64* %lvar, align 8
  store i64 %lvar915, i64* %lvar, align 8
  %lvar917 = load i64, i64* %"lvar$1$"
  store i64 0, i64* %lvar_offset_value7, align 8
  store i64 %lvar917, i64* %lvar_offset_value7, align 8
  %lvar919 = load i64, i64* %"lvar$2$"
  store i64 0, i64* %lvar_offset_value9, align 8
  store i64 %lvar919, i64* %lvar_offset_value9, align 8
  %lvar921 = load i64, i64* %"lvar$3$"
  store i64 0, i64* %lvar_offset_value11, align 8
  store i64 %lvar921, i64* %lvar_offset_value11, align 8
  %lvar923 = load i64, i64* %"lvar$4$"
  store i64 0, i64* %lvar_offset_value13, align 8
  store i64 %lvar923, i64* %lvar_offset_value13, align 8
  %lvar925 = load i64, i64* %"lvar$5$"
  store i64 0, i64* %lvar_offset_value15, align 8
  store i64 %lvar925, i64* %lvar_offset_value15, align 8
  %lvar927 = load i64, i64* %"lvar$6$"
  store i64 0, i64* %lvar_offset_value17, align 8
  store i64 %lvar927, i64* %lvar_offset_value17, align 8
  %lvar929 = load i64, i64* %"lvar$7$"
  store i64 0, i64* %lvar_offset_value19, align 8
  store i64 %lvar929, i64* %lvar_offset_value19, align 8
  %lvar931 = load i64, i64* %"lvar$8$"
  store i64 0, i64* %lvar_offset_value21, align 8
  store i64 %lvar931, i64* %lvar_offset_value21, align 8
  %lvar933 = load i64, i64* %"lvar$9$"
  store i64 0, i64* %lvar_offset_value23, align 8
  store i64 %lvar933, i64* %lvar_offset_value23, align 8
  %lvar935 = load i64, i64* %"lvar$10$"
  store i64 0, i64* %lvar_offset_value25, align 8
  store i64 %lvar935, i64* %lvar_offset_value25, align 8
  %lvar937 = load i64, i64* %"lvar$11$"
  store i64 0, i64* %lvar_offset_value27, align 8
  store i64 %lvar937, i64* %lvar_offset_value27, align 8
  %loaded_stack_ptr_address_value939 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value939, align 8
  %210 = zext i32 %208 to i64
  store i64 %210, i64* %loaded_stack_ptr_address_value939, align 8
  %loaded_stack_ptr_address_value940 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value941 = getelementptr i64, i64* %loaded_stack_ptr_address_value940, i64 1
  store i64* %inc_ptr_value941, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value941, align 8
  %211 = zext i32 %207 to i64
  store i64 %211, i64* %inc_ptr_value941, align 8
  %loaded_stack_ptr_address_value943 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value944 = getelementptr i64, i64* %loaded_stack_ptr_address_value943, i64 1
  store i64* %inc_ptr_value944, i64** %stack_ptr_address
  %212 = call i32 @call_invoke_method(i64* %209, i32 7, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond945 = icmp ne i32 %212, 1
  br i1 %ifcond945, label %then_block946, label %entry_ifend947

then_block946:                                    ; preds = %entry_ifend913
  %213 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend947:                                   ; preds = %entry_ifend913
  %stack_offset_value951 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value951, i64* %"lvar$0$", align 8
  %stack_offset_value953 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value953, i64* %"lvar$1$", align 8
  %stack_offset_value955 = load i64, i64* %stack_offset_address_value35, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value955, i64* %"lvar$2$", align 8
  %stack_offset_value957 = load i64, i64* %stack_offset_address_value37, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value957, i64* %"lvar$3$", align 8
  %stack_offset_value959 = load i64, i64* %stack_offset_address_value39, align 8
  store i64 0, i64* %"lvar$4$"
  store i64 %stack_offset_value959, i64* %"lvar$4$", align 8
  %stack_offset_value961 = load i64, i64* %stack_offset_address_value41, align 8
  store i64 0, i64* %"lvar$5$"
  store i64 %stack_offset_value961, i64* %"lvar$5$", align 8
  %stack_offset_value963 = load i64, i64* %stack_offset_address_value43, align 8
  store i64 0, i64* %"lvar$6$"
  store i64 %stack_offset_value963, i64* %"lvar$6$", align 8
  %stack_offset_value965 = load i64, i64* %stack_offset_address_value45, align 8
  store i64 0, i64* %"lvar$7$"
  store i64 %stack_offset_value965, i64* %"lvar$7$", align 8
  %stack_offset_value967 = load i64, i64* %stack_offset_address_value47, align 8
  store i64 0, i64* %"lvar$8$"
  store i64 %stack_offset_value967, i64* %"lvar$8$", align 8
  %stack_offset_value969 = load i64, i64* %stack_offset_address_value49, align 8
  store i64 0, i64* %"lvar$9$"
  store i64 %stack_offset_value969, i64* %"lvar$9$", align 8
  %stack_offset_value971 = load i64, i64* %stack_offset_address_value51, align 8
  store i64 0, i64* %"lvar$10$"
  store i64 %stack_offset_value971, i64* %"lvar$10$", align 8
  %stack_offset_value973 = load i64, i64* %stack_offset_address_value53, align 8
  store i64 0, i64* %"lvar$11$"
  store i64 %stack_offset_value973, i64* %"lvar$11$", align 8
  %loaded_stack_ptr_address_value974 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value975 = getelementptr i64, i64* %loaded_stack_ptr_address_value974, i64 -1
  %stack_pointer_offset_value976 = load i64, i64* %stack_pointer_offset_value975, align 8
  %214 = trunc i64 %stack_pointer_offset_value976 to i32
  call void @push_jit_object(i32 %214)
  %loaded_stack_ptr_address_value977 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value978 = getelementptr i64, i64* %loaded_stack_ptr_address_value977, i64 1
  store i64* %dec_ptr_value978, i64** %stack_ptr_address
  %lvar979 = load i64, i64* %"lvar$10$"
  %215 = trunc i64 %lvar979 to i32
  %addtmp980 = add nuw i32 %215, 1
  store i64 0, i64* %"lvar$10$"
  %216 = zext i32 %addtmp980 to i64
  store i64 %216, i64* %"lvar$10$", align 8
  br label %for_start_pointzzzzr
}

define i32 @"JITTest.closure_test1()$$233"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$3$" = alloca i64
  %"lvar$2$" = alloca i64
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i64 0, i64* %"lvar$2$"
  store i64 0, i64* %"lvar$2$", align 8
  store i64 0, i64* %"lvar$3$"
  store i64 0, i64* %"lvar$3$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52670820 to i8*))
  %ifcond = icmp eq i64* %0, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %then_block49, %entry_ifend14, %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %1 = call i32 @create_object(i64* %0)
  call void @push_jit_object(i32 %1)
  %2 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52670836 to i8*))
  %ifcond3 = icmp eq i64* %2, null
  br i1 %ifcond3, label %then_block, label %entry_ifend2

entry_ifend2:                                     ; preds = %entry_ifend
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value6 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value6, align 8
  store i64 0, i64* %lvar_offset_value6, align 8
  %lvar_offset_value8 = getelementptr i64, i64* %lvar, i64 2
  store i64 0, i64* %lvar_offset_value8, align 8
  store i64 0, i64* %lvar_offset_value8, align 8
  %lvar_offset_value10 = getelementptr i64, i64* %lvar, i64 3
  store i64 0, i64* %lvar_offset_value10, align 8
  store i64 0, i64* %lvar_offset_value10, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %3 = zext i32 %1 to i64
  store i64 %3, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value11 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value11, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  %4 = call i32 @call_invoke_method(i64* %2, i32 0, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond12 = icmp ne i32 %4, 1
  br i1 %ifcond12, label %then_block13, label %entry_ifend14

then_block13:                                     ; preds = %entry_ifend2
  %5 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend14:                                    ; preds = %entry_ifend2
  %stack_offset_value15 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value15, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value16 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value16, i64* %"lvar$1$", align 8
  %stack_offset_address_value17 = getelementptr i64, i64* %stack, i64 2
  %stack_offset_value18 = load i64, i64* %stack_offset_address_value17, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value18, i64* %"lvar$2$", align 8
  %stack_offset_address_value19 = getelementptr i64, i64* %stack, i64 3
  %stack_offset_value20 = load i64, i64* %stack_offset_address_value19, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value20, i64* %"lvar$3$", align 8
  %loaded_stack_ptr_address_value21 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value21, i64 -1
  %stack_pointer_offset_value22 = load i64, i64* %stack_pointer_offset_value, align 8
  %6 = trunc i64 %stack_pointer_offset_value22 to i32
  call void @push_jit_object(i32 %6)
  %loaded_stack_ptr_address_value23 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value23, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_pointer_offset_value22, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$2$"
  store i64 30, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$3$"
  store i64 40, i64* %"lvar$3$", align 8
  store i32 0, i32* @gSigInt
  %7 = call i32 @run_create_block_object(i64** %stack_ptr_address, i64* %stack, i64* %constant, i32 26612, i32 68, i32 26680, i32 0, i32 2, i32 4, i32 0, i64* %info)
  call void @push_jit_object(i32 %7)
  %8 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52670920 to i8*))
  %ifcond27 = icmp eq i64* %8, null
  br i1 %ifcond27, label %then_block, label %entry_ifend26

entry_ifend26:                                    ; preds = %entry_ifend14
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value15, i64* %lvar, align 8
  store i64 0, i64* %lvar_offset_value6, align 8
  store i64 %stack_pointer_offset_value22, i64* %lvar_offset_value6, align 8
  store i64 0, i64* %lvar_offset_value8, align 8
  store i64 30, i64* %lvar_offset_value8, align 8
  store i64 0, i64* %lvar_offset_value10, align 8
  store i64 40, i64* %lvar_offset_value10, align 8
  %loaded_stack_ptr_address_value36 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value36, align 8
  %9 = zext i32 %6 to i64
  store i64 %9, i64* %loaded_stack_ptr_address_value36, align 8
  %loaded_stack_ptr_address_value37 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value38 = getelementptr i64, i64* %loaded_stack_ptr_address_value37, i64 1
  store i64* %inc_ptr_value38, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value38, align 8
  store i64 10, i64* %inc_ptr_value38, align 8
  %loaded_stack_ptr_address_value40 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value41 = getelementptr i64, i64* %loaded_stack_ptr_address_value40, i64 1
  store i64* %inc_ptr_value41, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value41, align 8
  store i64 20, i64* %inc_ptr_value41, align 8
  %loaded_stack_ptr_address_value43 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value44 = getelementptr i64, i64* %loaded_stack_ptr_address_value43, i64 1
  store i64* %inc_ptr_value44, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value44, align 8
  %10 = zext i32 %7 to i64
  store i64 %10, i64* %inc_ptr_value44, align 8
  %loaded_stack_ptr_address_value46 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value47 = getelementptr i64, i64* %loaded_stack_ptr_address_value46, i64 1
  store i64* %inc_ptr_value47, i64** %stack_ptr_address
  %11 = call i32 @call_invoke_method(i64* %8, i32 10, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond48 = icmp ne i32 %11, 1
  br i1 %ifcond48, label %then_block49, label %entry_ifend50

then_block49:                                     ; preds = %entry_ifend26
  %12 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend50:                                    ; preds = %entry_ifend26
  %stack_offset_value54 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value54, i64* %"lvar$0$", align 8
  %stack_offset_value56 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value56, i64* %"lvar$1$", align 8
  %stack_offset_value58 = load i64, i64* %stack_offset_address_value17, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value58, i64* %"lvar$2$", align 8
  %stack_offset_value60 = load i64, i64* %stack_offset_address_value19, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value60, i64* %"lvar$3$", align 8
  %loaded_stack_ptr_address_value61 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value62 = getelementptr i64, i64* %loaded_stack_ptr_address_value61, i64 -1
  %stack_pointer_offset_value63 = load i64, i64* %stack_pointer_offset_value62, align 8
  %13 = trunc i64 %stack_pointer_offset_value63 to i32
  call void @push_jit_object(i32 %13)
  %loaded_stack_ptr_address_value64 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value65 = getelementptr i64, i64* %loaded_stack_ptr_address_value64, i64 1
  store i64* %dec_ptr_value65, i64** %stack_ptr_address
  store i64 %stack_pointer_offset_value63, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.closure_test2()$$234"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$3$" = alloca i64
  %"lvar$2$" = alloca i64
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i64 0, i64* %"lvar$2$"
  store i64 0, i64* %"lvar$2$", align 8
  store i64 0, i64* %"lvar$3$"
  store i64 0, i64* %"lvar$3$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52670936 to i8*))
  %ifcond = icmp eq i64* %0, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %then_block49, %entry_ifend14, %entry_ifend, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  %1 = call i32 @create_object(i64* %0)
  call void @push_jit_object(i32 %1)
  %2 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52670952 to i8*))
  %ifcond3 = icmp eq i64* %2, null
  br i1 %ifcond3, label %then_block, label %entry_ifend2

entry_ifend2:                                     ; preds = %entry_ifend
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value6 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value6, align 8
  store i64 0, i64* %lvar_offset_value6, align 8
  %lvar_offset_value8 = getelementptr i64, i64* %lvar, i64 2
  store i64 0, i64* %lvar_offset_value8, align 8
  store i64 0, i64* %lvar_offset_value8, align 8
  %lvar_offset_value10 = getelementptr i64, i64* %lvar, i64 3
  store i64 0, i64* %lvar_offset_value10, align 8
  store i64 0, i64* %lvar_offset_value10, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %3 = zext i32 %1 to i64
  store i64 %3, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value11 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value11, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  %4 = call i32 @call_invoke_method(i64* %2, i32 0, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond12 = icmp ne i32 %4, 1
  br i1 %ifcond12, label %then_block13, label %entry_ifend14

then_block13:                                     ; preds = %entry_ifend2
  %5 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend14:                                    ; preds = %entry_ifend2
  %stack_offset_value15 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value15, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value16 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value16, i64* %"lvar$1$", align 8
  %stack_offset_address_value17 = getelementptr i64, i64* %stack, i64 2
  %stack_offset_value18 = load i64, i64* %stack_offset_address_value17, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value18, i64* %"lvar$2$", align 8
  %stack_offset_address_value19 = getelementptr i64, i64* %stack, i64 3
  %stack_offset_value20 = load i64, i64* %stack_offset_address_value19, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value20, i64* %"lvar$3$", align 8
  %loaded_stack_ptr_address_value21 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value21, i64 -1
  %stack_pointer_offset_value22 = load i64, i64* %stack_pointer_offset_value, align 8
  %6 = trunc i64 %stack_pointer_offset_value22 to i32
  call void @push_jit_object(i32 %6)
  %loaded_stack_ptr_address_value23 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value23, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_pointer_offset_value22, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$2$"
  store i64 30, i64* %"lvar$2$", align 8
  store i32 0, i32* @gSigInt
  store i64 0, i64* %"lvar$3$"
  store i64 10, i64* %"lvar$3$", align 8
  store i32 0, i32* @gSigInt
  %7 = call i32 @run_create_block_object(i64** %stack_ptr_address, i64* %stack, i64* %constant, i32 26728, i32 44, i32 26772, i32 0, i32 2, i32 4, i32 0, i64* %info)
  call void @push_jit_object(i32 %7)
  %8 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52671012 to i8*))
  %ifcond27 = icmp eq i64* %8, null
  br i1 %ifcond27, label %then_block, label %entry_ifend26

entry_ifend26:                                    ; preds = %entry_ifend14
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value15, i64* %lvar, align 8
  store i64 0, i64* %lvar_offset_value6, align 8
  store i64 %stack_pointer_offset_value22, i64* %lvar_offset_value6, align 8
  store i64 0, i64* %lvar_offset_value8, align 8
  store i64 30, i64* %lvar_offset_value8, align 8
  store i64 0, i64* %lvar_offset_value10, align 8
  store i64 10, i64* %lvar_offset_value10, align 8
  %loaded_stack_ptr_address_value36 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value36, align 8
  %9 = zext i32 %6 to i64
  store i64 %9, i64* %loaded_stack_ptr_address_value36, align 8
  %loaded_stack_ptr_address_value37 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value38 = getelementptr i64, i64* %loaded_stack_ptr_address_value37, i64 1
  store i64* %inc_ptr_value38, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value38, align 8
  store i64 10, i64* %inc_ptr_value38, align 8
  %loaded_stack_ptr_address_value40 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value41 = getelementptr i64, i64* %loaded_stack_ptr_address_value40, i64 1
  store i64* %inc_ptr_value41, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value41, align 8
  store i64 20, i64* %inc_ptr_value41, align 8
  %loaded_stack_ptr_address_value43 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value44 = getelementptr i64, i64* %loaded_stack_ptr_address_value43, i64 1
  store i64* %inc_ptr_value44, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value44, align 8
  %10 = zext i32 %7 to i64
  store i64 %10, i64* %inc_ptr_value44, align 8
  %loaded_stack_ptr_address_value46 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value47 = getelementptr i64, i64* %loaded_stack_ptr_address_value46, i64 1
  store i64* %inc_ptr_value47, i64** %stack_ptr_address
  %11 = call i32 @call_invoke_method(i64* %8, i32 10, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond48 = icmp ne i32 %11, 1
  br i1 %ifcond48, label %then_block49, label %entry_ifend50

then_block49:                                     ; preds = %entry_ifend26
  %12 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend50:                                    ; preds = %entry_ifend26
  %stack_offset_value54 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value54, i64* %"lvar$0$", align 8
  %stack_offset_value56 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value56, i64* %"lvar$1$", align 8
  %stack_offset_value58 = load i64, i64* %stack_offset_address_value17, align 8
  store i64 0, i64* %"lvar$2$"
  store i64 %stack_offset_value58, i64* %"lvar$2$", align 8
  %stack_offset_value60 = load i64, i64* %stack_offset_address_value19, align 8
  store i64 0, i64* %"lvar$3$"
  store i64 %stack_offset_value60, i64* %"lvar$3$", align 8
  %loaded_stack_ptr_address_value61 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value62 = getelementptr i64, i64* %loaded_stack_ptr_address_value61, i64 -1
  %stack_pointer_offset_value63 = load i64, i64* %stack_pointer_offset_value62, align 8
  %13 = trunc i64 %stack_pointer_offset_value63 to i32
  call void @push_jit_object(i32 %13)
  %loaded_stack_ptr_address_value64 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value65 = getelementptr i64, i64* %loaded_stack_ptr_address_value64, i64 1
  store i64* %dec_ptr_value65, i64** %stack_ptr_address
  store i32 0, i32* @gSigInt
  %14 = trunc i64 %stack_offset_value58 to i32
  %15 = zext i32 %14 to i64
  store i64 %15, i64* %stack, align 8
  ret i32 1
}

define i32 @"JITTest.closure_test3()$$235"(i64* %stack_ptr, i64* %lvar, i64* %info, i64* %stack, i64** %stack_ptr_address, i32 %var_num, i64* %constant, i64* %code) {
entry:
  %"lvar$1$" = alloca i64
  %"lvar$0$" = alloca i64
  %stack_offset_value = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value, i64* %"lvar$0$", align 8
  store i64 0, i64* %"lvar$1$"
  store i64 0, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %0 = call i32 @create_string_object(i8* inttoptr (i64 52671028 to i8*))
  call void @push_jit_object(i32 %0)
  store i64 0, i64* %"lvar$1$"
  %1 = zext i32 %0 to i64
  store i64 %1, i64* %"lvar$1$", align 8
  store i32 0, i32* @gSigInt
  %2 = call i32 @create_string_object(i8* inttoptr (i64 52671032 to i8*))
  call void @push_jit_object(i32 %2)
  %3 = call i32 @create_regex_object(i8* inttoptr (i64 52671044 to i8*), i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0)
  call void @push_jit_object(i32 %3)
  %4 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52671048 to i8*))
  %ifcond = icmp eq i64* %4, null
  br i1 %ifcond, label %then_block, label %entry_ifend

then_block:                                       ; preds = %then_block30, %entry_ifend10, %entry
  ret i32 0

entry_ifend:                                      ; preds = %entry
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value, i64* %lvar, align 8
  %lvar_offset_value3 = getelementptr i64, i64* %lvar, i64 1
  store i64 0, i64* %lvar_offset_value3, align 8
  store i64 %1, i64* %lvar_offset_value3, align 8
  %loaded_stack_ptr_address_value = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value, align 8
  %5 = zext i32 %2 to i64
  store i64 %5, i64* %loaded_stack_ptr_address_value, align 8
  %loaded_stack_ptr_address_value4 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value4, i64 1
  store i64* %inc_ptr_value, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value, align 8
  %6 = zext i32 %3 to i64
  store i64 %6, i64* %inc_ptr_value, align 8
  %loaded_stack_ptr_address_value6 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value7 = getelementptr i64, i64* %loaded_stack_ptr_address_value6, i64 1
  store i64* %inc_ptr_value7, i64** %stack_ptr_address
  %7 = call i32 @call_invoke_method(i64* %4, i32 30, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond8 = icmp ne i32 %7, 1
  br i1 %ifcond8, label %then_block9, label %entry_ifend10

then_block9:                                      ; preds = %entry_ifend
  %8 = call i8* @get_try_catch_label_name(i64* %info)
  ret i32 0

entry_ifend10:                                    ; preds = %entry_ifend
  %stack_offset_value11 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value11, i64* %"lvar$0$", align 8
  %stack_offset_address_value = getelementptr i64, i64* %stack, i64 1
  %stack_offset_value12 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value12, i64* %"lvar$1$", align 8
  %loaded_stack_ptr_address_value13 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value = getelementptr i64, i64* %loaded_stack_ptr_address_value13, i64 -1
  %stack_pointer_offset_value14 = load i64, i64* %stack_pointer_offset_value, align 8
  %9 = trunc i64 %stack_pointer_offset_value14 to i32
  call void @push_jit_object(i32 %9)
  %loaded_stack_ptr_address_value15 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value = getelementptr i64, i64* %loaded_stack_ptr_address_value15, i64 1
  store i64* %dec_ptr_value, i64** %stack_ptr_address
  %10 = call i32 @run_create_block_object(i64** %stack_ptr_address, i64* %stack, i64* %constant, i32 26816, i32 24, i32 26840, i32 4, i32 1, i32 2, i32 0, i64* %info)
  call void @push_jit_object(i32 %10)
  %11 = call i64* @get_class_with_load_and_initialize_in_jit(i8* inttoptr (i64 52671084 to i8*))
  %ifcond18 = icmp eq i64* %11, null
  br i1 %ifcond18, label %then_block, label %entry_ifend17

entry_ifend17:                                    ; preds = %entry_ifend10
  store i64 0, i64* %lvar, align 8
  store i64 %stack_offset_value11, i64* %lvar, align 8
  store i64 0, i64* %lvar_offset_value3, align 8
  store i64 %stack_offset_value12, i64* %lvar_offset_value3, align 8
  %loaded_stack_ptr_address_value23 = load i64*, i64** %stack_ptr_address, align 8
  store i64 0, i64* %loaded_stack_ptr_address_value23, align 8
  store i64 %stack_pointer_offset_value14, i64* %loaded_stack_ptr_address_value23, align 8
  %loaded_stack_ptr_address_value24 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value25 = getelementptr i64, i64* %loaded_stack_ptr_address_value24, i64 1
  store i64* %inc_ptr_value25, i64** %stack_ptr_address
  store i64 0, i64* %inc_ptr_value25, align 8
  %12 = zext i32 %10 to i64
  store i64 %12, i64* %inc_ptr_value25, align 8
  %loaded_stack_ptr_address_value27 = load i64*, i64** %stack_ptr_address
  %inc_ptr_value28 = getelementptr i64, i64* %loaded_stack_ptr_address_value27, i64 1
  store i64* %inc_ptr_value28, i64** %stack_ptr_address
  %13 = call i32 @call_invoke_method(i64* %11, i32 13, i64* %stack, i32 %var_num, i64** %stack_ptr_address, i64* %info)
  %ifcond29 = icmp ne i32 %13, 1
  br i1 %ifcond29, label %then_block30, label %entry_ifend31

then_block30:                                     ; preds = %entry_ifend17
  %14 = call i8* @get_try_catch_label_name(i64* %info)
  br label %then_block

entry_ifend31:                                    ; preds = %entry_ifend17
  %stack_offset_value35 = load i64, i64* %stack, align 8
  store i64 0, i64* %"lvar$0$"
  store i64 %stack_offset_value35, i64* %"lvar$0$", align 8
  %stack_offset_value37 = load i64, i64* %stack_offset_address_value, align 8
  store i64 0, i64* %"lvar$1$"
  store i64 %stack_offset_value37, i64* %"lvar$1$", align 8
  %loaded_stack_ptr_address_value38 = load i64*, i64** %stack_ptr_address
  %stack_pointer_offset_value39 = getelementptr i64, i64* %loaded_stack_ptr_address_value38, i64 -1
  %stack_pointer_offset_value40 = load i64, i64* %stack_pointer_offset_value39, align 8
  %15 = trunc i64 %stack_pointer_offset_value40 to i32
  call void @push_jit_object(i32 %15)
  %loaded_stack_ptr_address_value41 = load i64*, i64** %stack_ptr_address
  %dec_ptr_value42 = getelementptr i64, i64* %loaded_stack_ptr_address_value41, i64 1
  store i64* %dec_ptr_value42, i64** %stack_ptr_address
  store i32 0, i32* @gSigInt
  %16 = trunc i64 %stack_offset_value37 to i32
  %17 = zext i32 %16 to i64
  store i64 %17, i64* %stack, align 8
  ret i32 1
}
